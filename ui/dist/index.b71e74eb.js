// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"iJYvl":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "5c1b77e3b71e74eb";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id1][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"h7u1C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _woocommerceRestApi = require("@woocommerce/woocommerce-rest-api");
var _woocommerceRestApiDefault = parcelHelpers.interopDefault(_woocommerceRestApi);
var _firebaseui = require("firebaseui");
var _app = require("firebase/compat/app");
var _appDefault = parcelHelpers.interopDefault(_app);
var _firebaseuiCss = require("firebaseui/dist/firebaseui.css");
var _dayjs = require("dayjs");
var _firestore = require("firebase/firestore");
var _dayjsDefault = parcelHelpers.interopDefault(_dayjs);
const WooCommerce = new (0, _woocommerceRestApiDefault.default)({
    url: "https://ffdrc.com/",
    consumerKey: "ck_7a4ef3dfb8ede54346f840e10afcbcbdcf08e1d9",
    consumerSecret: "cs_88e06874eec5d48b8a76acc986b312a2a36a0e08",
    wpAPI: true,
    version: "wc/v3"
});
const firebaseConfig = {
    apiKey: "AIzaSyAFIRcu2EUkvX1jReVrAl5CpP-aGGbnmOY",
    authDomain: "freefall-sales-dashboard.firebaseapp.com",
    databaseURL: "https://freefall-sales-dashboard-default-rtdb.firebaseio.com",
    projectId: "freefall-sales-dashboard",
    storageBucket: "freefall-sales-dashboard.appspot.com",
    messagingSenderId: "819531464549",
    appId: "1:819531464549:web:992a7e7c1e882a76196b8c",
    measurementId: "G-96D5YKF11R"
};
const app = (0, _appDefault.default).initializeApp(firebaseConfig);
const db = (0, _firestore.getFirestore)(app);
var ui = new _firebaseui.auth.AuthUI((0, _appDefault.default).auth());
(0, _appDefault.default).auth().onAuthStateChanged((user)=>{
    if (user) ui.delete();
    else ui.start("#firebaseui-auth-container", {
        signInOptions: [
            (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID,
            (0, _appDefault.default).auth.GoogleAuthProvider.PROVIDER_ID, 
        ],
        signInSuccessUrl: "/"
    });
});
let salesTotalAll = 0;
let salesTotal30 = 0;
let salesTotal7 = 0;
let productsInLast30 = Array();
const orders = document.getElementsByClassName("orders")[0];
let d = new Date();
// getDocs(collection(db, "orders")).then((querySnapshot) => {
//     for(let i = 0; i < querySnapshot.docs.length; i++) {
//         salesTotalAll += parseFloat(querySnapshot.docs[i].data().total);
//         const timeBetweenDates = Math.abs(new Date(querySnapshot.docs[i].data().date).getTime() - d.getTime());
//         const daysBetweenDates = timeBetweenDates / (24 * 60 * 60 * 1000);
//         if (daysBetweenDates < 30) {
//             salesTotal30 += parseFloat(querySnapshot.docs[i].data().total);
//             for (let j = 0; j < querySnapshot.docs[i].data().items.length; j++) {
//                 productsInLast30.push(querySnapshot.docs[i].data().items[j].name);
//             }
//         }
//         if (daysBetweenDates < 7) {
//             salesTotal7 += parseFloat(querySnapshot.docs[i].data().total);
//         }
//     }
//     if (total != undefined) {
//         total.innerText = "$" + Math.round(salesTotalAll).toLocaleString('en-US');
//     }
//     if (total30 != undefined) {
//         total30.innerText = "$" + Math.round(salesTotal30).toLocaleString('en-US');
//     }
//     if (total7 != undefined) {
//         total7.innerText = "$" + Math.round(salesTotal7).toLocaleString('en-US');
//     }
//     if (product30 != undefined) {
//         const bestSeller = mostFrequent(productsInLast30, productsInLast30.length);
//         let count = 0;
//         for (let i = 0; i < productsInLast30.length; i++) {
//             if (productsInLast30[i] === bestSeller) {
//                 count++;
//             }
//         }
//         product30.innerText = bestSeller + " (" + count.toString() + ")";
//     }
// });
const q = (0, _firestore.query)((0, _firestore.collection)(db, "orders"), (0, _firestore.orderBy)("date", "desc"), (0, _firestore.limit)(10));
// getDocs(q).then((querySnapshot) => {
//     for (let i = 0; i < querySnapshot.docs.length; i++) {
//         addOrderToDashboard(querySnapshot.docs[i].data());
//     }
// })
const unsub = (0, _firestore.onSnapshot)(q, (records)=>{
    for(let i = 0; i < records.docs.length; i++){
        if ((0, _dayjsDefault.default)(d).diff(records.docs[i].data().date) > 0) continue;
        addOrderToDashboard(records.docs[i].data());
    }
    updateTotals();
    d = new Date();
});
function addOrderToDashboard(recordData) {
    const order = document.createElement("div");
    order.className = "order";
    const customerName = document.createElement("label");
    customerName.id = "name";
    const dateBought = document.createElement("label");
    dateBought.id = "date";
    const orderTotal = document.createElement("label");
    orderTotal.id = "orderTotal";
    customerName.innerText = recordData.customer.f_name + " " + recordData.customer.l_name;
    dateBought.innerText = (0, _dayjsDefault.default)(recordData.date).format("MM/DD/YYYY");
    orderTotal.innerText = "$" + recordData.total.toLocaleString("en-US");
    order.append(customerName, dateBought, orderTotal);
    for(let j = 0; j < recordData.items.length; j++){
        const item = document.createElement("label");
        item.id = "item";
        item.innerText = recordData.items[j].name;
        order.appendChild(item);
    }
    orders.insertBefore(order, orders.firstChild);
}
function updateTotals() {
    const total = document.getElementById("total");
    const total7 = document.getElementById("total7");
    const total30 = document.getElementById("total30");
    const product30 = document.getElementById("product30");
    (0, _firestore.getDoc)((0, _firestore.doc)(db, "stats", "totals")).then((snapshot)=>{
        total && (total.innerHTML = "$" + snapshot.data()?.all.toLocaleString("en-US"));
        total7 && (total7.innerHTML = "$" + snapshot.data()?.data7Day.toLocaleString("en-US"));
        total30 && (total30.innerHTML = "$" + snapshot.data()?.data30Day.toLocaleString("en-US"));
        product30 && (product30.innerHTML = snapshot.data()?.product30Day);
    });
}
const now = new Date();
const threshold30Day = (0, _dayjsDefault.default)(new Date(now.setDate(now.getDate() - 7))).format("YYYY-MM-DD");
console.log(threshold30Day);
const q2 = (0, _firestore.query)((0, _firestore.collection)(db, "orders"), (0, _firestore.orderBy)("date", "desc"), (0, _firestore.where)("date", ">", threshold30Day));
const getAndCalculateData = async ()=>{
    const docs = await (await (0, _firestore.getDocs)(q2)).docs.map((i)=>i.data());
    const data30DaySum = docs.reduce((out, doc)=>out + parseFloat(doc.total), 0);
    console.log(data30DaySum);
};
getAndCalculateData();

},{"firebaseui":"1OWAk","firebase/compat/app":"2iVaZ","firebaseui/dist/firebaseui.css":"8C05G","dayjs":"NJZFB","firebase/firestore":"cJafS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","@woocommerce/woocommerce-rest-api":"a800i"}],"1OWAk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "auth", ()=>auth);
var _app = require("firebase/compat/app");
var _appDefault = parcelHelpers.interopDefault(_app);
var _auth = require("firebase/compat/auth");
var _dialogPolyfill = require("dialog-polyfill");
var _dialogPolyfillDefault = parcelHelpers.interopDefault(_dialogPolyfill);
var _mdlComponentHandler = require("material-design-lite/src/mdlComponentHandler");
var _button = require("material-design-lite/src/button/button");
var _progress = require("material-design-lite/src/progress/progress");
var _spinner = require("material-design-lite/src/spinner/spinner");
var _textfield = require("material-design-lite/src/textfield/textfield");
var global = arguments[3];
(function() {
    (function() {
        var l, aa = "function" == typeof Object.create ? Object.create : function(a) {
            function b() {}
            b.prototype = a;
            return new b;
        }, ba;
        if ("function" == typeof Object.setPrototypeOf) ba = Object.setPrototypeOf;
        else {
            var ca;
            a: {
                var da = {
                    xb: !0
                }, ea = {};
                try {
                    ea.__proto__ = da;
                    ca = ea.xb;
                    break a;
                } catch (a) {}
                ca = !1;
            }
            ba = ca ? function(a, b) {
                a.__proto__ = b;
                if (a.__proto__ !== b) throw new TypeError(a + " is not extensible");
                return a;
            } : null;
        }
        var fa = ba;
        function m(a, b) {
            a.prototype = aa(b.prototype);
            a.prototype.constructor = a;
            if (fa) fa(a, b);
            else for(var c in b)if ("prototype" != c) {
                if (Object.defineProperties) {
                    var d = Object.getOwnPropertyDescriptor(b, c);
                    d && Object.defineProperty(a, c, d);
                } else a[c] = b[c];
            }
            a.K = b.prototype;
        }
        var ha = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
            a != Array.prototype && a != Object.prototype && (a[b] = c.value);
        }, ia = "undefined" != typeof window && window === this ? this : "undefined" != typeof global && null != global ? global : this;
        function ja(a, b) {
            if (b) {
                var c = ia;
                a = a.split(".");
                for(var d = 0; d < a.length - 1; d++){
                    var e = a[d];
                    e in c || (c[e] = {});
                    c = c[e];
                }
                a = a[a.length - 1];
                d = c[a];
                b = b(d);
                b != d && null != b && ha(c, a, {
                    configurable: !0,
                    writable: !0,
                    value: b
                });
            }
        }
        ja("Object.is", function(a) {
            return a ? a : function(b, c) {
                return b === c ? 0 !== b || 1 / b === 1 / c : b !== b && c !== c;
            };
        });
        ja("Array.prototype.includes", function(a) {
            return a ? a : function(b, c) {
                var d = this;
                d instanceof String && (d = String(d));
                var e = d.length;
                c = c || 0;
                for(0 > c && (c = Math.max(c + e, 0)); c < e; c++){
                    var f = d[c];
                    if (f === b || Object.is(f, b)) return !0;
                }
                return !1;
            };
        });
        var n = this;
        function ka(a) {
            return void 0 !== a;
        }
        function q(a) {
            return "string" == typeof a;
        }
        var la = /^[\w+/_-]+[=]{0,2}$/, ma = null;
        function na() {}
        function oa(a) {
            a.W = void 0;
            a.Xa = function() {
                return a.W ? a.W : a.W = new a;
            };
        }
        function pa(a) {
            var b = typeof a;
            if ("object" == b) {
                if (a) {
                    if (a instanceof Array) return "array";
                    if (a instanceof Object) return b;
                    var c = Object.prototype.toString.call(a);
                    if ("[object Window]" == c) return "object";
                    if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
                    if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
                } else return "null";
            } else if ("function" == b && "undefined" == typeof a.call) return "object";
            return b;
        }
        function qa(a) {
            return "array" == pa(a);
        }
        function ra(a) {
            var b = pa(a);
            return "array" == b || "object" == b && "number" == typeof a.length;
        }
        function sa(a) {
            return "function" == pa(a);
        }
        function ta(a) {
            var b = typeof a;
            return "object" == b && null != a || "function" == b;
        }
        var ua = "closure_uid_" + (1E9 * Math.random() >>> 0), va = 0;
        function wa(a, b, c) {
            return a.call.apply(a.bind, arguments);
        }
        function xa(a, b, c) {
            if (!a) throw Error();
            if (2 < arguments.length) {
                var d = Array.prototype.slice.call(arguments, 2);
                return function() {
                    var e = Array.prototype.slice.call(arguments);
                    Array.prototype.unshift.apply(e, d);
                    return a.apply(b, e);
                };
            }
            return function() {
                return a.apply(b, arguments);
            };
        }
        function r(a, b, c) {
            Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? r = wa : r = xa;
            return r.apply(null, arguments);
        }
        function za(a, b) {
            var c = Array.prototype.slice.call(arguments, 1);
            return function() {
                var d = c.slice();
                d.push.apply(d, arguments);
                return a.apply(this, d);
            };
        }
        function u(a, b) {
            for(var c in b)a[c] = b[c];
        }
        var Aa = Date.now || function() {
            return +new Date;
        };
        function v(a, b) {
            a = a.split(".");
            var c = n;
            a[0] in c || "undefined" == typeof c.execScript || c.execScript("var " + a[0]);
            for(var d; a.length && (d = a.shift());)!a.length && ka(b) ? c[d] = b : c[d] && c[d] !== Object.prototype[d] ? c = c[d] : c = c[d] = {};
        }
        function w(a, b) {
            function c() {}
            c.prototype = b.prototype;
            a.K = b.prototype;
            a.prototype = new c;
            a.prototype.constructor = a;
            a.vc = function(d, e, f) {
                for(var g = Array(arguments.length - 2), h = 2; h < arguments.length; h++)g[h - 2] = arguments[h];
                return b.prototype[e].apply(d, g);
            };
        }
        function Ba(a) {
            if (Error.captureStackTrace) Error.captureStackTrace(this, Ba);
            else {
                var b = Error().stack;
                b && (this.stack = b);
            }
            a && (this.message = String(a));
        }
        w(Ba, Error);
        Ba.prototype.name = "CustomError";
        var Da;
        function Ea(a, b) {
            a = a.split("%s");
            for(var c = "", d = a.length - 1, e = 0; e < d; e++)c += a[e] + (e < b.length ? b[e] : "%s");
            Ba.call(this, c + a[d]);
        }
        w(Ea, Ba);
        Ea.prototype.name = "AssertionError";
        function Fa(a, b) {
            throw new Ea("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
        }
        var Ga = Array.prototype.indexOf ? function(a, b) {
            return Array.prototype.indexOf.call(a, b, void 0);
        } : function(a, b) {
            if (q(a)) return q(b) && 1 == b.length ? a.indexOf(b, 0) : -1;
            for(var c = 0; c < a.length; c++)if (c in a && a[c] === b) return c;
            return -1;
        }, Ha = Array.prototype.forEach ? function(a, b, c) {
            Array.prototype.forEach.call(a, b, c);
        } : function(a, b, c) {
            for(var d = a.length, e = q(a) ? a.split("") : a, f = 0; f < d; f++)f in e && b.call(c, e[f], f, a);
        };
        function Ia(a, b) {
            for(var c = q(a) ? a.split("") : a, d = a.length - 1; 0 <= d; --d)d in c && b.call(void 0, c[d], d, a);
        }
        var Ja = Array.prototype.filter ? function(a, b) {
            return Array.prototype.filter.call(a, b, void 0);
        } : function(a, b) {
            for(var c = a.length, d = [], e = 0, f = q(a) ? a.split("") : a, g = 0; g < c; g++)if (g in f) {
                var h = f[g];
                b.call(void 0, h, g, a) && (d[e++] = h);
            }
            return d;
        }, Ka = Array.prototype.map ? function(a, b) {
            return Array.prototype.map.call(a, b, void 0);
        } : function(a, b) {
            for(var c = a.length, d = Array(c), e = q(a) ? a.split("") : a, f = 0; f < c; f++)f in e && (d[f] = b.call(void 0, e[f], f, a));
            return d;
        }, La = Array.prototype.some ? function(a, b) {
            return Array.prototype.some.call(a, b, void 0);
        } : function(a, b) {
            for(var c = a.length, d = q(a) ? a.split("") : a, e = 0; e < c; e++)if (e in d && b.call(void 0, d[e], e, a)) return !0;
            return !1;
        };
        function Ma(a, b) {
            return 0 <= Ga(a, b);
        }
        function Na(a, b) {
            b = Ga(a, b);
            var c;
            (c = 0 <= b) && Oa(a, b);
            return c;
        }
        function Oa(a, b) {
            return 1 == Array.prototype.splice.call(a, b, 1).length;
        }
        function Pa(a, b) {
            a: {
                for(var c = a.length, d = q(a) ? a.split("") : a, e = 0; e < c; e++)if (e in d && b.call(void 0, d[e], e, a)) {
                    b = e;
                    break a;
                }
                b = -1;
            }
            0 <= b && Oa(a, b);
        }
        function Qa(a, b) {
            var c = 0;
            Ia(a, function(d, e) {
                b.call(void 0, d, e, a) && Oa(a, e) && c++;
            });
        }
        function Ra(a) {
            return Array.prototype.concat.apply([], arguments);
        }
        function Sa(a) {
            var b = a.length;
            if (0 < b) {
                for(var c = Array(b), d = 0; d < b; d++)c[d] = a[d];
                return c;
            }
            return [];
        }
        function Ta(a, b, c) {
            return 2 >= arguments.length ? Array.prototype.slice.call(a, b) : Array.prototype.slice.call(a, b, c);
        }
        var Ua = String.prototype.trim ? function(a) {
            return a.trim();
        } : function(a) {
            return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
        }, Va = /&/g, Wa = /</g, Xa = />/g, Ya = /"/g, Za = /'/g, $a = /\x00/g, ab = /[\x00&<>"']/;
        function bb(a, b) {
            return a < b ? -1 : a > b ? 1 : 0;
        }
        function cb(a) {
            ab.test(a) && (-1 != a.indexOf("&") && (a = a.replace(Va, "&amp;")), -1 != a.indexOf("<") && (a = a.replace(Wa, "&lt;")), -1 != a.indexOf(">") && (a = a.replace(Xa, "&gt;")), -1 != a.indexOf('"') && (a = a.replace(Ya, "&quot;")), -1 != a.indexOf("'") && (a = a.replace(Za, "&#39;")), -1 != a.indexOf("\0") && (a = a.replace($a, "&#0;")));
            return a;
        }
        function db(a, b, c) {
            for(var d in a)b.call(c, a[d], d, a);
        }
        function eb(a) {
            var b = {}, c;
            for(c in a)b[c] = a[c];
            return b;
        }
        var fb = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
        function gb(a, b) {
            for(var c, d, e = 1; e < arguments.length; e++){
                d = arguments[e];
                for(c in d)a[c] = d[c];
                for(var f = 0; f < fb.length; f++)c = fb[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
            }
        }
        var hb = "StopIteration" in n ? n.StopIteration : {
            message: "StopIteration",
            stack: ""
        };
        function ib() {}
        ib.prototype.next = function() {
            throw hb;
        };
        ib.prototype.ha = function() {
            return this;
        };
        function jb(a) {
            if (a instanceof ib) return a;
            if ("function" == typeof a.ha) return a.ha(!1);
            if (ra(a)) {
                var b = 0, c = new ib;
                c.next = function() {
                    for(;;){
                        if (b >= a.length) throw hb;
                        if (b in a) return a[b++];
                        b++;
                    }
                };
                return c;
            }
            throw Error("Not implemented");
        }
        function kb(a, b) {
            if (ra(a)) try {
                Ha(a, b, void 0);
            } catch (c) {
                if (c !== hb) throw c;
            }
            else {
                a = jb(a);
                try {
                    for(;;)b.call(void 0, a.next(), void 0, a);
                } catch (c$0) {
                    if (c$0 !== hb) throw c$0;
                }
            }
        }
        function lb(a) {
            if (ra(a)) return Sa(a);
            a = jb(a);
            var b = [];
            kb(a, function(c) {
                b.push(c);
            });
            return b;
        }
        function mb(a, b) {
            this.g = {};
            this.a = [];
            this.j = this.h = 0;
            var c = arguments.length;
            if (1 < c) {
                if (c % 2) throw Error("Uneven number of arguments");
                for(var d = 0; d < c; d += 2)this.set(arguments[d], arguments[d + 1]);
            } else if (a) {
                if (a instanceof mb) for(c = a.ja(), d = 0; d < c.length; d++)this.set(c[d], a.get(c[d]));
                else for(d in a)this.set(d, a[d]);
            }
        }
        l = mb.prototype;
        l.la = function() {
            nb(this);
            for(var a = [], b = 0; b < this.a.length; b++)a.push(this.g[this.a[b]]);
            return a;
        };
        l.ja = function() {
            nb(this);
            return this.a.concat();
        };
        l.clear = function() {
            this.g = {};
            this.j = this.h = this.a.length = 0;
        };
        function nb(a) {
            if (a.h != a.a.length) {
                for(var b = 0, c = 0; b < a.a.length;){
                    var d = a.a[b];
                    ob(a.g, d) && (a.a[c++] = d);
                    b++;
                }
                a.a.length = c;
            }
            if (a.h != a.a.length) {
                var e = {};
                for(c = b = 0; b < a.a.length;)d = a.a[b], ob(e, d) || (a.a[c++] = d, e[d] = 1), b++;
                a.a.length = c;
            }
        }
        l.get = function(a, b) {
            return ob(this.g, a) ? this.g[a] : b;
        };
        l.set = function(a, b) {
            ob(this.g, a) || (this.h++, this.a.push(a), this.j++);
            this.g[a] = b;
        };
        l.forEach = function(a, b) {
            for(var c = this.ja(), d = 0; d < c.length; d++){
                var e = c[d], f = this.get(e);
                a.call(b, f, e, this);
            }
        };
        l.ha = function(a) {
            nb(this);
            var b = 0, c = this.j, d = this, e = new ib;
            e.next = function() {
                if (c != d.j) throw Error("The map has changed since the iterator was created");
                if (b >= d.a.length) throw hb;
                var f = d.a[b++];
                return a ? f : d.g[f];
            };
            return e;
        };
        function ob(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
        }
        var pb = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
        function qb(a, b) {
            if (a) {
                a = a.split("&");
                for(var c = 0; c < a.length; c++){
                    var d = a[c].indexOf("="), e = null;
                    if (0 <= d) {
                        var f = a[c].substring(0, d);
                        e = a[c].substring(d + 1);
                    } else f = a[c];
                    b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
                }
            }
        }
        function rb(a, b, c, d) {
            for(var e = c.length; 0 <= (b = a.indexOf(c, b)) && b < d;){
                var f = a.charCodeAt(b - 1);
                if (38 == f || 63 == f) {
                    if (f = a.charCodeAt(b + e), !f || 61 == f || 38 == f || 35 == f) return b;
                }
                b += e + 1;
            }
            return -1;
        }
        var sb = /#|$/;
        function tb(a, b) {
            var c = a.search(sb), d = rb(a, 0, b, c);
            if (0 > d) return null;
            var e = a.indexOf("&", d);
            if (0 > e || e > c) e = c;
            d += b.length + 1;
            return decodeURIComponent(a.substr(d, e - d).replace(/\+/g, " "));
        }
        var ub = /[?&]($|#)/;
        function vb(a, b) {
            this.h = this.A = this.j = "";
            this.C = null;
            this.s = this.g = "";
            this.i = !1;
            var c;
            a instanceof vb ? (this.i = ka(b) ? b : a.i, wb(this, a.j), this.A = a.A, this.h = a.h, xb(this, a.C), this.g = a.g, yb(this, zb(a.a)), this.s = a.s) : a && (c = String(a).match(pb)) ? (this.i = !!b, wb(this, c[1] || "", !0), this.A = Ab(c[2] || ""), this.h = Ab(c[3] || "", !0), xb(this, c[4]), this.g = Ab(c[5] || "", !0), yb(this, c[6] || "", !0), this.s = Ab(c[7] || "")) : (this.i = !!b, this.a = new Bb(null, this.i));
        }
        vb.prototype.toString = function() {
            var a = [], b = this.j;
            b && a.push(Cb(b, Db, !0), ":");
            var c = this.h;
            if (c || "file" == b) a.push("//"), (b = this.A) && a.push(Cb(b, Db, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.C, null != c && a.push(":", String(c));
            if (c = this.g) this.h && "/" != c.charAt(0) && a.push("/"), a.push(Cb(c, "/" == c.charAt(0) ? Eb : Fb, !0));
            (c = this.a.toString()) && a.push("?", c);
            (c = this.s) && a.push("#", Cb(c, Gb));
            return a.join("");
        };
        function wb(a, b, c) {
            a.j = c ? Ab(b, !0) : b;
            a.j && (a.j = a.j.replace(/:$/, ""));
        }
        function xb(a, b) {
            if (b) {
                b = Number(b);
                if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
                a.C = b;
            } else a.C = null;
        }
        function yb(a, b, c) {
            b instanceof Bb ? (a.a = b, Hb(a.a, a.i)) : (c || (b = Cb(b, Ib)), a.a = new Bb(b, a.i));
        }
        function Jb(a) {
            return a instanceof vb ? new vb(a) : new vb(a, void 0);
        }
        function Ab(a, b) {
            return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
        }
        function Cb(a, b, c) {
            return q(a) ? (a = encodeURI(a).replace(b, Kb), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
        }
        function Kb(a) {
            a = a.charCodeAt(0);
            return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
        }
        var Db = /[#\/\?@]/g, Fb = /[#\?:]/g, Eb = /[#\?]/g, Ib = /[#\?@]/g, Gb = /#/g;
        function Bb(a, b) {
            this.g = this.a = null;
            this.h = a || null;
            this.j = !!b;
        }
        function Lb(a) {
            a.a || (a.a = new mb, a.g = 0, a.h && qb(a.h, function(b, c) {
                a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
            }));
        }
        l = Bb.prototype;
        l.add = function(a, b) {
            Lb(this);
            this.h = null;
            a = Mb(this, a);
            var c = this.a.get(a);
            c || this.a.set(a, c = []);
            c.push(b);
            this.g += 1;
            return this;
        };
        function Nb(a, b) {
            Lb(a);
            b = Mb(a, b);
            ob(a.a.g, b) && (a.h = null, a.g -= a.a.get(b).length, a = a.a, ob(a.g, b) && (delete a.g[b], a.h--, a.j++, a.a.length > 2 * a.h && nb(a)));
        }
        l.clear = function() {
            this.a = this.h = null;
            this.g = 0;
        };
        function Ob(a, b) {
            Lb(a);
            b = Mb(a, b);
            return ob(a.a.g, b);
        }
        l.forEach = function(a, b) {
            Lb(this);
            this.a.forEach(function(c, d) {
                Ha(c, function(e) {
                    a.call(b, e, d, this);
                }, this);
            }, this);
        };
        l.ja = function() {
            Lb(this);
            for(var a = this.a.la(), b = this.a.ja(), c = [], d = 0; d < b.length; d++)for(var e = a[d], f = 0; f < e.length; f++)c.push(b[d]);
            return c;
        };
        l.la = function(a) {
            Lb(this);
            var b = [];
            if (q(a)) Ob(this, a) && (b = Ra(b, this.a.get(Mb(this, a))));
            else {
                a = this.a.la();
                for(var c = 0; c < a.length; c++)b = Ra(b, a[c]);
            }
            return b;
        };
        l.set = function(a, b) {
            Lb(this);
            this.h = null;
            a = Mb(this, a);
            Ob(this, a) && (this.g -= this.a.get(a).length);
            this.a.set(a, [
                b
            ]);
            this.g += 1;
            return this;
        };
        l.get = function(a, b) {
            if (!a) return b;
            a = this.la(a);
            return 0 < a.length ? String(a[0]) : b;
        };
        l.toString = function() {
            if (this.h) return this.h;
            if (!this.a) return "";
            for(var a = [], b = this.a.ja(), c = 0; c < b.length; c++){
                var d = b[c], e = encodeURIComponent(String(d));
                d = this.la(d);
                for(var f = 0; f < d.length; f++){
                    var g = e;
                    "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
                    a.push(g);
                }
            }
            return this.h = a.join("&");
        };
        function zb(a) {
            var b = new Bb;
            b.h = a.h;
            a.a && (b.a = new mb(a.a), b.g = a.g);
            return b;
        }
        function Mb(a, b) {
            b = String(b);
            a.j && (b = b.toLowerCase());
            return b;
        }
        function Hb(a, b) {
            b && !a.j && (Lb(a), a.h = null, a.a.forEach(function(c, d) {
                var e = d.toLowerCase();
                d != e && (Nb(this, d), Nb(this, e), 0 < c.length && (this.h = null, this.a.set(Mb(this, e), Sa(c)), this.g += c.length));
            }, a));
            a.j = b;
        }
        function Pb(a) {
            this.a = Jb(a);
        }
        function Qb(a, b) {
            b ? a.a.a.set(x.Sa, b) : Nb(a.a.a, x.Sa);
        }
        function Rb(a, b) {
            null !== b ? a.a.a.set(x.Qa, b ? "1" : "0") : Nb(a.a.a, x.Qa);
        }
        function Sb(a) {
            return a.a.a.get(x.Pa) || null;
        }
        function Tb(a, b) {
            b ? a.a.a.set(x.PROVIDER_ID, b) : Nb(a.a.a, x.PROVIDER_ID);
        }
        Pb.prototype.toString = function() {
            return this.a.toString();
        };
        var x = {
            Pa: "ui_auid",
            lc: "apiKey",
            Qa: "ui_sd",
            ub: "mode",
            $a: "oobCode",
            PROVIDER_ID: "ui_pid",
            Sa: "ui_sid",
            vb: "tenantId"
        };
        var Ub;
        a: {
            var Vb = n.navigator;
            if (Vb) {
                var Wb = Vb.userAgent;
                if (Wb) {
                    Ub = Wb;
                    break a;
                }
            }
            Ub = "";
        }
        function y(a) {
            return -1 != Ub.indexOf(a);
        }
        function Xb() {
            return (y("Chrome") || y("CriOS")) && !y("Edge");
        }
        function Yb(a) {
            Yb[" "](a);
            return a;
        }
        Yb[" "] = na;
        function Zb(a, b) {
            var c = $b;
            return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
        }
        var ac = y("Opera"), z = y("Trident") || y("MSIE"), bc = y("Edge"), cc = bc || z, dc = y("Gecko") && !(-1 != Ub.toLowerCase().indexOf("webkit") && !y("Edge")) && !(y("Trident") || y("MSIE")) && !y("Edge"), ec = -1 != Ub.toLowerCase().indexOf("webkit") && !y("Edge"), fc = ec && y("Mobile"), gc = y("Macintosh");
        function hc() {
            var a = n.document;
            return a ? a.documentMode : void 0;
        }
        var ic;
        a: {
            var jc = "", kc = function() {
                var a = Ub;
                if (dc) return /rv:([^\);]+)(\)|;)/.exec(a);
                if (bc) return /Edge\/([\d\.]+)/.exec(a);
                if (z) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
                if (ec) return /WebKit\/(\S+)/.exec(a);
                if (ac) return /(?:Version)[ \/]?(\S+)/.exec(a);
            }();
            kc && (jc = kc ? kc[1] : "");
            if (z) {
                var lc = hc();
                if (null != lc && lc > parseFloat(jc)) {
                    ic = String(lc);
                    break a;
                }
            }
            ic = jc;
        }
        var $b = {};
        function mc(a) {
            return Zb(a, function() {
                for(var b = 0, c = Ua(String(ic)).split("."), d = Ua(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++){
                    var g = c[f] || "", h = d[f] || "";
                    do {
                        g = /(\d*)(\D*)(.*)/.exec(g) || [
                            "",
                            "",
                            "",
                            ""
                        ];
                        h = /(\d*)(\D*)(.*)/.exec(h) || [
                            "",
                            "",
                            "",
                            ""
                        ];
                        if (0 == g[0].length && 0 == h[0].length) break;
                        b = bb(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == h[1].length ? 0 : parseInt(h[1], 10)) || bb(0 == g[2].length, 0 == h[2].length) || bb(g[2], h[2]);
                        g = g[3];
                        h = h[3];
                    }while (0 == b);
                }
                return 0 <= b;
            });
        }
        var nc;
        var oc = n.document;
        nc = oc && z ? hc() || ("CSS1Compat" == oc.compatMode ? parseInt(ic, 10) : 5) : void 0;
        function pc(a, b) {
            this.a = a === qc && b || "";
            this.g = rc;
        }
        pc.prototype.ma = !0;
        pc.prototype.ka = function() {
            return this.a;
        };
        pc.prototype.toString = function() {
            return "Const{" + this.a + "}";
        };
        var rc = {}, qc = {};
        function sc() {
            this.a = "";
            this.h = tc;
        }
        sc.prototype.ma = !0;
        sc.prototype.ka = function() {
            return this.a.toString();
        };
        sc.prototype.g = function() {
            return 1;
        };
        sc.prototype.toString = function() {
            return "TrustedResourceUrl{" + this.a + "}";
        };
        function uc(a) {
            if (a instanceof sc && a.constructor === sc && a.h === tc) return a.a;
            Fa("expected object of type TrustedResourceUrl, got '" + a + "' of type " + pa(a));
            return "type_error:TrustedResourceUrl";
        }
        function vc() {
            var a = wc;
            a instanceof pc && a.constructor === pc && a.g === rc ? a = a.a : (Fa("expected object of type Const, got '" + a + "'"), a = "type_error:Const");
            var b = new sc;
            b.a = a;
            return b;
        }
        var tc = {};
        function xc() {
            this.a = "";
            this.h = yc;
        }
        xc.prototype.ma = !0;
        xc.prototype.ka = function() {
            return this.a.toString();
        };
        xc.prototype.g = function() {
            return 1;
        };
        xc.prototype.toString = function() {
            return "SafeUrl{" + this.a + "}";
        };
        function zc(a) {
            if (a instanceof xc && a.constructor === xc && a.h === yc) return a.a;
            Fa("expected object of type SafeUrl, got '" + a + "' of type " + pa(a));
            return "type_error:SafeUrl";
        }
        var Ac = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
        function Bc(a) {
            if (a instanceof xc) return a;
            a = "object" == typeof a && a.ma ? a.ka() : String(a);
            Ac.test(a) || (a = "about:invalid#zClosurez");
            return Cc(a);
        }
        function Dc(a) {
            if (a instanceof xc) return a;
            a = "object" == typeof a && a.ma ? a.ka() : String(a);
            Ac.test(a) || (a = "about:invalid#zClosurez");
            return Cc(a);
        }
        var yc = {};
        function Cc(a) {
            var b = new xc;
            b.a = a;
            return b;
        }
        Cc("about:blank");
        function Ec() {
            this.a = "";
            this.g = Fc;
        }
        Ec.prototype.ma = !0;
        var Fc = {};
        Ec.prototype.ka = function() {
            return this.a;
        };
        Ec.prototype.toString = function() {
            return "SafeStyle{" + this.a + "}";
        };
        function Gc() {
            this.a = "";
            this.j = Hc;
            this.h = null;
        }
        Gc.prototype.g = function() {
            return this.h;
        };
        Gc.prototype.ma = !0;
        Gc.prototype.ka = function() {
            return this.a.toString();
        };
        Gc.prototype.toString = function() {
            return "SafeHtml{" + this.a + "}";
        };
        function Ic(a) {
            if (a instanceof Gc && a.constructor === Gc && a.j === Hc) return a.a;
            Fa("expected object of type SafeHtml, got '" + a + "' of type " + pa(a));
            return "type_error:SafeHtml";
        }
        var Hc = {};
        function Jc(a, b) {
            var c = new Gc;
            c.a = a;
            c.h = b;
            return c;
        }
        Jc("<!DOCTYPE html>", 0);
        var Kc = Jc("", 0);
        Jc("<br>", 0);
        var Lc = function(a) {
            var b = !1, c;
            return function() {
                b || (c = a(), b = !0);
                return c;
            };
        }(function() {
            if ("undefined" === typeof document) return !1;
            var a = document.createElement("div"), b = document.createElement("div");
            b.appendChild(document.createElement("div"));
            a.appendChild(b);
            if (!a.firstChild) return !1;
            b = a.firstChild.firstChild;
            a.innerHTML = Ic(Kc);
            return !b.parentElement;
        });
        function Mc(a, b) {
            a.src = uc(b);
            if (null === ma) b: {
                b = n.document;
                if ((b = b.querySelector && b.querySelector("script[nonce]")) && (b = b.nonce || b.getAttribute("nonce")) && la.test(b)) {
                    ma = b;
                    break b;
                }
                ma = "";
            }
            b = ma;
            b && a.setAttribute("nonce", b);
        }
        function Nc(a, b) {
            b = b instanceof xc ? b : Dc(b);
            a.assign(zc(b));
        }
        function Oc(a, b) {
            this.a = ka(a) ? a : 0;
            this.g = ka(b) ? b : 0;
        }
        Oc.prototype.toString = function() {
            return "(" + this.a + ", " + this.g + ")";
        };
        Oc.prototype.ceil = function() {
            this.a = Math.ceil(this.a);
            this.g = Math.ceil(this.g);
            return this;
        };
        Oc.prototype.floor = function() {
            this.a = Math.floor(this.a);
            this.g = Math.floor(this.g);
            return this;
        };
        Oc.prototype.round = function() {
            this.a = Math.round(this.a);
            this.g = Math.round(this.g);
            return this;
        };
        function Pc(a, b) {
            this.width = a;
            this.height = b;
        }
        l = Pc.prototype;
        l.toString = function() {
            return "(" + this.width + " x " + this.height + ")";
        };
        l.aspectRatio = function() {
            return this.width / this.height;
        };
        l.ceil = function() {
            this.width = Math.ceil(this.width);
            this.height = Math.ceil(this.height);
            return this;
        };
        l.floor = function() {
            this.width = Math.floor(this.width);
            this.height = Math.floor(this.height);
            return this;
        };
        l.round = function() {
            this.width = Math.round(this.width);
            this.height = Math.round(this.height);
            return this;
        };
        function Qc(a) {
            return a ? new Rc(Sc(a)) : Da || (Da = new Rc);
        }
        function Tc(a, b) {
            var c = b || document;
            return c.querySelectorAll && c.querySelector ? c.querySelectorAll("." + a) : Uc(document, a, b);
        }
        function Vc(a, b) {
            var c = b || document;
            if (c.getElementsByClassName) a = c.getElementsByClassName(a)[0];
            else {
                c = document;
                var d = b || c;
                a = d.querySelectorAll && d.querySelector && a ? d.querySelector(a ? "." + a : "") : Uc(c, a, b)[0] || null;
            }
            return a || null;
        }
        function Uc(a, b, c) {
            var d;
            a = c || a;
            if (a.querySelectorAll && a.querySelector && b) return a.querySelectorAll(b ? "." + b : "");
            if (b && a.getElementsByClassName) {
                var e = a.getElementsByClassName(b);
                return e;
            }
            e = a.getElementsByTagName("*");
            if (b) {
                var f = {};
                for(c = d = 0; a = e[c]; c++){
                    var g = a.className;
                    "function" == typeof g.split && Ma(g.split(/\s+/), b) && (f[d++] = a);
                }
                f.length = d;
                return f;
            }
            return e;
        }
        function Wc(a, b) {
            db(b, function(c, d) {
                c && "object" == typeof c && c.ma && (c = c.ka());
                "style" == d ? a.style.cssText = c : "class" == d ? a.className = c : "for" == d ? a.htmlFor = c : Xc.hasOwnProperty(d) ? a.setAttribute(Xc[d], c) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, c) : a[d] = c;
            });
        }
        var Xc = {
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            colspan: "colSpan",
            frameborder: "frameBorder",
            height: "height",
            maxlength: "maxLength",
            nonce: "nonce",
            role: "role",
            rowspan: "rowSpan",
            type: "type",
            usemap: "useMap",
            valign: "vAlign",
            width: "width"
        };
        function Yc(a) {
            return a.scrollingElement ? a.scrollingElement : ec || "CSS1Compat" != a.compatMode ? a.body || a.documentElement : a.documentElement;
        }
        function Zc(a) {
            a && a.parentNode && a.parentNode.removeChild(a);
        }
        function Sc(a) {
            return 9 == a.nodeType ? a : a.ownerDocument || a.document;
        }
        function $c(a, b) {
            if ("textContent" in a) a.textContent = b;
            else if (3 == a.nodeType) a.data = String(b);
            else if (a.firstChild && 3 == a.firstChild.nodeType) {
                for(; a.lastChild != a.firstChild;)a.removeChild(a.lastChild);
                a.firstChild.data = String(b);
            } else {
                for(var c; c = a.firstChild;)a.removeChild(c);
                a.appendChild(Sc(a).createTextNode(String(b)));
            }
        }
        function ad(a, b) {
            return b ? bd(a, function(c) {
                return !b || q(c.className) && Ma(c.className.split(/\s+/), b);
            }) : null;
        }
        function bd(a, b) {
            for(var c = 0; a;){
                if (b(a)) return a;
                a = a.parentNode;
                c++;
            }
            return null;
        }
        function Rc(a) {
            this.a = a || n.document || document;
        }
        Rc.prototype.N = function() {
            return q(void 0) ? this.a.getElementById(void 0) : void 0;
        };
        var cd = {
            Fc: !0
        }, dd = {
            Hc: !0
        }, ed = {
            Ec: !0
        }, fd = {
            Gc: !0
        };
        function gd() {
            throw Error("Do not instantiate directly");
        }
        gd.prototype.va = null;
        gd.prototype.toString = function() {
            return this.content;
        };
        function hd(a, b, c, d) {
            a = a(b || id, void 0, c);
            d = (d || Qc()).a.createElement("DIV");
            a = jd(a);
            a.match(kd);
            a = Jc(a, null);
            if (Lc()) for(; d.lastChild;)d.removeChild(d.lastChild);
            d.innerHTML = Ic(a);
            1 == d.childNodes.length && (a = d.firstChild, 1 == a.nodeType && (d = a));
            return d;
        }
        function jd(a) {
            if (!ta(a)) return cb(String(a));
            if (a instanceof gd) {
                if (a.fa === cd) return a.content;
                if (a.fa === fd) return cb(a.content);
            }
            Fa("Soy template output is unsafe for use as HTML: " + a);
            return "zSoyz";
        }
        var kd = /^<(body|caption|col|colgroup|head|html|tr|td|th|tbody|thead|tfoot)>/i, id = {};
        function nd(a) {
            if (null != a) switch(a.va){
                case 1:
                    return 1;
                case -1:
                    return -1;
                case 0:
                    return 0;
            }
            return null;
        }
        function od() {
            gd.call(this);
        }
        w(od, gd);
        od.prototype.fa = cd;
        function A(a) {
            return null != a && a.fa === cd ? a : a instanceof Gc ? B(Ic(a).toString(), a.g()) : B(cb(String(String(a))), nd(a));
        }
        function pd() {
            gd.call(this);
        }
        w(pd, gd);
        pd.prototype.fa = dd;
        pd.prototype.va = 1;
        function qd(a, b) {
            this.content = String(a);
            this.va = null != b ? b : null;
        }
        w(qd, gd);
        qd.prototype.fa = fd;
        function C(a) {
            return new qd(a, void 0);
        }
        var B = function(a) {
            function b(c) {
                this.content = c;
            }
            b.prototype = a.prototype;
            return function(c, d) {
                c = new b(String(c));
                void 0 !== d && (c.va = d);
                return c;
            };
        }(od), rd = function(a) {
            function b(c) {
                this.content = c;
            }
            b.prototype = a.prototype;
            return function(c) {
                return new b(String(c));
            };
        }(pd);
        function sd(a) {
            function b() {}
            var c = {
                label: D("New password")
            };
            b.prototype = a;
            a = new b;
            for(var d in c)a[d] = c[d];
            return a;
        }
        function D(a) {
            return (a = String(a)) ? new qd(a, void 0) : "";
        }
        var td = function(a) {
            function b(c) {
                this.content = c;
            }
            b.prototype = a.prototype;
            return function(c, d) {
                c = String(c);
                if (!c) return "";
                c = new b(c);
                void 0 !== d && (c.va = d);
                return c;
            };
        }(od);
        function ud(a) {
            return null != a && a.fa === cd ? String(String(a.content).replace(vd, "").replace(wd, "&lt;")).replace(xd, yd) : cb(String(a));
        }
        function zd(a) {
            null != a && a.fa === dd ? a = String(a).replace(Ad, Bd) : a instanceof xc ? a = String(zc(a).toString()).replace(Ad, Bd) : (a = String(a), Cd.test(a) ? a = a.replace(Ad, Bd) : (Fa("Bad value `%s` for |filterNormalizeUri", [
                a
            ]), a = "#zSoyz"));
            return a;
        }
        function Dd(a) {
            null != a && a.fa === ed ? a = a.content : null == a ? a = "" : a instanceof Ec ? a instanceof Ec && a.constructor === Ec && a.g === Fc ? a = a.a : (Fa("expected object of type SafeStyle, got '" + a + "' of type " + pa(a)), a = "type_error:SafeStyle") : (a = String(a), Ed.test(a) || (Fa("Bad value `%s` for |filterCssValue", [
                a
            ]), a = "zSoyz"));
            return a;
        }
        var Fd = {
            "\0": "&#0;",
            "	": "&#9;",
            "\n": "&#10;",
            "\v": "&#11;",
            "\f": "&#12;",
            "\r": "&#13;",
            " ": "&#32;",
            '"': "&quot;",
            "&": "&amp;",
            "'": "&#39;",
            "-": "&#45;",
            "/": "&#47;",
            "<": "&lt;",
            "=": "&#61;",
            ">": "&gt;",
            "`": "&#96;",
            "\x85": "&#133;",
            "\xa0": "&#160;",
            "\u2028": "&#8232;",
            "\u2029": "&#8233;"
        };
        function yd(a) {
            return Fd[a];
        }
        var Gd = {
            "\0": "%00",
            "\x01": "%01",
            "\x02": "%02",
            "\x03": "%03",
            "\x04": "%04",
            "\x05": "%05",
            "\x06": "%06",
            "\x07": "%07",
            "\b": "%08",
            "	": "%09",
            "\n": "%0A",
            "\v": "%0B",
            "\f": "%0C",
            "\r": "%0D",
            "\x0e": "%0E",
            "\x0f": "%0F",
            "\x10": "%10",
            "\x11": "%11",
            "\x12": "%12",
            "\x13": "%13",
            "\x14": "%14",
            "\x15": "%15",
            "\x16": "%16",
            "\x17": "%17",
            "\x18": "%18",
            "\x19": "%19",
            "\x1a": "%1A",
            "\x1b": "%1B",
            "\x1c": "%1C",
            "\x1d": "%1D",
            "\x1e": "%1E",
            "\x1f": "%1F",
            " ": "%20",
            '"': "%22",
            "'": "%27",
            "(": "%28",
            ")": "%29",
            "<": "%3C",
            ">": "%3E",
            "\\": "%5C",
            "{": "%7B",
            "}": "%7D",
            "\x7f": "%7F",
            "\x85": "%C2%85",
            "\xa0": "%C2%A0",
            "\u2028": "%E2%80%A8",
            "\u2029": "%E2%80%A9",
            "\uFF01": "%EF%BC%81",
            "\uFF03": "%EF%BC%83",
            "\uFF04": "%EF%BC%84",
            "\uFF06": "%EF%BC%86",
            "\uFF07": "%EF%BC%87",
            "\uFF08": "%EF%BC%88",
            "\uFF09": "%EF%BC%89",
            "\uFF0A": "%EF%BC%8A",
            "\uFF0B": "%EF%BC%8B",
            "\uFF0C": "%EF%BC%8C",
            "\uFF0F": "%EF%BC%8F",
            "\uFF1A": "%EF%BC%9A",
            "\uFF1B": "%EF%BC%9B",
            "\uFF1D": "%EF%BC%9D",
            "\uFF1F": "%EF%BC%9F",
            "\uFF20": "%EF%BC%A0",
            "\uFF3B": "%EF%BC%BB",
            "\uFF3D": "%EF%BC%BD"
        };
        function Bd(a) {
            return Gd[a];
        }
        var xd = /[\x00\x22\x27\x3c\x3e]/g, Ad = /[\x00- \x22\x27-\x29\x3c\x3e\\\x7b\x7d\x7f\x85\xa0\u2028\u2029\uff01\uff03\uff04\uff06-\uff0c\uff0f\uff1a\uff1b\uff1d\uff1f\uff20\uff3b\uff3d]/g, Ed = /^(?!-*(?:expression|(?:moz-)?binding))(?:[.#]?-?(?:[_a-z0-9-]+)(?:-[_a-z0-9-]+)*-?|-?(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)(?:[a-z]{1,2}|%)?|!important|)$/i, Cd = /^(?![^#?]*\/(?:\.|%2E){2}(?:[\/?#]|$))(?:(?:https?|mailto):|[^&:\/?#]*(?:[\/?#]|$))/i, vd = /<(?:!|\/?([a-zA-Z][a-zA-Z0-9:\-]*))(?:[^>'"]|"[^"]*"|'[^']*')*>/g, wd = /</g;
        function Hd() {
            return C("Enter a valid phone number");
        }
        function Id() {
            return C("Unable to send password reset code to specified email");
        }
        function Jd() {
            return C("Something went wrong. Please try again.");
        }
        function Kd() {
            return C("This email already exists without any means of sign-in. Please reset the password to recover.");
        }
        function Ld(a) {
            a = a || {};
            var b = "";
            switch(a.code){
                case "invalid-argument":
                    b += "Client specified an invalid argument.";
                    break;
                case "invalid-configuration":
                    b += "Client specified an invalid project configuration.";
                    break;
                case "failed-precondition":
                    b += "Request can not be executed in the current system state.";
                    break;
                case "out-of-range":
                    b += "Client specified an invalid range.";
                    break;
                case "unauthenticated":
                    b += "Request not authenticated due to missing, invalid, or expired OAuth token.";
                    break;
                case "permission-denied":
                    b += "Client does not have sufficient permission.";
                    break;
                case "not-found":
                    b += "Specified resource is not found.";
                    break;
                case "aborted":
                    b += "Concurrency conflict, such as read-modify-write conflict.";
                    break;
                case "already-exists":
                    b += "The resource that a client tried to create already exists.";
                    break;
                case "resource-exhausted":
                    b += "Either out of resource quota or reaching rate limiting.";
                    break;
                case "cancelled":
                    b += "Request cancelled by the client.";
                    break;
                case "data-loss":
                    b += "Unrecoverable data loss or data corruption.";
                    break;
                case "unknown":
                    b += "Unknown server error.";
                    break;
                case "internal":
                    b += "Internal server error.";
                    break;
                case "not-implemented":
                    b += "API method not implemented by the server.";
                    break;
                case "unavailable":
                    b += "Service unavailable.";
                    break;
                case "deadline-exceeded":
                    b += "Request deadline exceeded.";
                    break;
                case "auth/user-disabled":
                    b += "The user account has been disabled by an administrator.";
                    break;
                case "auth/timeout":
                    b += "The operation has timed out.";
                    break;
                case "auth/too-many-requests":
                    b += "We have blocked all requests from this device due to unusual activity. Try again later.";
                    break;
                case "auth/quota-exceeded":
                    b += "The quota for this operation has been exceeded. Try again later.";
                    break;
                case "auth/network-request-failed":
                    b += "A network error has occurred. Try again later.";
                    break;
                case "restart-process":
                    b += "An issue was encountered when authenticating your request. Please visit the URL that redirected you to this page again to restart the authentication process.";
                    break;
                case "no-matching-tenant-for-email":
                    b += "No sign-in provider is available for the given email, please try with a different email.";
            }
            return C(b);
        }
        function Md() {
            return C("Please login again to perform this operation");
        }
        function Nd(a, b, c) {
            var d = Error.call(this);
            this.message = d.message;
            "stack" in d && (this.stack = d.stack);
            this.code = Od + a;
            if (!(a = b)) {
                a = "";
                switch(this.code){
                    case "firebaseui/merge-conflict":
                        a += "The current anonymous user failed to upgrade. The non-anonymous credential is already associated with a different user account.";
                        break;
                    default:
                        a += Jd();
                }
                a = C(a).toString();
            }
            this.message = a || "";
            this.credential = c || null;
        }
        m(Nd, Error);
        Nd.prototype.toJSON = function() {
            return {
                code: this.code,
                message: this.message
            };
        };
        var Od = "firebaseui/";
        function Pd() {
            0 != Qd && (Rd[this[ua] || (this[ua] = ++va)] = this);
            this.T = this.T;
            this.C = this.C;
        }
        var Qd = 0, Rd = {};
        Pd.prototype.T = !1;
        Pd.prototype.m = function() {
            if (!this.T && (this.T = !0, this.o(), 0 != Qd)) {
                var a = this[ua] || (this[ua] = ++va);
                if (0 != Qd && this.C && 0 < this.C.length) throw Error(this + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
                delete Rd[a];
            }
        };
        function Sd(a, b) {
            a.T ? ka(void 0) ? b.call(void 0) : b() : (a.C || (a.C = []), a.C.push(ka(void 0) ? r(b, void 0) : b));
        }
        Pd.prototype.o = function() {
            if (this.C) for(; this.C.length;)this.C.shift()();
        };
        function Td(a) {
            a && "function" == typeof a.m && a.m();
        }
        var Ud = Object.freeze || function(a) {
            return a;
        };
        var Vd = !z || 9 <= Number(nc), Wd = z && !mc("9"), Xd = function() {
            if (!n.addEventListener || !Object.defineProperty) return !1;
            var a = !1, b = Object.defineProperty({}, "passive", {
                get: function() {
                    a = !0;
                }
            });
            try {
                n.addEventListener("test", na, b), n.removeEventListener("test", na, b);
            } catch (c) {}
            return a;
        }();
        function Yd(a, b) {
            this.type = a;
            this.g = this.target = b;
            this.h = !1;
            this.qb = !0;
        }
        Yd.prototype.stopPropagation = function() {
            this.h = !0;
        };
        Yd.prototype.preventDefault = function() {
            this.qb = !1;
        };
        function Zd(a, b) {
            Yd.call(this, a ? a.type : "");
            this.relatedTarget = this.g = this.target = null;
            this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
            this.key = "";
            this.j = this.keyCode = 0;
            this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
            this.pointerId = 0;
            this.pointerType = "";
            this.a = null;
            if (a) {
                var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
                this.target = a.target || a.srcElement;
                this.g = b;
                if (b = a.relatedTarget) {
                    if (dc) {
                        a: {
                            try {
                                Yb(b.nodeName);
                                var e = !0;
                                break a;
                            } catch (f) {}
                            e = !1;
                        }
                        e || (b = null);
                    }
                } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
                this.relatedTarget = b;
                d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
                this.button = a.button;
                this.keyCode = a.keyCode || 0;
                this.key = a.key || "";
                this.j = a.charCode || ("keypress" == c ? a.keyCode : 0);
                this.ctrlKey = a.ctrlKey;
                this.altKey = a.altKey;
                this.shiftKey = a.shiftKey;
                this.metaKey = a.metaKey;
                this.pointerId = a.pointerId || 0;
                this.pointerType = q(a.pointerType) ? a.pointerType : $d[a.pointerType] || "";
                this.a = a;
                a.defaultPrevented && this.preventDefault();
            }
        }
        w(Zd, Yd);
        var $d = Ud({
            2: "touch",
            3: "pen",
            4: "mouse"
        });
        Zd.prototype.stopPropagation = function() {
            Zd.K.stopPropagation.call(this);
            this.a.stopPropagation ? this.a.stopPropagation() : this.a.cancelBubble = !0;
        };
        Zd.prototype.preventDefault = function() {
            Zd.K.preventDefault.call(this);
            var a = this.a;
            if (a.preventDefault) a.preventDefault();
            else if (a.returnValue = !1, Wd) try {
                if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
            } catch (b) {}
        };
        var ae = "closure_listenable_" + (1E6 * Math.random() | 0), be = 0;
        function ce(a, b, c, d, e) {
            this.listener = a;
            this.proxy = null;
            this.src = b;
            this.type = c;
            this.capture = !!d;
            this.La = e;
            this.key = ++be;
            this.sa = this.Ia = !1;
        }
        function de(a) {
            a.sa = !0;
            a.listener = null;
            a.proxy = null;
            a.src = null;
            a.La = null;
        }
        function ee(a) {
            this.src = a;
            this.a = {};
            this.g = 0;
        }
        ee.prototype.add = function(a, b, c, d, e) {
            var f = a.toString();
            a = this.a[f];
            a || (a = this.a[f] = [], this.g++);
            var g = fe(a, b, d, e);
            -1 < g ? (b = a[g], c || (b.Ia = !1)) : (b = new ce(b, this.src, f, !!d, e), b.Ia = c, a.push(b));
            return b;
        };
        function ge(a, b) {
            var c = b.type;
            c in a.a && Na(a.a[c], b) && (de(b), 0 == a.a[c].length && (delete a.a[c], a.g--));
        }
        function fe(a, b, c, d) {
            for(var e = 0; e < a.length; ++e){
                var f = a[e];
                if (!f.sa && f.listener == b && f.capture == !!c && f.La == d) return e;
            }
            return -1;
        }
        var he = "closure_lm_" + (1E6 * Math.random() | 0), ie = {}, je = 0;
        function ke(a, b, c, d, e) {
            if (d && d.once) return le(a, b, c, d, e);
            if (qa(b)) {
                for(var f = 0; f < b.length; f++)ke(a, b[f], c, d, e);
                return null;
            }
            c = me(c);
            return a && a[ae] ? a.J.add(String(b), c, !1, ta(d) ? !!d.capture : !!d, e) : ne(a, b, c, !1, d, e);
        }
        function ne(a, b, c, d, e, f) {
            if (!b) throw Error("Invalid event type");
            var g = ta(e) ? !!e.capture : !!e, h = oe(a);
            h || (a[he] = h = new ee(a));
            c = h.add(b, c, d, g, f);
            if (c.proxy) return c;
            d = pe();
            c.proxy = d;
            d.src = a;
            d.listener = c;
            if (a.addEventListener) Xd || (e = g), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);
            else if (a.attachEvent) a.attachEvent(qe(b.toString()), d);
            else if (a.addListener && a.removeListener) a.addListener(d);
            else throw Error("addEventListener and attachEvent are unavailable.");
            je++;
            return c;
        }
        function pe() {
            var a = re, b = Vd ? function(c) {
                return a.call(b.src, b.listener, c);
            } : function(c) {
                c = a.call(b.src, b.listener, c);
                if (!c) return c;
            };
            return b;
        }
        function le(a, b, c, d, e) {
            if (qa(b)) {
                for(var f = 0; f < b.length; f++)le(a, b[f], c, d, e);
                return null;
            }
            c = me(c);
            return a && a[ae] ? a.J.add(String(b), c, !0, ta(d) ? !!d.capture : !!d, e) : ne(a, b, c, !0, d, e);
        }
        function se(a, b, c, d, e) {
            if (qa(b)) for(var f = 0; f < b.length; f++)se(a, b[f], c, d, e);
            else (d = ta(d) ? !!d.capture : !!d, c = me(c), a && a[ae]) ? (a = a.J, b = String(b).toString(), b in a.a && (f = a.a[b], c = fe(f, c, d, e), -1 < c && (de(f[c]), Oa(f, c), 0 == f.length && (delete a.a[b], a.g--)))) : a && (a = oe(a)) && (b = a.a[b.toString()], a = -1, b && (a = fe(b, c, d, e)), (c = -1 < a ? b[a] : null) && te(c));
        }
        function te(a) {
            if ("number" != typeof a && a && !a.sa) {
                var b = a.src;
                if (b && b[ae]) ge(b.J, a);
                else {
                    var c = a.type, d = a.proxy;
                    b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(qe(c), d) : b.addListener && b.removeListener && b.removeListener(d);
                    je--;
                    (c = oe(b)) ? (ge(c, a), 0 == c.g && (c.src = null, b[he] = null)) : de(a);
                }
            }
        }
        function qe(a) {
            return a in ie ? ie[a] : ie[a] = "on" + a;
        }
        function ue(a, b, c, d) {
            var e = !0;
            if (a = oe(a)) {
                if (b = a.a[b.toString()]) for(b = b.concat(), a = 0; a < b.length; a++){
                    var f = b[a];
                    f && f.capture == c && !f.sa && (f = ve(f, d), e = e && !1 !== f);
                }
            }
            return e;
        }
        function ve(a, b) {
            var c = a.listener, d = a.La || a.src;
            a.Ia && te(a);
            return c.call(d, b);
        }
        function re(a, b) {
            if (a.sa) return !0;
            if (!Vd) {
                if (!b) a: {
                    b = [
                        "window",
                        "event"
                    ];
                    for(var c = n, d = 0; d < b.length; d++)if (c = c[b[d]], null == c) {
                        b = null;
                        break a;
                    }
                    b = c;
                }
                d = b;
                b = new Zd(d, this);
                c = !0;
                if (!(0 > d.keyCode || void 0 != d.returnValue)) {
                    a: {
                        var e = !1;
                        if (0 == d.keyCode) try {
                            d.keyCode = -1;
                            break a;
                        } catch (g) {
                            e = !0;
                        }
                        if (e || void 0 == d.returnValue) d.returnValue = !0;
                    }
                    d = [];
                    for(e = b.g; e; e = e.parentNode)d.push(e);
                    a = a.type;
                    for(e = d.length - 1; !b.h && 0 <= e; e--){
                        b.g = d[e];
                        var f = ue(d[e], a, !0, b);
                        c = c && f;
                    }
                    for(e = 0; !b.h && e < d.length; e++)b.g = d[e], f = ue(d[e], a, !1, b), c = c && f;
                }
                return c;
            }
            return ve(a, new Zd(b, this));
        }
        function oe(a) {
            a = a[he];
            return a instanceof ee ? a : null;
        }
        var we = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
        function me(a) {
            if (sa(a)) return a;
            a[we] || (a[we] = function(b) {
                return a.handleEvent(b);
            });
            return a[we];
        }
        function E() {
            Pd.call(this);
            this.J = new ee(this);
            this.wb = this;
            this.Ha = null;
        }
        w(E, Pd);
        E.prototype[ae] = !0;
        E.prototype.Za = function(a) {
            this.Ha = a;
        };
        E.prototype.removeEventListener = function(a, b, c, d) {
            se(this, a, b, c, d);
        };
        function xe(a, b) {
            var c, d = a.Ha;
            if (d) for(c = []; d; d = d.Ha)c.push(d);
            a = a.wb;
            d = b.type || b;
            if (q(b)) b = new Yd(b, a);
            else if (b instanceof Yd) b.target = b.target || a;
            else {
                var e = b;
                b = new Yd(d, a);
                gb(b, e);
            }
            e = !0;
            if (c) for(var f = c.length - 1; !b.h && 0 <= f; f--){
                var g = b.g = c[f];
                e = ye(g, d, !0, b) && e;
            }
            b.h || (g = b.g = a, e = ye(g, d, !0, b) && e, b.h || (e = ye(g, d, !1, b) && e));
            if (c) for(f = 0; !b.h && f < c.length; f++)g = b.g = c[f], e = ye(g, d, !1, b) && e;
            return e;
        }
        E.prototype.o = function() {
            E.K.o.call(this);
            if (this.J) {
                var a = this.J, b = 0, c;
                for(c in a.a){
                    for(var d = a.a[c], e = 0; e < d.length; e++)++b, de(d[e]);
                    delete a.a[c];
                    a.g--;
                }
            }
            this.Ha = null;
        };
        function ye(a, b, c, d) {
            b = a.J.a[String(b)];
            if (!b) return !0;
            b = b.concat();
            for(var e = !0, f = 0; f < b.length; ++f){
                var g = b[f];
                if (g && !g.sa && g.capture == c) {
                    var h = g.listener, k = g.La || g.src;
                    g.Ia && ge(a.J, g);
                    e = !1 !== h.call(k, d) && e;
                }
            }
            return e && 0 != d.qb;
        }
        var ze = {}, Ae = 0;
        function Be(a, b) {
            if (!a) throw Error("Event target element must be provided!");
            a = Ce(a);
            if (ze[a] && ze[a].length) for(var c = 0; c < ze[a].length; c++)xe(ze[a][c], b);
        }
        function De(a) {
            var b = Ce(a.N());
            ze[b] && ze[b].length && (Pa(ze[b], function(c) {
                return c == a;
            }), ze[b].length || delete ze[b]);
        }
        function Ce(a) {
            "undefined" === typeof a.a && (a.a = Ae, Ae++);
            return a.a;
        }
        function Ee(a) {
            if (!a) throw Error("Event target element must be provided!");
            E.call(this);
            this.a = a;
        }
        m(Ee, E);
        Ee.prototype.N = function() {
            return this.a;
        };
        Ee.prototype.register = function() {
            var a = Ce(this.N());
            ze[a] ? Ma(ze[a], this) || ze[a].push(this) : ze[a] = [
                this
            ];
        };
        function Fe(a) {
            if (!a) return !1;
            try {
                return !!a.$goog_Thenable;
            } catch (b) {
                return !1;
            }
        }
        function Ge(a, b) {
            this.h = a;
            this.j = b;
            this.g = 0;
            this.a = null;
        }
        Ge.prototype.get = function() {
            if (0 < this.g) {
                this.g--;
                var a = this.a;
                this.a = a.next;
                a.next = null;
            } else a = this.h();
            return a;
        };
        function He(a, b) {
            a.j(b);
            100 > a.g && (a.g++, b.next = a.a, a.a = b);
        }
        function Ie() {
            this.g = this.a = null;
        }
        var Ke = new Ge(function() {
            return new Je;
        }, function(a) {
            a.reset();
        });
        Ie.prototype.add = function(a, b) {
            var c = Ke.get();
            c.set(a, b);
            this.g ? this.g.next = c : this.a = c;
            this.g = c;
        };
        function Le() {
            var a = Me, b = null;
            a.a && (b = a.a, a.a = a.a.next, a.a || (a.g = null), b.next = null);
            return b;
        }
        function Je() {
            this.next = this.g = this.a = null;
        }
        Je.prototype.set = function(a, b) {
            this.a = a;
            this.g = b;
            this.next = null;
        };
        Je.prototype.reset = function() {
            this.next = this.g = this.a = null;
        };
        function Ne(a) {
            n.setTimeout(function() {
                throw a;
            }, 0);
        }
        var Oe;
        function Pe() {
            var a = n.MessageChannel;
            "undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !y("Presto") && (a = function() {
                var e = document.createElement("IFRAME");
                e.style.display = "none";
                e.src = "";
                document.documentElement.appendChild(e);
                var f = e.contentWindow;
                e = f.document;
                e.open();
                e.write("");
                e.close();
                var g = "callImmediate" + Math.random(), h = "file:" == f.location.protocol ? "*" : f.location.protocol + "//" + f.location.host;
                e = r(function(k) {
                    if (("*" == h || k.origin == h) && k.data == g) this.port1.onmessage();
                }, this);
                f.addEventListener("message", e, !1);
                this.port1 = {};
                this.port2 = {
                    postMessage: function() {
                        f.postMessage(g, h);
                    }
                };
            });
            if ("undefined" !== typeof a && !y("Trident") && !y("MSIE")) {
                var b = new a, c = {}, d = c;
                b.port1.onmessage = function() {
                    if (ka(c.next)) {
                        c = c.next;
                        var e = c.gb;
                        c.gb = null;
                        e();
                    }
                };
                return function(e) {
                    d.next = {
                        gb: e
                    };
                    d = d.next;
                    b.port2.postMessage(0);
                };
            }
            return "undefined" !== typeof document && "onreadystatechange" in document.createElement("SCRIPT") ? function(e) {
                var f = document.createElement("SCRIPT");
                f.onreadystatechange = function() {
                    f.onreadystatechange = null;
                    f.parentNode.removeChild(f);
                    f = null;
                    e();
                    e = null;
                };
                document.documentElement.appendChild(f);
            } : function(e) {
                n.setTimeout(e, 0);
            };
        }
        function Qe(a, b) {
            Re || Se();
            Te || (Re(), Te = !0);
            Me.add(a, b);
        }
        var Re;
        function Se() {
            if (n.Promise && n.Promise.resolve) {
                var a = n.Promise.resolve(void 0);
                Re = function() {
                    a.then(Ue);
                };
            } else Re = function() {
                var b = Ue;
                !sa(n.setImmediate) || n.Window && n.Window.prototype && !y("Edge") && n.Window.prototype.setImmediate == n.setImmediate ? (Oe || (Oe = Pe()), Oe(b)) : n.setImmediate(b);
            };
        }
        var Te = !1, Me = new Ie;
        function Ue() {
            for(var a; a = Le();){
                try {
                    a.a.call(a.g);
                } catch (b) {
                    Ne(b);
                }
                He(Ke, a);
            }
            Te = !1;
        }
        function Ve(a) {
            this.a = We;
            this.A = void 0;
            this.j = this.g = this.h = null;
            this.s = this.i = !1;
            if (a != na) try {
                var b = this;
                a.call(void 0, function(c) {
                    Xe(b, Ye, c);
                }, function(c) {
                    if (!(c instanceof Ze)) try {
                        if (c instanceof Error) throw c;
                        throw Error("Promise rejected.");
                    } catch (d) {}
                    Xe(b, $e, c);
                });
            } catch (c) {
                Xe(this, $e, c);
            }
        }
        var We = 0, Ye = 2, $e = 3;
        function af() {
            this.next = this.j = this.g = this.s = this.a = null;
            this.h = !1;
        }
        af.prototype.reset = function() {
            this.j = this.g = this.s = this.a = null;
            this.h = !1;
        };
        var bf = new Ge(function() {
            return new af;
        }, function(a) {
            a.reset();
        });
        function cf(a, b, c) {
            var d = bf.get();
            d.s = a;
            d.g = b;
            d.j = c;
            return d;
        }
        function F(a) {
            if (a instanceof Ve) return a;
            var b = new Ve(na);
            Xe(b, Ye, a);
            return b;
        }
        function df(a) {
            return new Ve(function(b, c) {
                c(a);
            });
        }
        Ve.prototype.then = function(a, b, c) {
            return ef(this, sa(a) ? a : null, sa(b) ? b : null, c);
        };
        Ve.prototype.$goog_Thenable = !0;
        l = Ve.prototype;
        l.fc = function(a, b) {
            a = cf(a, a, b);
            a.h = !0;
            ff(this, a);
            return this;
        };
        l.Ca = function(a, b) {
            return ef(this, null, a, b);
        };
        l.cancel = function(a) {
            this.a == We && Qe(function() {
                var b = new Ze(a);
                gf(this, b);
            }, this);
        };
        function gf(a, b) {
            if (a.a == We) {
                if (a.h) {
                    var c = a.h;
                    if (c.g) {
                        for(var d = 0, e = null, f = null, g = c.g; g && (g.h || (d++, g.a == a && (e = g), !(e && 1 < d))); g = g.next)e || (f = g);
                        e && (c.a == We && 1 == d ? gf(c, b) : (f ? (d = f, d.next == c.j && (c.j = d), d.next = d.next.next) : hf(c), jf(c, e, $e, b)));
                    }
                    a.h = null;
                } else Xe(a, $e, b);
            }
        }
        function ff(a, b) {
            a.g || a.a != Ye && a.a != $e || kf(a);
            a.j ? a.j.next = b : a.g = b;
            a.j = b;
        }
        function ef(a, b, c, d) {
            var e = cf(null, null, null);
            e.a = new Ve(function(f, g) {
                e.s = b ? function(h) {
                    try {
                        var k = b.call(d, h);
                        f(k);
                    } catch (p) {
                        g(p);
                    }
                } : f;
                e.g = c ? function(h) {
                    try {
                        var k = c.call(d, h);
                        !ka(k) && h instanceof Ze ? g(h) : f(k);
                    } catch (p) {
                        g(p);
                    }
                } : g;
            });
            e.a.h = a;
            ff(a, e);
            return e.a;
        }
        l.hc = function(a) {
            this.a = We;
            Xe(this, Ye, a);
        };
        l.ic = function(a) {
            this.a = We;
            Xe(this, $e, a);
        };
        function Xe(a, b, c) {
            if (a.a == We) {
                a === c && (b = $e, c = new TypeError("Promise cannot resolve to itself"));
                a.a = 1;
                a: {
                    var d = c, e = a.hc, f = a.ic;
                    if (d instanceof Ve) {
                        ff(d, cf(e || na, f || null, a));
                        var g = !0;
                    } else if (Fe(d)) d.then(e, f, a), g = !0;
                    else {
                        if (ta(d)) try {
                            var h = d.then;
                            if (sa(h)) {
                                lf(d, h, e, f, a);
                                g = !0;
                                break a;
                            }
                        } catch (k) {
                            f.call(a, k);
                            g = !0;
                            break a;
                        }
                        g = !1;
                    }
                }
                g || (a.A = c, a.a = b, a.h = null, kf(a), b != $e || c instanceof Ze || mf(a, c));
            }
        }
        function lf(a, b, c, d, e) {
            function f(k) {
                h || (h = !0, d.call(e, k));
            }
            function g(k) {
                h || (h = !0, c.call(e, k));
            }
            var h = !1;
            try {
                b.call(a, g, f);
            } catch (k) {
                f(k);
            }
        }
        function kf(a) {
            a.i || (a.i = !0, Qe(a.Hb, a));
        }
        function hf(a) {
            var b = null;
            a.g && (b = a.g, a.g = b.next, b.next = null);
            a.g || (a.j = null);
            return b;
        }
        l.Hb = function() {
            for(var a; a = hf(this);)jf(this, a, this.a, this.A);
            this.i = !1;
        };
        function jf(a, b, c, d) {
            if (c == $e && b.g && !b.h) for(; a && a.s; a = a.h)a.s = !1;
            if (b.a) b.a.h = null, nf(b, c, d);
            else try {
                b.h ? b.s.call(b.j) : nf(b, c, d);
            } catch (e) {
                of.call(null, e);
            }
            He(bf, b);
        }
        function nf(a, b, c) {
            b == Ye ? a.s.call(a.j, c) : a.g && a.g.call(a.j, c);
        }
        function mf(a, b) {
            a.s = !0;
            Qe(function() {
                a.s && of.call(null, b);
            });
        }
        var of = Ne;
        function Ze(a) {
            Ba.call(this, a);
        }
        w(Ze, Ba);
        Ze.prototype.name = "cancel";
        function pf(a, b, c) {
            b || (b = {});
            c = c || window;
            var d = a instanceof xc ? a : Bc("undefined" != typeof a.href ? a.href : String(a));
            a = b.target || a.target;
            var e = [];
            for(f in b)switch(f){
                case "width":
                case "height":
                case "top":
                case "left":
                    e.push(f + "=" + b[f]);
                    break;
                case "target":
                case "noopener":
                case "noreferrer":
                    break;
                default:
                    e.push(f + "=" + (b[f] ? 1 : 0));
            }
            var f = e.join(",");
            (y("iPhone") && !y("iPod") && !y("iPad") || y("iPad") || y("iPod")) && c.navigator && c.navigator.standalone && a && "_self" != a ? (f = c.document.createElement("A"), d = d instanceof xc ? d : Dc(d), f.href = zc(d), f.setAttribute("target", a), b.noreferrer && f.setAttribute("rel", "noreferrer"), b = document.createEvent("MouseEvent"), b.initMouseEvent("click", !0, !0, c, 1), f.dispatchEvent(b), c = {}) : b.noreferrer ? (c = c.open("", a, f), b = zc(d).toString(), c && (cc && -1 != b.indexOf(";") && (b = "'" + b.replace(/'/g, "%27") + "'"), c.opener = null, b = Jc('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url=' + cb(b) + '">', null), c.document.write(Ic(b)), c.document.close())) : (c = c.open(zc(d).toString(), a, f)) && b.noopener && (c.opener = null);
            return c;
        }
        function qf() {
            try {
                return !(!window.opener || !window.opener.location || window.opener.location.hostname !== window.location.hostname || window.opener.location.protocol !== window.location.protocol);
            } catch (a$1) {}
            return !1;
        }
        function rf(a) {
            pf(a, {
                target: window.cordova && window.cordova.InAppBrowser ? "_system" : "_blank"
            }, void 0);
        }
        function sf(a, b) {
            a = ta(a) && 1 == a.nodeType ? a : document.querySelector(String(a));
            if (null == a) throw Error(b || "Cannot find element.");
            return a;
        }
        function tf() {
            return window.location.href;
        }
        function uf() {
            var a = null;
            return new Ve(function(b) {
                "complete" == n.document.readyState ? b() : (a = function() {
                    b();
                }, le(window, "load", a));
            }).Ca(function(b) {
                se(window, "load", a);
                throw b;
            });
        }
        function vf() {
            for(var a = 32, b = []; 0 < a;)b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;
            return b.join("");
        }
        function wf(a, b, c) {
            c = void 0 === c ? {} : c;
            return Object.keys(a).filter(function(d) {
                return b.includes(d);
            }).reduce(function(d, e) {
                d[e] = a[e];
                return d;
            }, c);
        }
        function xf(a) {
            var b = yf;
            this.s = [];
            this.T = b;
            this.O = a || null;
            this.j = this.a = !1;
            this.h = void 0;
            this.J = this.l = this.A = !1;
            this.i = 0;
            this.g = null;
            this.C = 0;
        }
        xf.prototype.cancel = function(a) {
            if (this.a) this.h instanceof xf && this.h.cancel();
            else {
                if (this.g) {
                    var b = this.g;
                    delete this.g;
                    a ? b.cancel(a) : (b.C--, 0 >= b.C && b.cancel());
                }
                this.T ? this.T.call(this.O, this) : this.J = !0;
                this.a || (a = new zf(this), Af(this), Bf(this, !1, a));
            }
        };
        xf.prototype.L = function(a, b) {
            this.A = !1;
            Bf(this, a, b);
        };
        function Bf(a, b, c) {
            a.a = !0;
            a.h = c;
            a.j = !b;
            Cf(a);
        }
        function Af(a) {
            if (a.a) {
                if (!a.J) throw new Df(a);
                a.J = !1;
            }
        }
        xf.prototype.callback = function(a) {
            Af(this);
            Bf(this, !0, a);
        };
        function Ef(a, b, c) {
            a.s.push([
                b,
                c,
                void 0
            ]);
            a.a && Cf(a);
        }
        xf.prototype.then = function(a, b, c) {
            var d, e, f = new Ve(function(g, h) {
                d = g;
                e = h;
            });
            Ef(this, d, function(g) {
                g instanceof zf ? f.cancel() : e(g);
            });
            return f.then(a, b, c);
        };
        xf.prototype.$goog_Thenable = !0;
        function Ff(a) {
            return La(a.s, function(b) {
                return sa(b[1]);
            });
        }
        function Cf(a) {
            if (a.i && a.a && Ff(a)) {
                var b = a.i, c = Gf[b];
                c && (n.clearTimeout(c.a), delete Gf[b]);
                a.i = 0;
            }
            a.g && (a.g.C--, delete a.g);
            b = a.h;
            for(var d = c = !1; a.s.length && !a.A;){
                var e = a.s.shift(), f = e[0], g = e[1];
                e = e[2];
                if (f = a.j ? g : f) try {
                    var h = f.call(e || a.O, b);
                    ka(h) && (a.j = a.j && (h == b || h instanceof Error), a.h = b = h);
                    if (Fe(b) || "function" === typeof n.Promise && b instanceof n.Promise) d = !0, a.A = !0;
                } catch (k) {
                    b = k, a.j = !0, Ff(a) || (c = !0);
                }
            }
            a.h = b;
            d && (h = r(a.L, a, !0), d = r(a.L, a, !1), b instanceof xf ? (Ef(b, h, d), b.l = !0) : b.then(h, d));
            c && (b = new Hf(b), Gf[b.a] = b, a.i = b.a);
        }
        function Df() {
            Ba.call(this);
        }
        w(Df, Ba);
        Df.prototype.message = "Deferred has already fired";
        Df.prototype.name = "AlreadyCalledError";
        function zf() {
            Ba.call(this);
        }
        w(zf, Ba);
        zf.prototype.message = "Deferred was canceled";
        zf.prototype.name = "CanceledError";
        function Hf(a) {
            this.a = n.setTimeout(r(this.h, this), 0);
            this.g = a;
        }
        Hf.prototype.h = function() {
            delete Gf[this.a];
            throw this.g;
        };
        var Gf = {};
        function If(a) {
            var b = {}, c = b.document || document, d = uc(a).toString(), e = document.createElement("SCRIPT"), f = {
                rb: e,
                sb: void 0
            }, g = new xf(f), h = null, k = null != b.timeout ? b.timeout : 5E3;
            0 < k && (h = window.setTimeout(function() {
                Jf(e, !0);
                var p = new Kf(Lf, "Timeout reached for loading script " + d);
                Af(g);
                Bf(g, !1, p);
            }, k), f.sb = h);
            e.onload = e.onreadystatechange = function() {
                e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (Jf(e, b.xc || !1, h), g.callback(null));
            };
            e.onerror = function() {
                Jf(e, !0, h);
                var p = new Kf(Mf, "Error while loading script " + d);
                Af(g);
                Bf(g, !1, p);
            };
            f = b.attributes || {};
            gb(f, {
                type: "text/javascript",
                charset: "UTF-8"
            });
            Wc(e, f);
            Mc(e, a);
            Nf(c).appendChild(e);
            return g;
        }
        function Nf(a) {
            var b = (a || document).getElementsByTagName("HEAD");
            return b && 0 != b.length ? b[0] : a.documentElement;
        }
        function yf() {
            if (this && this.rb) {
                var a = this.rb;
                a && "SCRIPT" == a.tagName && Jf(a, !0, this.sb);
            }
        }
        function Jf(a, b, c) {
            null != c && n.clearTimeout(c);
            a.onload = na;
            a.onerror = na;
            a.onreadystatechange = na;
            b && window.setTimeout(function() {
                Zc(a);
            }, 0);
        }
        var Mf = 0, Lf = 1;
        function Kf(a, b) {
            var c = "Jsloader error (code #" + a + ")";
            b && (c += ": " + b);
            Ba.call(this, c);
            this.code = a;
        }
        w(Kf, Ba);
        function Of() {
            return n.google && n.google.accounts && n.google.accounts.id || null;
        }
        function Pf(a) {
            this.a = a || Of();
            this.h = !1;
            this.g = null;
        }
        Pf.prototype.cancel = function() {
            this.a && this.h && (this.g && this.g(null), this.a.cancel());
        };
        function Qf(a, b, c) {
            if (a.a && b) return function() {
                a.h = !0;
                return new Ve(function(e) {
                    a.g = e;
                    a.a.initialize({
                        client_id: b,
                        callback: e,
                        auto_select: !c
                    });
                    a.a.prompt();
                });
            }();
            if (b) {
                var d = Rf.Xa().load().then(function() {
                    a.a = Of();
                    return Qf(a, b, c);
                }).Ca(function() {
                    return null;
                });
                return F(d);
            }
            return F(null);
        }
        oa(Pf);
        var wc = new pc(qc, "https://accounts.google.com/gsi/client");
        function Rf() {
            this.a = null;
        }
        Rf.prototype.load = function() {
            var a = this;
            if (this.a) return this.a;
            var b = vc();
            return Of() ? F() : this.a = uf().then(function() {
                if (!Of()) return new Ve(function(c, d) {
                    var e = setTimeout(function() {
                        a.a = null;
                        d(Error("Network error!"));
                    }, 1E4);
                    n.onGoogleLibraryLoad = function() {
                        clearTimeout(e);
                        c();
                    };
                    F(If(b)).then(function() {
                        Of() && c();
                    }).Ca(function(f) {
                        clearTimeout(e);
                        a.a = null;
                        d(f);
                    });
                });
            });
        };
        oa(Rf);
        function Sf(a, b) {
            this.a = a;
            this.g = b || function(c) {
                throw c;
            };
        }
        Sf.prototype.confirm = function(a) {
            return F(this.a.confirm(a)).Ca(this.g);
        };
        function Tf(a, b, c) {
            this.reset(a, b, c, void 0, void 0);
        }
        Tf.prototype.a = null;
        var Uf = 0;
        Tf.prototype.reset = function(a, b, c, d, e) {
            "number" == typeof e || Uf++;
            this.h = d || Aa();
            this.j = a;
            this.s = b;
            this.g = c;
            delete this.a;
        };
        function Vf(a) {
            this.s = a;
            this.a = this.h = this.j = this.g = null;
        }
        function Wf(a, b) {
            this.name = a;
            this.value = b;
        }
        Wf.prototype.toString = function() {
            return this.name;
        };
        var Xf = new Wf("SEVERE", 1E3), Yf = new Wf("WARNING", 900), Zf = new Wf("CONFIG", 700);
        function $f(a) {
            if (a.j) return a.j;
            if (a.g) return $f(a.g);
            Fa("Root logger has no level set.");
            return null;
        }
        Vf.prototype.log = function(a, b, c) {
            if (a.value >= $f(this).value) for(sa(b) && (b = b()), a = new Tf(a, String(b), this.s), c && (a.a = c), c = this; c;){
                var d = c, e = a;
                if (d.a) for(var f = 0; b = d.a[f]; f++)b(e);
                c = c.g;
            }
        };
        var ag = {}, bg = null;
        function cg() {
            bg || (bg = new Vf(""), ag[""] = bg, bg.j = Zf);
        }
        function dg(a) {
            cg();
            var b;
            if (!(b = ag[a])) {
                b = new Vf(a);
                var c = a.lastIndexOf("."), d = a.substr(c + 1);
                c = dg(a.substr(0, c));
                c.h || (c.h = {});
                c.h[d] = b;
                b.g = c;
                ag[a] = b;
            }
            return b;
        }
        function eg() {
            this.a = Aa();
        }
        var fg = null;
        eg.prototype.set = function(a) {
            this.a = a;
        };
        eg.prototype.reset = function() {
            this.set(Aa());
        };
        eg.prototype.get = function() {
            return this.a;
        };
        function gg(a) {
            this.j = a || "";
            fg || (fg = new eg);
            this.s = fg;
        }
        gg.prototype.a = !0;
        gg.prototype.g = !0;
        gg.prototype.h = !1;
        function hg(a) {
            return 10 > a ? "0" + a : String(a);
        }
        function ig(a, b) {
            a = (a.h - b) / 1E3;
            b = a.toFixed(3);
            var c = 0;
            if (1 > a) c = 2;
            else for(; 100 > a;)c++, a *= 10;
            for(; 0 < c--;)b = " " + b;
            return b;
        }
        function jg(a) {
            gg.call(this, a);
        }
        w(jg, gg);
        function kg(a, b) {
            var c = [];
            c.push(a.j, " ");
            if (a.g) {
                var d = new Date(b.h);
                c.push("[", hg(d.getFullYear() - 2E3) + hg(d.getMonth() + 1) + hg(d.getDate()) + " " + hg(d.getHours()) + ":" + hg(d.getMinutes()) + ":" + hg(d.getSeconds()) + "." + hg(Math.floor(d.getMilliseconds() / 10)), "] ");
            }
            c.push("[", ig(b, a.s.get()), "s] ");
            c.push("[", b.g, "] ");
            c.push(b.s);
            a.h && (b = b.a) && c.push("\n", b instanceof Error ? b.message : b.toString());
            a.a && c.push("\n");
            return c.join("");
        }
        function lg() {
            this.s = r(this.h, this);
            this.a = new jg;
            this.a.g = !1;
            this.a.h = !1;
            this.g = this.a.a = !1;
            this.j = {};
        }
        lg.prototype.h = function(a) {
            function b(f) {
                if (f) {
                    if (f.value >= Xf.value) return "error";
                    if (f.value >= Yf.value) return "warn";
                    if (f.value >= Zf.value) return "log";
                }
                return "debug";
            }
            if (!this.j[a.g]) {
                var c = kg(this.a, a), d = mg;
                if (d) {
                    var e = b(a.j);
                    ng(d, e, c, a.a);
                }
            }
        };
        var mg = n.console;
        function ng(a, b, c, d) {
            if (a[b]) a[b](c, d || "");
            else a.log(c, d || "");
        }
        function og(a, b) {
            var c = pg;
            c && c.log(Xf, a, b);
        }
        var pg;
        pg = dg("firebaseui");
        var qg = new lg;
        if (1 != qg.g) {
            var rg;
            cg();
            rg = bg;
            var sg = qg.s;
            rg.a || (rg.a = []);
            rg.a.push(sg);
            qg.g = !0;
        }
        function tg(a) {
            var b = pg;
            b && b.log(Yf, a, void 0);
        }
        function ug() {
            this.a = ("undefined" == typeof document ? null : document) || {
                cookie: ""
            };
        }
        l = ug.prototype;
        l.set = function(a, b, c, d, e, f) {
            if (/[;=\s]/.test(a)) throw Error('Invalid cookie name "' + a + '"');
            if (/[;\r\n]/.test(b)) throw Error('Invalid cookie value "' + b + '"');
            ka(c) || (c = -1);
            e = e ? ";domain=" + e : "";
            d = d ? ";path=" + d : "";
            f = f ? ";secure" : "";
            c = 0 > c ? "" : 0 == c ? ";expires=" + new Date(1970, 1, 1).toUTCString() : ";expires=" + new Date(Aa() + 1E3 * c).toUTCString();
            this.a.cookie = a + "=" + b + e + d + c + f;
        };
        l.get = function(a, b) {
            for(var c = a + "=", d = (this.a.cookie || "").split(";"), e = 0, f; e < d.length; e++){
                f = Ua(d[e]);
                if (0 == f.lastIndexOf(c, 0)) return f.substr(c.length);
                if (f == a) return "";
            }
            return b;
        };
        l.ja = function() {
            return vg(this).keys;
        };
        l.la = function() {
            return vg(this).values;
        };
        l.clear = function() {
            for(var a = vg(this).keys, b = a.length - 1; 0 <= b; b--){
                var c = a[b];
                this.get(c);
                this.set(c, "", 0, void 0, void 0);
            }
        };
        function vg(a) {
            a = (a.a.cookie || "").split(";");
            for(var b = [], c = [], d, e, f = 0; f < a.length; f++)e = Ua(a[f]), d = e.indexOf("="), -1 == d ? (b.push(""), c.push(e)) : (b.push(e.substring(0, d)), c.push(e.substring(d + 1)));
            return {
                keys: b,
                values: c
            };
        }
        var xg = new ug;
        function yg() {}
        function zg(a, b, c, d) {
            this.h = "undefined" !== typeof a && null !== a ? a : -1;
            this.g = b || null;
            this.a = c || null;
            this.j = !!d;
        }
        m(zg, yg);
        zg.prototype.set = function(a, b) {
            xg.set(a, b, this.h, this.g, this.a, this.j);
        };
        zg.prototype.get = function(a) {
            return xg.get(a) || null;
        };
        zg.prototype.ra = function(a) {
            var b = this.g, c = this.a;
            xg.get(a);
            xg.set(a, "", 0, b, c);
        };
        function Ag(a, b) {
            this.g = a;
            this.a = b || null;
        }
        function Bg(a) {
            return {
                email: a.g,
                credential: a.a && a.a.toJSON()
            };
        }
        function Cg(a) {
            if (a && a.email) {
                var b = a.credential && (0, _appDefault.default).auth.AuthCredential.fromJSON(a.credential);
                return new Ag(a.email, b);
            }
            return null;
        }
        function Dg(a) {
            this.a = a || null;
        }
        function Eg(a) {
            for(var b = [], c = 0, d = 0; d < a.length; d++){
                var e = a.charCodeAt(d);
                255 < e && (b[c++] = e & 255, e >>= 8);
                b[c++] = e;
            }
            return b;
        }
        function Fg(a) {
            return Ka(a, function(b) {
                b = b.toString(16);
                return 1 < b.length ? b : "0" + b;
            }).join("");
        }
        function Gg(a) {
            this.i = a;
            this.g = this.i.length / 4;
            this.j = this.g + 6;
            this.h = [
                [],
                [],
                [],
                []
            ];
            this.s = [
                [],
                [],
                [],
                []
            ];
            this.a = Array(Hg * (this.j + 1));
            for(a = 0; a < this.g; a++)this.a[a] = [
                this.i[4 * a],
                this.i[4 * a + 1],
                this.i[4 * a + 2],
                this.i[4 * a + 3]
            ];
            var b = Array(4);
            for(a = this.g; a < Hg * (this.j + 1); a++){
                b[0] = this.a[a - 1][0];
                b[1] = this.a[a - 1][1];
                b[2] = this.a[a - 1][2];
                b[3] = this.a[a - 1][3];
                if (0 == a % this.g) {
                    var c = b, d = c[0];
                    c[0] = c[1];
                    c[1] = c[2];
                    c[2] = c[3];
                    c[3] = d;
                    Ig(b);
                    b[0] ^= Jg[a / this.g][0];
                    b[1] ^= Jg[a / this.g][1];
                    b[2] ^= Jg[a / this.g][2];
                    b[3] ^= Jg[a / this.g][3];
                } else 6 < this.g && 4 == a % this.g && Ig(b);
                this.a[a] = Array(4);
                this.a[a][0] = this.a[a - this.g][0] ^ b[0];
                this.a[a][1] = this.a[a - this.g][1] ^ b[1];
                this.a[a][2] = this.a[a - this.g][2] ^ b[2];
                this.a[a][3] = this.a[a - this.g][3] ^ b[3];
            }
        }
        Gg.prototype.A = 16;
        var Hg = Gg.prototype.A / 4;
        function Kg(a, b) {
            for(var c, d = 0; d < Hg; d++)for(var e = 0; 4 > e; e++)c = 4 * e + d, c = b[c], a.h[d][e] = c;
        }
        function Lg(a) {
            for(var b = [], c = 0; c < Hg; c++)for(var d = 0; 4 > d; d++)b[4 * d + c] = a.h[c][d];
            return b;
        }
        function Mg(a, b) {
            for(var c = 0; 4 > c; c++)for(var d = 0; 4 > d; d++)a.h[c][d] ^= a.a[4 * b + d][c];
        }
        function Ng(a, b) {
            for(var c = 0; 4 > c; c++)for(var d = 0; 4 > d; d++)a.h[c][d] = b[a.h[c][d]];
        }
        function Og(a) {
            for(var b = 1; 4 > b; b++)for(var c = 0; 4 > c; c++)a.s[b][c] = a.h[b][c];
            for(b = 1; 4 > b; b++)for(c = 0; 4 > c; c++)a.h[b][c] = a.s[b][(c + b) % Hg];
        }
        function Pg(a) {
            for(var b = 1; 4 > b; b++)for(var c = 0; 4 > c; c++)a.s[b][(c + b) % Hg] = a.h[b][c];
            for(b = 1; 4 > b; b++)for(c = 0; 4 > c; c++)a.h[b][c] = a.s[b][c];
        }
        function Ig(a) {
            a[0] = Qg[a[0]];
            a[1] = Qg[a[1]];
            a[2] = Qg[a[2]];
            a[3] = Qg[a[3]];
        }
        var Qg = [
            99,
            124,
            119,
            123,
            242,
            107,
            111,
            197,
            48,
            1,
            103,
            43,
            254,
            215,
            171,
            118,
            202,
            130,
            201,
            125,
            250,
            89,
            71,
            240,
            173,
            212,
            162,
            175,
            156,
            164,
            114,
            192,
            183,
            253,
            147,
            38,
            54,
            63,
            247,
            204,
            52,
            165,
            229,
            241,
            113,
            216,
            49,
            21,
            4,
            199,
            35,
            195,
            24,
            150,
            5,
            154,
            7,
            18,
            128,
            226,
            235,
            39,
            178,
            117,
            9,
            131,
            44,
            26,
            27,
            110,
            90,
            160,
            82,
            59,
            214,
            179,
            41,
            227,
            47,
            132,
            83,
            209,
            0,
            237,
            32,
            252,
            177,
            91,
            106,
            203,
            190,
            57,
            74,
            76,
            88,
            207,
            208,
            239,
            170,
            251,
            67,
            77,
            51,
            133,
            69,
            249,
            2,
            127,
            80,
            60,
            159,
            168,
            81,
            163,
            64,
            143,
            146,
            157,
            56,
            245,
            188,
            182,
            218,
            33,
            16,
            255,
            243,
            210,
            205,
            12,
            19,
            236,
            95,
            151,
            68,
            23,
            196,
            167,
            126,
            61,
            100,
            93,
            25,
            115,
            96,
            129,
            79,
            220,
            34,
            42,
            144,
            136,
            70,
            238,
            184,
            20,
            222,
            94,
            11,
            219,
            224,
            50,
            58,
            10,
            73,
            6,
            36,
            92,
            194,
            211,
            172,
            98,
            145,
            149,
            228,
            121,
            231,
            200,
            55,
            109,
            141,
            213,
            78,
            169,
            108,
            86,
            244,
            234,
            101,
            122,
            174,
            8,
            186,
            120,
            37,
            46,
            28,
            166,
            180,
            198,
            232,
            221,
            116,
            31,
            75,
            189,
            139,
            138,
            112,
            62,
            181,
            102,
            72,
            3,
            246,
            14,
            97,
            53,
            87,
            185,
            134,
            193,
            29,
            158,
            225,
            248,
            152,
            17,
            105,
            217,
            142,
            148,
            155,
            30,
            135,
            233,
            206,
            85,
            40,
            223,
            140,
            161,
            137,
            13,
            191,
            230,
            66,
            104,
            65,
            153,
            45,
            15,
            176,
            84,
            187,
            22
        ], Rg = [
            82,
            9,
            106,
            213,
            48,
            54,
            165,
            56,
            191,
            64,
            163,
            158,
            129,
            243,
            215,
            251,
            124,
            227,
            57,
            130,
            155,
            47,
            255,
            135,
            52,
            142,
            67,
            68,
            196,
            222,
            233,
            203,
            84,
            123,
            148,
            50,
            166,
            194,
            35,
            61,
            238,
            76,
            149,
            11,
            66,
            250,
            195,
            78,
            8,
            46,
            161,
            102,
            40,
            217,
            36,
            178,
            118,
            91,
            162,
            73,
            109,
            139,
            209,
            37,
            114,
            248,
            246,
            100,
            134,
            104,
            152,
            22,
            212,
            164,
            92,
            204,
            93,
            101,
            182,
            146,
            108,
            112,
            72,
            80,
            253,
            237,
            185,
            218,
            94,
            21,
            70,
            87,
            167,
            141,
            157,
            132,
            144,
            216,
            171,
            0,
            140,
            188,
            211,
            10,
            247,
            228,
            88,
            5,
            184,
            179,
            69,
            6,
            208,
            44,
            30,
            143,
            202,
            63,
            15,
            2,
            193,
            175,
            189,
            3,
            1,
            19,
            138,
            107,
            58,
            145,
            17,
            65,
            79,
            103,
            220,
            234,
            151,
            242,
            207,
            206,
            240,
            180,
            230,
            115,
            150,
            172,
            116,
            34,
            231,
            173,
            53,
            133,
            226,
            249,
            55,
            232,
            28,
            117,
            223,
            110,
            71,
            241,
            26,
            113,
            29,
            41,
            197,
            137,
            111,
            183,
            98,
            14,
            170,
            24,
            190,
            27,
            252,
            86,
            62,
            75,
            198,
            210,
            121,
            32,
            154,
            219,
            192,
            254,
            120,
            205,
            90,
            244,
            31,
            221,
            168,
            51,
            136,
            7,
            199,
            49,
            177,
            18,
            16,
            89,
            39,
            128,
            236,
            95,
            96,
            81,
            127,
            169,
            25,
            181,
            74,
            13,
            45,
            229,
            122,
            159,
            147,
            201,
            156,
            239,
            160,
            224,
            59,
            77,
            174,
            42,
            245,
            176,
            200,
            235,
            187,
            60,
            131,
            83,
            153,
            97,
            23,
            43,
            4,
            126,
            186,
            119,
            214,
            38,
            225,
            105,
            20,
            99,
            85,
            33,
            12,
            125
        ], Jg = [
            [
                0,
                0,
                0,
                0
            ],
            [
                1,
                0,
                0,
                0
            ],
            [
                2,
                0,
                0,
                0
            ],
            [
                4,
                0,
                0,
                0
            ],
            [
                8,
                0,
                0,
                0
            ],
            [
                16,
                0,
                0,
                0
            ],
            [
                32,
                0,
                0,
                0
            ],
            [
                64,
                0,
                0,
                0
            ],
            [
                128,
                0,
                0,
                0
            ],
            [
                27,
                0,
                0,
                0
            ],
            [
                54,
                0,
                0,
                0
            ]
        ], Sg = [
            0,
            2,
            4,
            6,
            8,
            10,
            12,
            14,
            16,
            18,
            20,
            22,
            24,
            26,
            28,
            30,
            32,
            34,
            36,
            38,
            40,
            42,
            44,
            46,
            48,
            50,
            52,
            54,
            56,
            58,
            60,
            62,
            64,
            66,
            68,
            70,
            72,
            74,
            76,
            78,
            80,
            82,
            84,
            86,
            88,
            90,
            92,
            94,
            96,
            98,
            100,
            102,
            104,
            106,
            108,
            110,
            112,
            114,
            116,
            118,
            120,
            122,
            124,
            126,
            128,
            130,
            132,
            134,
            136,
            138,
            140,
            142,
            144,
            146,
            148,
            150,
            152,
            154,
            156,
            158,
            160,
            162,
            164,
            166,
            168,
            170,
            172,
            174,
            176,
            178,
            180,
            182,
            184,
            186,
            188,
            190,
            192,
            194,
            196,
            198,
            200,
            202,
            204,
            206,
            208,
            210,
            212,
            214,
            216,
            218,
            220,
            222,
            224,
            226,
            228,
            230,
            232,
            234,
            236,
            238,
            240,
            242,
            244,
            246,
            248,
            250,
            252,
            254,
            27,
            25,
            31,
            29,
            19,
            17,
            23,
            21,
            11,
            9,
            15,
            13,
            3,
            1,
            7,
            5,
            59,
            57,
            63,
            61,
            51,
            49,
            55,
            53,
            43,
            41,
            47,
            45,
            35,
            33,
            39,
            37,
            91,
            89,
            95,
            93,
            83,
            81,
            87,
            85,
            75,
            73,
            79,
            77,
            67,
            65,
            71,
            69,
            123,
            121,
            127,
            125,
            115,
            113,
            119,
            117,
            107,
            105,
            111,
            109,
            99,
            97,
            103,
            101,
            155,
            153,
            159,
            157,
            147,
            145,
            151,
            149,
            139,
            137,
            143,
            141,
            131,
            129,
            135,
            133,
            187,
            185,
            191,
            189,
            179,
            177,
            183,
            181,
            171,
            169,
            175,
            173,
            163,
            161,
            167,
            165,
            219,
            217,
            223,
            221,
            211,
            209,
            215,
            213,
            203,
            201,
            207,
            205,
            195,
            193,
            199,
            197,
            251,
            249,
            255,
            253,
            243,
            241,
            247,
            245,
            235,
            233,
            239,
            237,
            227,
            225,
            231,
            229
        ], Tg = [
            0,
            3,
            6,
            5,
            12,
            15,
            10,
            9,
            24,
            27,
            30,
            29,
            20,
            23,
            18,
            17,
            48,
            51,
            54,
            53,
            60,
            63,
            58,
            57,
            40,
            43,
            46,
            45,
            36,
            39,
            34,
            33,
            96,
            99,
            102,
            101,
            108,
            111,
            106,
            105,
            120,
            123,
            126,
            125,
            116,
            119,
            114,
            113,
            80,
            83,
            86,
            85,
            92,
            95,
            90,
            89,
            72,
            75,
            78,
            77,
            68,
            71,
            66,
            65,
            192,
            195,
            198,
            197,
            204,
            207,
            202,
            201,
            216,
            219,
            222,
            221,
            212,
            215,
            210,
            209,
            240,
            243,
            246,
            245,
            252,
            255,
            250,
            249,
            232,
            235,
            238,
            237,
            228,
            231,
            226,
            225,
            160,
            163,
            166,
            165,
            172,
            175,
            170,
            169,
            184,
            187,
            190,
            189,
            180,
            183,
            178,
            177,
            144,
            147,
            150,
            149,
            156,
            159,
            154,
            153,
            136,
            139,
            142,
            141,
            132,
            135,
            130,
            129,
            155,
            152,
            157,
            158,
            151,
            148,
            145,
            146,
            131,
            128,
            133,
            134,
            143,
            140,
            137,
            138,
            171,
            168,
            173,
            174,
            167,
            164,
            161,
            162,
            179,
            176,
            181,
            182,
            191,
            188,
            185,
            186,
            251,
            248,
            253,
            254,
            247,
            244,
            241,
            242,
            227,
            224,
            229,
            230,
            239,
            236,
            233,
            234,
            203,
            200,
            205,
            206,
            199,
            196,
            193,
            194,
            211,
            208,
            213,
            214,
            223,
            220,
            217,
            218,
            91,
            88,
            93,
            94,
            87,
            84,
            81,
            82,
            67,
            64,
            69,
            70,
            79,
            76,
            73,
            74,
            107,
            104,
            109,
            110,
            103,
            100,
            97,
            98,
            115,
            112,
            117,
            118,
            127,
            124,
            121,
            122,
            59,
            56,
            61,
            62,
            55,
            52,
            49,
            50,
            35,
            32,
            37,
            38,
            47,
            44,
            41,
            42,
            11,
            8,
            13,
            14,
            7,
            4,
            1,
            2,
            19,
            16,
            21,
            22,
            31,
            28,
            25,
            26
        ], Ug = [
            0,
            9,
            18,
            27,
            36,
            45,
            54,
            63,
            72,
            65,
            90,
            83,
            108,
            101,
            126,
            119,
            144,
            153,
            130,
            139,
            180,
            189,
            166,
            175,
            216,
            209,
            202,
            195,
            252,
            245,
            238,
            231,
            59,
            50,
            41,
            32,
            31,
            22,
            13,
            4,
            115,
            122,
            97,
            104,
            87,
            94,
            69,
            76,
            171,
            162,
            185,
            176,
            143,
            134,
            157,
            148,
            227,
            234,
            241,
            248,
            199,
            206,
            213,
            220,
            118,
            127,
            100,
            109,
            82,
            91,
            64,
            73,
            62,
            55,
            44,
            37,
            26,
            19,
            8,
            1,
            230,
            239,
            244,
            253,
            194,
            203,
            208,
            217,
            174,
            167,
            188,
            181,
            138,
            131,
            152,
            145,
            77,
            68,
            95,
            86,
            105,
            96,
            123,
            114,
            5,
            12,
            23,
            30,
            33,
            40,
            51,
            58,
            221,
            212,
            207,
            198,
            249,
            240,
            235,
            226,
            149,
            156,
            135,
            142,
            177,
            184,
            163,
            170,
            236,
            229,
            254,
            247,
            200,
            193,
            218,
            211,
            164,
            173,
            182,
            191,
            128,
            137,
            146,
            155,
            124,
            117,
            110,
            103,
            88,
            81,
            74,
            67,
            52,
            61,
            38,
            47,
            16,
            25,
            2,
            11,
            215,
            222,
            197,
            204,
            243,
            250,
            225,
            232,
            159,
            150,
            141,
            132,
            187,
            178,
            169,
            160,
            71,
            78,
            85,
            92,
            99,
            106,
            113,
            120,
            15,
            6,
            29,
            20,
            43,
            34,
            57,
            48,
            154,
            147,
            136,
            129,
            190,
            183,
            172,
            165,
            210,
            219,
            192,
            201,
            246,
            255,
            228,
            237,
            10,
            3,
            24,
            17,
            46,
            39,
            60,
            53,
            66,
            75,
            80,
            89,
            102,
            111,
            116,
            125,
            161,
            168,
            179,
            186,
            133,
            140,
            151,
            158,
            233,
            224,
            251,
            242,
            205,
            196,
            223,
            214,
            49,
            56,
            35,
            42,
            21,
            28,
            7,
            14,
            121,
            112,
            107,
            98,
            93,
            84,
            79,
            70
        ], Vg = [
            0,
            11,
            22,
            29,
            44,
            39,
            58,
            49,
            88,
            83,
            78,
            69,
            116,
            127,
            98,
            105,
            176,
            187,
            166,
            173,
            156,
            151,
            138,
            129,
            232,
            227,
            254,
            245,
            196,
            207,
            210,
            217,
            123,
            112,
            109,
            102,
            87,
            92,
            65,
            74,
            35,
            40,
            53,
            62,
            15,
            4,
            25,
            18,
            203,
            192,
            221,
            214,
            231,
            236,
            241,
            250,
            147,
            152,
            133,
            142,
            191,
            180,
            169,
            162,
            246,
            253,
            224,
            235,
            218,
            209,
            204,
            199,
            174,
            165,
            184,
            179,
            130,
            137,
            148,
            159,
            70,
            77,
            80,
            91,
            106,
            97,
            124,
            119,
            30,
            21,
            8,
            3,
            50,
            57,
            36,
            47,
            141,
            134,
            155,
            144,
            161,
            170,
            183,
            188,
            213,
            222,
            195,
            200,
            249,
            242,
            239,
            228,
            61,
            54,
            43,
            32,
            17,
            26,
            7,
            12,
            101,
            110,
            115,
            120,
            73,
            66,
            95,
            84,
            247,
            252,
            225,
            234,
            219,
            208,
            205,
            198,
            175,
            164,
            185,
            178,
            131,
            136,
            149,
            158,
            71,
            76,
            81,
            90,
            107,
            96,
            125,
            118,
            31,
            20,
            9,
            2,
            51,
            56,
            37,
            46,
            140,
            135,
            154,
            145,
            160,
            171,
            182,
            189,
            212,
            223,
            194,
            201,
            248,
            243,
            238,
            229,
            60,
            55,
            42,
            33,
            16,
            27,
            6,
            13,
            100,
            111,
            114,
            121,
            72,
            67,
            94,
            85,
            1,
            10,
            23,
            28,
            45,
            38,
            59,
            48,
            89,
            82,
            79,
            68,
            117,
            126,
            99,
            104,
            177,
            186,
            167,
            172,
            157,
            150,
            139,
            128,
            233,
            226,
            255,
            244,
            197,
            206,
            211,
            216,
            122,
            113,
            108,
            103,
            86,
            93,
            64,
            75,
            34,
            41,
            52,
            63,
            14,
            5,
            24,
            19,
            202,
            193,
            220,
            215,
            230,
            237,
            240,
            251,
            146,
            153,
            132,
            143,
            190,
            181,
            168,
            163
        ], Wg = [
            0,
            13,
            26,
            23,
            52,
            57,
            46,
            35,
            104,
            101,
            114,
            127,
            92,
            81,
            70,
            75,
            208,
            221,
            202,
            199,
            228,
            233,
            254,
            243,
            184,
            181,
            162,
            175,
            140,
            129,
            150,
            155,
            187,
            182,
            161,
            172,
            143,
            130,
            149,
            152,
            211,
            222,
            201,
            196,
            231,
            234,
            253,
            240,
            107,
            102,
            113,
            124,
            95,
            82,
            69,
            72,
            3,
            14,
            25,
            20,
            55,
            58,
            45,
            32,
            109,
            96,
            119,
            122,
            89,
            84,
            67,
            78,
            5,
            8,
            31,
            18,
            49,
            60,
            43,
            38,
            189,
            176,
            167,
            170,
            137,
            132,
            147,
            158,
            213,
            216,
            207,
            194,
            225,
            236,
            251,
            246,
            214,
            219,
            204,
            193,
            226,
            239,
            248,
            245,
            190,
            179,
            164,
            169,
            138,
            135,
            144,
            157,
            6,
            11,
            28,
            17,
            50,
            63,
            40,
            37,
            110,
            99,
            116,
            121,
            90,
            87,
            64,
            77,
            218,
            215,
            192,
            205,
            238,
            227,
            244,
            249,
            178,
            191,
            168,
            165,
            134,
            139,
            156,
            145,
            10,
            7,
            16,
            29,
            62,
            51,
            36,
            41,
            98,
            111,
            120,
            117,
            86,
            91,
            76,
            65,
            97,
            108,
            123,
            118,
            85,
            88,
            79,
            66,
            9,
            4,
            19,
            30,
            61,
            48,
            39,
            42,
            177,
            188,
            171,
            166,
            133,
            136,
            159,
            146,
            217,
            212,
            195,
            206,
            237,
            224,
            247,
            250,
            183,
            186,
            173,
            160,
            131,
            142,
            153,
            148,
            223,
            210,
            197,
            200,
            235,
            230,
            241,
            252,
            103,
            106,
            125,
            112,
            83,
            94,
            73,
            68,
            15,
            2,
            21,
            24,
            59,
            54,
            33,
            44,
            12,
            1,
            22,
            27,
            56,
            53,
            34,
            47,
            100,
            105,
            126,
            115,
            80,
            93,
            74,
            71,
            220,
            209,
            198,
            203,
            232,
            229,
            242,
            255,
            180,
            185,
            174,
            163,
            128,
            141,
            154,
            151
        ], Xg = [
            0,
            14,
            28,
            18,
            56,
            54,
            36,
            42,
            112,
            126,
            108,
            98,
            72,
            70,
            84,
            90,
            224,
            238,
            252,
            242,
            216,
            214,
            196,
            202,
            144,
            158,
            140,
            130,
            168,
            166,
            180,
            186,
            219,
            213,
            199,
            201,
            227,
            237,
            255,
            241,
            171,
            165,
            183,
            185,
            147,
            157,
            143,
            129,
            59,
            53,
            39,
            41,
            3,
            13,
            31,
            17,
            75,
            69,
            87,
            89,
            115,
            125,
            111,
            97,
            173,
            163,
            177,
            191,
            149,
            155,
            137,
            135,
            221,
            211,
            193,
            207,
            229,
            235,
            249,
            247,
            77,
            67,
            81,
            95,
            117,
            123,
            105,
            103,
            61,
            51,
            33,
            47,
            5,
            11,
            25,
            23,
            118,
            120,
            106,
            100,
            78,
            64,
            82,
            92,
            6,
            8,
            26,
            20,
            62,
            48,
            34,
            44,
            150,
            152,
            138,
            132,
            174,
            160,
            178,
            188,
            230,
            232,
            250,
            244,
            222,
            208,
            194,
            204,
            65,
            79,
            93,
            83,
            121,
            119,
            101,
            107,
            49,
            63,
            45,
            35,
            9,
            7,
            21,
            27,
            161,
            175,
            189,
            179,
            153,
            151,
            133,
            139,
            209,
            223,
            205,
            195,
            233,
            231,
            245,
            251,
            154,
            148,
            134,
            136,
            162,
            172,
            190,
            176,
            234,
            228,
            246,
            248,
            210,
            220,
            206,
            192,
            122,
            116,
            102,
            104,
            66,
            76,
            94,
            80,
            10,
            4,
            22,
            24,
            50,
            60,
            46,
            32,
            236,
            226,
            240,
            254,
            212,
            218,
            200,
            198,
            156,
            146,
            128,
            142,
            164,
            170,
            184,
            182,
            12,
            2,
            16,
            30,
            52,
            58,
            40,
            38,
            124,
            114,
            96,
            110,
            68,
            74,
            88,
            86,
            55,
            57,
            43,
            37,
            15,
            1,
            19,
            29,
            71,
            73,
            91,
            85,
            127,
            113,
            99,
            109,
            215,
            217,
            203,
            197,
            239,
            225,
            243,
            253,
            167,
            169,
            187,
            181,
            159,
            145,
            131,
            141
        ];
        function Yg(a, b) {
            a = new Gg(Zg(a));
            b = Eg(b);
            for(var c = b.splice(0, 16), d = "", e; c.length;){
                e = 16 - c.length;
                for(var f = 0; f < e; f++)c.push(0);
                e = a;
                Kg(e, c);
                Mg(e, 0);
                for(c = 1; c < e.j; ++c){
                    Ng(e, Qg);
                    Og(e);
                    f = e.h;
                    for(var g = e.s[0], h = 0; 4 > h; h++)g[0] = f[0][h], g[1] = f[1][h], g[2] = f[2][h], g[3] = f[3][h], f[0][h] = Sg[g[0]] ^ Tg[g[1]] ^ g[2] ^ g[3], f[1][h] = g[0] ^ Sg[g[1]] ^ Tg[g[2]] ^ g[3], f[2][h] = g[0] ^ g[1] ^ Sg[g[2]] ^ Tg[g[3]], f[3][h] = Tg[g[0]] ^ g[1] ^ g[2] ^ Sg[g[3]];
                    Mg(e, c);
                }
                Ng(e, Qg);
                Og(e);
                Mg(e, e.j);
                d += Fg(Lg(e));
                c = b.splice(0, 16);
            }
            return d;
        }
        function $g(a, b) {
            a = new Gg(Zg(a));
            for(var c = [], d = 0; d < b.length; d += 2)c.push(parseInt(b.substring(d, d + 2), 16));
            var e = c.splice(0, 16);
            for(b = ""; e.length;){
                d = a;
                Kg(d, e);
                Mg(d, d.j);
                for(e = 1; e < d.j; ++e){
                    Pg(d);
                    Ng(d, Rg);
                    Mg(d, d.j - e);
                    for(var f = d.h, g = d.s[0], h = 0; 4 > h; h++)g[0] = f[0][h], g[1] = f[1][h], g[2] = f[2][h], g[3] = f[3][h], f[0][h] = Xg[g[0]] ^ Vg[g[1]] ^ Wg[g[2]] ^ Ug[g[3]], f[1][h] = Ug[g[0]] ^ Xg[g[1]] ^ Vg[g[2]] ^ Wg[g[3]], f[2][h] = Wg[g[0]] ^ Ug[g[1]] ^ Xg[g[2]] ^ Vg[g[3]], f[3][h] = Vg[g[0]] ^ Wg[g[1]] ^ Ug[g[2]] ^ Xg[g[3]];
                }
                Pg(d);
                Ng(d, Rg);
                Mg(d, 0);
                d = Lg(d);
                if (8192 >= d.length) d = String.fromCharCode.apply(null, d);
                else {
                    e = "";
                    for(f = 0; f < d.length; f += 8192)e += String.fromCharCode.apply(null, Ta(d, f, f + 8192));
                    d = e;
                }
                b += d;
                e = c.splice(0, 16);
            }
            return b.replace(/(\x00)+$/, "");
        }
        function Zg(a) {
            a = Eg(a.substring(0, 32));
            for(var b = 32 - a.length, c = 0; c < b; c++)a.push(0);
            return a;
        }
        function ah(a) {
            var b = [];
            bh(new ch, a, b);
            return b.join("");
        }
        function ch() {}
        function bh(a, b, c) {
            if (null == b) c.push("null");
            else {
                if ("object" == typeof b) {
                    if (qa(b)) {
                        var d = b;
                        b = d.length;
                        c.push("[");
                        for(var e = "", f = 0; f < b; f++)c.push(e), bh(a, d[f], c), e = ",";
                        c.push("]");
                        return;
                    }
                    if (b instanceof String || b instanceof Number || b instanceof Boolean) b = b.valueOf();
                    else {
                        c.push("{");
                        e = "";
                        for(d in b)Object.prototype.hasOwnProperty.call(b, d) && (f = b[d], "function" != typeof f && (c.push(e), dh(d, c), c.push(":"), bh(a, f, c), e = ","));
                        c.push("}");
                        return;
                    }
                }
                switch(typeof b){
                    case "string":
                        dh(b, c);
                        break;
                    case "number":
                        c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");
                        break;
                    case "boolean":
                        c.push(String(b));
                        break;
                    case "function":
                        c.push("null");
                        break;
                    default:
                        throw Error("Unknown type: " + typeof b);
                }
            }
        }
        var eh = {
            '"': '\\"',
            "\\": "\\\\",
            "/": "\\/",
            "\b": "\\b",
            "\f": "\\f",
            "\n": "\\n",
            "\r": "\\r",
            "	": "\\t",
            "\v": "\\u000b"
        }, fh = /\uffff/.test("\uFFFF") ? /[\\"\x00-\x1f\x7f-\uffff]/g : /[\\"\x00-\x1f\x7f-\xff]/g;
        function dh(a, b) {
            b.push('"', a.replace(fh, function(c) {
                var d = eh[c];
                d || (d = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1), eh[c] = d);
                return d;
            }), '"');
        }
        function gh(a) {
            this.a = a;
        }
        gh.prototype.set = function(a, b) {
            ka(b) ? this.a.set(a, ah(b)) : this.a.ra(a);
        };
        gh.prototype.get = function(a) {
            try {
                var b = this.a.get(a);
            } catch (c) {
                return;
            }
            if (null !== b) try {
                return JSON.parse(b);
            } catch (c$2) {
                throw "Storage: Invalid value was encountered";
            }
        };
        function hh() {}
        w(hh, yg);
        hh.prototype.clear = function() {
            var a = lb(this.ha(!0)), b = this;
            Ha(a, function(c) {
                b.ra(c);
            });
        };
        function ih(a) {
            this.a = a;
        }
        w(ih, hh);
        function jh(a) {
            if (!a.a) return !1;
            try {
                return a.a.setItem("__sak", "1"), a.a.removeItem("__sak"), !0;
            } catch (b) {
                return !1;
            }
        }
        l = ih.prototype;
        l.set = function(a, b) {
            try {
                this.a.setItem(a, b);
            } catch (c) {
                if (0 == this.a.length) throw "Storage mechanism: Storage disabled";
                throw "Storage mechanism: Quota exceeded";
            }
        };
        l.get = function(a) {
            a = this.a.getItem(a);
            if (!q(a) && null !== a) throw "Storage mechanism: Invalid value was encountered";
            return a;
        };
        l.ra = function(a) {
            this.a.removeItem(a);
        };
        l.ha = function(a) {
            var b = 0, c = this.a, d = new ib;
            d.next = function() {
                if (b >= c.length) throw hb;
                var e = c.key(b++);
                if (a) return e;
                e = c.getItem(e);
                if (!q(e)) throw "Storage mechanism: Invalid value was encountered";
                return e;
            };
            return d;
        };
        l.clear = function() {
            this.a.clear();
        };
        l.key = function(a) {
            return this.a.key(a);
        };
        function kh() {
            var a = null;
            try {
                a = window.localStorage || null;
            } catch (b) {}
            this.a = a;
        }
        w(kh, ih);
        function lh() {
            var a = null;
            try {
                a = window.sessionStorage || null;
            } catch (b) {}
            this.a = a;
        }
        w(lh, ih);
        function mh(a, b) {
            this.g = a;
            this.a = b + "::";
        }
        w(mh, hh);
        mh.prototype.set = function(a, b) {
            this.g.set(this.a + a, b);
        };
        mh.prototype.get = function(a) {
            return this.g.get(this.a + a);
        };
        mh.prototype.ra = function(a) {
            this.g.ra(this.a + a);
        };
        mh.prototype.ha = function(a) {
            var b = this.g.ha(!0), c = this, d = new ib;
            d.next = function() {
                for(var e = b.next(); e.substr(0, c.a.length) != c.a;)e = b.next();
                return a ? e.substr(c.a.length) : c.g.get(e);
            };
            return d;
        };
        jh(new kh);
        var nh, oh = new lh;
        nh = jh(oh) ? new mh(oh, "firebaseui") : null;
        var ph = new gh(nh), qh = {
            name: "pendingEmailCredential",
            storage: ph
        }, rh = {
            name: "redirectStatus",
            storage: ph
        }, sh = {
            name: "redirectUrl",
            storage: ph
        }, th = {
            name: "emailForSignIn",
            storage: new gh(new zg(3600, "/"))
        }, uh = {
            name: "pendingEncryptedCredential",
            storage: new gh(new zg(3600, "/"))
        };
        function vh(a, b) {
            return a.storage.get(b ? a.name + ":" + b : a.name);
        }
        function wh(a, b) {
            a.storage.a.ra(b ? a.name + ":" + b : a.name);
        }
        function xh(a, b, c) {
            a.storage.set(c ? a.name + ":" + c : a.name, b);
        }
        function yh(a) {
            return vh(sh, a) || null;
        }
        function zh(a) {
            a = vh(qh, a) || null;
            return Cg(a);
        }
        function Ah(a) {
            wh(qh, a);
        }
        function Bh(a, b) {
            xh(qh, Bg(a), b);
        }
        function Ch(a) {
            return (a = vh(rh, a) || null) && "undefined" !== typeof a.tenantId ? new Dg(a.tenantId) : null;
        }
        function Dh(a, b) {
            xh(rh, {
                tenantId: a.a
            }, b);
        }
        function Eh(a, b) {
            b = vh(th, b);
            var c = null;
            if (b) try {
                var d = $g(a, b), e = JSON.parse(d);
                c = e && e.email || null;
            } catch (f) {}
            return c;
        }
        function Fh(a, b) {
            b = vh(uh, b);
            var c = null;
            if (b) try {
                var d = $g(a, b);
                c = JSON.parse(d);
            } catch (e) {}
            return Cg(c || null);
        }
        function Gh(a, b, c) {
            xh(uh, Yg(a, JSON.stringify(Bg(b))), c);
        }
        function Hh() {
            this.W = {};
        }
        function G(a, b, c) {
            if (b.toLowerCase() in a.W) throw Error("Configuration " + b + " has already been defined.");
            a.W[b.toLowerCase()] = c;
        }
        function Ih(a, b, c) {
            if (!(b.toLowerCase() in a.W)) throw Error("Configuration " + b + " is not defined.");
            a.W[b.toLowerCase()] = c;
        }
        Hh.prototype.get = function(a) {
            if (!(a.toLowerCase() in this.W)) throw Error("Configuration " + a + " is not defined.");
            return this.W[a.toLowerCase()];
        };
        function Jh(a, b) {
            a = a.get(b);
            if (!a) throw Error("Configuration " + b + " is required.");
            return a;
        }
        function Kh() {
            this.g = void 0;
            this.a = {};
        }
        l = Kh.prototype;
        l.set = function(a, b) {
            Lh(this, a, b, !1);
        };
        l.add = function(a, b) {
            Lh(this, a, b, !0);
        };
        function Lh(a, b, c, d) {
            for(var e = 0; e < b.length; e++){
                var f = b.charAt(e);
                a.a[f] || (a.a[f] = new Kh);
                a = a.a[f];
            }
            if (d && void 0 !== a.g) throw Error('The collection already contains the key "' + b + '"');
            a.g = c;
        }
        l.get = function(a) {
            a: {
                for(var b = this, c = 0; c < a.length; c++)if (b = b.a[a.charAt(c)], !b) {
                    a = void 0;
                    break a;
                }
                a = b;
            }
            return a ? a.g : void 0;
        };
        l.la = function() {
            var a = [];
            Mh(this, a);
            return a;
        };
        function Mh(a, b) {
            void 0 !== a.g && b.push(a.g);
            for(var c in a.a)Mh(a.a[c], b);
        }
        l.ja = function() {
            var a = [];
            Nh(this, "", a);
            return a;
        };
        function Nh(a, b, c) {
            void 0 !== a.g && c.push(b);
            for(var d in a.a)Nh(a.a[d], b + d, c);
        }
        l.clear = function() {
            this.a = {};
            this.g = void 0;
        };
        function Oh(a) {
            this.a = a;
            this.g = new Kh;
            for(a = 0; a < this.a.length; a++){
                var b = this.g.get("+" + this.a[a].b);
                b ? b.push(this.a[a]) : this.g.add("+" + this.a[a].b, [
                    this.a[a]
                ]);
            }
        }
        function Ph(a, b) {
            a = a.g;
            var c = {}, d = 0;
            void 0 !== a.g && (c[d] = a.g);
            for(; d < b.length; d++){
                var e = b.charAt(d);
                if (!(e in a.a)) break;
                a = a.a[e];
                void 0 !== a.g && (c[d] = a.g);
            }
            for(var f in c)if (c.hasOwnProperty(f)) return c[f];
            return [];
        }
        function Qh(a) {
            for(var b = 0; b < Rh.length; b++)if (Rh[b].c === a) return Rh[b];
            return null;
        }
        function Sh(a) {
            a = a.toUpperCase();
            for(var b = [], c = 0; c < Rh.length; c++)Rh[c].f === a && b.push(Rh[c]);
            return b;
        }
        function Th(a) {
            if (0 < a.length && "+" == a.charAt(0)) {
                a = a.substring(1);
                for(var b = [], c = 0; c < Rh.length; c++)Rh[c].b == a && b.push(Rh[c]);
                a = b;
            } else a = Sh(a);
            return a;
        }
        function Uh(a) {
            a.sort(function(b, c) {
                return b.name.localeCompare(c.name, "en");
            });
        }
        var Rh = [
            {
                name: "Afghanistan",
                c: "93-AF-0",
                b: "93",
                f: "AF"
            },
            {
                name: "\xc5land Islands",
                c: "358-AX-0",
                b: "358",
                f: "AX"
            },
            {
                name: "Albania",
                c: "355-AL-0",
                b: "355",
                f: "AL"
            },
            {
                name: "Algeria",
                c: "213-DZ-0",
                b: "213",
                f: "DZ"
            },
            {
                name: "American Samoa",
                c: "1-AS-0",
                b: "1",
                f: "AS"
            },
            {
                name: "Andorra",
                c: "376-AD-0",
                b: "376",
                f: "AD"
            },
            {
                name: "Angola",
                c: "244-AO-0",
                b: "244",
                f: "AO"
            },
            {
                name: "Anguilla",
                c: "1-AI-0",
                b: "1",
                f: "AI"
            },
            {
                name: "Antigua and Barbuda",
                c: "1-AG-0",
                b: "1",
                f: "AG"
            },
            {
                name: "Argentina",
                c: "54-AR-0",
                b: "54",
                f: "AR"
            },
            {
                name: "Armenia",
                c: "374-AM-0",
                b: "374",
                f: "AM"
            },
            {
                name: "Aruba",
                c: "297-AW-0",
                b: "297",
                f: "AW"
            },
            {
                name: "Ascension Island",
                c: "247-AC-0",
                b: "247",
                f: "AC"
            },
            {
                name: "Australia",
                c: "61-AU-0",
                b: "61",
                f: "AU"
            },
            {
                name: "Austria",
                c: "43-AT-0",
                b: "43",
                f: "AT"
            },
            {
                name: "Azerbaijan",
                c: "994-AZ-0",
                b: "994",
                f: "AZ"
            },
            {
                name: "Bahamas",
                c: "1-BS-0",
                b: "1",
                f: "BS"
            },
            {
                name: "Bahrain",
                c: "973-BH-0",
                b: "973",
                f: "BH"
            },
            {
                name: "Bangladesh",
                c: "880-BD-0",
                b: "880",
                f: "BD"
            },
            {
                name: "Barbados",
                c: "1-BB-0",
                b: "1",
                f: "BB"
            },
            {
                name: "Belarus",
                c: "375-BY-0",
                b: "375",
                f: "BY"
            },
            {
                name: "Belgium",
                c: "32-BE-0",
                b: "32",
                f: "BE"
            },
            {
                name: "Belize",
                c: "501-BZ-0",
                b: "501",
                f: "BZ"
            },
            {
                name: "Benin",
                c: "229-BJ-0",
                b: "229",
                f: "BJ"
            },
            {
                name: "Bermuda",
                c: "1-BM-0",
                b: "1",
                f: "BM"
            },
            {
                name: "Bhutan",
                c: "975-BT-0",
                b: "975",
                f: "BT"
            },
            {
                name: "Bolivia",
                c: "591-BO-0",
                b: "591",
                f: "BO"
            },
            {
                name: "Bosnia and Herzegovina",
                c: "387-BA-0",
                b: "387",
                f: "BA"
            },
            {
                name: "Botswana",
                c: "267-BW-0",
                b: "267",
                f: "BW"
            },
            {
                name: "Brazil",
                c: "55-BR-0",
                b: "55",
                f: "BR"
            },
            {
                name: "British Indian Ocean Territory",
                c: "246-IO-0",
                b: "246",
                f: "IO"
            },
            {
                name: "British Virgin Islands",
                c: "1-VG-0",
                b: "1",
                f: "VG"
            },
            {
                name: "Brunei",
                c: "673-BN-0",
                b: "673",
                f: "BN"
            },
            {
                name: "Bulgaria",
                c: "359-BG-0",
                b: "359",
                f: "BG"
            },
            {
                name: "Burkina Faso",
                c: "226-BF-0",
                b: "226",
                f: "BF"
            },
            {
                name: "Burundi",
                c: "257-BI-0",
                b: "257",
                f: "BI"
            },
            {
                name: "Cambodia",
                c: "855-KH-0",
                b: "855",
                f: "KH"
            },
            {
                name: "Cameroon",
                c: "237-CM-0",
                b: "237",
                f: "CM"
            },
            {
                name: "Canada",
                c: "1-CA-0",
                b: "1",
                f: "CA"
            },
            {
                name: "Cape Verde",
                c: "238-CV-0",
                b: "238",
                f: "CV"
            },
            {
                name: "Caribbean Netherlands",
                c: "599-BQ-0",
                b: "599",
                f: "BQ"
            },
            {
                name: "Cayman Islands",
                c: "1-KY-0",
                b: "1",
                f: "KY"
            },
            {
                name: "Central African Republic",
                c: "236-CF-0",
                b: "236",
                f: "CF"
            },
            {
                name: "Chad",
                c: "235-TD-0",
                b: "235",
                f: "TD"
            },
            {
                name: "Chile",
                c: "56-CL-0",
                b: "56",
                f: "CL"
            },
            {
                name: "China",
                c: "86-CN-0",
                b: "86",
                f: "CN"
            },
            {
                name: "Christmas Island",
                c: "61-CX-0",
                b: "61",
                f: "CX"
            },
            {
                name: "Cocos [Keeling] Islands",
                c: "61-CC-0",
                b: "61",
                f: "CC"
            },
            {
                name: "Colombia",
                c: "57-CO-0",
                b: "57",
                f: "CO"
            },
            {
                name: "Comoros",
                c: "269-KM-0",
                b: "269",
                f: "KM"
            },
            {
                name: "Democratic Republic Congo",
                c: "243-CD-0",
                b: "243",
                f: "CD"
            },
            {
                name: "Republic of Congo",
                c: "242-CG-0",
                b: "242",
                f: "CG"
            },
            {
                name: "Cook Islands",
                c: "682-CK-0",
                b: "682",
                f: "CK"
            },
            {
                name: "Costa Rica",
                c: "506-CR-0",
                b: "506",
                f: "CR"
            },
            {
                name: "C\xf4te d'Ivoire",
                c: "225-CI-0",
                b: "225",
                f: "CI"
            },
            {
                name: "Croatia",
                c: "385-HR-0",
                b: "385",
                f: "HR"
            },
            {
                name: "Cuba",
                c: "53-CU-0",
                b: "53",
                f: "CU"
            },
            {
                name: "Cura\xe7ao",
                c: "599-CW-0",
                b: "599",
                f: "CW"
            },
            {
                name: "Cyprus",
                c: "357-CY-0",
                b: "357",
                f: "CY"
            },
            {
                name: "Czech Republic",
                c: "420-CZ-0",
                b: "420",
                f: "CZ"
            },
            {
                name: "Denmark",
                c: "45-DK-0",
                b: "45",
                f: "DK"
            },
            {
                name: "Djibouti",
                c: "253-DJ-0",
                b: "253",
                f: "DJ"
            },
            {
                name: "Dominica",
                c: "1-DM-0",
                b: "1",
                f: "DM"
            },
            {
                name: "Dominican Republic",
                c: "1-DO-0",
                b: "1",
                f: "DO"
            },
            {
                name: "East Timor",
                c: "670-TL-0",
                b: "670",
                f: "TL"
            },
            {
                name: "Ecuador",
                c: "593-EC-0",
                b: "593",
                f: "EC"
            },
            {
                name: "Egypt",
                c: "20-EG-0",
                b: "20",
                f: "EG"
            },
            {
                name: "El Salvador",
                c: "503-SV-0",
                b: "503",
                f: "SV"
            },
            {
                name: "Equatorial Guinea",
                c: "240-GQ-0",
                b: "240",
                f: "GQ"
            },
            {
                name: "Eritrea",
                c: "291-ER-0",
                b: "291",
                f: "ER"
            },
            {
                name: "Estonia",
                c: "372-EE-0",
                b: "372",
                f: "EE"
            },
            {
                name: "Ethiopia",
                c: "251-ET-0",
                b: "251",
                f: "ET"
            },
            {
                name: "Falkland Islands [Islas Malvinas]",
                c: "500-FK-0",
                b: "500",
                f: "FK"
            },
            {
                name: "Faroe Islands",
                c: "298-FO-0",
                b: "298",
                f: "FO"
            },
            {
                name: "Fiji",
                c: "679-FJ-0",
                b: "679",
                f: "FJ"
            },
            {
                name: "Finland",
                c: "358-FI-0",
                b: "358",
                f: "FI"
            },
            {
                name: "France",
                c: "33-FR-0",
                b: "33",
                f: "FR"
            },
            {
                name: "French Guiana",
                c: "594-GF-0",
                b: "594",
                f: "GF"
            },
            {
                name: "French Polynesia",
                c: "689-PF-0",
                b: "689",
                f: "PF"
            },
            {
                name: "Gabon",
                c: "241-GA-0",
                b: "241",
                f: "GA"
            },
            {
                name: "Gambia",
                c: "220-GM-0",
                b: "220",
                f: "GM"
            },
            {
                name: "Georgia",
                c: "995-GE-0",
                b: "995",
                f: "GE"
            },
            {
                name: "Germany",
                c: "49-DE-0",
                b: "49",
                f: "DE"
            },
            {
                name: "Ghana",
                c: "233-GH-0",
                b: "233",
                f: "GH"
            },
            {
                name: "Gibraltar",
                c: "350-GI-0",
                b: "350",
                f: "GI"
            },
            {
                name: "Greece",
                c: "30-GR-0",
                b: "30",
                f: "GR"
            },
            {
                name: "Greenland",
                c: "299-GL-0",
                b: "299",
                f: "GL"
            },
            {
                name: "Grenada",
                c: "1-GD-0",
                b: "1",
                f: "GD"
            },
            {
                name: "Guadeloupe",
                c: "590-GP-0",
                b: "590",
                f: "GP"
            },
            {
                name: "Guam",
                c: "1-GU-0",
                b: "1",
                f: "GU"
            },
            {
                name: "Guatemala",
                c: "502-GT-0",
                b: "502",
                f: "GT"
            },
            {
                name: "Guernsey",
                c: "44-GG-0",
                b: "44",
                f: "GG"
            },
            {
                name: "Guinea Conakry",
                c: "224-GN-0",
                b: "224",
                f: "GN"
            },
            {
                name: "Guinea-Bissau",
                c: "245-GW-0",
                b: "245",
                f: "GW"
            },
            {
                name: "Guyana",
                c: "592-GY-0",
                b: "592",
                f: "GY"
            },
            {
                name: "Haiti",
                c: "509-HT-0",
                b: "509",
                f: "HT"
            },
            {
                name: "Heard Island and McDonald Islands",
                c: "672-HM-0",
                b: "672",
                f: "HM"
            },
            {
                name: "Honduras",
                c: "504-HN-0",
                b: "504",
                f: "HN"
            },
            {
                name: "Hong Kong",
                c: "852-HK-0",
                b: "852",
                f: "HK"
            },
            {
                name: "Hungary",
                c: "36-HU-0",
                b: "36",
                f: "HU"
            },
            {
                name: "Iceland",
                c: "354-IS-0",
                b: "354",
                f: "IS"
            },
            {
                name: "India",
                c: "91-IN-0",
                b: "91",
                f: "IN"
            },
            {
                name: "Indonesia",
                c: "62-ID-0",
                b: "62",
                f: "ID"
            },
            {
                name: "Iran",
                c: "98-IR-0",
                b: "98",
                f: "IR"
            },
            {
                name: "Iraq",
                c: "964-IQ-0",
                b: "964",
                f: "IQ"
            },
            {
                name: "Ireland",
                c: "353-IE-0",
                b: "353",
                f: "IE"
            },
            {
                name: "Isle of Man",
                c: "44-IM-0",
                b: "44",
                f: "IM"
            },
            {
                name: "Israel",
                c: "972-IL-0",
                b: "972",
                f: "IL"
            },
            {
                name: "Italy",
                c: "39-IT-0",
                b: "39",
                f: "IT"
            },
            {
                name: "Jamaica",
                c: "1-JM-0",
                b: "1",
                f: "JM"
            },
            {
                name: "Japan",
                c: "81-JP-0",
                b: "81",
                f: "JP"
            },
            {
                name: "Jersey",
                c: "44-JE-0",
                b: "44",
                f: "JE"
            },
            {
                name: "Jordan",
                c: "962-JO-0",
                b: "962",
                f: "JO"
            },
            {
                name: "Kazakhstan",
                c: "7-KZ-0",
                b: "7",
                f: "KZ"
            },
            {
                name: "Kenya",
                c: "254-KE-0",
                b: "254",
                f: "KE"
            },
            {
                name: "Kiribati",
                c: "686-KI-0",
                b: "686",
                f: "KI"
            },
            {
                name: "Kosovo",
                c: "377-XK-0",
                b: "377",
                f: "XK"
            },
            {
                name: "Kosovo",
                c: "381-XK-0",
                b: "381",
                f: "XK"
            },
            {
                name: "Kosovo",
                c: "386-XK-0",
                b: "386",
                f: "XK"
            },
            {
                name: "Kuwait",
                c: "965-KW-0",
                b: "965",
                f: "KW"
            },
            {
                name: "Kyrgyzstan",
                c: "996-KG-0",
                b: "996",
                f: "KG"
            },
            {
                name: "Laos",
                c: "856-LA-0",
                b: "856",
                f: "LA"
            },
            {
                name: "Latvia",
                c: "371-LV-0",
                b: "371",
                f: "LV"
            },
            {
                name: "Lebanon",
                c: "961-LB-0",
                b: "961",
                f: "LB"
            },
            {
                name: "Lesotho",
                c: "266-LS-0",
                b: "266",
                f: "LS"
            },
            {
                name: "Liberia",
                c: "231-LR-0",
                b: "231",
                f: "LR"
            },
            {
                name: "Libya",
                c: "218-LY-0",
                b: "218",
                f: "LY"
            },
            {
                name: "Liechtenstein",
                c: "423-LI-0",
                b: "423",
                f: "LI"
            },
            {
                name: "Lithuania",
                c: "370-LT-0",
                b: "370",
                f: "LT"
            },
            {
                name: "Luxembourg",
                c: "352-LU-0",
                b: "352",
                f: "LU"
            },
            {
                name: "Macau",
                c: "853-MO-0",
                b: "853",
                f: "MO"
            },
            {
                name: "Macedonia",
                c: "389-MK-0",
                b: "389",
                f: "MK"
            },
            {
                name: "Madagascar",
                c: "261-MG-0",
                b: "261",
                f: "MG"
            },
            {
                name: "Malawi",
                c: "265-MW-0",
                b: "265",
                f: "MW"
            },
            {
                name: "Malaysia",
                c: "60-MY-0",
                b: "60",
                f: "MY"
            },
            {
                name: "Maldives",
                c: "960-MV-0",
                b: "960",
                f: "MV"
            },
            {
                name: "Mali",
                c: "223-ML-0",
                b: "223",
                f: "ML"
            },
            {
                name: "Malta",
                c: "356-MT-0",
                b: "356",
                f: "MT"
            },
            {
                name: "Marshall Islands",
                c: "692-MH-0",
                b: "692",
                f: "MH"
            },
            {
                name: "Martinique",
                c: "596-MQ-0",
                b: "596",
                f: "MQ"
            },
            {
                name: "Mauritania",
                c: "222-MR-0",
                b: "222",
                f: "MR"
            },
            {
                name: "Mauritius",
                c: "230-MU-0",
                b: "230",
                f: "MU"
            },
            {
                name: "Mayotte",
                c: "262-YT-0",
                b: "262",
                f: "YT"
            },
            {
                name: "Mexico",
                c: "52-MX-0",
                b: "52",
                f: "MX"
            },
            {
                name: "Micronesia",
                c: "691-FM-0",
                b: "691",
                f: "FM"
            },
            {
                name: "Moldova",
                c: "373-MD-0",
                b: "373",
                f: "MD"
            },
            {
                name: "Monaco",
                c: "377-MC-0",
                b: "377",
                f: "MC"
            },
            {
                name: "Mongolia",
                c: "976-MN-0",
                b: "976",
                f: "MN"
            },
            {
                name: "Montenegro",
                c: "382-ME-0",
                b: "382",
                f: "ME"
            },
            {
                name: "Montserrat",
                c: "1-MS-0",
                b: "1",
                f: "MS"
            },
            {
                name: "Morocco",
                c: "212-MA-0",
                b: "212",
                f: "MA"
            },
            {
                name: "Mozambique",
                c: "258-MZ-0",
                b: "258",
                f: "MZ"
            },
            {
                name: "Myanmar [Burma]",
                c: "95-MM-0",
                b: "95",
                f: "MM"
            },
            {
                name: "Namibia",
                c: "264-NA-0",
                b: "264",
                f: "NA"
            },
            {
                name: "Nauru",
                c: "674-NR-0",
                b: "674",
                f: "NR"
            },
            {
                name: "Nepal",
                c: "977-NP-0",
                b: "977",
                f: "NP"
            },
            {
                name: "Netherlands",
                c: "31-NL-0",
                b: "31",
                f: "NL"
            },
            {
                name: "New Caledonia",
                c: "687-NC-0",
                b: "687",
                f: "NC"
            },
            {
                name: "New Zealand",
                c: "64-NZ-0",
                b: "64",
                f: "NZ"
            },
            {
                name: "Nicaragua",
                c: "505-NI-0",
                b: "505",
                f: "NI"
            },
            {
                name: "Niger",
                c: "227-NE-0",
                b: "227",
                f: "NE"
            },
            {
                name: "Nigeria",
                c: "234-NG-0",
                b: "234",
                f: "NG"
            },
            {
                name: "Niue",
                c: "683-NU-0",
                b: "683",
                f: "NU"
            },
            {
                name: "Norfolk Island",
                c: "672-NF-0",
                b: "672",
                f: "NF"
            },
            {
                name: "North Korea",
                c: "850-KP-0",
                b: "850",
                f: "KP"
            },
            {
                name: "Northern Mariana Islands",
                c: "1-MP-0",
                b: "1",
                f: "MP"
            },
            {
                name: "Norway",
                c: "47-NO-0",
                b: "47",
                f: "NO"
            },
            {
                name: "Oman",
                c: "968-OM-0",
                b: "968",
                f: "OM"
            },
            {
                name: "Pakistan",
                c: "92-PK-0",
                b: "92",
                f: "PK"
            },
            {
                name: "Palau",
                c: "680-PW-0",
                b: "680",
                f: "PW"
            },
            {
                name: "Palestinian Territories",
                c: "970-PS-0",
                b: "970",
                f: "PS"
            },
            {
                name: "Panama",
                c: "507-PA-0",
                b: "507",
                f: "PA"
            },
            {
                name: "Papua New Guinea",
                c: "675-PG-0",
                b: "675",
                f: "PG"
            },
            {
                name: "Paraguay",
                c: "595-PY-0",
                b: "595",
                f: "PY"
            },
            {
                name: "Peru",
                c: "51-PE-0",
                b: "51",
                f: "PE"
            },
            {
                name: "Philippines",
                c: "63-PH-0",
                b: "63",
                f: "PH"
            },
            {
                name: "Poland",
                c: "48-PL-0",
                b: "48",
                f: "PL"
            },
            {
                name: "Portugal",
                c: "351-PT-0",
                b: "351",
                f: "PT"
            },
            {
                name: "Puerto Rico",
                c: "1-PR-0",
                b: "1",
                f: "PR"
            },
            {
                name: "Qatar",
                c: "974-QA-0",
                b: "974",
                f: "QA"
            },
            {
                name: "R\xe9union",
                c: "262-RE-0",
                b: "262",
                f: "RE"
            },
            {
                name: "Romania",
                c: "40-RO-0",
                b: "40",
                f: "RO"
            },
            {
                name: "Russia",
                c: "7-RU-0",
                b: "7",
                f: "RU"
            },
            {
                name: "Rwanda",
                c: "250-RW-0",
                b: "250",
                f: "RW"
            },
            {
                name: "Saint Barth\xe9lemy",
                c: "590-BL-0",
                b: "590",
                f: "BL"
            },
            {
                name: "Saint Helena",
                c: "290-SH-0",
                b: "290",
                f: "SH"
            },
            {
                name: "St. Kitts",
                c: "1-KN-0",
                b: "1",
                f: "KN"
            },
            {
                name: "St. Lucia",
                c: "1-LC-0",
                b: "1",
                f: "LC"
            },
            {
                name: "Saint Martin",
                c: "590-MF-0",
                b: "590",
                f: "MF"
            },
            {
                name: "Saint Pierre and Miquelon",
                c: "508-PM-0",
                b: "508",
                f: "PM"
            },
            {
                name: "St. Vincent",
                c: "1-VC-0",
                b: "1",
                f: "VC"
            },
            {
                name: "Samoa",
                c: "685-WS-0",
                b: "685",
                f: "WS"
            },
            {
                name: "San Marino",
                c: "378-SM-0",
                b: "378",
                f: "SM"
            },
            {
                name: "S\xe3o Tom\xe9 and Pr\xedncipe",
                c: "239-ST-0",
                b: "239",
                f: "ST"
            },
            {
                name: "Saudi Arabia",
                c: "966-SA-0",
                b: "966",
                f: "SA"
            },
            {
                name: "Senegal",
                c: "221-SN-0",
                b: "221",
                f: "SN"
            },
            {
                name: "Serbia",
                c: "381-RS-0",
                b: "381",
                f: "RS"
            },
            {
                name: "Seychelles",
                c: "248-SC-0",
                b: "248",
                f: "SC"
            },
            {
                name: "Sierra Leone",
                c: "232-SL-0",
                b: "232",
                f: "SL"
            },
            {
                name: "Singapore",
                c: "65-SG-0",
                b: "65",
                f: "SG"
            },
            {
                name: "Sint Maarten",
                c: "1-SX-0",
                b: "1",
                f: "SX"
            },
            {
                name: "Slovakia",
                c: "421-SK-0",
                b: "421",
                f: "SK"
            },
            {
                name: "Slovenia",
                c: "386-SI-0",
                b: "386",
                f: "SI"
            },
            {
                name: "Solomon Islands",
                c: "677-SB-0",
                b: "677",
                f: "SB"
            },
            {
                name: "Somalia",
                c: "252-SO-0",
                b: "252",
                f: "SO"
            },
            {
                name: "South Africa",
                c: "27-ZA-0",
                b: "27",
                f: "ZA"
            },
            {
                name: "South Georgia and the South Sandwich Islands",
                c: "500-GS-0",
                b: "500",
                f: "GS"
            },
            {
                name: "South Korea",
                c: "82-KR-0",
                b: "82",
                f: "KR"
            },
            {
                name: "South Sudan",
                c: "211-SS-0",
                b: "211",
                f: "SS"
            },
            {
                name: "Spain",
                c: "34-ES-0",
                b: "34",
                f: "ES"
            },
            {
                name: "Sri Lanka",
                c: "94-LK-0",
                b: "94",
                f: "LK"
            },
            {
                name: "Sudan",
                c: "249-SD-0",
                b: "249",
                f: "SD"
            },
            {
                name: "Suriname",
                c: "597-SR-0",
                b: "597",
                f: "SR"
            },
            {
                name: "Svalbard and Jan Mayen",
                c: "47-SJ-0",
                b: "47",
                f: "SJ"
            },
            {
                name: "Swaziland",
                c: "268-SZ-0",
                b: "268",
                f: "SZ"
            },
            {
                name: "Sweden",
                c: "46-SE-0",
                b: "46",
                f: "SE"
            },
            {
                name: "Switzerland",
                c: "41-CH-0",
                b: "41",
                f: "CH"
            },
            {
                name: "Syria",
                c: "963-SY-0",
                b: "963",
                f: "SY"
            },
            {
                name: "Taiwan",
                c: "886-TW-0",
                b: "886",
                f: "TW"
            },
            {
                name: "Tajikistan",
                c: "992-TJ-0",
                b: "992",
                f: "TJ"
            },
            {
                name: "Tanzania",
                c: "255-TZ-0",
                b: "255",
                f: "TZ"
            },
            {
                name: "Thailand",
                c: "66-TH-0",
                b: "66",
                f: "TH"
            },
            {
                name: "Togo",
                c: "228-TG-0",
                b: "228",
                f: "TG"
            },
            {
                name: "Tokelau",
                c: "690-TK-0",
                b: "690",
                f: "TK"
            },
            {
                name: "Tonga",
                c: "676-TO-0",
                b: "676",
                f: "TO"
            },
            {
                name: "Trinidad/Tobago",
                c: "1-TT-0",
                b: "1",
                f: "TT"
            },
            {
                name: "Tunisia",
                c: "216-TN-0",
                b: "216",
                f: "TN"
            },
            {
                name: "Turkey",
                c: "90-TR-0",
                b: "90",
                f: "TR"
            },
            {
                name: "Turkmenistan",
                c: "993-TM-0",
                b: "993",
                f: "TM"
            },
            {
                name: "Turks and Caicos Islands",
                c: "1-TC-0",
                b: "1",
                f: "TC"
            },
            {
                name: "Tuvalu",
                c: "688-TV-0",
                b: "688",
                f: "TV"
            },
            {
                name: "U.S. Virgin Islands",
                c: "1-VI-0",
                b: "1",
                f: "VI"
            },
            {
                name: "Uganda",
                c: "256-UG-0",
                b: "256",
                f: "UG"
            },
            {
                name: "Ukraine",
                c: "380-UA-0",
                b: "380",
                f: "UA"
            },
            {
                name: "United Arab Emirates",
                c: "971-AE-0",
                b: "971",
                f: "AE"
            },
            {
                name: "United Kingdom",
                c: "44-GB-0",
                b: "44",
                f: "GB"
            },
            {
                name: "United States",
                c: "1-US-0",
                b: "1",
                f: "US"
            },
            {
                name: "Uruguay",
                c: "598-UY-0",
                b: "598",
                f: "UY"
            },
            {
                name: "Uzbekistan",
                c: "998-UZ-0",
                b: "998",
                f: "UZ"
            },
            {
                name: "Vanuatu",
                c: "678-VU-0",
                b: "678",
                f: "VU"
            },
            {
                name: "Vatican City",
                c: "379-VA-0",
                b: "379",
                f: "VA"
            },
            {
                name: "Venezuela",
                c: "58-VE-0",
                b: "58",
                f: "VE"
            },
            {
                name: "Vietnam",
                c: "84-VN-0",
                b: "84",
                f: "VN"
            },
            {
                name: "Wallis and Futuna",
                c: "681-WF-0",
                b: "681",
                f: "WF"
            },
            {
                name: "Western Sahara",
                c: "212-EH-0",
                b: "212",
                f: "EH"
            },
            {
                name: "Yemen",
                c: "967-YE-0",
                b: "967",
                f: "YE"
            },
            {
                name: "Zambia",
                c: "260-ZM-0",
                b: "260",
                f: "ZM"
            },
            {
                name: "Zimbabwe",
                c: "263-ZW-0",
                b: "263",
                f: "ZW"
            }
        ];
        Uh(Rh);
        var Vh = new Oh(Rh);
        function Wh(a, b) {
            this.a = a;
            this.Aa = b;
        }
        function Xh(a) {
            a = Ua(a);
            var b = Ph(Vh, a);
            return 0 < b.length ? new Wh("1" == b[0].b ? "1-US-0" : b[0].c, Ua(a.substr(b[0].b.length + 1))) : null;
        }
        function Yh(a) {
            var b = Qh(a.a);
            if (!b) throw Error("Country ID " + a.a + " not found.");
            return "+" + b.b + a.Aa;
        }
        function Zh(a, b) {
            for(var c = 0; c < a.length; c++)if (!Ma($h, a[c]) && (null !== ai && a[c] in ai || Ma(b, a[c]))) return a[c];
            return null;
        }
        var $h = [
            "emailLink",
            "password",
            "phone"
        ], ai = {
            "facebook.com": "FacebookAuthProvider",
            "github.com": "GithubAuthProvider",
            "google.com": "GoogleAuthProvider",
            password: "EmailAuthProvider",
            "twitter.com": "TwitterAuthProvider",
            phone: "PhoneAuthProvider"
        };
        function bi() {
            this.a = new Hh;
            G(this.a, "autoUpgradeAnonymousUsers");
            G(this.a, "callbacks");
            G(this.a, "credentialHelper", ci);
            G(this.a, "immediateFederatedRedirect", !1);
            G(this.a, "popupMode", !1);
            G(this.a, "privacyPolicyUrl");
            G(this.a, "queryParameterForSignInSuccessUrl", "signInSuccessUrl");
            G(this.a, "queryParameterForWidgetMode", "mode");
            G(this.a, "signInFlow");
            G(this.a, "signInOptions");
            G(this.a, "signInSuccessUrl");
            G(this.a, "siteName");
            G(this.a, "tosUrl");
            G(this.a, "widgetUrl");
            G(this.a, "adminRestrictedOperation");
        }
        function di(a) {
            var b = !!a.a.get("autoUpgradeAnonymousUsers");
            b && !ei(a) && og('Missing "signInFailure" callback: "signInFailure" callback needs to be provided when "autoUpgradeAnonymousUsers" is set to true.', void 0);
            return b;
        }
        function fi(a) {
            a = a.a.get("signInOptions") || [];
            for(var b = [], c = 0; c < a.length; c++){
                var d = a[c];
                d = ta(d) ? d : {
                    provider: d
                };
                d.provider && b.push(d);
            }
            return b;
        }
        function gi(a, b) {
            a = fi(a);
            for(var c = 0; c < a.length; c++)if (a[c].provider === b) return a[c];
            return null;
        }
        function hi(a) {
            return fi(a).map(function(b) {
                return b.provider;
            });
        }
        function ii(a, b) {
            a = ji(a);
            for(var c = 0; c < a.length; c++)if (a[c].providerId === b) return a[c];
            return null;
        }
        function ji(a) {
            return fi(a).map(function(b) {
                if (ai[b.provider] || Ma(ki, b.provider)) {
                    b = {
                        providerId: b.provider,
                        S: b.providerName || null,
                        V: b.fullLabel || null,
                        ta: b.buttonColor || null,
                        za: b.iconUrl ? zc(Bc(b.iconUrl)).toString() : null
                    };
                    for(var c in b)null === b[c] && delete b[c];
                    return b;
                }
                return {
                    providerId: b.provider,
                    S: b.providerName || null,
                    V: b.fullLabel || null,
                    ta: b.buttonColor || null,
                    za: b.iconUrl ? zc(Bc(b.iconUrl)).toString() : null,
                    Ob: b.loginHintKey || null
                };
            });
        }
        function li(a) {
            var b = gi(a, (0, _appDefault.default).auth.GoogleAuthProvider.PROVIDER_ID), c;
            if (c = b && b.clientId) {
                a: {
                    if ("http:" === (window.location && window.location.protocol) || "https:" === (window.location && window.location.protocol)) {
                        for(d in a = a.a.get("credentialHelper"), mi)if (mi[d] === a) {
                            var d = mi[d];
                            break a;
                        }
                    }
                    d = ci;
                }
                c = d === ni;
            }
            return c ? b.clientId || null : null;
        }
        function oi(a) {
            a = gi(a, (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID);
            return !!(a && a.disableSignUp && a.disableSignUp.status);
        }
        function pi(a) {
            a = a.a.get("adminRestrictedOperation") || null;
            return !(!a || !a.status);
        }
        function qi(a) {
            var b = null;
            fi(a).forEach(function(d) {
                d.provider == (0, _appDefault.default).auth.PhoneAuthProvider.PROVIDER_ID && ta(d.recaptchaParameters) && !Array.isArray(d.recaptchaParameters) && (b = eb(d.recaptchaParameters));
            });
            if (b) {
                var c = [];
                ri.forEach(function(d) {
                    "undefined" !== typeof b[d] && (c.push(d), delete b[d]);
                });
                c.length && tg('The following provided "recaptchaParameters" keys are not allowed: ' + c.join(", "));
            }
            return b;
        }
        function si(a) {
            return (a = a.a.get("adminRestrictedOperation")) && a.adminEmail ? a.adminEmail : null;
        }
        function ti(a) {
            if (a = a.a.get("adminRestrictedOperation") || null) {
                var b = a.helpLink || null;
                if (b && "string" === typeof b) return function() {
                    rf(b);
                };
            }
            return null;
        }
        function ui(a) {
            return (a = gi(a, (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID)) && a.disableSignUp && a.disableSignUp.adminEmail || null;
        }
        function vi(a) {
            if ((a = gi(a, (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID)) && a.disableSignUp) {
                var b = a.disableSignUp.helpLink || null;
                if (b && "string" === typeof b) return function() {
                    rf(b);
                };
            }
            return null;
        }
        function wi(a, b) {
            a = (a = gi(a, b)) && a.scopes;
            return Array.isArray(a) ? a : [];
        }
        function xi(a, b) {
            a = (a = gi(a, b)) && a.customParameters;
            return ta(a) ? (a = eb(a), b === (0, _appDefault.default).auth.GoogleAuthProvider.PROVIDER_ID && delete a.login_hint, b === (0, _appDefault.default).auth.GithubAuthProvider.PROVIDER_ID && delete a.login, a) : null;
        }
        function yi(a) {
            a = gi(a, (0, _appDefault.default).auth.PhoneAuthProvider.PROVIDER_ID);
            var b = null;
            a && "string" === typeof a.loginHint && (b = Xh(a.loginHint));
            return a && a.defaultNationalNumber || b && b.Aa || null;
        }
        function zi(a) {
            var b = (a = gi(a, (0, _appDefault.default).auth.PhoneAuthProvider.PROVIDER_ID)) && a.defaultCountry || null;
            b = b && Sh(b);
            var c = null;
            a && "string" === typeof a.loginHint && (c = Xh(a.loginHint));
            return b && b[0] || c && Qh(c.a) || null;
        }
        function Ai(a) {
            a = gi(a, (0, _appDefault.default).auth.PhoneAuthProvider.PROVIDER_ID);
            if (!a) return null;
            var b = a.whitelistedCountries, c = a.blacklistedCountries;
            if ("undefined" !== typeof b && (!Array.isArray(b) || 0 == b.length)) throw Error("WhitelistedCountries must be a non-empty array.");
            if ("undefined" !== typeof c && !Array.isArray(c)) throw Error("BlacklistedCountries must be an array.");
            if (b && c) throw Error("Both whitelistedCountries and blacklistedCountries are provided.");
            if (!b && !c) return Rh;
            a = [];
            if (b) {
                c = {};
                for(var d = 0; d < b.length; d++){
                    var e = Th(b[d]);
                    for(var f = 0; f < e.length; f++)c[e[f].c] = e[f];
                }
                for(var g in c)c.hasOwnProperty(g) && a.push(c[g]);
            } else {
                g = {};
                for(b = 0; b < c.length; b++)for(e = Th(c[b]), d = 0; d < e.length; d++)g[e[d].c] = e[d];
                for(e = 0; e < Rh.length; e++)null !== g && Rh[e].c in g || a.push(Rh[e]);
            }
            return a;
        }
        function Bi(a) {
            return Jh(a.a, "queryParameterForWidgetMode");
        }
        function H(a) {
            var b = a.a.get("tosUrl") || null;
            a = a.a.get("privacyPolicyUrl") || null;
            b && !a && tg("Privacy Policy URL is missing, the link will not be displayed.");
            if (b && a) {
                if ("function" === typeof b) return b;
                if ("string" === typeof b) return function() {
                    rf(b);
                };
            }
            return null;
        }
        function J(a) {
            var b = a.a.get("tosUrl") || null, c = a.a.get("privacyPolicyUrl") || null;
            c && !b && tg("Term of Service URL is missing, the link will not be displayed.");
            if (b && c) {
                if ("function" === typeof c) return c;
                if ("string" === typeof c) return function() {
                    rf(c);
                };
            }
            return null;
        }
        function Ci(a) {
            return (a = gi(a, (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID)) && "undefined" !== typeof a.requireDisplayName ? !!a.requireDisplayName : !0;
        }
        function Di(a) {
            a = gi(a, (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID);
            return !(!a || a.signInMethod !== (0, _appDefault.default).auth.EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD);
        }
        function Ei(a) {
            a = gi(a, (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID);
            return !(!a || !a.forceSameDevice);
        }
        function Fi(a) {
            if (Di(a)) {
                var b = {
                    url: tf(),
                    handleCodeInApp: !0
                };
                (a = gi(a, (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID)) && "function" === typeof a.emailLinkSignIn && gb(b, a.emailLinkSignIn());
                a = b.url;
                var c = tf();
                c instanceof vb || (c = Jb(c));
                a instanceof vb || (a = Jb(a));
                var d = c;
                c = new vb(d);
                var e = !!a.j;
                e ? wb(c, a.j) : e = !!a.A;
                e ? c.A = a.A : e = !!a.h;
                e ? c.h = a.h : e = null != a.C;
                var f = a.g;
                if (e) xb(c, a.C);
                else if (e = !!a.g) {
                    if ("/" != f.charAt(0) && (d.h && !d.g ? f = "/" + f : (d = c.g.lastIndexOf("/"), -1 != d && (f = c.g.substr(0, d + 1) + f))), ".." == f || "." == f) f = "";
                    else if (-1 != f.indexOf("./") || -1 != f.indexOf("/.")) {
                        d = 0 == f.lastIndexOf("/", 0);
                        f = f.split("/");
                        for(var g = [], h = 0; h < f.length;){
                            var k = f[h++];
                            "." == k ? d && h == f.length && g.push("") : ".." == k ? ((1 < g.length || 1 == g.length && "" != g[0]) && g.pop(), d && h == f.length && g.push("")) : (g.push(k), d = !0);
                        }
                        f = g.join("/");
                    }
                }
                e ? c.g = f : e = "" !== a.a.toString();
                e ? yb(c, zb(a.a)) : e = !!a.s;
                e && (c.s = a.s);
                b.url = c.toString();
                return b;
            }
            return null;
        }
        function Gi(a) {
            var b = !!a.a.get("immediateFederatedRedirect"), c = hi(a);
            a = Hi(a);
            return b && 1 == c.length && !Ma($h, c[0]) && a == Ii;
        }
        function Hi(a) {
            a = a.a.get("signInFlow");
            for(var b in Ji)if (Ji[b] == a) return Ji[b];
            return Ii;
        }
        function Ki(a) {
            return Li(a).signInSuccess || null;
        }
        function Mi(a) {
            return Li(a).signInSuccessWithAuthResult || null;
        }
        function ei(a) {
            return Li(a).signInFailure || null;
        }
        function Li(a) {
            return a.a.get("callbacks") || {};
        }
        var ni = "googleyolo", ci = "none", mi = {
            nc: ni,
            NONE: ci
        }, Ii = "redirect", Ji = {
            qc: "popup",
            rc: Ii
        }, Ni = {
            mc: "callback",
            RECOVER_EMAIL: "recoverEmail",
            sc: "resetPassword",
            REVERT_SECOND_FACTOR_ADDITION: "revertSecondFactorAddition",
            tc: "select",
            uc: "signIn",
            VERIFY_AND_CHANGE_EMAIL: "verifyAndChangeEmail",
            VERIFY_EMAIL: "verifyEmail"
        }, ki = [
            "anonymous"
        ], ri = [
            "sitekey",
            "tabindex",
            "callback",
            "expired-callback"
        ];
        var Oi, Pi, Qi, Ri, K = {};
        function L(a, b, c, d) {
            K[a].apply(null, Array.prototype.slice.call(arguments, 1));
        }
        function Si(a) {
            if (a.classList) return a.classList;
            a = a.className;
            return q(a) && a.match(/\S+/g) || [];
        }
        function Ti(a, b) {
            return a.classList ? a.classList.contains(b) : Ma(Si(a), b);
        }
        function Ui(a, b) {
            a.classList ? a.classList.add(b) : Ti(a, b) || (a.className += 0 < a.className.length ? " " + b : b);
        }
        function Vi(a, b) {
            a.classList ? a.classList.remove(b) : Ti(a, b) && (a.className = Ja(Si(a), function(c) {
                return c != b;
            }).join(" "));
        }
        function Wi(a) {
            var b = a.type;
            switch(q(b) && b.toLowerCase()){
                case "checkbox":
                case "radio":
                    return a.checked ? a.value : null;
                case "select-one":
                    return b = a.selectedIndex, 0 <= b ? a.options[b].value : null;
                case "select-multiple":
                    b = [];
                    for(var c, d = 0; c = a.options[d]; d++)c.selected && b.push(c.value);
                    return b.length ? b : null;
                default:
                    return null != a.value ? a.value : null;
            }
        }
        function Xi(a, b) {
            var c = a.type;
            switch(q(c) && c.toLowerCase()){
                case "checkbox":
                case "radio":
                    a.checked = b;
                    break;
                case "select-one":
                    a.selectedIndex = -1;
                    if (q(b)) {
                        for(var d = 0; c = a.options[d]; d++)if (c.value == b) {
                            c.selected = !0;
                            break;
                        }
                    }
                    break;
                case "select-multiple":
                    q(b) && (b = [
                        b
                    ]);
                    for(d = 0; c = a.options[d]; d++)if (c.selected = !1, b) for(var e, f = 0; e = b[f]; f++)c.value == e && (c.selected = !0);
                    break;
                default:
                    a.value = null != b ? b : "";
            }
        }
        function Yi(a) {
            if (a.altKey && !a.ctrlKey || a.metaKey || 112 <= a.keyCode && 123 >= a.keyCode) return !1;
            if (Zi(a.keyCode)) return !0;
            switch(a.keyCode){
                case 18:
                case 20:
                case 93:
                case 17:
                case 40:
                case 35:
                case 27:
                case 36:
                case 45:
                case 37:
                case 224:
                case 91:
                case 144:
                case 12:
                case 34:
                case 33:
                case 19:
                case 255:
                case 44:
                case 39:
                case 145:
                case 16:
                case 38:
                case 252:
                case 224:
                case 92:
                    return !1;
                case 0:
                    return !dc;
                default:
                    return 166 > a.keyCode || 183 < a.keyCode;
            }
        }
        function $i(a, b, c, d, e, f) {
            if (ec && !mc("525")) return !0;
            if (gc && e) return Zi(a);
            if (e && !d) return !1;
            if (!dc) {
                "number" == typeof b && (b = aj(b));
                var g = 17 == b || 18 == b || gc && 91 == b;
                if ((!c || gc) && g || gc && 16 == b && (d || f)) return !1;
            }
            if ((ec || bc) && d && c) switch(a){
                case 220:
                case 219:
                case 221:
                case 192:
                case 186:
                case 189:
                case 187:
                case 188:
                case 190:
                case 191:
                case 192:
                case 222:
                    return !1;
            }
            if (z && d && b == a) return !1;
            switch(a){
                case 13:
                    return dc ? f || e ? !1 : !(c && d) : !0;
                case 27:
                    return !(ec || bc || dc);
            }
            return dc && (d || e || f) ? !1 : Zi(a);
        }
        function Zi(a) {
            if (48 <= a && 57 >= a || 96 <= a && 106 >= a || 65 <= a && 90 >= a || (ec || bc) && 0 == a) return !0;
            switch(a){
                case 32:
                case 43:
                case 63:
                case 64:
                case 107:
                case 109:
                case 110:
                case 111:
                case 186:
                case 59:
                case 189:
                case 187:
                case 61:
                case 188:
                case 190:
                case 191:
                case 192:
                case 222:
                case 219:
                case 220:
                case 221:
                case 163:
                    return !0;
                case 173:
                    return dc;
                default:
                    return !1;
            }
        }
        function aj(a) {
            if (dc) a = bj(a);
            else if (gc && ec) switch(a){
                case 93:
                    a = 91;
            }
            return a;
        }
        function bj(a) {
            switch(a){
                case 61:
                    return 187;
                case 59:
                    return 186;
                case 173:
                    return 189;
                case 224:
                    return 91;
                case 0:
                    return 224;
                default:
                    return a;
            }
        }
        function cj(a) {
            E.call(this);
            this.a = a;
            ke(a, "keydown", this.g, !1, this);
            ke(a, "click", this.h, !1, this);
        }
        w(cj, E);
        cj.prototype.g = function(a) {
            (13 == a.keyCode || ec && 3 == a.keyCode) && dj(this, a);
        };
        cj.prototype.h = function(a) {
            dj(this, a);
        };
        function dj(a, b) {
            var c = new ej(b);
            if (xe(a, c)) {
                c = new fj(b);
                try {
                    xe(a, c);
                } finally{
                    b.stopPropagation();
                }
            }
        }
        cj.prototype.o = function() {
            cj.K.o.call(this);
            se(this.a, "keydown", this.g, !1, this);
            se(this.a, "click", this.h, !1, this);
            delete this.a;
        };
        function fj(a) {
            Zd.call(this, a.a);
            this.type = "action";
        }
        w(fj, Zd);
        function ej(a) {
            Zd.call(this, a.a);
            this.type = "beforeaction";
        }
        w(ej, Zd);
        function gj(a) {
            E.call(this);
            this.a = a;
            a = z ? "focusout" : "blur";
            this.g = ke(this.a, z ? "focusin" : "focus", this, !z);
            this.h = ke(this.a, a, this, !z);
        }
        w(gj, E);
        gj.prototype.handleEvent = function(a) {
            var b = new Zd(a.a);
            b.type = "focusin" == a.type || "focus" == a.type ? "focusin" : "focusout";
            xe(this, b);
        };
        gj.prototype.o = function() {
            gj.K.o.call(this);
            te(this.g);
            te(this.h);
            delete this.a;
        };
        function hj(a, b) {
            E.call(this);
            this.g = a || 1;
            this.a = b || n;
            this.h = r(this.gc, this);
            this.j = Aa();
        }
        w(hj, E);
        l = hj.prototype;
        l.Ka = !1;
        l.aa = null;
        l.gc = function() {
            if (this.Ka) {
                var a = Aa() - this.j;
                0 < a && a < .8 * this.g ? this.aa = this.a.setTimeout(this.h, this.g - a) : (this.aa && (this.a.clearTimeout(this.aa), this.aa = null), xe(this, "tick"), this.Ka && (ij(this), this.start()));
            }
        };
        l.start = function() {
            this.Ka = !0;
            this.aa || (this.aa = this.a.setTimeout(this.h, this.g), this.j = Aa());
        };
        function ij(a) {
            a.Ka = !1;
            a.aa && (a.a.clearTimeout(a.aa), a.aa = null);
        }
        l.o = function() {
            hj.K.o.call(this);
            ij(this);
            delete this.a;
        };
        function jj(a, b) {
            if (sa(a)) b && (a = r(a, b));
            else if (a && "function" == typeof a.handleEvent) a = r(a.handleEvent, a);
            else throw Error("Invalid listener argument");
            return 2147483647 < Number(0) ? -1 : n.setTimeout(a, 0);
        }
        function kj(a) {
            Pd.call(this);
            this.g = a;
            this.a = {};
        }
        w(kj, Pd);
        var lj = [];
        function mj(a, b, c, d) {
            qa(c) || (c && (lj[0] = c.toString()), c = lj);
            for(var e = 0; e < c.length; e++){
                var f = ke(b, c[e], d || a.handleEvent, !1, a.g || a);
                if (!f) break;
                a.a[f.key] = f;
            }
        }
        function nj(a) {
            db(a.a, function(b, c) {
                this.a.hasOwnProperty(c) && te(b);
            }, a);
            a.a = {};
        }
        kj.prototype.o = function() {
            kj.K.o.call(this);
            nj(this);
        };
        kj.prototype.handleEvent = function() {
            throw Error("EventHandler.handleEvent not implemented");
        };
        function oj(a) {
            E.call(this);
            this.a = null;
            this.g = a;
            a = z || bc || ec && !mc("531") && "TEXTAREA" == a.tagName;
            this.h = new kj(this);
            mj(this.h, this.g, a ? [
                "keydown",
                "paste",
                "cut",
                "drop",
                "input"
            ] : "input", this);
        }
        w(oj, E);
        oj.prototype.handleEvent = function(a) {
            if ("input" == a.type) z && mc(10) && 0 == a.keyCode && 0 == a.j || (pj(this), xe(this, qj(a)));
            else if ("keydown" != a.type || Yi(a)) {
                var b = "keydown" == a.type ? this.g.value : null;
                z && 229 == a.keyCode && (b = null);
                var c = qj(a);
                pj(this);
                this.a = jj(function() {
                    this.a = null;
                    this.g.value != b && xe(this, c);
                }, this);
            }
        };
        function pj(a) {
            null != a.a && (n.clearTimeout(a.a), a.a = null);
        }
        function qj(a) {
            a = new Zd(a.a);
            a.type = "input";
            return a;
        }
        oj.prototype.o = function() {
            oj.K.o.call(this);
            this.h.m();
            pj(this);
            delete this.g;
        };
        function rj(a, b) {
            E.call(this);
            a && (this.Oa && sj(this), this.qa = a, this.Na = ke(this.qa, "keypress", this, b), this.Ya = ke(this.qa, "keydown", this.Jb, b, this), this.Oa = ke(this.qa, "keyup", this.Kb, b, this));
        }
        w(rj, E);
        l = rj.prototype;
        l.qa = null;
        l.Na = null;
        l.Ya = null;
        l.Oa = null;
        l.R = -1;
        l.X = -1;
        l.Ua = !1;
        var tj = {
            3: 13,
            12: 144,
            63232: 38,
            63233: 40,
            63234: 37,
            63235: 39,
            63236: 112,
            63237: 113,
            63238: 114,
            63239: 115,
            63240: 116,
            63241: 117,
            63242: 118,
            63243: 119,
            63244: 120,
            63245: 121,
            63246: 122,
            63247: 123,
            63248: 44,
            63272: 46,
            63273: 36,
            63275: 35,
            63276: 33,
            63277: 34,
            63289: 144,
            63302: 45
        }, uj = {
            Up: 38,
            Down: 40,
            Left: 37,
            Right: 39,
            Enter: 13,
            F1: 112,
            F2: 113,
            F3: 114,
            F4: 115,
            F5: 116,
            F6: 117,
            F7: 118,
            F8: 119,
            F9: 120,
            F10: 121,
            F11: 122,
            F12: 123,
            "U+007F": 46,
            Home: 36,
            End: 35,
            PageUp: 33,
            PageDown: 34,
            Insert: 45
        }, vj = !ec || mc("525"), wj = gc && dc;
        l = rj.prototype;
        l.Jb = function(a) {
            if (ec || bc) {
                if (17 == this.R && !a.ctrlKey || 18 == this.R && !a.altKey || gc && 91 == this.R && !a.metaKey) this.X = this.R = -1;
            }
            -1 == this.R && (a.ctrlKey && 17 != a.keyCode ? this.R = 17 : a.altKey && 18 != a.keyCode ? this.R = 18 : a.metaKey && 91 != a.keyCode && (this.R = 91));
            vj && !$i(a.keyCode, this.R, a.shiftKey, a.ctrlKey, a.altKey, a.metaKey) ? this.handleEvent(a) : (this.X = aj(a.keyCode), wj && (this.Ua = a.altKey));
        };
        l.Kb = function(a) {
            this.X = this.R = -1;
            this.Ua = a.altKey;
        };
        l.handleEvent = function(a) {
            var b = a.a, c = b.altKey;
            if (z && "keypress" == a.type) {
                var d = this.X;
                var e = 13 != d && 27 != d ? b.keyCode : 0;
            } else (ec || bc) && "keypress" == a.type ? (d = this.X, e = 0 <= b.charCode && 63232 > b.charCode && Zi(d) ? b.charCode : 0) : ac && !ec ? (d = this.X, e = Zi(d) ? b.keyCode : 0) : ("keypress" == a.type ? (wj && (c = this.Ua), b.keyCode == b.charCode ? 32 > b.keyCode ? (d = b.keyCode, e = 0) : (d = this.X, e = b.charCode) : (d = b.keyCode || this.X, e = b.charCode || 0)) : (d = b.keyCode || this.X, e = b.charCode || 0), gc && 63 == e && 224 == d && (d = 191));
            var f = d = aj(d);
            d ? 63232 <= d && d in tj ? f = tj[d] : 25 == d && a.shiftKey && (f = 9) : b.keyIdentifier && b.keyIdentifier in uj && (f = uj[b.keyIdentifier]);
            dc && vj && "keypress" == a.type && !$i(f, this.R, a.shiftKey, a.ctrlKey, c, a.metaKey) || (a = f == this.R, this.R = f, b = new xj(f, e, a, b), b.altKey = c, xe(this, b));
        };
        l.N = function() {
            return this.qa;
        };
        function sj(a) {
            a.Na && (te(a.Na), te(a.Ya), te(a.Oa), a.Na = null, a.Ya = null, a.Oa = null);
            a.qa = null;
            a.R = -1;
            a.X = -1;
        }
        l.o = function() {
            rj.K.o.call(this);
            sj(this);
        };
        function xj(a, b, c, d) {
            Zd.call(this, d);
            this.type = "key";
            this.keyCode = a;
            this.j = b;
            this.repeat = c;
        }
        w(xj, Zd);
        function yj(a, b, c, d) {
            this.top = a;
            this.right = b;
            this.bottom = c;
            this.left = d;
        }
        yj.prototype.toString = function() {
            return "(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)";
        };
        yj.prototype.ceil = function() {
            this.top = Math.ceil(this.top);
            this.right = Math.ceil(this.right);
            this.bottom = Math.ceil(this.bottom);
            this.left = Math.ceil(this.left);
            return this;
        };
        yj.prototype.floor = function() {
            this.top = Math.floor(this.top);
            this.right = Math.floor(this.right);
            this.bottom = Math.floor(this.bottom);
            this.left = Math.floor(this.left);
            return this;
        };
        yj.prototype.round = function() {
            this.top = Math.round(this.top);
            this.right = Math.round(this.right);
            this.bottom = Math.round(this.bottom);
            this.left = Math.round(this.left);
            return this;
        };
        function zj(a, b) {
            var c = Sc(a);
            return c.defaultView && c.defaultView.getComputedStyle && (a = c.defaultView.getComputedStyle(a, null)) ? a[b] || a.getPropertyValue(b) || "" : "";
        }
        function Aj(a) {
            try {
                var b = a.getBoundingClientRect();
            } catch (c) {
                return {
                    left: 0,
                    top: 0,
                    right: 0,
                    bottom: 0
                };
            }
            z && a.ownerDocument.body && (a = a.ownerDocument, b.left -= a.documentElement.clientLeft + a.body.clientLeft, b.top -= a.documentElement.clientTop + a.body.clientTop);
            return b;
        }
        function Bj(a, b) {
            b = b || Yc(document);
            var c = b || Yc(document);
            var d = Cj(a), e = Cj(c);
            if (!z || 9 <= Number(nc)) {
                g = zj(c, "borderLeftWidth");
                var f = zj(c, "borderRightWidth");
                h = zj(c, "borderTopWidth");
                k = zj(c, "borderBottomWidth");
                f = new yj(parseFloat(h), parseFloat(f), parseFloat(k), parseFloat(g));
            } else {
                var g = Dj(c, "borderLeft");
                f = Dj(c, "borderRight");
                var h = Dj(c, "borderTop"), k = Dj(c, "borderBottom");
                f = new yj(h, f, k, g);
            }
            c == Yc(document) ? (g = d.a - c.scrollLeft, d = d.g - c.scrollTop, !z || 10 <= Number(nc) || (g += f.left, d += f.top)) : (g = d.a - e.a - f.left, d = d.g - e.g - f.top);
            e = a.offsetWidth;
            f = a.offsetHeight;
            h = ec && !e && !f;
            ka(e) && !h || !a.getBoundingClientRect ? a = new Pc(e, f) : (a = Aj(a), a = new Pc(a.right - a.left, a.bottom - a.top));
            e = c.clientHeight - a.height;
            f = c.scrollLeft;
            h = c.scrollTop;
            f += Math.min(g, Math.max(g - (c.clientWidth - a.width), 0));
            h += Math.min(d, Math.max(d - e, 0));
            c = new Oc(f, h);
            b.scrollLeft = c.a;
            b.scrollTop = c.g;
        }
        function Cj(a) {
            var b = Sc(a), c = new Oc(0, 0);
            var d = b ? Sc(b) : document;
            d = !z || 9 <= Number(nc) || "CSS1Compat" == Qc(d).a.compatMode ? d.documentElement : d.body;
            if (a == d) return c;
            a = Aj(a);
            d = Qc(b).a;
            b = Yc(d);
            d = d.parentWindow || d.defaultView;
            b = z && mc("10") && d.pageYOffset != b.scrollTop ? new Oc(b.scrollLeft, b.scrollTop) : new Oc(d.pageXOffset || b.scrollLeft, d.pageYOffset || b.scrollTop);
            c.a = a.left + b.a;
            c.g = a.top + b.g;
            return c;
        }
        var Ej = {
            thin: 2,
            medium: 4,
            thick: 6
        };
        function Dj(a, b) {
            if ("none" == (a.currentStyle ? a.currentStyle[b + "Style"] : null)) return 0;
            var c = a.currentStyle ? a.currentStyle[b + "Width"] : null;
            if (c in Ej) a = Ej[c];
            else if (/^\d+px?$/.test(c)) a = parseInt(c, 10);
            else {
                b = a.style.left;
                var d = a.runtimeStyle.left;
                a.runtimeStyle.left = a.currentStyle.left;
                a.style.left = c;
                c = a.style.pixelLeft;
                a.style.left = b;
                a.runtimeStyle.left = d;
                a = +c;
            }
            return a;
        }
        function Fj() {}
        oa(Fj);
        Fj.prototype.a = 0;
        function Gj(a) {
            E.call(this);
            this.s = a || Qc();
            this.cb = null;
            this.na = !1;
            this.g = null;
            this.L = void 0;
            this.oa = this.Ea = this.Y = null;
        }
        w(Gj, E);
        l = Gj.prototype;
        l.Lb = Fj.Xa();
        l.N = function() {
            return this.g;
        };
        function M(a, b) {
            return a.g ? Vc(b, a.g || a.s.a) : null;
        }
        function Hj(a) {
            a.L || (a.L = new kj(a));
            return a.L;
        }
        l.Za = function(a) {
            if (this.Y && this.Y != a) throw Error("Method not supported");
            Gj.K.Za.call(this, a);
        };
        l.kb = function() {
            this.g = this.s.a.createElement("DIV");
        };
        l.render = function(a) {
            if (this.na) throw Error("Component already rendered");
            this.g || this.kb();
            a ? a.insertBefore(this.g, null) : this.s.a.body.appendChild(this.g);
            this.Y && !this.Y.na || this.v();
        };
        l.v = function() {
            this.na = !0;
            Ij(this, function(a) {
                !a.na && a.N() && a.v();
            });
        };
        l.ya = function() {
            Ij(this, function(a) {
                a.na && a.ya();
            });
            this.L && nj(this.L);
            this.na = !1;
        };
        l.o = function() {
            this.na && this.ya();
            this.L && (this.L.m(), delete this.L);
            Ij(this, function(a) {
                a.m();
            });
            this.g && Zc(this.g);
            this.Y = this.g = this.oa = this.Ea = null;
            Gj.K.o.call(this);
        };
        function Ij(a, b) {
            a.Ea && Ha(a.Ea, b, void 0);
        }
        l.removeChild = function(a, b) {
            if (a) {
                var c = q(a) ? a : a.cb || (a.cb = ":" + (a.Lb.a++).toString(36));
                this.oa && c ? (a = this.oa, a = (null !== a && c in a ? a[c] : void 0) || null) : a = null;
                if (c && a) {
                    var d = this.oa;
                    c in d && delete d[c];
                    Na(this.Ea, a);
                    b && (a.ya(), a.g && Zc(a.g));
                    b = a;
                    if (null == b) throw Error("Unable to set parent component");
                    b.Y = null;
                    Gj.K.Za.call(b, null);
                }
            }
            if (!a) throw Error("Child is not in parent component");
            return a;
        };
        function N(a, b) {
            var c = ad(a, "firebaseui-textfield");
            b ? (Vi(a, "firebaseui-input-invalid"), Ui(a, "firebaseui-input"), c && Vi(c, "firebaseui-textfield-invalid")) : (Vi(a, "firebaseui-input"), Ui(a, "firebaseui-input-invalid"), c && Ui(c, "firebaseui-textfield-invalid"));
        }
        function Jj(a, b, c) {
            b = new oj(b);
            Sd(a, za(Td, b));
            mj(Hj(a), b, "input", c);
        }
        function Kj(a, b, c) {
            b = new rj(b);
            Sd(a, za(Td, b));
            mj(Hj(a), b, "key", function(d) {
                13 == d.keyCode && (d.stopPropagation(), d.preventDefault(), c(d));
            });
        }
        function Lj(a, b, c) {
            b = new gj(b);
            Sd(a, za(Td, b));
            mj(Hj(a), b, "focusin", c);
        }
        function Mj(a, b, c) {
            b = new gj(b);
            Sd(a, za(Td, b));
            mj(Hj(a), b, "focusout", c);
        }
        function O(a, b, c) {
            b = new cj(b);
            Sd(a, za(Td, b));
            mj(Hj(a), b, "action", function(d) {
                d.stopPropagation();
                d.preventDefault();
                c(d);
            });
        }
        function Nj(a) {
            Ui(a, "firebaseui-hidden");
        }
        function Oj(a, b) {
            b && $c(a, b);
            Vi(a, "firebaseui-hidden");
        }
        function Pj(a) {
            return !Ti(a, "firebaseui-hidden") && "none" != a.style.display;
        }
        function Qj(a) {
            a = a || {};
            var b = a.email, c = a.disabled, d = '<div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label"><label class="mdl-textfield__label firebaseui-label" for="ui-sign-in-email-input">';
            d = a.wc ? d + "Enter new email address" : d + "Email";
            d += '</label><input type="email" name="email" id="ui-sign-in-email-input" autocomplete="username" class="mdl-textfield__input firebaseui-input firebaseui-id-email" value="' + ud(null != b ? b : "") + '"' + (c ? "disabled" : "") + '></div><div class="firebaseui-error-wrapper"><p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden firebaseui-id-email-error"></p></div>';
            return B(d);
        }
        function Rj(a) {
            a = a || {};
            a = a.label;
            var b = '<button type="submit" class="firebaseui-id-submit firebaseui-button mdl-button mdl-js-button mdl-button--raised mdl-button--colored">';
            b = a ? b + A(a) : b + "Next";
            return B(b + "</button>");
        }
        function Sj() {
            var a = "" + Rj({
                label: D("Sign In")
            });
            return B(a);
        }
        function Tj() {
            var a = "" + Rj({
                label: D("Save")
            });
            return B(a);
        }
        function Uj() {
            var a = "" + Rj({
                label: D("Continue")
            });
            return B(a);
        }
        function Vj(a) {
            a = a || {};
            a = a.label;
            var b = '<div class="firebaseui-new-password-component"><div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label"><label class="mdl-textfield__label firebaseui-label" for="ui-sign-in-new-password-input">';
            b = a ? b + A(a) : b + "Choose password";
            return B(b + '</label><input type="password" name="newPassword" id="ui-sign-in-new-password-input" autocomplete="new-password" class="mdl-textfield__input firebaseui-input firebaseui-id-new-password"></div><a href="javascript:void(0)" class="firebaseui-input-floating-button firebaseui-id-password-toggle firebaseui-input-toggle-on firebaseui-input-toggle-blur"></a><div class="firebaseui-error-wrapper"><p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden firebaseui-id-new-password-error"></p></div></div>');
        }
        function Wj() {
            var a = {};
            var b = '<div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label"><label class="mdl-textfield__label firebaseui-label" for="ui-sign-in-password-input">';
            b = a.current ? b + "Current password" : b + "Password";
            return B(b + '</label><input type="password" name="password" id="ui-sign-in-password-input" autocomplete="current-password" class="mdl-textfield__input firebaseui-input firebaseui-id-password"></div><div class="firebaseui-error-wrapper"><p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden firebaseui-id-password-error"></p></div>');
        }
        function Xj() {
            return B('<a class="firebaseui-link firebaseui-id-secondary-link" href="javascript:void(0)">Trouble signing in?</a>');
        }
        function Yj(a) {
            a = a || {};
            a = a.label;
            var b = '<button class="firebaseui-id-secondary-link firebaseui-button mdl-button mdl-js-button mdl-button--primary">';
            b = a ? b + A(a) : b + "Cancel";
            return B(b + "</button>");
        }
        function Zj(a) {
            var b = "";
            a.F && a.D && (b += '<ul class="firebaseui-tos-list firebaseui-tos"><li class="firebaseui-inline-list-item"><a href="javascript:void(0)" class="firebaseui-link firebaseui-tos-link" target="_blank">Terms of Service</a></li><li class="firebaseui-inline-list-item"><a href="javascript:void(0)" class="firebaseui-link firebaseui-pp-link" target="_blank">Privacy Policy</a></li></ul>');
            return B(b);
        }
        function ak(a) {
            var b = "";
            a.F && a.D && (b += '<p class="firebaseui-tos firebaseui-tospp-full-message">By continuing, you are indicating that you accept our <a href="javascript:void(0)" class="firebaseui-link firebaseui-tos-link" target="_blank">Terms of Service</a> and <a href="javascript:void(0)" class="firebaseui-link firebaseui-pp-link" target="_blank">Privacy Policy</a>.</p>');
            return B(b);
        }
        function bk(a) {
            a = '<div class="firebaseui-info-bar firebaseui-id-info-bar"><p class="firebaseui-info-bar-message">' + A(a.message) + '&nbsp;&nbsp;<a href="javascript:void(0)" class="firebaseui-link firebaseui-id-dismiss-info-bar">Dismiss</a></p></div>';
            return B(a);
        }
        bk.a = "firebaseui.auth.soy2.element.infoBar";
        function ck(a) {
            var b = a.content;
            a = a.Ab;
            return B('<dialog class="mdl-dialog firebaseui-dialog firebaseui-id-dialog' + (a ? " " + ud(a) : "") + '">' + A(b) + "</dialog>");
        }
        function dk(a) {
            var b = a.message;
            return B(ck({
                content: td('<div class="firebaseui-dialog-icon-wrapper"><div class="' + ud(a.Ma) + ' firebaseui-dialog-icon"></div></div><div class="firebaseui-progress-dialog-message">' + A(b) + "</div>")
            }));
        }
        dk.a = "firebaseui.auth.soy2.element.progressDialog";
        function ek(a) {
            var b = '<div class="firebaseui-list-box-actions">';
            a = a.items;
            for(var c = a.length, d = 0; d < c; d++){
                var e = a[d];
                b += '<button type="button" data-listboxid="' + ud(e.id) + '" class="mdl-button firebaseui-id-list-box-dialog-button firebaseui-list-box-dialog-button">' + (e.Ma ? '<div class="firebaseui-list-box-icon-wrapper"><div class="firebaseui-list-box-icon ' + ud(e.Ma) + '"></div></div>' : "") + '<div class="firebaseui-list-box-label-wrapper">' + A(e.label) + "</div></button>";
            }
            b = "" + ck({
                Ab: D("firebaseui-list-box-dialog"),
                content: td(b + "</div>")
            });
            return B(b);
        }
        ek.a = "firebaseui.auth.soy2.element.listBoxDialog";
        function fk(a) {
            a = a || {};
            return B(a.tb ? '<div class="mdl-spinner mdl-spinner--single-color mdl-js-spinner is-active firebaseui-busy-indicator firebaseui-id-busy-indicator"></div>' : '<div class="mdl-progress mdl-js-progress mdl-progress__indeterminate firebaseui-busy-indicator firebaseui-id-busy-indicator"></div>');
        }
        fk.a = "firebaseui.auth.soy2.element.busyIndicator";
        function gk(a, b) {
            a = a || {};
            a = a.ga;
            return C(a.S ? a.S : b.hb[a.providerId] ? "" + b.hb[a.providerId] : a.providerId && 0 == a.providerId.indexOf("saml.") ? a.providerId.substring(5) : a.providerId && 0 == a.providerId.indexOf("oidc.") ? a.providerId.substring(5) : "" + a.providerId);
        }
        function hk(a) {
            ik(a, "upgradeElement");
        }
        function jk(a) {
            ik(a, "downgradeElements");
        }
        var kk = [
            "mdl-js-textfield",
            "mdl-js-progress",
            "mdl-js-spinner",
            "mdl-js-button"
        ];
        function ik(a, b) {
            a && window.componentHandler && window.componentHandler[b] && kk.forEach(function(c) {
                if (Ti(a, c)) window.componentHandler[b](a);
                Ha(Tc(c, a), function(d) {
                    window.componentHandler[b](d);
                });
            });
        }
        function lk(a, b, c) {
            mk.call(this);
            document.body.appendChild(a);
            a.showModal || window.dialogPolyfill.registerDialog(a);
            a.showModal();
            hk(a);
            b && O(this, a, function(f) {
                var g = a.getBoundingClientRect();
                (f.clientX < g.left || g.left + g.width < f.clientX || f.clientY < g.top || g.top + g.height < f.clientY) && mk.call(this);
            });
            if (!c) {
                var d = this.N().parentElement || this.N().parentNode;
                if (d) {
                    var e = this;
                    this.da = function() {
                        if (a.open) {
                            var f = a.getBoundingClientRect().height, g = d.getBoundingClientRect().height, h = d.getBoundingClientRect().top - document.body.getBoundingClientRect().top, k = d.getBoundingClientRect().left - document.body.getBoundingClientRect().left, p = a.getBoundingClientRect().width, t = d.getBoundingClientRect().width;
                            a.style.top = (h + (g - f) / 2).toString() + "px";
                            f = k + (t - p) / 2;
                            a.style.left = f.toString() + "px";
                            a.style.right = (document.body.getBoundingClientRect().width - f - p).toString() + "px";
                        } else window.removeEventListener("resize", e.da);
                    };
                    this.da();
                    window.addEventListener("resize", this.da, !1);
                }
            }
        }
        function mk() {
            var a = nk.call(this);
            a && (jk(a), a.open && a.close(), Zc(a), this.da && window.removeEventListener("resize", this.da));
        }
        function nk() {
            return Vc("firebaseui-id-dialog");
        }
        function ok() {
            Zc(pk.call(this));
        }
        function pk() {
            return M(this, "firebaseui-id-info-bar");
        }
        function qk() {
            return M(this, "firebaseui-id-dismiss-info-bar");
        }
        var rk = {
            xa: {
                "google.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg",
                "github.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/github.svg",
                "facebook.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/facebook.svg",
                "twitter.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/twitter.svg",
                password: "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/mail.svg",
                phone: "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/phone.svg",
                anonymous: "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/anonymous.png",
                "microsoft.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/microsoft.svg",
                "yahoo.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/yahoo.svg",
                "apple.com": "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/apple.png",
                saml: "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/saml.svg",
                oidc: "https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/oidc.svg"
            },
            wa: {
                "google.com": "#ffffff",
                "github.com": "#333333",
                "facebook.com": "#3b5998",
                "twitter.com": "#55acee",
                password: "#db4437",
                phone: "#02bd7e",
                anonymous: "#f4b400",
                "microsoft.com": "#2F2F2F",
                "yahoo.com": "#720E9E",
                "apple.com": "#000000",
                saml: "#007bff",
                oidc: "#007bff"
            },
            hb: {
                "google.com": "Google",
                "github.com": "GitHub",
                "facebook.com": "Facebook",
                "twitter.com": "Twitter",
                password: "Password",
                phone: "Phone",
                anonymous: "Guest",
                "microsoft.com": "Microsoft",
                "yahoo.com": "Yahoo",
                "apple.com": "Apple"
            }
        };
        function sk(a, b, c) {
            Yd.call(this, a, b);
            for(var d in c)this[d] = c[d];
        }
        w(sk, Yd);
        function P(a, b, c, d, e) {
            Gj.call(this, c);
            this.fb = a;
            this.eb = b;
            this.Fa = !1;
            this.Ga = d || null;
            this.A = this.ca = null;
            this.Z = eb(rk);
            gb(this.Z, e || {});
        }
        w(P, Gj);
        l = P.prototype;
        l.kb = function() {
            var a = hd(this.fb, this.eb, this.Z, this.s);
            hk(a);
            this.g = a;
        };
        l.v = function() {
            P.K.v.call(this);
            Be(Q(this), new sk("pageEnter", Q(this), {
                pageId: this.Ga
            }));
            if (this.bb() && this.Z.F) {
                var a = this.Z.F;
                O(this, this.bb(), function() {
                    a();
                });
            }
            if (this.ab() && this.Z.D) {
                var b = this.Z.D;
                O(this, this.ab(), function() {
                    b();
                });
            }
        };
        l.ya = function() {
            Be(Q(this), new sk("pageExit", Q(this), {
                pageId: this.Ga
            }));
            P.K.ya.call(this);
        };
        l.o = function() {
            window.clearTimeout(this.ca);
            this.eb = this.fb = this.ca = null;
            this.Fa = !1;
            this.A = null;
            jk(this.N());
            P.K.o.call(this);
        };
        function tk(a) {
            a.Fa = !0;
            var b = Ti(a.N(), "firebaseui-use-spinner");
            a.ca = window.setTimeout(function() {
                a.N() && null === a.A && (a.A = hd(fk, {
                    tb: b
                }, null, a.s), a.N().appendChild(a.A), hk(a.A));
            }, 500);
        }
        l.I = function(a, b, c, d) {
            function e() {
                if (f.T) return null;
                f.Fa = !1;
                window.clearTimeout(f.ca);
                f.ca = null;
                f.A && (jk(f.A), Zc(f.A), f.A = null);
            }
            var f = this;
            if (f.Fa) return null;
            tk(f);
            return a.apply(null, b).then(c, d).then(e, e);
        };
        function Q(a) {
            return a.N().parentElement || a.N().parentNode;
        }
        function uk(a, b, c) {
            Kj(a, b, function() {
                c.focus();
            });
        }
        function vk(a, b, c) {
            Kj(a, b, function() {
                c();
            });
        }
        u(P.prototype, {
            a: function(a) {
                ok.call(this);
                var b = hd(bk, {
                    message: a
                }, null, this.s);
                this.N().appendChild(b);
                O(this, qk.call(this), function() {
                    Zc(b);
                });
            },
            yc: ok,
            Ac: pk,
            zc: qk,
            $: function(a, b) {
                a = hd(dk, {
                    Ma: a,
                    message: b
                }, null, this.s);
                lk.call(this, a);
            },
            h: mk,
            Cb: nk,
            Cc: function() {
                return M(this, "firebaseui-tos");
            },
            bb: function() {
                return M(this, "firebaseui-tos-link");
            },
            ab: function() {
                return M(this, "firebaseui-pp-link");
            },
            Dc: function() {
                return M(this, "firebaseui-tos-list");
            }
        });
        function wk(a, b, c) {
            a = a || {};
            b = a.Va;
            var d = a.ia;
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-sign-in"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in with email</h1></div><div class="firebaseui-card-content"><div class="firebaseui-relative-wrapper">' + Qj(a) + '</div></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + (b ? Yj(null) : "") + Rj(null) + '</div></div><div class="firebaseui-card-footer">' + (d ? ak(c) : Zj(c)) + "</div></form></div>";
            return B(a);
        }
        wk.a = "firebaseui.auth.soy2.page.signIn";
        function xk(a, b, c) {
            a = a || {};
            b = a.ia;
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-sign-in"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content">' + Qj(a) + Wj() + '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-links">' + Xj() + '</div><div class="firebaseui-form-actions">' + Sj() + '</div></div><div class="firebaseui-card-footer">' + (b ? ak(c) : Zj(c)) + "</div></form></div>";
            return B(a);
        }
        xk.a = "firebaseui.auth.soy2.page.passwordSignIn";
        function yk(a, b, c) {
            a = a || {};
            var d = a.Tb;
            b = a.Ta;
            var e = a.ia, f = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-sign-up"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Create account</h1></div><div class="firebaseui-card-content">' + Qj(a);
            d ? (a = a || {}, a = a.name, a = '<div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label"><label class="mdl-textfield__label firebaseui-label" for="ui-sign-in-name-input">First &amp; last name</label><input type="text" name="name" id="ui-sign-in-name-input" autocomplete="name" class="mdl-textfield__input firebaseui-input firebaseui-id-name" value="' + ud(null != a ? a : "") + '"></div><div class="firebaseui-error-wrapper"><p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden firebaseui-id-name-error"></p></div>', a = B(a)) : a = "";
            c = f + a + Vj(null) + '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + (b ? Yj(null) : "") + Tj() + '</div></div><div class="firebaseui-card-footer">' + (e ? ak(c) : Zj(c)) + "</div></form></div>";
            return B(c);
        }
        yk.a = "firebaseui.auth.soy2.page.passwordSignUp";
        function zk(a, b, c) {
            a = a || {};
            b = a.Ta;
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-recovery"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Recover password</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Get instructions sent to this email that explain how to reset your password</p>' + Qj(a) + '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + (b ? Yj(null) : "") + Rj({
                label: D("Send")
            }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(a);
        }
        zk.a = "firebaseui.auth.soy2.page.passwordRecovery";
        function Ak(a, b, c) {
            b = a.G;
            var d = "";
            a = "Follow the instructions sent to <strong>" + (A(a.email) + "</strong> to recover your password");
            d += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-recovery-email-sent"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Check your email</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + a + '</p></div><div class="firebaseui-card-actions">';
            b && (d += '<div class="firebaseui-form-actions">' + Rj({
                label: D("Done")
            }) + "</div>");
            d += '</div><div class="firebaseui-card-footer">' + Zj(c) + "</div></div>";
            return B(d);
        }
        Ak.a = "firebaseui.auth.soy2.page.passwordRecoveryEmailSent";
        function Bk(a, b, c) {
            return B('<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-callback"><div class="firebaseui-callback-indicator-container">' + fk(null, null, c) + "</div></div>");
        }
        Bk.a = "firebaseui.auth.soy2.page.callback";
        function Ck(a, b, c) {
            return B('<div class="firebaseui-container firebaseui-id-page-spinner">' + fk({
                tb: !0
            }, null, c) + "</div>");
        }
        Ck.a = "firebaseui.auth.soy2.page.spinner";
        function Dk() {
            return B('<div class="firebaseui-container firebaseui-id-page-blank firebaseui-use-spinner"></div>');
        }
        Dk.a = "firebaseui.auth.soy2.page.blank";
        function Ek(a, b, c) {
            b = "";
            a = "A sign-in email with additional instructions was sent to <strong>" + (A(a.email) + "</strong>. Check your email to complete sign-in.");
            var d = B('<a class="firebaseui-link firebaseui-id-trouble-getting-email-link" href="javascript:void(0)">Trouble getting email?</a>');
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-link-sign-in-sent"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign-in email sent</h1></div><div class="firebaseui-card-content"><div class="firebaseui-email-sent"></div><p class="firebaseui-text">' + a + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-links">' + d + '</div><div class="firebaseui-form-actions">' + Yj({
                label: D("Back")
            }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
        }
        Ek.a = "firebaseui.auth.soy2.page.emailLinkSignInSent";
        function Fk(a, b, c) {
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-not-received"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Trouble getting email?</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Try these common fixes:<ul><li>Check if the email was marked as spam or filtered.</li><li>Check your internet connection.</li><li>Check that you did not misspell your email.</li><li>Check that your inbox space is not running out or other inbox settings related issues.</li></ul></p><p class="firebaseui-text">If the steps above didn\'t work, you can resend the email. Note that this will deactivate the link in the older email.</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-links">' + B('<a class="firebaseui-link firebaseui-id-resend-email-link" href="javascript:void(0)">Resend</a>') + '</div><div class="firebaseui-form-actions">' + Yj({
                label: D("Back")
            }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(a);
        }
        Fk.a = "firebaseui.auth.soy2.page.emailNotReceived";
        function Gk(a, b, c) {
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-link-sign-in-confirmation"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Confirm email</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Confirm your email to complete sign in</p><div class="firebaseui-relative-wrapper">' + Qj(a) + '</div></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Yj(null) + Rj(null) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(a);
        }
        Gk.a = "firebaseui.auth.soy2.page.emailLinkSignInConfirmation";
        function Hk() {
            var a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-different-device-error"><div class="firebaseui-card-header"><h1 class="firebaseui-title">New device or browser detected</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Try opening the link using the same device or browser where you started the sign-in process.</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Yj({
                label: D("Dismiss")
            }) + "</div></div></div>";
            return B(a);
        }
        Hk.a = "firebaseui.auth.soy2.page.differentDeviceError";
        function Ik() {
            var a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-anonymous-user-mismatch"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Session ended</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">The session associated with this sign-in request has either expired or was cleared.</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Yj({
                label: D("Dismiss")
            }) + "</div></div></div>";
            return B(a);
        }
        Ik.a = "firebaseui.auth.soy2.page.anonymousUserMismatch";
        function Jk(a, b, c) {
            b = "";
            a = "You\u2019ve already used <strong>" + (A(a.email) + "</strong> to sign in. Enter your password for that account.");
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-linking"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><h2 class="firebaseui-subtitle">You already have an account</h2><p class="firebaseui-text">' + a + "</p>" + Wj() + '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-links">' + Xj() + '</div><div class="firebaseui-form-actions">' + Sj() + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
        }
        Jk.a = "firebaseui.auth.soy2.page.passwordLinking";
        function Kk(a, b, c) {
            var d = a.email;
            b = "";
            a = "" + gk(a, c);
            a = D(a);
            d = "You\u2019ve already used <strong>" + (A(d) + ("</strong>. You can connect your <strong>" + (A(a) + ("</strong> account with <strong>" + (A(d) + "</strong> by signing in with email link below.")))));
            a = "For this flow to successfully connect your " + (A(a) + " account with this email, you have to open the link on the same device or browser.");
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-link-sign-in-linking"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><h2 class="firebaseui-subtitle">You already have an account</h2><p class="firebaseui-text firebaseui-text-justify">' + d + '<p class="firebaseui-text firebaseui-text-justify">' + a + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Sj() + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
        }
        Kk.a = "firebaseui.auth.soy2.page.emailLinkSignInLinking";
        function Lk(a, b, c) {
            b = "";
            var d = "" + gk(a, c);
            d = D(d);
            a = "You originally intended to connect <strong>" + (A(d) + "</strong> to your email account but have opened the link on a different device where you are not signed in.");
            d = "If you still want to connect your <strong>" + (A(d) + "</strong> account, open the link on the same device where you started sign-in. Otherwise, tap Continue to sign-in on this device.");
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-link-sign-in-linking-different-device"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text firebaseui-text-justify">' + a + '</p><p class="firebaseui-text firebaseui-text-justify">' + d + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Uj() + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
        }
        Lk.a = "firebaseui.auth.soy2.page.emailLinkSignInLinkingDifferentDevice";
        function Mk(a, b, c) {
            var d = a.email;
            b = "";
            a = "" + gk(a, c);
            a = D(a);
            d = "You\u2019ve already used <strong>" + (A(d) + ("</strong>. Sign in with " + (A(a) + " to continue.")));
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-federated-linking"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><h2 class="firebaseui-subtitle">You already have an account</h2><p class="firebaseui-text">' + d + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Rj({
                label: D("Sign in with " + a)
            }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
        }
        Mk.a = "firebaseui.auth.soy2.page.federatedLinking";
        function Nk(a, b, c) {
            a = a || {};
            var d = a.kc;
            b = a.yb;
            a = a.Eb;
            var e = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-unauthorized-user"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Not Authorized</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">';
            d ? (d = "<strong>" + (A(d) + "</strong> is not authorized to view the requested page."), e += d) : e += "User is not authorized to view the requested page.";
            e += "</p>";
            b && (b = "Please contact <strong>" + (A(b) + "</strong> for authorization."), e += '<p class="firebaseui-text firebaseui-id-unauthorized-user-admin-email">' + b + "</p>");
            e += '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-links">';
            a && (e += '<a class="firebaseui-link firebaseui-id-unauthorized-user-help-link" href="javascript:void(0)" target="_blank">Learn More</a>');
            e += '</div><div class="firebaseui-form-actions">' + Yj({
                label: D("Back")
            }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(e);
        }
        Nk.a = "firebaseui.auth.soy2.page.unauthorizedUser";
        function Ok(a, b, c) {
            b = "";
            a = "To continue sign in with <strong>" + (A(a.email) + "</strong> on this device, you have to recover the password.");
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-unsupported-provider"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + a + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Yj(null) + Rj({
                label: D("Recover password")
            }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
        }
        Ok.a = "firebaseui.auth.soy2.page.unsupportedProvider";
        function Pk(a) {
            var b = "", c = '<p class="firebaseui-text">for <strong>' + (A(a.email) + "</strong></p>");
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-reset"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Reset your password</h1></div><div class="firebaseui-card-content">' + c + Vj(sd(a)) + '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Tj() + "</div></div></form></div>";
            return B(b);
        }
        Pk.a = "firebaseui.auth.soy2.page.passwordReset";
        function Qk(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-reset-success"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Password changed</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">You can now sign in with your new password</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
        }
        Qk.a = "firebaseui.auth.soy2.page.passwordResetSuccess";
        function Rk(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-password-reset-failure"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Try resetting your password again</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Your request to reset your password has expired or the link has already been used</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
        }
        Rk.a = "firebaseui.auth.soy2.page.passwordResetFailure";
        function Sk(a) {
            var b = a.G, c = "";
            a = "Your sign-in email address has been changed back to <strong>" + (A(a.email) + "</strong>.");
            c += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-change-revoke-success"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Updated email address</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + a + '</p><p class="firebaseui-text">If you didn\u2019t ask to change your sign-in email, it\u2019s possible someone is trying to access your account and you should <a class="firebaseui-link firebaseui-id-reset-password-link" href="javascript:void(0)">change your password right away</a>.</p></div><div class="firebaseui-card-actions">' + (b ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></form></div>";
            return B(c);
        }
        Sk.a = "firebaseui.auth.soy2.page.emailChangeRevokeSuccess";
        function Tk(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-change-revoke-failure"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Unable to update your email address</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">There was a problem changing your sign-in email back.</p><p class="firebaseui-text">If you try again and still can\u2019t reset your email, try asking your administrator for help.</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
        }
        Tk.a = "firebaseui.auth.soy2.page.emailChangeRevokeFailure";
        function Uk(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-verification-success"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Your email has been verified</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">You can now sign in with your new account</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
        }
        Uk.a = "firebaseui.auth.soy2.page.emailVerificationSuccess";
        function Vk(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-verification-failure"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Try verifying your email again</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Your request to verify your email has expired or the link has already been used</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
        }
        Vk.a = "firebaseui.auth.soy2.page.emailVerificationFailure";
        function Xk(a) {
            var b = a.G, c = "";
            a = "You can now sign in with your new email <strong>" + (A(a.email) + "</strong>.");
            c += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-verify-and-change-email-success"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Your email has been verified and changed</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + a + '</p></div><div class="firebaseui-card-actions">' + (b ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(c);
        }
        Xk.a = "firebaseui.auth.soy2.page.verifyAndChangeEmailSuccess";
        function Yk(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-verify-and-change-email-failure"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Try updating your email again</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Your request to verify and update your email has expired or the link has already been used.</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
        }
        Yk.a = "firebaseui.auth.soy2.page.verifyAndChangeEmailFailure";
        function Zk(a) {
            var b = a.factorId, c = a.phoneNumber;
            a = a.G;
            var d = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-revert-second-factor-addition-success"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Removed second factor</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">';
            switch(b){
                case "phone":
                    b = "The <strong>" + (A(b) + (" " + (A(c) + "</strong> was removed as a second authentication step.")));
                    d += b;
                    break;
                default:
                    d += "The device or app was removed as a second authentication step.";
            }
            d += '</p><p class="firebaseui-text">If you don\'t recognize this device, someone might be trying to access your account. Consider <a class="firebaseui-link firebaseui-id-reset-password-link" href="javascript:void(0)">changing your password right away</a>.</p></div><div class="firebaseui-card-actions">' + (a ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></form></div>";
            return B(d);
        }
        Zk.a = "firebaseui.auth.soy2.page.revertSecondFactorAdditionSuccess";
        function $k(a) {
            a = a || {};
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-revert-second-factor-addition-failure"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Couldn\'t remove your second factor</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">Something went wrong removing your second factor.</p><p class="firebaseui-text">Try removing it again. If that doesn\'t work, contact support for assistance.</p></div><div class="firebaseui-card-actions">' + (a.G ? '<div class="firebaseui-form-actions">' + Uj() + "</div>" : "") + "</div></div>";
            return B(a);
        }
        $k.a = "firebaseui.auth.soy2.page.revertSecondFactorAdditionFailure";
        function al(a) {
            var b = a.zb;
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-recoverable-error"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Error encountered</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + A(a.errorMessage) + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">';
            b && (a += Rj({
                label: D("Retry")
            }));
            return B(a + "</div></div></div>");
        }
        al.a = "firebaseui.auth.soy2.page.recoverableError";
        function bl(a) {
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-unrecoverable-error"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Error encountered</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + A(a.errorMessage) + "</p></div></div>";
            return B(a);
        }
        bl.a = "firebaseui.auth.soy2.page.unrecoverableError";
        function cl(a, b, c) {
            var d = a.Qb;
            b = "";
            a = "Continue with " + (A(a.jc) + "?");
            d = "You originally wanted to sign in with " + A(d);
            b += '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-email-mismatch"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><h2 class="firebaseui-subtitle">' + a + '</h2><p class="firebaseui-text">' + d + '</p></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Yj(null) + Rj({
                label: D("Continue")
            }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form></div>";
            return B(b);
        }
        cl.a = "firebaseui.auth.soy2.page.emailMismatch";
        function dl(a, b, c) {
            var d = '<div class="firebaseui-container firebaseui-page-provider-sign-in firebaseui-id-page-provider-sign-in firebaseui-use-spinner"><div class="firebaseui-card-content"><form onsubmit="return false;"><ul class="firebaseui-idp-list">';
            a = a.Sb;
            b = a.length;
            for(var e = 0; e < b; e++){
                var f = {
                    ga: a[e]
                }, g = c;
                f = f || {};
                var h = f.ga;
                var k = f;
                k = k || {};
                var p = "";
                switch(k.ga.providerId){
                    case "google.com":
                        p += "firebaseui-idp-google";
                        break;
                    case "github.com":
                        p += "firebaseui-idp-github";
                        break;
                    case "facebook.com":
                        p += "firebaseui-idp-facebook";
                        break;
                    case "twitter.com":
                        p += "firebaseui-idp-twitter";
                        break;
                    case "phone":
                        p += "firebaseui-idp-phone";
                        break;
                    case "anonymous":
                        p += "firebaseui-idp-anonymous";
                        break;
                    case "password":
                        p += "firebaseui-idp-password";
                        break;
                    default:
                        p += "firebaseui-idp-generic";
                }
                k = '<button class="firebaseui-idp-button mdl-button mdl-js-button mdl-button--raised ' + ud(C(p)) + ' firebaseui-id-idp-button" data-provider-id="' + ud(h.providerId) + '" style="background-color:';
                p = (p = f) || {};
                p = p.ga;
                k = k + ud(Dd(C(p.ta ? p.ta : g.wa[p.providerId] ? "" + g.wa[p.providerId] : 0 == p.providerId.indexOf("saml.") ? "" + g.wa.saml : 0 == p.providerId.indexOf("oidc.") ? "" + g.wa.oidc : "" + g.wa.password))) + '"><span class="firebaseui-idp-icon-wrapper"><img class="firebaseui-idp-icon" alt="" src="';
                var t = f;
                p = g;
                t = t || {};
                t = t.ga;
                p = rd(t.za ? zd(t.za) : p.xa[t.providerId] ? zd(p.xa[t.providerId]) : 0 == t.providerId.indexOf("saml.") ? zd(p.xa.saml) : 0 == t.providerId.indexOf("oidc.") ? zd(p.xa.oidc) : zd(p.xa.password));
                k = k + ud(zd(p)) + '"></span>';
                "password" == h.providerId ? (k += '<span class="firebaseui-idp-text firebaseui-idp-text-long">', h.V ? k += A(h.V) : h.S ? (f = "Sign in with " + A(gk(f, g)), k += f) : k += "Sign in with email", k += '</span><span class="firebaseui-idp-text firebaseui-idp-text-short">', k = h.S ? k + A(h.S) : k + "Email", k += "</span>") : "phone" == h.providerId ? (k += '<span class="firebaseui-idp-text firebaseui-idp-text-long">', h.V ? k += A(h.V) : h.S ? (f = "Sign in with " + A(gk(f, g)), k += f) : k += "Sign in with phone", k += '</span><span class="firebaseui-idp-text firebaseui-idp-text-short">', k = h.S ? k + A(h.S) : k + "Phone", k += "</span>") : "anonymous" == h.providerId ? (k += '<span class="firebaseui-idp-text firebaseui-idp-text-long">', h.V ? k += A(h.V) : h.S ? (f = "Sign in with " + A(gk(f, g)), k += f) : k += "Continue as guest", k += '</span><span class="firebaseui-idp-text firebaseui-idp-text-short">', k = h.S ? k + A(h.S) : k + "Guest", k += "</span>") : (k += '<span class="firebaseui-idp-text firebaseui-idp-text-long">', h.V ? k += A(h.V) : (p = "Sign in with " + A(gk(f, g)), k += p), k += '</span><span class="firebaseui-idp-text firebaseui-idp-text-short">' + (h.S ? A(h.S) : A(gk(f, g))) + "</span>");
                h = B(k + "</button>");
                d += '<li class="firebaseui-list-item">' + h + "</li>";
            }
            d += '</ul></form></div><div class="firebaseui-card-footer firebaseui-provider-sign-in-footer">' + ak(c) + "</div></div>";
            return B(d);
        }
        dl.a = "firebaseui.auth.soy2.page.providerSignIn";
        function el(a, b, c) {
            a = a || {};
            var d = a.Gb, e = a.Va;
            b = a.ia;
            a = a || {};
            a = a.Aa;
            a = '<div class="firebaseui-phone-number"><button class="firebaseui-id-country-selector firebaseui-country-selector mdl-button mdl-js-button"><span class="firebaseui-flag firebaseui-country-selector-flag firebaseui-id-country-selector-flag"></span><span class="firebaseui-id-country-selector-code"></span></button><div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label firebaseui-textfield firebaseui-phone-input-wrapper"><label class="mdl-textfield__label firebaseui-label" for="ui-sign-in-phone-number-input">Phone number</label><input type="tel" name="phoneNumber" id="ui-sign-in-phone-number-input" class="mdl-textfield__input firebaseui-input firebaseui-id-phone-number" value="' + ud(null != a ? a : "") + '"></div></div><div class="firebaseui-error-wrapper"><p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden firebaseui-phone-number-error firebaseui-id-phone-number-error"></p></div>';
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-phone-sign-in-start"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Enter your phone number</h1></div><div class="firebaseui-card-content"><div class="firebaseui-relative-wrapper">' + B(a);
            var f;
            d ? f = B('<div class="firebaseui-recaptcha-wrapper"><div class="firebaseui-recaptcha-container"></div><div class="firebaseui-error-wrapper firebaseui-recaptcha-error-wrapper"><p class="firebaseui-error firebaseui-hidden firebaseui-id-recaptcha-error"></p></div></div>') : f = "";
            f = a + f + '</div></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + (e ? Yj(null) : "") + Rj({
                label: D("Verify")
            }) + '</div></div><div class="firebaseui-card-footer">';
            b ? (b = '<p class="firebaseui-tos firebaseui-phone-tos">', b = c.F && c.D ? b + 'By tapping Verify, you are indicating that you accept our <a href="javascript:void(0)" class="firebaseui-link firebaseui-tos-link" target="_blank">Terms of Service</a> and <a href="javascript:void(0)" class="firebaseui-link firebaseui-pp-link" target="_blank">Privacy Policy</a>. An SMS may be sent. Message &amp; data rates may apply.' : b + "By tapping Verify, an SMS may be sent. Message &amp; data rates may apply.", c = B(b + "</p>")) : c = B('<p class="firebaseui-tos firebaseui-phone-sms-notice">By tapping Verify, an SMS may be sent. Message &amp; data rates may apply.</p>') + Zj(c);
            return B(f + c + "</div></form></div>");
        }
        el.a = "firebaseui.auth.soy2.page.phoneSignInStart";
        function fl(a, b, c) {
            a = a || {};
            b = a.phoneNumber;
            var d = "";
            a = 'Enter the 6-digit code we sent to <a class="firebaseui-link firebaseui-change-phone-number-link firebaseui-id-change-phone-number-link" href="javascript:void(0)">&lrm;' + (A(b) + "</a>");
            A(b);
            b = d;
            d = B('<div class="firebaseui-textfield mdl-textfield mdl-js-textfield mdl-textfield--floating-label"><label class="mdl-textfield__label firebaseui-label" for="ui-sign-in-phone-confirmation-code-input">6-digit code</label><input type="number" name="phoneConfirmationCode" id="ui-sign-in-phone-confirmation-code-input" class="mdl-textfield__input firebaseui-input firebaseui-id-phone-confirmation-code"></div><div class="firebaseui-error-wrapper"><p class="firebaseui-error firebaseui-text-input-error firebaseui-hidden firebaseui-id-phone-confirmation-code-error"></p></div>');
            c = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-phone-sign-in-finish"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Verify your phone number</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">' + a + "</p>" + d + '</div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Yj(null) + Rj({
                label: D("Continue")
            }) + '</div></div><div class="firebaseui-card-footer">' + Zj(c) + "</div></form>";
            a = B('<div class="firebaseui-resend-container"><span class="firebaseui-id-resend-countdown"></span><a href="javascript:void(0)" class="firebaseui-id-resend-link firebaseui-hidden firebaseui-link">Resend</a></div>');
            return B(b + (c + a + "</div>"));
        }
        fl.a = "firebaseui.auth.soy2.page.phoneSignInFinish";
        function gl() {
            return B('<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-sign-out"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign Out</h1></div><div class="firebaseui-card-content"><p class="firebaseui-text">You are now successfully signed out.</p></div></div>');
        }
        gl.a = "firebaseui.auth.soy2.page.signOut";
        function hl(a, b, c) {
            var d = '<div class="firebaseui-container firebaseui-page-select-tenant firebaseui-id-page-select-tenant"><div class="firebaseui-card-content"><form onsubmit="return false;"><ul class="firebaseui-tenant-list">';
            a = a.ec;
            b = a.length;
            for(var e = 0; e < b; e++){
                var f = a[e];
                var g = "";
                var h = A(f.displayName), k = f.tenantId ? f.tenantId : "top-level-project";
                k = D(k);
                g += '<button class="firebaseui-tenant-button mdl-button mdl-js-button mdl-button--raised firebaseui-tenant-selection-' + ud(k) + ' firebaseui-id-tenant-selection-button"' + (f.tenantId ? 'data-tenant-id="' + ud(f.tenantId) + '"' : "") + 'style="background-color:' + ud(Dd(f.ta)) + '"><span class="firebaseui-idp-icon-wrapper"><img class="firebaseui-idp-icon" alt="" src="' + ud(zd(f.za)) + '"></span><span class="firebaseui-idp-text firebaseui-idp-text-long">';
                f.V ? g += A(f.V) : (f = "Sign in to " + A(f.displayName), g += f);
                g = B(g + ('</span><span class="firebaseui-idp-text firebaseui-idp-text-short">' + h + "</span></button>"));
                d += '<li class="firebaseui-list-item">' + g + "</li>";
            }
            d += '</ul></form></div><div class="firebaseui-card-footer firebaseui-provider-sign-in-footer">' + ak(c) + "</div></div>";
            return B(d);
        }
        hl.a = "firebaseui.auth.soy2.page.selectTenant";
        function il(a, b, c) {
            a = '<div class="mdl-card mdl-shadow--2dp firebaseui-container firebaseui-id-page-provider-match-by-email"><form onsubmit="return false;"><div class="firebaseui-card-header"><h1 class="firebaseui-title">Sign in</h1></div><div class="firebaseui-card-content"><div class="firebaseui-relative-wrapper">' + Qj(null) + '</div></div><div class="firebaseui-card-actions"><div class="firebaseui-form-actions">' + Rj(null) + '</div></div><div class="firebaseui-card-footer">' + ak(c) + "</div></form></div>";
            return B(a);
        }
        il.a = "firebaseui.auth.soy2.page.providerMatchByEmail";
        function jl() {
            return M(this, "firebaseui-id-submit");
        }
        function kl() {
            return M(this, "firebaseui-id-secondary-link");
        }
        function ll(a, b) {
            O(this, jl.call(this), function(d) {
                a(d);
            });
            var c = kl.call(this);
            c && b && O(this, c, function(d) {
                b(d);
            });
        }
        function ml() {
            return M(this, "firebaseui-id-password");
        }
        function nl() {
            return M(this, "firebaseui-id-password-error");
        }
        function ol() {
            var a = ml.call(this), b = nl.call(this);
            Jj(this, a, function() {
                Pj(b) && (N(a, !0), Nj(b));
            });
        }
        function pl() {
            var a = ml.call(this);
            var b = nl.call(this);
            Wi(a) ? (N(a, !0), Nj(b), b = !0) : (N(a, !1), Oj(b, C("Enter your password").toString()), b = !1);
            return b ? Wi(a) : null;
        }
        function ql(a, b, c, d, e, f) {
            P.call(this, Jk, {
                email: a
            }, f, "passwordLinking", {
                F: d,
                D: e
            });
            this.w = b;
            this.H = c;
        }
        m(ql, P);
        ql.prototype.v = function() {
            this.P();
            this.M(this.w, this.H);
            vk(this, this.i(), this.w);
            this.i().focus();
            P.prototype.v.call(this);
        };
        ql.prototype.o = function() {
            this.w = null;
            P.prototype.o.call(this);
        };
        ql.prototype.j = function() {
            return Wi(M(this, "firebaseui-id-email"));
        };
        u(ql.prototype, {
            i: ml,
            B: nl,
            P: ol,
            u: pl,
            ea: jl,
            ba: kl,
            M: ll
        });
        var rl = /^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;
        function sl() {
            return M(this, "firebaseui-id-email");
        }
        function tl() {
            return M(this, "firebaseui-id-email-error");
        }
        function ul(a) {
            var b = sl.call(this), c = tl.call(this);
            Jj(this, b, function() {
                Pj(c) && (N(b, !0), Nj(c));
            });
            a && Kj(this, b, function() {
                a();
            });
        }
        function vl() {
            return Ua(Wi(sl.call(this)) || "");
        }
        function wl() {
            var a = sl.call(this);
            var b = tl.call(this);
            var c = Wi(a) || "";
            c ? rl.test(c) ? (N(a, !0), Nj(b), b = !0) : (N(a, !1), Oj(b, C("That email address isn't correct").toString()), b = !1) : (N(a, !1), Oj(b, C("Enter your email address to continue").toString()), b = !1);
            return b ? Ua(Wi(a)) : null;
        }
        function xl(a, b, c, d, e, f, g) {
            P.call(this, xk, {
                email: c,
                ia: !!f
            }, g, "passwordSignIn", {
                F: d,
                D: e
            });
            this.w = a;
            this.H = b;
        }
        m(xl, P);
        xl.prototype.v = function() {
            this.P();
            this.ea();
            this.ba(this.w, this.H);
            uk(this, this.l(), this.i());
            vk(this, this.i(), this.w);
            Wi(this.l()) ? this.i().focus() : this.l().focus();
            P.prototype.v.call(this);
        };
        xl.prototype.o = function() {
            this.H = this.w = null;
            P.prototype.o.call(this);
        };
        u(xl.prototype, {
            l: sl,
            U: tl,
            P: ul,
            M: vl,
            j: wl,
            i: ml,
            B: nl,
            ea: ol,
            u: pl,
            ua: jl,
            pa: kl,
            ba: ll
        });
        function R(a, b, c, d, e, f) {
            P.call(this, a, b, d, e || "notice", f);
            this.i = c || null;
        }
        w(R, P);
        R.prototype.v = function() {
            this.i && (this.u(this.i), this.l().focus());
            R.K.v.call(this);
        };
        R.prototype.o = function() {
            this.i = null;
            R.K.o.call(this);
        };
        u(R.prototype, {
            l: jl,
            w: kl,
            u: ll
        });
        function yl(a, b, c, d, e) {
            R.call(this, Ak, {
                email: a,
                G: !!b
            }, b, e, "passwordRecoveryEmailSent", {
                F: c,
                D: d
            });
        }
        w(yl, R);
        function zl(a, b) {
            R.call(this, Uk, {
                G: !!a
            }, a, b, "emailVerificationSuccess");
        }
        w(zl, R);
        function Al(a, b) {
            R.call(this, Vk, {
                G: !!a
            }, a, b, "emailVerificationFailure");
        }
        w(Al, R);
        function Bl(a, b, c) {
            R.call(this, Xk, {
                email: a,
                G: !!b
            }, b, c, "verifyAndChangeEmailSuccess");
        }
        w(Bl, R);
        function Cl(a, b) {
            R.call(this, Yk, {
                G: !!a
            }, a, b, "verifyAndChangeEmailFailure");
        }
        w(Cl, R);
        function Dl(a, b) {
            R.call(this, $k, {
                G: !!a
            }, a, b, "revertSecondFactorAdditionFailure");
        }
        w(Dl, R);
        function El(a) {
            R.call(this, gl, void 0, void 0, a, "signOut");
        }
        w(El, R);
        function Fl(a, b) {
            R.call(this, Qk, {
                G: !!a
            }, a, b, "passwordResetSuccess");
        }
        w(Fl, R);
        function Gl(a, b) {
            R.call(this, Rk, {
                G: !!a
            }, a, b, "passwordResetFailure");
        }
        w(Gl, R);
        function Hl(a, b) {
            R.call(this, Tk, {
                G: !!a
            }, a, b, "emailChangeRevokeFailure");
        }
        w(Hl, R);
        function Il(a, b, c) {
            R.call(this, al, {
                errorMessage: a,
                zb: !!b
            }, b, c, "recoverableError");
        }
        w(Il, R);
        function Jl(a, b) {
            R.call(this, bl, {
                errorMessage: a
            }, void 0, b, "unrecoverableError");
        }
        w(Jl, R);
        function Kl(a) {
            if ("auth/invalid-credential" === a.code && a.message && -1 !== a.message.indexOf("error=consent_required")) return {
                code: "auth/user-cancelled"
            };
            if (a.message && -1 !== a.message.indexOf("HTTP Cloud Function returned an error:")) {
                var b = JSON.parse(a.message.substring(a.message.indexOf("{"), a.message.lastIndexOf("}") + 1));
                return {
                    code: a.code,
                    message: b && b.error && b.error.message || a.message
                };
            }
            return a;
        }
        function Ll(a, b, c, d) {
            function e(g) {
                if (!g.name || "cancel" != g.name) {
                    a: {
                        var h = g.message;
                        try {
                            var k = ((JSON.parse(h).error || {}).message || "").toLowerCase().match(/invalid.+(access|id)_token/);
                            if (k && k.length) {
                                var p = !0;
                                break a;
                            }
                        } catch (t) {}
                        p = !1;
                    }
                    if (p) g = Q(b), b.m(), S(a, g, void 0, C("Your sign-in session has expired. Please try again.").toString());
                    else {
                        p = g && g.message || "";
                        if (g.code) {
                            if ("auth/email-already-in-use" == g.code || "auth/credential-already-in-use" == g.code) return;
                            p = T(g);
                        }
                        b.a(p);
                    }
                }
            }
            Ml(a);
            if (d) return Nl(a, c), F();
            if (!c.credential) throw Error("No credential found!");
            if (!U(a).currentUser && !c.user) throw Error("User not logged in.");
            try {
                var f = Ol(a, c);
            } catch (g1) {
                return og(g1.code || g1.message, g1), b.a(g1.code || g1.message), F();
            }
            c = f.then(function(g) {
                Nl(a, g);
            }, e).then(void 0, e);
            V(a, f);
            return F(c);
        }
        function Nl(a, b) {
            if (!b.user) throw Error("No user found");
            var c = Mi(W(a));
            Ki(W(a)) && c && tg("Both signInSuccess and signInSuccessWithAuthResult callbacks are provided. Only signInSuccessWithAuthResult callback will be invoked.");
            if (c) {
                c = Mi(W(a));
                var d = yh(X(a)) || void 0;
                wh(sh, X(a));
                var e = !1;
                if (qf()) {
                    if (!c || c(b, d)) e = !0, Nc(window.opener.location, Pl(a, d));
                    c || window.close();
                } else if (!c || c(b, d)) e = !0, Nc(window.location, Pl(a, d));
                e || a.reset();
            } else {
                c = b.user;
                b = b.credential;
                d = Ki(W(a));
                e = yh(X(a)) || void 0;
                wh(sh, X(a));
                var f = !1;
                if (qf()) {
                    if (!d || d(c, b, e)) f = !0, Nc(window.opener.location, Pl(a, e));
                    d || window.close();
                } else if (!d || d(c, b, e)) f = !0, Nc(window.location, Pl(a, e));
                f || a.reset();
            }
        }
        function Pl(a, b) {
            a = b || W(a).a.get("signInSuccessUrl");
            if (!a) throw Error("No redirect URL has been found. You must either specify a signInSuccessUrl in the configuration, pass in a redirect URL to the widget URL, or return false from the callback.");
            return a;
        }
        function T(a) {
            var b = {
                code: a.code
            };
            b = b || {};
            var c = "";
            switch(b.code){
                case "auth/email-already-in-use":
                    c += "The email address is already used by another account";
                    break;
                case "auth/requires-recent-login":
                    c += Md();
                    break;
                case "auth/too-many-requests":
                    c += "You have entered an incorrect password too many times. Please try again in a few minutes.";
                    break;
                case "auth/user-cancelled":
                    c += "Please authorize the required permissions to sign in to the application";
                    break;
                case "auth/user-not-found":
                    c += "That email address doesn't match an existing account";
                    break;
                case "auth/user-token-expired":
                    c += Md();
                    break;
                case "auth/weak-password":
                    c += "Strong passwords have at least 6 characters and a mix of letters and numbers";
                    break;
                case "auth/wrong-password":
                    c += "The email and password you entered don't match";
                    break;
                case "auth/network-request-failed":
                    c += "A network error has occurred";
                    break;
                case "auth/invalid-phone-number":
                    c += Hd();
                    break;
                case "auth/invalid-verification-code":
                    c += C("Wrong code. Try again.");
                    break;
                case "auth/code-expired":
                    c += "This code is no longer valid";
                    break;
                case "auth/expired-action-code":
                    c += "This code has expired.";
                    break;
                case "auth/invalid-action-code":
                    c += "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.";
            }
            if (b = C(c).toString()) return b;
            try {
                return JSON.parse(a.message), og("Internal error: " + a.message, void 0), Jd().toString();
            } catch (d) {
                return a.message;
            }
        }
        function Ql(a, b, c) {
            var d = ai[b] && (0, _appDefault.default).auth[ai[b]] ? new (0, _appDefault.default).auth[ai[b]] : 0 == b.indexOf("saml.") ? new (0, _appDefault.default).auth.SAMLAuthProvider(b) : new (0, _appDefault.default).auth.OAuthProvider(b);
            if (!d) throw Error("Invalid Firebase Auth provider!");
            var e = wi(W(a), b);
            if (d.addScope) for(var f = 0; f < e.length; f++)d.addScope(e[f]);
            e = xi(W(a), b) || {};
            c && (b == (0, _appDefault.default).auth.GoogleAuthProvider.PROVIDER_ID ? a = "login_hint" : b == (0, _appDefault.default).auth.GithubAuthProvider.PROVIDER_ID ? a = "login" : a = (a = ii(W(a), b)) && a.Ob, a && (e[a] = c));
            d.setCustomParameters && d.setCustomParameters(e);
            return d;
        }
        function Rl(a, b, c, d) {
            function e() {
                Dh(new Dg(a.h.tenantId || null), X(a));
                V(a, b.I(r(a.dc, a), [
                    k
                ], function() {
                    if ("file:" === (window.location && window.location.protocol)) return V(a, Sl(a).then(function(p) {
                        b.m();
                        wh(rh, X(a));
                        L("callback", a, h, F(p));
                    }, f));
                }, g));
            }
            function f(p) {
                wh(rh, X(a));
                if (!p.name || "cancel" != p.name) switch(p = Kl(p), p.code){
                    case "auth/popup-blocked":
                        e();
                        break;
                    case "auth/popup-closed-by-user":
                    case "auth/cancelled-popup-request":
                        break;
                    case "auth/credential-already-in-use":
                        break;
                    case "auth/network-request-failed":
                    case "auth/too-many-requests":
                    case "auth/user-cancelled":
                        b.a(T(p));
                        break;
                    case "auth/admin-restricted-operation":
                        b.m();
                        pi(W(a)) ? L("handleUnauthorizedUser", a, h, null, c) : L("callback", a, h, df(p));
                        break;
                    default:
                        b.m(), L("callback", a, h, df(p));
                }
            }
            function g(p) {
                wh(rh, X(a));
                p.name && "cancel" == p.name || (og("signInWithRedirect: " + p.code, void 0), p = T(p), "blank" == b.Ga && Gi(W(a)) ? (b.m(), L("providerSignIn", a, h, p)) : b.a(p));
            }
            var h = Q(b), k = Ql(a, c, d);
            Hi(W(a)) == Ii ? e() : V(a, Tl(a, k).then(function(p) {
                b.m();
                L("callback", a, h, F(p));
            }, f));
        }
        function Ul(a, b) {
            V(a, b.I(r(a.$b, a), [], function(c) {
                b.m();
                return Ll(a, b, c, !0);
            }, function(c) {
                c.name && "cancel" == c.name || (og("ContinueAsGuest: " + c.code, void 0), c = T(c), b.a(c));
            }));
        }
        function Vl(a, b, c) {
            function d(f) {
                var g = !1;
                f = b.I(r(a.ac, a), [
                    f
                ], function(h) {
                    var k = Q(b);
                    b.m();
                    L("callback", a, k, F(h));
                    g = !0;
                }, function(h) {
                    if (!h.name || "cancel" != h.name) {
                        if (!h || "auth/credential-already-in-use" != h.code) {
                            if (h && "auth/email-already-in-use" == h.code && h.email && h.credential) {
                                var k = Q(b);
                                b.m();
                                L("callback", a, k, df(h));
                            } else h && "auth/admin-restricted-operation" == h.code && pi(W(a)) ? (h = Q(b), b.m(), L("handleUnauthorizedUser", a, h, null, (0, _appDefault.default).auth.GoogleAuthProvider.PROVIDER_ID)) : (h = T(h), b.a(h));
                        }
                    }
                });
                V(a, f);
                return f.then(function() {
                    return g;
                }, function() {
                    return !1;
                });
            }
            if (c && c.credential && c.clientId === li(W(a))) {
                if (wi(W(a), (0, _appDefault.default).auth.GoogleAuthProvider.PROVIDER_ID).length) {
                    try {
                        var e = JSON.parse(atob(c.credential.split(".")[1])).email;
                    } catch (f) {}
                    Rl(a, b, (0, _appDefault.default).auth.GoogleAuthProvider.PROVIDER_ID, e);
                    return F(!0);
                }
                return d((0, _appDefault.default).auth.GoogleAuthProvider.credential(c.credential));
            }
            c && b.a(C("The selected credential for the authentication provider is not supported!").toString());
            return F(!1);
        }
        function Wl(a, b) {
            var c = b.j(), d = b.u();
            if (c) {
                if (d) {
                    var e = (0, _appDefault.default).auth.EmailAuthProvider.credential(c, d);
                    V(a, b.I(r(a.bc, a), [
                        c,
                        d
                    ], function(f) {
                        return Ll(a, b, {
                            user: f.user,
                            credential: e,
                            operationType: f.operationType,
                            additionalUserInfo: f.additionalUserInfo
                        });
                    }, function(f) {
                        if (!f.name || "cancel" != f.name) switch(f.code){
                            case "auth/email-already-in-use":
                                break;
                            case "auth/email-exists":
                                N(b.l(), !1);
                                Oj(b.U(), T(f));
                                break;
                            case "auth/too-many-requests":
                            case "auth/wrong-password":
                                N(b.i(), !1);
                                Oj(b.B(), T(f));
                                break;
                            default:
                                og("verifyPassword: " + f.message, void 0), b.a(T(f));
                        }
                    }));
                } else b.i().focus();
            } else b.l().focus();
        }
        function Xl(a) {
            a = hi(W(a));
            return 1 == a.length && a[0] == (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID;
        }
        function Yl(a) {
            a = hi(W(a));
            return 1 == a.length && a[0] == (0, _appDefault.default).auth.PhoneAuthProvider.PROVIDER_ID;
        }
        function S(a, b, c, d) {
            Xl(a) ? d ? L("signIn", a, b, c, d) : Zl(a, b, c) : a && Yl(a) && !d ? L("phoneSignInStart", a, b) : a && Gi(W(a)) && !d ? L("federatedRedirect", a, b, c) : L("providerSignIn", a, b, d, c);
        }
        function $l(a, b, c, d) {
            var e = Q(b);
            V(a, b.I(r(U(a).fetchSignInMethodsForEmail, U(a)), [
                c
            ], function(f) {
                b.m();
                am(a, e, f, c, d);
            }, function(f) {
                f = T(f);
                b.a(f);
            }));
        }
        function am(a, b, c, d, e, f) {
            c.length || Di(W(a)) && !Di(W(a)) ? Ma(c, (0, _appDefault.default).auth.EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD) ? L("passwordSignIn", a, b, d, f) : 1 == c.length && c[0] === (0, _appDefault.default).auth.EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD ? Di(W(a)) ? L("sendEmailLinkForSignIn", a, b, d, function() {
                L("signIn", a, b);
            }) : L("unsupportedProvider", a, b, d) : (c = Zh(c, hi(W(a)))) ? (Bh(new Ag(d), X(a)), L("federatedSignIn", a, b, d, c, e)) : L("unsupportedProvider", a, b, d) : oi(W(a)) ? L("handleUnauthorizedUser", a, b, d, (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID) : Di(W(a)) ? L("sendEmailLinkForSignIn", a, b, d, function() {
                L("signIn", a, b);
            }) : L("passwordSignUp", a, b, d, void 0, void 0, f);
        }
        function bm(a, b, c, d, e, f) {
            var g = Q(b);
            V(a, b.I(r(a.Ib, a), [
                c,
                f
            ], function() {
                b.m();
                L("emailLinkSignInSent", a, g, c, d, f);
            }, e));
        }
        function Zl(a, b, c) {
            c ? L("prefilledEmailSignIn", a, b, c) : L("signIn", a, b);
        }
        function cm() {
            return tb(tf(), "oobCode");
        }
        function dm() {
            var a = tb(tf(), "continueUrl");
            return a ? function() {
                Nc(window.location, a);
            } : null;
        }
        function em(a, b) {
            P.call(this, Ik, void 0, b, "anonymousUserMismatch");
            this.i = a;
        }
        m(em, P);
        em.prototype.v = function() {
            var a = this;
            O(this, this.l(), function() {
                a.i();
            });
            this.l().focus();
            P.prototype.v.call(this);
        };
        em.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
        };
        u(em.prototype, {
            l: kl
        });
        K.anonymousUserMismatch = function(a, b) {
            var c = new em(function() {
                c.m();
                S(a, b);
            });
            c.render(b);
            Y(a, c);
        };
        function fm(a) {
            P.call(this, Bk, void 0, a, "callback");
        }
        m(fm, P);
        fm.prototype.I = function(a, b, c, d) {
            return a.apply(null, b).then(c, d);
        };
        function gm(a, b, c) {
            if (c.user) {
                var d = {
                    user: c.user,
                    credential: c.credential,
                    operationType: c.operationType,
                    additionalUserInfo: c.additionalUserInfo
                }, e = zh(X(a)), f = e && e.g;
                if (f && !hm(c.user, f)) im(a, b, d);
                else {
                    var g = e && e.a;
                    g ? V(a, c.user.linkWithCredential(g).then(function(h) {
                        d = {
                            user: h.user,
                            credential: g,
                            operationType: h.operationType,
                            additionalUserInfo: h.additionalUserInfo
                        };
                        jm(a, b, d);
                    }, function(h) {
                        km(a, b, h);
                    })) : jm(a, b, d);
                }
            } else c = Q(b), b.m(), Ah(X(a)), S(a, c);
        }
        function jm(a, b, c) {
            Ah(X(a));
            Ll(a, b, c);
        }
        function km(a, b, c) {
            var d = Q(b);
            Ah(X(a));
            c = T(c);
            b.m();
            S(a, d, void 0, c);
        }
        function lm(a, b, c, d) {
            var e = Q(b);
            V(a, U(a).fetchSignInMethodsForEmail(c).then(function(f) {
                b.m();
                f.length ? Ma(f, (0, _appDefault.default).auth.EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD) ? L("passwordLinking", a, e, c) : 1 == f.length && f[0] === (0, _appDefault.default).auth.EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD ? L("emailLinkSignInLinking", a, e, c) : (f = Zh(f, hi(W(a)))) ? L("federatedLinking", a, e, c, f, d) : (Ah(X(a)), L("unsupportedProvider", a, e, c)) : (Ah(X(a)), L("passwordRecovery", a, e, c, !1, Kd().toString()));
            }, function(f) {
                km(a, b, f);
            }));
        }
        function im(a, b, c) {
            var d = Q(b);
            V(a, mm(a).then(function() {
                b.m();
                L("emailMismatch", a, d, c);
            }, function(e) {
                e.name && "cancel" == e.name || (e = T(e.code), b.a(e));
            }));
        }
        function hm(a, b) {
            if (b == a.email) return !0;
            if (a.providerData) {
                for(var c = 0; c < a.providerData.length; c++)if (b == a.providerData[c].email) return !0;
            }
            return !1;
        }
        K.callback = function(a, b, c) {
            var d = new fm;
            d.render(b);
            Y(a, d);
            c = c || Sl(a);
            V(a, c.then(function(e) {
                gm(a, d, e);
            }, function(e) {
                if ((e = Kl(e)) && ("auth/account-exists-with-different-credential" == e.code || "auth/email-already-in-use" == e.code) && e.email && e.credential) Bh(new Ag(e.email, e.credential), X(a)), lm(a, d, e.email);
                else if (e && "auth/user-cancelled" == e.code) {
                    var f = zh(X(a)), g = T(e);
                    f && f.a ? lm(a, d, f.g, g) : f ? $l(a, d, f.g, g) : km(a, d, e);
                } else e && "auth/credential-already-in-use" == e.code || (e && "auth/operation-not-supported-in-this-environment" == e.code && Xl(a) ? gm(a, d, {
                    user: null,
                    credential: null
                }) : e && "auth/admin-restricted-operation" == e.code && pi(W(a)) ? (d.m(), Ah(X(a)), L("handleUnauthorizedUser", a, b, null, null)) : km(a, d, e));
            }));
        };
        function nm(a, b) {
            P.call(this, Hk, void 0, b, "differentDeviceError");
            this.i = a;
        }
        m(nm, P);
        nm.prototype.v = function() {
            var a = this;
            O(this, this.l(), function() {
                a.i();
            });
            this.l().focus();
            P.prototype.v.call(this);
        };
        nm.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
        };
        u(nm.prototype, {
            l: kl
        });
        K.differentDeviceError = function(a, b) {
            var c = new nm(function() {
                c.m();
                S(a, b);
            });
            c.render(b);
            Y(a, c);
        };
        function om(a, b, c, d) {
            P.call(this, Sk, {
                email: a,
                G: !!c
            }, d, "emailChangeRevoke");
            this.l = b;
            this.i = c || null;
        }
        m(om, P);
        om.prototype.v = function() {
            var a = this;
            O(this, M(this, "firebaseui-id-reset-password-link"), function() {
                a.l();
            });
            this.i && (this.w(this.i), this.u().focus());
            P.prototype.v.call(this);
        };
        om.prototype.o = function() {
            this.l = this.i = null;
            P.prototype.o.call(this);
        };
        u(om.prototype, {
            u: jl,
            B: kl,
            w: ll
        });
        function pm() {
            return M(this, "firebaseui-id-new-password");
        }
        function qm() {
            return M(this, "firebaseui-id-password-toggle");
        }
        function rm() {
            this.Ra = !this.Ra;
            var a = qm.call(this), b = pm.call(this);
            this.Ra ? (b.type = "text", Ui(a, "firebaseui-input-toggle-off"), Vi(a, "firebaseui-input-toggle-on")) : (b.type = "password", Ui(a, "firebaseui-input-toggle-on"), Vi(a, "firebaseui-input-toggle-off"));
            b.focus();
        }
        function sm() {
            return M(this, "firebaseui-id-new-password-error");
        }
        function tm() {
            this.Ra = !1;
            var a = pm.call(this);
            a.type = "password";
            var b = sm.call(this);
            Jj(this, a, function() {
                Pj(b) && (N(a, !0), Nj(b));
            });
            var c = qm.call(this);
            Ui(c, "firebaseui-input-toggle-on");
            Vi(c, "firebaseui-input-toggle-off");
            Lj(this, a, function() {
                Ui(c, "firebaseui-input-toggle-focus");
                Vi(c, "firebaseui-input-toggle-blur");
            });
            Mj(this, a, function() {
                Ui(c, "firebaseui-input-toggle-blur");
                Vi(c, "firebaseui-input-toggle-focus");
            });
            O(this, c, r(rm, this));
        }
        function um() {
            var a = pm.call(this);
            var b = sm.call(this);
            Wi(a) ? (N(a, !0), Nj(b), b = !0) : (N(a, !1), Oj(b, C("Enter your password").toString()), b = !1);
            return b ? Wi(a) : null;
        }
        function vm(a, b, c) {
            P.call(this, Pk, {
                email: a
            }, c, "passwordReset");
            this.l = b;
        }
        m(vm, P);
        vm.prototype.v = function() {
            this.H();
            this.B(this.l);
            vk(this, this.i(), this.l);
            this.i().focus();
            P.prototype.v.call(this);
        };
        vm.prototype.o = function() {
            this.l = null;
            P.prototype.o.call(this);
        };
        u(vm.prototype, {
            i: pm,
            w: sm,
            M: qm,
            H: tm,
            u: um,
            U: jl,
            P: kl,
            B: ll
        });
        function wm(a, b, c, d, e) {
            P.call(this, Zk, {
                factorId: a,
                phoneNumber: c || null,
                G: !!d
            }, e, "revertSecondFactorAdditionSuccess");
            this.l = b;
            this.i = d || null;
        }
        m(wm, P);
        wm.prototype.v = function() {
            var a = this;
            O(this, M(this, "firebaseui-id-reset-password-link"), function() {
                a.l();
            });
            this.i && (this.w(this.i), this.u().focus());
            P.prototype.v.call(this);
        };
        wm.prototype.o = function() {
            this.l = this.i = null;
            P.prototype.o.call(this);
        };
        u(wm.prototype, {
            u: jl,
            B: kl,
            w: ll
        });
        function xm(a, b, c, d, e) {
            var f = c.u();
            f && V(a, c.I(r(U(a).confirmPasswordReset, U(a)), [
                d,
                f
            ], function() {
                c.m();
                var g = new Fl(e);
                g.render(b);
                Y(a, g);
            }, function(g) {
                ym(a, b, c, g);
            }));
        }
        function ym(a, b, c, d) {
            "auth/weak-password" == (d && d.code) ? (a = T(d), N(c.i(), !1), Oj(c.w(), a), c.i().focus()) : (c && c.m(), c = new Gl, c.render(b), Y(a, c));
        }
        function zm(a, b, c) {
            var d = new om(c, function() {
                V(a, d.I(r(U(a).sendPasswordResetEmail, U(a)), [
                    c
                ], function() {
                    d.m();
                    d = new yl(c, void 0, H(W(a)), J(W(a)));
                    d.render(b);
                    Y(a, d);
                }, function() {
                    d.a(Id().toString());
                }));
            });
            d.render(b);
            Y(a, d);
        }
        function Am(a, b, c, d) {
            var e = new wm(d.factorId, function() {
                e.I(r(U(a).sendPasswordResetEmail, U(a)), [
                    c
                ], function() {
                    e.m();
                    e = new yl(c, void 0, H(W(a)), J(W(a)));
                    e.render(b);
                    Y(a, e);
                }, function() {
                    e.a(Id().toString());
                });
            }, d.phoneNumber);
            e.render(b);
            Y(a, e);
        }
        K.passwordReset = function(a, b, c, d) {
            V(a, U(a).verifyPasswordResetCode(c).then(function(e) {
                var f = new vm(e, function() {
                    xm(a, b, f, c, d);
                });
                f.render(b);
                Y(a, f);
            }, function() {
                ym(a, b);
            }));
        };
        K.emailChangeRevocation = function(a, b, c) {
            var d = null;
            V(a, U(a).checkActionCode(c).then(function(e) {
                d = e.data.email;
                return U(a).applyActionCode(c);
            }).then(function() {
                zm(a, b, d);
            }, function() {
                var e = new Hl;
                e.render(b);
                Y(a, e);
            }));
        };
        K.emailVerification = function(a, b, c, d) {
            V(a, U(a).applyActionCode(c).then(function() {
                var e = new zl(d);
                e.render(b);
                Y(a, e);
            }, function() {
                var e = new Al;
                e.render(b);
                Y(a, e);
            }));
        };
        K.revertSecondFactorAddition = function(a, b, c) {
            var d = null, e = null;
            V(a, U(a).checkActionCode(c).then(function(f) {
                d = f.data.email;
                e = f.data.multiFactorInfo;
                return U(a).applyActionCode(c);
            }).then(function() {
                Am(a, b, d, e);
            }, function() {
                var f = new Dl;
                f.render(b);
                Y(a, f);
            }));
        };
        K.verifyAndChangeEmail = function(a, b, c, d) {
            var e = null;
            V(a, U(a).checkActionCode(c).then(function(f) {
                e = f.data.email;
                return U(a).applyActionCode(c);
            }).then(function() {
                var f = new Bl(e, d);
                f.render(b);
                Y(a, f);
            }, function() {
                var f = new Cl;
                f.render(b);
                Y(a, f);
            }));
        };
        function Bm(a, b) {
            try {
                var c = "number" == typeof a.selectionStart;
            } catch (d) {
                c = !1;
            }
            c ? (a.selectionStart = b, a.selectionEnd = b) : z && !mc("9") && ("textarea" == a.type && (b = a.value.substring(0, b).replace(/(\r\n|\r|\n)/g, "\n").length), a = a.createTextRange(), a.collapse(!0), a.move("character", b), a.select());
        }
        function Cm(a, b, c, d, e, f) {
            P.call(this, Gk, {
                email: c
            }, f, "emailLinkSignInConfirmation", {
                F: d,
                D: e
            });
            this.l = a;
            this.u = b;
        }
        m(Cm, P);
        Cm.prototype.v = function() {
            this.w(this.l);
            this.B(this.l, this.u);
            this.i().focus();
            Bm(this.i(), (this.i().value || "").length);
            P.prototype.v.call(this);
        };
        Cm.prototype.o = function() {
            this.u = this.l = null;
            P.prototype.o.call(this);
        };
        u(Cm.prototype, {
            i: sl,
            M: tl,
            w: ul,
            H: vl,
            j: wl,
            U: jl,
            P: kl,
            B: ll
        });
        K.emailLinkConfirmation = function(a, b, c, d, e, f) {
            var g = new Cm(function() {
                var h = g.j();
                h ? (g.m(), d(a, b, h, c)) : g.i().focus();
            }, function() {
                g.m();
                S(a, b, e || void 0);
            }, e || void 0, H(W(a)), J(W(a)));
            g.render(b);
            Y(a, g);
            f && g.a(f);
        };
        function Dm(a, b, c, d, e) {
            P.call(this, Lk, {
                ga: a
            }, e, "emailLinkSignInLinkingDifferentDevice", {
                F: c,
                D: d
            });
            this.i = b;
        }
        m(Dm, P);
        Dm.prototype.v = function() {
            this.u(this.i);
            this.l().focus();
            P.prototype.v.call(this);
        };
        Dm.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
        };
        u(Dm.prototype, {
            l: jl,
            u: ll
        });
        K.emailLinkNewDeviceLinking = function(a, b, c, d) {
            var e = new Pb(c);
            c = e.a.a.get(x.PROVIDER_ID) || null;
            Tb(e, null);
            if (c) {
                var f = new Dm(ii(W(a), c), function() {
                    f.m();
                    d(a, b, e.toString());
                }, H(W(a)), J(W(a)));
                f.render(b);
                Y(a, f);
            } else S(a, b);
        };
        function Em(a) {
            P.call(this, Dk, void 0, a, "blank");
        }
        m(Em, P);
        function Fm(a, b, c, d, e) {
            var f = new Em, g = new Pb(c), h = g.a.a.get(x.$a) || "", k = g.a.a.get(x.Sa) || "", p = "1" === g.a.a.get(x.Qa), t = Sb(g), I = g.a.a.get(x.PROVIDER_ID) || null;
            g = g.a.a.get(x.vb) || null;
            Gm(a, g);
            var Ca = !vh(th, X(a)), Wk = d || Eh(k, X(a)), ld = (d = Fh(k, X(a))) && d.a;
            I && ld && ld.providerId !== I && (ld = null);
            f.render(b);
            Y(a, f);
            V(a, f.I(function() {
                var ya = F(null);
                ya = t && Ca || Ca && p ? df(Error("anonymous-user-not-found")) : Hm(a, c).then(function(wg) {
                    if (I && !ld) throw Error("pending-credential-not-found");
                    return wg;
                });
                var md = null;
                return ya.then(function(wg) {
                    md = wg;
                    return e ? null : U(a).checkActionCode(h);
                }).then(function() {
                    return md;
                });
            }, [], function(ya) {
                Wk ? Im(a, f, Wk, c, ld, ya) : p ? (f.m(), L("differentDeviceError", a, b)) : (f.m(), L("emailLinkConfirmation", a, b, c, Jm));
            }, function(ya) {
                var md = void 0;
                if (!ya || !ya.name || "cancel" != ya.name) switch(f.m(), ya && ya.message){
                    case "anonymous-user-not-found":
                        L("differentDeviceError", a, b);
                        break;
                    case "anonymous-user-mismatch":
                        L("anonymousUserMismatch", a, b);
                        break;
                    case "pending-credential-not-found":
                        L("emailLinkNewDeviceLinking", a, b, c, Km);
                        break;
                    default:
                        ya && (md = T(ya)), S(a, b, void 0, md);
                }
            }));
        }
        function Jm(a, b, c, d) {
            Fm(a, b, d, c, !0);
        }
        function Km(a, b, c) {
            Fm(a, b, c);
        }
        function Im(a, b, c, d, e, f) {
            var g = Q(b);
            b.$("mdl-spinner mdl-spinner--single-color mdl-js-spinner is-active firebaseui-progress-dialog-loading-icon", C("Signing in...").toString());
            var h = null;
            e = (f ? Lm(a, f, c, d, e) : Mm(a, c, d, e)).then(function(k) {
                wh(uh, X(a));
                wh(th, X(a));
                b.h();
                b.$("firebaseui-icon-done", C("Signed in!").toString());
                h = setTimeout(function() {
                    b.h();
                    Ll(a, b, k, !0);
                }, 1E3);
                V(a, function() {
                    b && (b.h(), b.m());
                    clearTimeout(h);
                });
            }, function(k) {
                b.h();
                b.m();
                if (!k.name || "cancel" != k.name) {
                    k = Kl(k);
                    var p = T(k);
                    "auth/email-already-in-use" == k.code || "auth/credential-already-in-use" == k.code ? (wh(uh, X(a)), wh(th, X(a))) : "auth/invalid-email" == k.code ? (p = C("The email provided does not match the current sign-in session.").toString(), L("emailLinkConfirmation", a, g, d, Jm, null, p)) : S(a, g, c, p);
                }
            });
            V(a, e);
        }
        K.emailLinkSignInCallback = Fm;
        function Nm(a, b, c, d, e, f) {
            P.call(this, Kk, {
                email: a,
                ga: b
            }, f, "emailLinkSignInLinking", {
                F: d,
                D: e
            });
            this.i = c;
        }
        m(Nm, P);
        Nm.prototype.v = function() {
            this.u(this.i);
            this.l().focus();
            P.prototype.v.call(this);
        };
        Nm.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
        };
        u(Nm.prototype, {
            l: jl,
            u: ll
        });
        function Om(a, b, c, d) {
            var e = Q(b);
            bm(a, b, c, function() {
                S(a, e, c);
            }, function(f) {
                if (!f.name || "cancel" != f.name) {
                    var g = T(f);
                    f && "auth/network-request-failed" == f.code ? b.a(g) : (b.m(), S(a, e, c, g));
                }
            }, d);
        }
        K.emailLinkSignInLinking = function(a, b, c) {
            var d = zh(X(a));
            Ah(X(a));
            if (d) {
                var e = d.a.providerId, f = new Nm(c, ii(W(a), e), function() {
                    Om(a, f, c, d);
                }, H(W(a)), J(W(a)));
                f.render(b);
                Y(a, f);
            } else S(a, b);
        };
        function Pm(a, b, c, d, e, f) {
            P.call(this, Ek, {
                email: a
            }, f, "emailLinkSignInSent", {
                F: d,
                D: e
            });
            this.u = b;
            this.i = c;
        }
        m(Pm, P);
        Pm.prototype.v = function() {
            var a = this;
            O(this, this.l(), function() {
                a.i();
            });
            O(this, M(this, "firebaseui-id-trouble-getting-email-link"), function() {
                a.u();
            });
            this.l().focus();
            P.prototype.v.call(this);
        };
        Pm.prototype.o = function() {
            this.i = this.u = null;
            P.prototype.o.call(this);
        };
        u(Pm.prototype, {
            l: kl
        });
        K.emailLinkSignInSent = function(a, b, c, d, e) {
            var f = new Pm(c, function() {
                f.m();
                L("emailNotReceived", a, b, c, d, e);
            }, function() {
                f.m();
                d();
            }, H(W(a)), J(W(a)));
            f.render(b);
            Y(a, f);
        };
        function Qm(a, b, c, d, e, f, g) {
            P.call(this, cl, {
                jc: a,
                Qb: b
            }, g, "emailMismatch", {
                F: e,
                D: f
            });
            this.l = c;
            this.i = d;
        }
        m(Qm, P);
        Qm.prototype.v = function() {
            this.w(this.l, this.i);
            this.u().focus();
            P.prototype.v.call(this);
        };
        Qm.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
        };
        u(Qm.prototype, {
            u: jl,
            B: kl,
            w: ll
        });
        K.emailMismatch = function(a, b, c) {
            var d = zh(X(a));
            if (d) {
                var e = new Qm(c.user.email, d.g, function() {
                    var f = e;
                    Ah(X(a));
                    Ll(a, f, c);
                }, function() {
                    var f = c.credential.providerId, g = Q(e);
                    e.m();
                    d.a ? L("federatedLinking", a, g, d.g, f) : L("federatedSignIn", a, g, d.g, f);
                }, H(W(a)), J(W(a)));
                e.render(b);
                Y(a, e);
            } else S(a, b);
        };
        function Rm(a, b, c, d, e) {
            P.call(this, Fk, void 0, e, "emailNotReceived", {
                F: c,
                D: d
            });
            this.l = a;
            this.i = b;
        }
        m(Rm, P);
        Rm.prototype.v = function() {
            var a = this;
            O(this, this.u(), function() {
                a.i();
            });
            O(this, this.Da(), function() {
                a.l();
            });
            this.u().focus();
            P.prototype.v.call(this);
        };
        Rm.prototype.Da = function() {
            return M(this, "firebaseui-id-resend-email-link");
        };
        Rm.prototype.o = function() {
            this.i = this.l = null;
            P.prototype.o.call(this);
        };
        u(Rm.prototype, {
            u: kl
        });
        K.emailNotReceived = function(a, b, c, d, e) {
            var f = new Rm(function() {
                bm(a, f, c, d, function(g) {
                    g = T(g);
                    f.a(g);
                }, e);
            }, function() {
                f.m();
                S(a, b, c);
            }, H(W(a)), J(W(a)));
            f.render(b);
            Y(a, f);
        };
        function Sm(a, b, c, d, e, f) {
            P.call(this, Mk, {
                email: a,
                ga: b
            }, f, "federatedLinking", {
                F: d,
                D: e
            });
            this.i = c;
        }
        m(Sm, P);
        Sm.prototype.v = function() {
            this.u(this.i);
            this.l().focus();
            P.prototype.v.call(this);
        };
        Sm.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
        };
        u(Sm.prototype, {
            l: jl,
            u: ll
        });
        K.federatedLinking = function(a, b, c, d, e) {
            var f = zh(X(a));
            if (f && f.a) {
                var g = new Sm(c, ii(W(a), d), function() {
                    Rl(a, g, d, c);
                }, H(W(a)), J(W(a)));
                g.render(b);
                Y(a, g);
                e && g.a(e);
            } else S(a, b);
        };
        K.federatedRedirect = function(a, b, c) {
            var d = new Em;
            d.render(b);
            Y(a, d);
            b = hi(W(a))[0];
            Rl(a, d, b, c);
        };
        K.federatedSignIn = function(a, b, c, d, e) {
            var f = new Sm(c, ii(W(a), d), function() {
                Rl(a, f, d, c);
            }, H(W(a)), J(W(a)));
            f.render(b);
            Y(a, f);
            e && f.a(e);
        };
        function Tm(a, b, c, d) {
            var e = b.u();
            e ? V(a, b.I(r(a.Xb, a), [
                c,
                e
            ], function(f) {
                f = f.user.linkWithCredential(d).then(function(g) {
                    return Ll(a, b, {
                        user: g.user,
                        credential: d,
                        operationType: g.operationType,
                        additionalUserInfo: g.additionalUserInfo
                    });
                });
                V(a, f);
                return f;
            }, function(f) {
                if (!f.name || "cancel" != f.name) switch(f.code){
                    case "auth/wrong-password":
                        N(b.i(), !1);
                        Oj(b.B(), T(f));
                        break;
                    case "auth/too-many-requests":
                        b.a(T(f));
                        break;
                    default:
                        og("signInWithEmailAndPassword: " + f.message, void 0), b.a(T(f));
                }
            })) : b.i().focus();
        }
        K.passwordLinking = function(a, b, c) {
            var d = zh(X(a));
            Ah(X(a));
            var e = d && d.a;
            if (e) {
                var f = new ql(c, function() {
                    Tm(a, f, c, e);
                }, function() {
                    f.m();
                    L("passwordRecovery", a, b, c);
                }, H(W(a)), J(W(a)));
                f.render(b);
                Y(a, f);
            } else S(a, b);
        };
        function Um(a, b, c, d, e, f) {
            P.call(this, zk, {
                email: c,
                Ta: !!b
            }, f, "passwordRecovery", {
                F: d,
                D: e
            });
            this.l = a;
            this.u = b;
        }
        m(Um, P);
        Um.prototype.v = function() {
            this.B();
            this.H(this.l, this.u);
            Wi(this.i()) || this.i().focus();
            vk(this, this.i(), this.l);
            P.prototype.v.call(this);
        };
        Um.prototype.o = function() {
            this.u = this.l = null;
            P.prototype.o.call(this);
        };
        u(Um.prototype, {
            i: sl,
            w: tl,
            B: ul,
            M: vl,
            j: wl,
            U: jl,
            P: kl,
            H: ll
        });
        function Vm(a, b) {
            var c = b.j();
            if (c) {
                var d = Q(b);
                V(a, b.I(r(U(a).sendPasswordResetEmail, U(a)), [
                    c
                ], function() {
                    b.m();
                    var e = new yl(c, function() {
                        e.m();
                        S(a, d);
                    }, H(W(a)), J(W(a)));
                    e.render(d);
                    Y(a, e);
                }, function(e) {
                    N(b.i(), !1);
                    Oj(b.w(), T(e));
                }));
            } else b.i().focus();
        }
        K.passwordRecovery = function(a, b, c, d, e) {
            var f = new Um(function() {
                Vm(a, f);
            }, d ? void 0 : function() {
                f.m();
                S(a, b);
            }, c, H(W(a)), J(W(a)));
            f.render(b);
            Y(a, f);
            e && f.a(e);
        };
        K.passwordSignIn = function(a, b, c, d) {
            var e = new xl(function() {
                Wl(a, e);
            }, function() {
                var f = e.M();
                e.m();
                L("passwordRecovery", a, b, f);
            }, c, H(W(a)), J(W(a)), d);
            e.render(b);
            Y(a, e);
        };
        function Wm() {
            return M(this, "firebaseui-id-name");
        }
        function Xm() {
            return M(this, "firebaseui-id-name-error");
        }
        function Ym(a, b, c, d, e, f, g, h, k) {
            P.call(this, yk, {
                email: d,
                Tb: a,
                name: e,
                Ta: !!c,
                ia: !!h
            }, k, "passwordSignUp", {
                F: f,
                D: g
            });
            this.w = b;
            this.H = c;
            this.B = a;
        }
        m(Ym, P);
        Ym.prototype.v = function() {
            this.ea();
            this.B && this.Ja();
            this.ua();
            this.pa(this.w, this.H);
            this.B ? (uk(this, this.i(), this.u()), uk(this, this.u(), this.l())) : uk(this, this.i(), this.l());
            this.w && vk(this, this.l(), this.w);
            Wi(this.i()) ? this.B && !Wi(this.u()) ? this.u().focus() : this.l().focus() : this.i().focus();
            P.prototype.v.call(this);
        };
        Ym.prototype.o = function() {
            this.H = this.w = null;
            P.prototype.o.call(this);
        };
        u(Ym.prototype, {
            i: sl,
            U: tl,
            ea: ul,
            jb: vl,
            j: wl,
            u: Wm,
            Bc: Xm,
            Ja: function() {
                var a = Wm.call(this), b = Xm.call(this);
                Jj(this, a, function() {
                    Pj(b) && (N(a, !0), Nj(b));
                });
            },
            M: function() {
                var a = Wm.call(this);
                var b = Xm.call(this);
                var c = Wi(a);
                c = !/^[\s\xa0]*$/.test(null == c ? "" : String(c));
                N(a, c);
                c ? (Nj(b), b = !0) : (Oj(b, C("Enter your account name").toString()), b = !1);
                return b ? Ua(Wi(a)) : null;
            },
            l: pm,
            ba: sm,
            lb: qm,
            ua: tm,
            P: um,
            Nb: jl,
            Mb: kl,
            pa: ll
        });
        function Zm(a, b) {
            var c = Ci(W(a)), d = b.j(), e = null;
            c && (e = b.M());
            var f = b.P();
            if (d) {
                if (c) {
                    if (e) e = cb(e);
                    else {
                        b.u().focus();
                        return;
                    }
                }
                if (f) {
                    var g = (0, _appDefault.default).auth.EmailAuthProvider.credential(d, f);
                    V(a, b.I(r(a.Yb, a), [
                        d,
                        f
                    ], function(h) {
                        var k = {
                            user: h.user,
                            credential: g,
                            operationType: h.operationType,
                            additionalUserInfo: h.additionalUserInfo
                        };
                        return c ? (h = h.user.updateProfile({
                            displayName: e
                        }).then(function() {
                            return Ll(a, b, k);
                        }), V(a, h), h) : Ll(a, b, k);
                    }, function(h) {
                        if (!h.name || "cancel" != h.name) {
                            var k = Kl(h);
                            h = T(k);
                            switch(k.code){
                                case "auth/email-already-in-use":
                                    return $m(a, b, d, k);
                                case "auth/too-many-requests":
                                    h = C("Too many account requests are coming from your IP address. Try again in a few minutes.").toString();
                                case "auth/operation-not-allowed":
                                case "auth/weak-password":
                                    N(b.l(), !1);
                                    Oj(b.ba(), h);
                                    break;
                                case "auth/admin-restricted-operation":
                                    pi(W(a)) ? (h = Q(b), b.m(), L("handleUnauthorizedUser", a, h, d, (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID)) : b.a(h);
                                    break;
                                default:
                                    k = "setAccountInfo: " + ah(k), og(k, void 0), b.a(h);
                            }
                        }
                    }));
                } else b.l().focus();
            } else b.i().focus();
        }
        function $m(a, b, c, d) {
            function e() {
                var g = T(d);
                N(b.i(), !1);
                Oj(b.U(), g);
                b.i().focus();
            }
            var f = U(a).fetchSignInMethodsForEmail(c).then(function(g) {
                g.length ? e() : (g = Q(b), b.m(), L("passwordRecovery", a, g, c, !1, Kd().toString()));
            }, function() {
                e();
            });
            V(a, f);
            return f;
        }
        K.passwordSignUp = function(a, b, c, d, e, f) {
            function g() {
                h.m();
                S(a, b);
            }
            var h = new Ym(Ci(W(a)), function() {
                Zm(a, h);
            }, e ? void 0 : g, c, d, H(W(a)), J(W(a)), f);
            h.render(b);
            Y(a, h);
        };
        function an() {
            return M(this, "firebaseui-id-phone-confirmation-code");
        }
        function bn() {
            return M(this, "firebaseui-id-phone-confirmation-code-error");
        }
        function cn() {
            return M(this, "firebaseui-id-resend-countdown");
        }
        function dn(a, b, c, d, e, f, g, h, k) {
            P.call(this, fl, {
                phoneNumber: e
            }, k, "phoneSignInFinish", {
                F: g,
                D: h
            });
            this.jb = f;
            this.i = new hj(1E3);
            this.B = f;
            this.P = a;
            this.l = b;
            this.H = c;
            this.M = d;
        }
        m(dn, P);
        dn.prototype.v = function() {
            var a = this;
            this.U(this.jb);
            ke(this.i, "tick", this.w, !1, this);
            this.i.start();
            O(this, M(this, "firebaseui-id-change-phone-number-link"), function() {
                a.P();
            });
            O(this, this.Da(), function() {
                a.M();
            });
            this.Ja(this.l);
            this.ea(this.l, this.H);
            this.u().focus();
            P.prototype.v.call(this);
        };
        dn.prototype.o = function() {
            this.M = this.H = this.l = this.P = null;
            ij(this.i);
            se(this.i, "tick", this.w);
            this.i = null;
            P.prototype.o.call(this);
        };
        dn.prototype.w = function() {
            --this.B;
            0 < this.B ? this.U(this.B) : (ij(this.i), se(this.i, "tick", this.w), this.ua(), this.lb());
        };
        u(dn.prototype, {
            u: an,
            pa: bn,
            Ja: function(a) {
                var b = an.call(this), c = bn.call(this);
                Jj(this, b, function() {
                    Pj(c) && (N(b, !0), Nj(c));
                });
                a && Kj(this, b, function() {
                    a();
                });
            },
            ba: function() {
                var a = Ua(Wi(an.call(this)) || "");
                return /^\d{6}$/.test(a) ? a : null;
            },
            Fb: cn,
            U: function(a) {
                $c(cn.call(this), C("Resend code in " + ((9 < a ? "0:" : "0:0") + a)).toString());
            },
            ua: function() {
                Nj(this.Fb());
            },
            Da: function() {
                return M(this, "firebaseui-id-resend-link");
            },
            lb: function() {
                Oj(this.Da());
            },
            Nb: jl,
            Mb: kl,
            ea: ll
        });
        function en(a, b, c, d) {
            function e(g) {
                b.u().focus();
                N(b.u(), !1);
                Oj(b.pa(), g);
            }
            var f = b.ba();
            f ? (b.$("mdl-spinner mdl-spinner--single-color mdl-js-spinner is-active firebaseui-progress-dialog-loading-icon", C("Verifying...").toString()), V(a, b.I(r(d.confirm, d), [
                f
            ], function(g) {
                b.h();
                b.$("firebaseui-icon-done", C("Verified!").toString());
                var h = setTimeout(function() {
                    b.h();
                    b.m();
                    var k = {
                        user: fn(a).currentUser,
                        credential: null,
                        operationType: g.operationType,
                        additionalUserInfo: g.additionalUserInfo
                    };
                    Ll(a, b, k, !0);
                }, 1E3);
                V(a, function() {
                    b && b.h();
                    clearTimeout(h);
                });
            }, function(g) {
                if (g.name && "cancel" == g.name) b.h();
                else {
                    var h = Kl(g);
                    g = T(h);
                    switch(h.code){
                        case "auth/credential-already-in-use":
                            b.h();
                            break;
                        case "auth/code-expired":
                            h = Q(b);
                            b.h();
                            b.m();
                            L("phoneSignInStart", a, h, c, g);
                            break;
                        case "auth/missing-verification-code":
                        case "auth/invalid-verification-code":
                            b.h();
                            e(g);
                            break;
                        default:
                            b.h(), b.a(g);
                    }
                }
            }))) : e(C("Wrong code. Try again.").toString());
        }
        K.phoneSignInFinish = function(a, b, c, d, e, f) {
            var g = new dn(function() {
                g.m();
                L("phoneSignInStart", a, b, c);
            }, function() {
                en(a, g, c, e);
            }, function() {
                g.m();
                S(a, b);
            }, function() {
                g.m();
                L("phoneSignInStart", a, b, c);
            }, Yh(c), d, H(W(a)), J(W(a)));
            g.render(b);
            Y(a, g);
            f && g.a(f);
        };
        var gn = !z && !(y("Safari") && !(Xb() || y("Coast") || y("Opera") || y("Edge") || y("Firefox") || y("FxiOS") || y("Silk") || y("Android")));
        function hn(a, b) {
            if (/-[a-z]/.test(b)) return null;
            if (gn && a.dataset) {
                if (!(!y("Android") || Xb() || y("Firefox") || y("FxiOS") || y("Opera") || y("Silk") || b in a.dataset)) return null;
                a = a.dataset[b];
                return void 0 === a ? null : a;
            }
            return a.getAttribute("data-" + String(b).replace(/([A-Z])/g, "-$1").toLowerCase());
        }
        function jn(a, b, c) {
            var d = this;
            a = hd(ek, {
                items: a
            }, null, this.s);
            lk.call(this, a, !0, !0);
            c && (c = kn(a, c)) && (c.focus(), Bj(c, a));
            O(this, a, function(e) {
                if (e = (e = ad(e.target, "firebaseui-id-list-box-dialog-button")) && hn(e, "listboxid")) mk.call(d), b(e);
            });
        }
        function kn(a, b) {
            a = (a || document).getElementsByTagName("BUTTON");
            for(var c = 0; c < a.length; c++)if (hn(a[c], "listboxid") === b) return a[c];
            return null;
        }
        function ln() {
            return M(this, "firebaseui-id-phone-number");
        }
        function mn() {
            return M(this, "firebaseui-id-country-selector");
        }
        function nn() {
            return M(this, "firebaseui-id-phone-number-error");
        }
        function on(a, b) {
            var c = a.a, d = pn("1-US-0", c), e = null;
            b && pn(b, c) ? e = b : d ? e = "1-US-0" : e = 0 < c.length ? c[0].c : null;
            if (!e) throw Error("No available default country");
            qn.call(this, e, a);
        }
        function pn(a, b) {
            a = Qh(a);
            return !(!a || !Ma(b, a));
        }
        function rn(a) {
            return a.map(function(b) {
                return {
                    id: b.c,
                    Ma: "firebaseui-flag " + sn(b),
                    label: b.name + " " + ("\u200E+" + b.b)
                };
            });
        }
        function sn(a) {
            return "firebaseui-flag-" + a.f;
        }
        function tn(a) {
            var b = this;
            jn.call(this, rn(a.a), function(c) {
                qn.call(b, c, a, !0);
                b.O().focus();
            }, this.Ba);
        }
        function qn(a, b, c) {
            var d = Qh(a);
            d && (c && (c = Ua(Wi(ln.call(this)) || ""), b = Ph(b, c), b.length && b[0].b != d.b && (c = "+" + d.b + c.substr(b[0].b.length + 1), Xi(ln.call(this), c))), b = Qh(this.Ba), this.Ba = a, a = M(this, "firebaseui-id-country-selector-flag"), b && Vi(a, sn(b)), Ui(a, sn(d)), $c(M(this, "firebaseui-id-country-selector-code"), "\u200E+" + d.b));
        }
        function un(a, b, c, d, e, f, g, h, k, p) {
            P.call(this, el, {
                Gb: b,
                Aa: k || null,
                Va: !!c,
                ia: !!f
            }, p, "phoneSignInStart", {
                F: d,
                D: e
            });
            this.H = h || null;
            this.M = b;
            this.l = a;
            this.w = c || null;
            this.pa = g || null;
        }
        m(un, P);
        un.prototype.v = function() {
            this.ea(this.pa, this.H);
            this.P(this.l, this.w || void 0);
            this.M || uk(this, this.O(), this.i());
            vk(this, this.i(), this.l);
            this.O().focus();
            Bm(this.O(), (this.O().value || "").length);
            P.prototype.v.call(this);
        };
        un.prototype.o = function() {
            this.w = this.l = null;
            P.prototype.o.call(this);
        };
        u(un.prototype, {
            Cb: nk,
            O: ln,
            B: nn,
            ea: function(a, b, c) {
                var d = this, e = ln.call(this), f = mn.call(this), g = nn.call(this), h = a || Vh, k = h.a;
                if (0 == k.length) throw Error("No available countries provided.");
                on.call(d, h, b);
                O(this, f, function() {
                    tn.call(d, h);
                });
                Jj(this, e, function() {
                    Pj(g) && (N(e, !0), Nj(g));
                    var p = Ua(Wi(e) || ""), t = Qh(this.Ba), I = Ph(h, p);
                    p = pn("1-US-0", k);
                    I.length && I[0].b != t.b && (t = I[0], qn.call(d, "1" == t.b && p ? "1-US-0" : t.c, h));
                });
                c && Kj(this, e, function() {
                    c();
                });
            },
            U: function(a) {
                var b = Ua(Wi(ln.call(this)) || "");
                a = a || Vh;
                var c = a.a, d = Ph(Vh, b);
                if (d.length && !Ma(c, d[0])) throw Xi(ln.call(this)), ln.call(this).focus(), Oj(nn.call(this), C("The country code provided is not supported.").toString()), Error("The country code provided is not supported.");
                c = Qh(this.Ba);
                d.length && d[0].b != c.b && qn.call(this, d[0].c, a);
                d.length && (b = b.substr(d[0].b.length + 1));
                return b ? new Wh(this.Ba, b) : null;
            },
            Ja: mn,
            ba: function() {
                return M(this, "firebaseui-recaptcha-container");
            },
            u: function() {
                return M(this, "firebaseui-id-recaptcha-error");
            },
            i: jl,
            ua: kl,
            P: ll
        });
        function vn(a, b, c, d) {
            try {
                var e = b.U(Qi);
            } catch (f1) {
                return;
            }
            e ? Oi ? (b.$("mdl-spinner mdl-spinner--single-color mdl-js-spinner is-active firebaseui-progress-dialog-loading-icon", C("Verifying...").toString()), V(a, b.I(r(a.cc, a), [
                Yh(e),
                c
            ], function(f) {
                var g = Q(b);
                b.$("firebaseui-icon-done", C("Code sent!").toString());
                var h = setTimeout(function() {
                    b.h();
                    b.m();
                    L("phoneSignInFinish", a, g, e, 15, f);
                }, 1E3);
                V(a, function() {
                    b && b.h();
                    clearTimeout(h);
                });
            }, function(f) {
                b.h();
                if (!f.name || "cancel" != f.name) {
                    grecaptcha.reset(Ri);
                    Oi = null;
                    var g = f && f.message || "";
                    if (f.code) switch(f.code){
                        case "auth/too-many-requests":
                            g = C("This phone number has been used too many times").toString();
                            break;
                        case "auth/invalid-phone-number":
                        case "auth/missing-phone-number":
                            b.O().focus();
                            Oj(b.B(), Hd().toString());
                            return;
                        case "auth/admin-restricted-operation":
                            if (pi(W(a))) {
                                f = Q(b);
                                b.m();
                                L("handleUnauthorizedUser", a, f, Yh(e), (0, _appDefault.default).auth.PhoneAuthProvider.PROVIDER_ID);
                                return;
                            }
                            g = T(f);
                            break;
                        default:
                            g = T(f);
                    }
                    b.a(g);
                }
            }))) : Pi ? Oj(b.u(), C("Solve the reCAPTCHA").toString()) : !Pi && d && b.i().click() : (b.O().focus(), Oj(b.B(), Hd().toString()));
        }
        K.phoneSignInStart = function(a, b, c, d) {
            var e = qi(W(a)) || {};
            Oi = null;
            Pi = !(e && "invisible" === e.size);
            var f = Yl(a), g = zi(W(a)), h = f ? yi(W(a)) : null;
            g = c && c.a || g && g.c || null;
            c = c && c.Aa || h;
            (h = Ai(W(a))) && Uh(h);
            Qi = h ? new Oh(Ai(W(a))) : Vh;
            var k = new un(function(t) {
                vn(a, k, p, !(!t || !t.keyCode));
            }, Pi, f ? null : function() {
                p.clear();
                k.m();
                S(a, b);
            }, H(W(a)), J(W(a)), f, Qi, g, c);
            k.render(b);
            Y(a, k);
            d && k.a(d);
            e.callback = function(t) {
                k.u() && Nj(k.u());
                Oi = t;
                Pi || vn(a, k, p);
            };
            e["expired-callback"] = function() {
                Oi = null;
            };
            var p = new (0, _appDefault.default).auth.RecaptchaVerifier(Pi ? k.ba() : k.i(), e, fn(a).app);
            V(a, k.I(r(p.render, p), [], function(t) {
                Ri = t;
            }, function(t) {
                t.name && "cancel" == t.name || (t = T(t), k.m(), S(a, b, void 0, t));
            }));
        };
        K.prefilledEmailSignIn = function(a, b, c) {
            var d = new Em;
            d.render(b);
            Y(a, d);
            V(a, d.I(r(U(a).fetchSignInMethodsForEmail, U(a)), [
                c
            ], function(e) {
                d.m();
                var f = !(!Xl(a) || !wn(a));
                am(a, b, e, c, void 0, f);
            }, function(e) {
                e = T(e);
                d.m();
                L("signIn", a, b, c, e);
            }));
        };
        function xn(a, b, c, d, e) {
            P.call(this, dl, {
                Sb: b
            }, e, "providerSignIn", {
                F: c,
                D: d
            });
            this.i = a;
        }
        m(xn, P);
        xn.prototype.v = function() {
            this.l(this.i);
            P.prototype.v.call(this);
        };
        xn.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
        };
        u(xn.prototype, {
            l: function(a) {
                function b(g) {
                    a(g);
                }
                for(var c = this.g ? Tc("firebaseui-id-idp-button", this.g || this.s.a) : [], d = 0; d < c.length; d++){
                    var e = c[d], f = hn(e, "providerId");
                    O(this, e, za(b, f));
                }
            }
        });
        K.providerSignIn = function(a, b, c, d) {
            var e = new xn(function(f) {
                f == (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID ? (e.m(), Zl(a, b, d)) : f == (0, _appDefault.default).auth.PhoneAuthProvider.PROVIDER_ID ? (e.m(), L("phoneSignInStart", a, b)) : "anonymous" == f ? Ul(a, e) : Rl(a, e, f, d);
                Z(a);
                a.l.cancel();
            }, ji(W(a)), H(W(a)), J(W(a)));
            e.render(b);
            Y(a, e);
            c && e.a(c);
            yn(a);
        };
        K.sendEmailLinkForSignIn = function(a, b, c, d) {
            var e = new fm;
            e.render(b);
            Y(a, e);
            bm(a, e, c, d, function(f) {
                e.m();
                f && "auth/admin-restricted-operation" == f.code && pi(W(a)) ? L("handleUnauthorizedUser", a, b, c, (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID) : (f = T(f), L("signIn", a, b, c, f));
            });
        };
        function zn(a, b, c, d, e, f, g) {
            P.call(this, wk, {
                email: c,
                Va: !!b,
                ia: !!f
            }, g, "signIn", {
                F: d,
                D: e
            });
            this.i = a;
            this.u = b;
        }
        m(zn, P);
        zn.prototype.v = function() {
            this.w(this.i);
            this.B(this.i, this.u || void 0);
            this.l().focus();
            Bm(this.l(), (this.l().value || "").length);
            P.prototype.v.call(this);
        };
        zn.prototype.o = function() {
            this.u = this.i = null;
            P.prototype.o.call(this);
        };
        u(zn.prototype, {
            l: sl,
            M: tl,
            w: ul,
            H: vl,
            j: wl,
            U: jl,
            P: kl,
            B: ll
        });
        K.signIn = function(a, b, c, d) {
            var e = Xl(a), f = new zn(function() {
                var g = f, h = g.j() || "";
                h && $l(a, g, h);
            }, e ? null : function() {
                f.m();
                S(a, b, c);
            }, c, H(W(a)), J(W(a)), e);
            f.render(b);
            Y(a, f);
            d && f.a(d);
        };
        function An(a, b, c, d, e, f, g) {
            P.call(this, Nk, {
                kc: a,
                yb: c,
                Eb: !!d
            }, g, "unauthorizedUser", {
                F: e,
                D: f
            });
            this.l = b;
            this.i = d;
        }
        m(An, P);
        An.prototype.v = function() {
            var a = this, b = M(this, "firebaseui-id-unauthorized-user-help-link");
            this.i && b && O(this, b, function() {
                a.i();
            });
            O(this, this.u(), function() {
                a.l();
            });
            this.u().focus();
            P.prototype.v.call(this);
        };
        An.prototype.o = function() {
            this.i = this.l = null;
            P.prototype.o.call(this);
        };
        u(An.prototype, {
            u: kl
        });
        K.handleUnauthorizedUser = function(a, b, c, d) {
            function e() {
                S(a, b);
            }
            d === (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID ? e = function() {
                Zl(a, b);
            } : d === (0, _appDefault.default).auth.PhoneAuthProvider.PROVIDER_ID && (e = function() {
                L("phoneSignInStart", a, b);
            });
            var f = null, g = null;
            d === (0, _appDefault.default).auth.EmailAuthProvider.PROVIDER_ID && oi(W(a)) ? (f = ui(W(a)), g = vi(W(a))) : pi(W(a)) && (f = si(W(a)), g = ti(W(a)));
            var h = new An(c, function() {
                h.m();
                e();
            }, f, g, H(W(a)), J(W(a)));
            h.render(b);
            Y(a, h);
        };
        function Bn(a, b, c, d, e, f) {
            P.call(this, Ok, {
                email: a
            }, f, "unsupportedProvider", {
                F: d,
                D: e
            });
            this.l = b;
            this.i = c;
        }
        m(Bn, P);
        Bn.prototype.v = function() {
            this.w(this.l, this.i);
            this.u().focus();
            P.prototype.v.call(this);
        };
        Bn.prototype.o = function() {
            this.i = this.l = null;
            P.prototype.o.call(this);
        };
        u(Bn.prototype, {
            u: jl,
            B: kl,
            w: ll
        });
        K.unsupportedProvider = function(a, b, c) {
            var d = new Bn(c, function() {
                d.m();
                L("passwordRecovery", a, b, c);
            }, function() {
                d.m();
                S(a, b, c);
            }, H(W(a)), J(W(a)));
            d.render(b);
            Y(a, d);
        };
        function Cn(a, b) {
            this.$ = !1;
            var c = Dn(b);
            if (En[c]) throw Error('An AuthUI instance already exists for the key "' + c + '"');
            En[c] = this;
            this.a = a;
            this.u = null;
            this.Y = !1;
            Fn(this.a);
            this.h = (0, _appDefault.default).initializeApp({
                apiKey: a.app.options.apiKey,
                authDomain: a.app.options.authDomain
            }, a.app.name + "-firebaseui-temp").auth();
            if (a = a.emulatorConfig) c = a.port, this.h.useEmulator(a.protocol + "://" + a.host + (null === c ? "" : ":" + c), a.options);
            Fn(this.h);
            this.h.setPersistence && this.h.setPersistence((0, _appDefault.default).auth.Auth.Persistence.SESSION);
            this.oa = b;
            this.ca = new bi;
            this.g = this.T = this.i = this.J = this.O = null;
            this.s = [];
            this.Z = !1;
            this.l = Pf.Xa();
            this.j = this.C = null;
            this.da = this.A = !1;
        }
        function Fn(a) {
            a && a.INTERNAL && a.INTERNAL.logFramework && a.INTERNAL.logFramework("FirebaseUI-web");
        }
        var En = {};
        function Dn(a) {
            return a || "[DEFAULT]";
        }
        function Sl(a) {
            Z(a);
            a.i || (a.i = Gn(a, function(b) {
                return b && !zh(X(a)) ? F(fn(a).getRedirectResult().then(function(c) {
                    return c;
                }, function(c) {
                    if (c && "auth/email-already-in-use" == c.code && c.email && c.credential) throw c;
                    return Hn(a, c);
                })) : F(U(a).getRedirectResult().then(function(c) {
                    return di(W(a)) && !c.user && a.j && !a.j.isAnonymous ? fn(a).getRedirectResult() : c;
                }));
            }));
            return a.i;
        }
        function Y(a, b) {
            Z(a);
            a.g = b;
        }
        var In = null;
        function U(a) {
            Z(a);
            return a.h;
        }
        function fn(a) {
            Z(a);
            return a.a;
        }
        function X(a) {
            Z(a);
            return a.oa;
        }
        function wn(a) {
            Z(a);
            return a.O ? a.O.emailHint : void 0;
        }
        l = Cn.prototype;
        l.nb = function() {
            Z(this);
            return !!Ch(X(this)) || Jn(tf());
        };
        function Jn(a) {
            a = new Pb(a);
            return "signIn" === (a.a.a.get(x.ub) || null) && !!a.a.a.get(x.$a);
        }
        l.start = function(a, b) {
            Kn(this, a, b);
        };
        function Kn(a, b, c, d) {
            Z(a);
            "undefined" !== typeof a.a.languageCode && (a.u = a.a.languageCode);
            var e = "en".replace(/_/g, "-");
            a.a.languageCode = e;
            a.h.languageCode = e;
            a.Y = !0;
            "undefined" !== typeof a.a.tenantId && (a.h.tenantId = a.a.tenantId);
            a.ib(c);
            a.O = d || null;
            var f = n.document;
            a.C ? a.C.then(function() {
                "complete" == f.readyState ? Ln(a, b) : le(window, "load", function() {
                    Ln(a, b);
                });
            }) : "complete" == f.readyState ? Ln(a, b) : le(window, "load", function() {
                Ln(a, b);
            });
        }
        function Ln(a, b) {
            var c = sf(b, "Could not find the FirebaseUI widget element on the page.");
            c.setAttribute("lang", "en".replace(/_/g, "-"));
            if (In) {
                var d = In;
                Z(d);
                zh(X(d)) && tg("UI Widget is already rendered on the page and is pending some user interaction. Only one widget instance can be rendered per page. The previous instance has been automatically reset.");
                In.reset();
            }
            In = a;
            a.T = c;
            Mn(a, c);
            if (jh(new kh) && jh(new lh)) {
                b = sf(b, "Could not find the FirebaseUI widget element on the page.");
                c = tf();
                d = Jh(W(a).a, "queryParameterForSignInSuccessUrl");
                c = (c = tb(c, d)) ? zc(Bc(c)).toString() : null;
                a: {
                    d = tf();
                    var e = Bi(W(a));
                    d = tb(d, e) || "";
                    for(f in Ni)if (Ni[f].toLowerCase() == d.toLowerCase()) {
                        var f = Ni[f];
                        break a;
                    }
                    f = "callback";
                }
                switch(f){
                    case "callback":
                        c && (f = X(a), xh(sh, c, f));
                        a.nb() ? L("callback", a, b) : S(a, b, wn(a));
                        break;
                    case "resetPassword":
                        L("passwordReset", a, b, cm(), dm());
                        break;
                    case "recoverEmail":
                        L("emailChangeRevocation", a, b, cm());
                        break;
                    case "revertSecondFactorAddition":
                        L("revertSecondFactorAddition", a, b, cm());
                        break;
                    case "verifyEmail":
                        L("emailVerification", a, b, cm(), dm());
                        break;
                    case "verifyAndChangeEmail":
                        L("verifyAndChangeEmail", a, b, cm(), dm());
                        break;
                    case "signIn":
                        L("emailLinkSignInCallback", a, b, tf());
                        Nn();
                        break;
                    case "select":
                        c && (f = X(a), xh(sh, c, f));
                        S(a, b);
                        break;
                    default:
                        throw Error("Unhandled widget operation.");
                }
                b = W(a);
                (b = Li(b).uiShown || null) && b();
            } else b = sf(b, "Could not find the FirebaseUI widget element on the page."), f = new Jl(C("The browser you are using does not support Web Storage. Please try again in a different browser.").toString()), f.render(b), Y(a, f);
            b = a.g && "blank" == a.g.Ga && Gi(W(a));
            Ch(X(a)) && !b && (b = Ch(X(a)), Gm(a, b.a), wh(rh, X(a)));
        }
        function Gn(a, b) {
            if (a.A) return b(On(a));
            V(a, function() {
                a.A = !1;
            });
            if (di(W(a))) {
                var c = new Ve(function(d) {
                    V(a, a.a.onAuthStateChanged(function(e) {
                        a.j = e;
                        a.A || (a.A = !0, d(b(On(a))));
                    }));
                });
                V(a, c);
                return c;
            }
            a.A = !0;
            return b(null);
        }
        function On(a) {
            Z(a);
            return di(W(a)) && a.j && a.j.isAnonymous ? a.j : null;
        }
        function V(a, b) {
            Z(a);
            if (b) {
                a.s.push(b);
                var c = function() {
                    Qa(a.s, function(d) {
                        return d == b;
                    });
                };
                "function" != typeof b && b.then(c, c);
            }
        }
        l.Db = function() {
            Z(this);
            this.Z = !0;
        };
        function Pn(a) {
            Z(a);
            var b;
            (b = a.Z) || (a = W(a), a = xi(a, (0, _appDefault.default).auth.GoogleAuthProvider.PROVIDER_ID), b = !(!a || "select_account" !== a.prompt));
            return b;
        }
        function Ml(a) {
            "undefined" !== typeof a.a.languageCode && a.Y && (a.Y = !1, a.a.languageCode = a.u);
        }
        function Gm(a, b) {
            a.a.tenantId = b;
            a.h.tenantId = b;
        }
        l.reset = function() {
            Z(this);
            var a = this;
            this.T && this.T.removeAttribute("lang");
            this.J && De(this.J);
            Ml(this);
            this.O = null;
            Nn();
            wh(rh, X(this));
            Z(this);
            this.l.cancel();
            this.i = F({
                user: null,
                credential: null
            });
            In == this && (In = null);
            this.T = null;
            for(var b = 0; b < this.s.length; b++)if ("function" == typeof this.s[b]) this.s[b]();
            else this.s[b].cancel && this.s[b].cancel();
            this.s = [];
            Ah(X(this));
            this.g && (this.g.m(), this.g = null);
            this.L = null;
            this.h && (this.C = mm(this).then(function() {
                a.C = null;
            }, function() {
                a.C = null;
            }));
        };
        function Mn(a, b) {
            a.L = null;
            a.J = new Ee(b);
            a.J.register();
            ke(a.J, "pageEnter", function(c) {
                c = c && c.pageId;
                if (a.L != c) {
                    var d = W(a);
                    (d = Li(d).uiChanged || null) && d(a.L, c);
                    a.L = c;
                }
            });
        }
        l.ib = function(a) {
            Z(this);
            var b = this.ca, c;
            for(c in a)try {
                Ih(b.a, c, a[c]);
            } catch (d) {
                og('Invalid config: "' + c + '"', void 0);
            }
            fc && Ih(b.a, "popupMode", !1);
            Ai(b);
            !this.da && Ki(W(this)) && (tg("signInSuccess callback is deprecated. Please use signInSuccessWithAuthResult callback instead."), this.da = !0);
        };
        function W(a) {
            Z(a);
            return a.ca;
        }
        l.Wb = function() {
            Z(this);
            var a = W(this), b = Jh(a.a, "widgetUrl");
            a = Bi(a);
            var c = b.search(sb);
            for(var d = 0, e, f = []; 0 <= (e = rb(b, d, a, c));)f.push(b.substring(d, e)), d = Math.min(b.indexOf("&", e) + 1 || c, c);
            f.push(b.substr(d));
            b = f.join("").replace(ub, "$1");
            c = "=" + encodeURIComponent("select");
            (a += c) ? (c = b.indexOf("#"), 0 > c && (c = b.length), d = b.indexOf("?"), 0 > d || d > c ? (d = c, e = "") : e = b.substring(d + 1, c), b = [
                b.substr(0, d),
                e,
                b.substr(c)
            ], c = b[1], b[1] = a ? c ? c + "&" + a : a : c, c = b[0] + (b[1] ? "?" + b[1] : "") + b[2]) : c = b;
            W(this).a.get("popupMode") ? (a = (window.screen.availHeight - 600) / 2, b = (window.screen.availWidth - 500) / 2, c = c || "about:blank", a = {
                width: 500,
                height: 600,
                top: 0 < a ? a : 0,
                left: 0 < b ? b : 0,
                location: !0,
                resizable: !0,
                statusbar: !0,
                toolbar: !1
            }, a.target = a.target || c.target || "google_popup", a.width = a.width || 690, a.height = a.height || 500, (a = pf(c, a)) && a.focus()) : Nc(window.location, c);
        };
        function Z(a) {
            if (a.$) throw Error("AuthUI instance is deleted!");
        }
        l.Wa = function() {
            var a = this;
            Z(this);
            return this.h.app.delete().then(function() {
                var b = Dn(X(a));
                delete En[b];
                a.reset();
                a.$ = !0;
            });
        };
        function yn(a) {
            Z(a);
            try {
                Qf(a.l, li(W(a)), Pn(a)).then(function(b) {
                    return a.g ? Vl(a, a.g, b) : !1;
                });
            } catch (b) {}
        }
        l.Ib = function(a, b) {
            Z(this);
            var c = this, d = vf();
            if (!Di(W(this))) return df(Error("Email link sign-in should be enabled to trigger email sending."));
            var e = Fi(W(this)), f = new Pb(e.url);
            Qb(f, d);
            b && b.a && (Gh(d, b, X(this)), Tb(f, b.a.providerId));
            Rb(f, Ei(W(this)));
            return Gn(this, function(g) {
                g && ((g = g.uid) ? f.a.a.set(x.Pa, g) : Nb(f.a.a, x.Pa));
                e.url = f.toString();
                return U(c).sendSignInLinkToEmail(a, e);
            }).then(function() {
                var g = X(c), h = {};
                h.email = a;
                xh(th, Yg(d, JSON.stringify(h)), g);
            }, function(g) {
                wh(uh, X(c));
                wh(th, X(c));
                throw g;
            });
        };
        function Hm(a, b) {
            var c = Sb(new Pb(b));
            if (!c) return F(null);
            b = new Ve(function(d, e) {
                var f = fn(a).onAuthStateChanged(function(g) {
                    f();
                    g && g.isAnonymous && g.uid === c ? d(g) : g && g.isAnonymous && g.uid !== c ? e(Error("anonymous-user-mismatch")) : e(Error("anonymous-user-not-found"));
                });
                V(a, f);
            });
            V(a, b);
            return b;
        }
        function Lm(a, b, c, d, e) {
            Z(a);
            var f = e || null, g = (0, _appDefault.default).auth.EmailAuthProvider.credentialWithLink(c, d);
            c = f ? U(a).signInWithEmailLink(c, d).then(function(h) {
                return h.user.linkWithCredential(f);
            }).then(function() {
                return mm(a);
            }).then(function() {
                return Hn(a, {
                    code: "auth/email-already-in-use"
                }, f);
            }) : U(a).fetchSignInMethodsForEmail(c).then(function(h) {
                return h.length ? Hn(a, {
                    code: "auth/email-already-in-use"
                }, g) : b.linkWithCredential(g);
            });
            V(a, c);
            return c;
        }
        function Mm(a, b, c, d) {
            Z(a);
            var e = d || null, f;
            b = U(a).signInWithEmailLink(b, c).then(function(g) {
                f = {
                    user: g.user,
                    credential: null,
                    operationType: g.operationType,
                    additionalUserInfo: g.additionalUserInfo
                };
                if (e) return g.user.linkWithCredential(e).then(function(h) {
                    f = {
                        user: h.user,
                        credential: e,
                        operationType: f.operationType,
                        additionalUserInfo: h.additionalUserInfo
                    };
                });
            }).then(function() {
                mm(a);
            }).then(function() {
                return fn(a).updateCurrentUser(f.user);
            }).then(function() {
                f.user = fn(a).currentUser;
                return f;
            });
            V(a, b);
            return b;
        }
        function Nn() {
            var a = tf();
            if (Jn(a)) {
                a = new Pb(a);
                for(var b in x)x.hasOwnProperty(b) && Nb(a.a.a, x[b]);
                b = {
                    state: "signIn",
                    mode: "emailLink",
                    operation: "clear"
                };
                var c = n.document.title;
                n.history && n.history.replaceState && n.history.replaceState(b, c, a.toString());
            }
        }
        l.bc = function(a, b) {
            Z(this);
            var c = this;
            return U(this).signInWithEmailAndPassword(a, b).then(function(d) {
                return Gn(c, function(e) {
                    return e ? mm(c).then(function() {
                        return Hn(c, {
                            code: "auth/email-already-in-use"
                        }, (0, _appDefault.default).auth.EmailAuthProvider.credential(a, b));
                    }) : d;
                });
            });
        };
        l.Yb = function(a, b) {
            Z(this);
            var c = this;
            return Gn(this, function(d) {
                if (d) {
                    var e = (0, _appDefault.default).auth.EmailAuthProvider.credential(a, b);
                    return d.linkWithCredential(e);
                }
                return U(c).createUserWithEmailAndPassword(a, b);
            });
        };
        l.ac = function(a) {
            Z(this);
            var b = this;
            return Gn(this, function(c) {
                return c ? c.linkWithCredential(a).then(function(d) {
                    return d;
                }, function(d) {
                    if (d && "auth/email-already-in-use" == d.code && d.email && d.credential) throw d;
                    return Hn(b, d, a);
                }) : U(b).signInWithCredential(a);
            });
        };
        function Tl(a, b) {
            Z(a);
            return Gn(a, function(c) {
                return c && !zh(X(a)) ? c.linkWithPopup(b).then(function(d) {
                    return d;
                }, function(d) {
                    if (d && "auth/email-already-in-use" == d.code && d.email && d.credential) throw d;
                    return Hn(a, d);
                }) : U(a).signInWithPopup(b);
            });
        }
        l.dc = function(a) {
            Z(this);
            var b = this, c = this.i;
            this.i = null;
            return Gn(this, function(d) {
                return d && !zh(X(b)) ? d.linkWithRedirect(a) : U(b).signInWithRedirect(a);
            }).then(function() {}, function(d) {
                b.i = c;
                throw d;
            });
        };
        l.cc = function(a, b) {
            Z(this);
            var c = this;
            return Gn(this, function(d) {
                return d ? d.linkWithPhoneNumber(a, b).then(function(e) {
                    return new Sf(e, function(f) {
                        if ("auth/credential-already-in-use" == f.code) return Hn(c, f);
                        throw f;
                    });
                }) : fn(c).signInWithPhoneNumber(a, b).then(function(e) {
                    return new Sf(e);
                });
            });
        };
        l.$b = function() {
            Z(this);
            return fn(this).signInAnonymously();
        };
        function Ol(a, b) {
            Z(a);
            return Gn(a, function(c) {
                if (a.j && !a.j.isAnonymous && di(W(a)) && !U(a).currentUser) return mm(a).then(function() {
                    "password" == b.credential.providerId && (b.credential = null);
                    return b;
                });
                if (c) return mm(a).then(function() {
                    return c.linkWithCredential(b.credential);
                }).then(function(d) {
                    b.user = d.user;
                    b.credential = d.credential;
                    b.operationType = d.operationType;
                    b.additionalUserInfo = d.additionalUserInfo;
                    return b;
                }, function(d) {
                    if (d && "auth/email-already-in-use" == d.code && d.email && d.credential) throw d;
                    return Hn(a, d, b.credential);
                });
                if (!b.user) throw Error('Internal error: An incompatible or outdated version of "firebase.js" may be used.');
                return mm(a).then(function() {
                    return fn(a).updateCurrentUser(b.user);
                }).then(function() {
                    b.user = fn(a).currentUser;
                    b.operationType = "signIn";
                    b.credential && b.credential.providerId && "password" == b.credential.providerId && (b.credential = null);
                    return b;
                });
            });
        }
        l.Xb = function(a, b) {
            Z(this);
            return U(this).signInWithEmailAndPassword(a, b);
        };
        function mm(a) {
            Z(a);
            return U(a).signOut();
        }
        function Hn(a, b, c) {
            Z(a);
            if (b && b.code && ("auth/email-already-in-use" == b.code || "auth/credential-already-in-use" == b.code)) {
                var d = ei(W(a));
                return F().then(function() {
                    return d(new Nd("anonymous-upgrade-merge-conflict", null, c || b.credential));
                }).then(function() {
                    a.g && (a.g.m(), a.g = null);
                    throw b;
                });
            }
            return df(b);
        }
        function Qn(a, b, c, d) {
            P.call(this, il, void 0, d, "providerMatchByEmail", {
                F: b,
                D: c
            });
            this.i = a;
        }
        m(Qn, P);
        Qn.prototype.v = function() {
            this.u(this.i);
            this.w(this.i);
            this.l().focus();
            Bm(this.l(), (this.l().value || "").length);
            P.prototype.v.call(this);
        };
        Qn.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
        };
        u(Qn.prototype, {
            l: sl,
            H: tl,
            u: ul,
            B: vl,
            j: wl,
            M: jl,
            w: ll
        });
        function Rn(a, b, c, d, e) {
            P.call(this, hl, {
                ec: b
            }, e, "selectTenant", {
                F: c,
                D: d
            });
            this.i = a;
        }
        m(Rn, P);
        Rn.prototype.v = function() {
            Sn(this, this.i);
            P.prototype.v.call(this);
        };
        Rn.prototype.o = function() {
            this.i = null;
            P.prototype.o.call(this);
        };
        function Sn(a, b) {
            function c(h) {
                b(h);
            }
            for(var d = a.g ? Tc("firebaseui-id-tenant-selection-button", a.g || a.s.a) : [], e = 0; e < d.length; e++){
                var f = d[e], g = hn(f, "tenantId");
                O(a, f, za(c, g));
            }
        }
        function Tn(a) {
            P.call(this, Ck, void 0, a, "spinner");
        }
        m(Tn, P);
        function Un(a) {
            this.a = new Hh;
            G(this.a, "authDomain");
            G(this.a, "displayMode", Vn);
            G(this.a, "tenants");
            G(this.a, "callbacks");
            G(this.a, "tosUrl");
            G(this.a, "privacyPolicyUrl");
            for(var b in a)if (a.hasOwnProperty(b)) try {
                Ih(this.a, b, a[b]);
            } catch (c) {
                og('Invalid config: "' + b + '"', void 0);
            }
        }
        function Wn(a) {
            a = a.a.get("displayMode");
            for(var b in Xn)if (Xn[b] === a) return Xn[b];
            return Vn;
        }
        function Yn(a) {
            return a.a.get("callbacks") || {};
        }
        function Zn(a) {
            var b = a.a.get("tosUrl") || null;
            a = a.a.get("privacyPolicyUrl") || null;
            b && !a && tg("Privacy Policy URL is missing, the link will not be displayed.");
            if (b && a) {
                if ("function" === typeof b) return b;
                if ("string" === typeof b) return function() {
                    rf(b);
                };
            }
            return null;
        }
        function $n(a) {
            var b = a.a.get("tosUrl") || null, c = a.a.get("privacyPolicyUrl") || null;
            c && !b && tg("Terms of Service URL is missing, the link will not be displayed.");
            if (b && c) {
                if ("function" === typeof c) return c;
                if ("string" === typeof c) return function() {
                    rf(c);
                };
            }
            return null;
        }
        function ao(a, b) {
            a = a.a.get("tenants");
            if (!a || !a.hasOwnProperty(b) && !a.hasOwnProperty(bo)) throw Error("Invalid tenant configuration!");
        }
        function co(a, b, c) {
            a = a.a.get("tenants");
            if (!a) throw Error("Invalid tenant configuration!");
            var d = [];
            a = a[b] || a[bo];
            if (!a) return og("Invalid tenant configuration: " + (b + " is not configured!"), void 0), d;
            b = a.signInOptions;
            if (!b) throw Error("Invalid tenant configuration: signInOptions are invalid!");
            b.forEach(function(e) {
                if ("string" === typeof e) d.push(e);
                else if ("string" === typeof e.provider) {
                    var f = e.hd;
                    f && c ? (f instanceof RegExp ? f : new RegExp("@" + f.replace(".", "\\.") + "$")).test(c) && d.push(e.provider) : d.push(e.provider);
                } else e = "Invalid tenant configuration: signInOption " + (JSON.stringify(e) + " is invalid!"), og(e, void 0);
            });
            return d;
        }
        function eo(a, b, c) {
            a = fo(a, b);
            (b = a.signInOptions) && c && (b = b.filter(function(d) {
                return "string" === typeof d ? c.includes(d) : c.includes(d.provider);
            }), a.signInOptions = b);
            return a;
        }
        function fo(a, b) {
            var c = go;
            var d = void 0 === d ? {} : d;
            ao(a, b);
            a = a.a.get("tenants");
            return wf(a[b] || a[bo], c, d);
        }
        var go = [
            "immediateFederatedRedirect",
            "privacyPolicyUrl",
            "signInFlow",
            "signInOptions",
            "tosUrl"
        ], Vn = "optionFirst", Xn = {
            pc: Vn,
            oc: "identifierFirst"
        }, bo = "*";
        function ho(a, b) {
            var c = this;
            this.s = sf(a);
            this.a = {};
            Object.keys(b).forEach(function(d) {
                c.a[d] = new Un(b[d]);
            });
            this.ob = this.g = this.A = this.h = this.i = this.j = null;
            Object.defineProperty(this, "languageCode", {
                get: function() {
                    return this.ob;
                },
                set: function(d) {
                    this.ob = d || null;
                },
                enumerable: !1
            });
        }
        l = ho.prototype;
        l.Ub = function(a, b) {
            var c = this;
            io(this);
            var d = a.apiKey;
            return new Ve(function(e, f) {
                if (c.a.hasOwnProperty(d)) {
                    var g = Yn(c.a[d]).selectTenantUiHidden || null;
                    if (Wn(c.a[d]) === Vn) {
                        var h = [];
                        b.forEach(function(t) {
                            t = t || "_";
                            var I = c.a[d].a.get("tenants");
                            if (!I) throw Error("Invalid tenant configuration!");
                            (I = I[t] || I[bo]) ? t = {
                                tenantId: "_" !== t ? t : null,
                                V: I.fullLabel || null,
                                displayName: I.displayName,
                                za: I.iconUrl,
                                ta: I.buttonColor
                            } : (og("Invalid tenant configuration: " + (t + " is not configured!"), void 0), t = null);
                            t && h.push(t);
                        });
                        var k = function(t) {
                            t = {
                                tenantId: t,
                                providerIds: co(c.a[d], t || "_")
                            };
                            e(t);
                        };
                        if (1 === h.length) {
                            k(h[0].tenantId);
                            return;
                        }
                        c.g = new Rn(function(t) {
                            io(c);
                            g && g();
                            k(t);
                        }, h, Zn(c.a[d]), $n(c.a[d]));
                    } else c.g = new Qn(function() {
                        var t = c.g.j();
                        if (t) {
                            for(var I = 0; I < b.length; I++){
                                var Ca = co(c.a[d], b[I] || "_", t);
                                if (0 !== Ca.length) {
                                    t = {
                                        tenantId: b[I],
                                        providerIds: Ca,
                                        email: t
                                    };
                                    io(c);
                                    g && g();
                                    e(t);
                                    return;
                                }
                            }
                            c.g.a(Ld({
                                code: "no-matching-tenant-for-email"
                            }).toString());
                        }
                    }, Zn(c.a[d]), $n(c.a[d]));
                    c.g.render(c.s);
                    (f = Yn(c.a[d]).selectTenantUiShown || null) && f();
                } else {
                    var p = Error("Invalid project configuration: API key is invalid!");
                    p.code = "invalid-configuration";
                    c.pb(p);
                    f(p);
                }
            });
        };
        l.Pb = function(a, b) {
            if (!this.a.hasOwnProperty(a)) throw Error("Invalid project configuration: API key is invalid!");
            var c = b || void 0;
            ao(this.a[a], b || "_");
            try {
                this.i = (0, _appDefault.default).app(c).auth();
            } catch (e) {
                var d = this.a[a].a.get("authDomain");
                if (!d) throw Error("Invalid project configuration: authDomain is required!");
                a = (0, _appDefault.default).initializeApp({
                    apiKey: a,
                    authDomain: d
                }, c);
                a.auth().tenantId = b;
                this.i = a.auth();
            }
            return this.i;
        };
        l.Zb = function(a, b) {
            var c = this;
            return new Ve(function(d, e) {
                function f(I, Ca) {
                    c.j = new Cn(a);
                    Kn(c.j, c.s, I, Ca);
                }
                var g = a.app.options.apiKey;
                c.a.hasOwnProperty(g) || e(Error("Invalid project configuration: API key is invalid!"));
                var h = eo(c.a[g], a.tenantId || "_", b && b.providerIds);
                io(c);
                e = {
                    signInSuccessWithAuthResult: function(I) {
                        d(I);
                        return !1;
                    }
                };
                var k = Yn(c.a[g]).signInUiShown || null, p = !1;
                e.uiChanged = function(I, Ca) {
                    null === I && "callback" === Ca ? ((I = Vc("firebaseui-id-page-callback", c.s)) && Nj(I), c.h = new Tn, c.h.render(c.s)) : p || null === I && "spinner" === Ca || "blank" === Ca || (c.h && (c.h.m(), c.h = null), p = !0, k && k(a.tenantId));
                };
                h.callbacks = e;
                h.credentialHelper = "none";
                var t;
                b && b.email && (t = {
                    emailHint: b.email
                });
                c.j ? c.j.Wa().then(function() {
                    f(h, t);
                }) : f(h, t);
            });
        };
        l.reset = function() {
            var a = this;
            return F().then(function() {
                a.j && a.j.Wa();
            }).then(function() {
                a.j = null;
                io(a);
            });
        };
        l.Vb = function() {
            var a = this;
            this.h || this.A || (this.A = window.setTimeout(function() {
                io(a);
                a.h = new Tn;
                a.g = a.h;
                a.h.render(a.s);
                a.A = null;
            }, 500));
        };
        l.mb = function() {
            window.clearTimeout(this.A);
            this.A = null;
            this.h && (this.h.m(), this.h = null);
        };
        l.Bb = function() {
            io(this);
            this.g = new El;
            this.g.render(this.s);
            return F();
        };
        function io(a) {
            a.j && a.j.reset();
            a.mb();
            a.g && a.g.m();
        }
        l.pb = function(a) {
            var b = this, c = Ld({
                code: a.code
            }).toString() || a.message;
            io(this);
            var d;
            a.retry && "function" === typeof a.retry && (d = function() {
                b.reset();
                a.retry();
            });
            this.g = new Il(c, d);
            this.g.render(this.s);
        };
        l.Rb = function(a) {
            var b = this;
            return F().then(function() {
                var c = b.i && b.i.app.options.apiKey;
                if (!b.a.hasOwnProperty(c)) throw Error("Invalid project configuration: API key is invalid!");
                ao(b.a[c], a.tenantId || "_");
                if (!b.i.currentUser || b.i.currentUser.uid !== a.uid) throw Error("The user being processed does not match the signed in user!");
                return (c = Yn(b.a[c]).beforeSignInSuccess || null) ? c(a) : a;
            }).then(function(c) {
                if (c.uid !== a.uid) throw Error("User with mismatching UID returned.");
                return c;
            });
        };
        v("firebaseui.auth.FirebaseUiHandler", ho);
        v("firebaseui.auth.FirebaseUiHandler.prototype.selectTenant", ho.prototype.Ub);
        v("firebaseui.auth.FirebaseUiHandler.prototype.getAuth", ho.prototype.Pb);
        v("firebaseui.auth.FirebaseUiHandler.prototype.startSignIn", ho.prototype.Zb);
        v("firebaseui.auth.FirebaseUiHandler.prototype.reset", ho.prototype.reset);
        v("firebaseui.auth.FirebaseUiHandler.prototype.showProgressBar", ho.prototype.Vb);
        v("firebaseui.auth.FirebaseUiHandler.prototype.hideProgressBar", ho.prototype.mb);
        v("firebaseui.auth.FirebaseUiHandler.prototype.completeSignOut", ho.prototype.Bb);
        v("firebaseui.auth.FirebaseUiHandler.prototype.handleError", ho.prototype.pb);
        v("firebaseui.auth.FirebaseUiHandler.prototype.processUser", ho.prototype.Rb);
        v("firebaseui.auth.AuthUI", Cn);
        v("firebaseui.auth.AuthUI.getInstance", function(a) {
            a = Dn(a);
            return En[a] ? En[a] : null;
        });
        v("firebaseui.auth.AuthUI.prototype.disableAutoSignIn", Cn.prototype.Db);
        v("firebaseui.auth.AuthUI.prototype.start", Cn.prototype.start);
        v("firebaseui.auth.AuthUI.prototype.setConfig", Cn.prototype.ib);
        v("firebaseui.auth.AuthUI.prototype.signIn", Cn.prototype.Wb);
        v("firebaseui.auth.AuthUI.prototype.reset", Cn.prototype.reset);
        v("firebaseui.auth.AuthUI.prototype.delete", Cn.prototype.Wa);
        v("firebaseui.auth.AuthUI.prototype.isPendingRedirect", Cn.prototype.nb);
        v("firebaseui.auth.AuthUIError", Nd);
        v("firebaseui.auth.AuthUIError.prototype.toJSON", Nd.prototype.toJSON);
        v("firebaseui.auth.CredentialHelper.GOOGLE_YOLO", ni);
        v("firebaseui.auth.CredentialHelper.NONE", ci);
        v("firebaseui.auth.AnonymousAuthProvider.PROVIDER_ID", "anonymous");
        Ve.prototype["catch"] = Ve.prototype.Ca;
        Ve.prototype["finally"] = Ve.prototype.fc;
    }).apply(typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : window);
}).apply(typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : window);
if (typeof window !== "undefined") window.dialogPolyfill = (0, _dialogPolyfillDefault.default);
var auth = firebaseui.auth;

},{"firebase/compat/app":"2iVaZ","firebase/compat/auth":"hghl7","dialog-polyfill":"blEyr","material-design-lite/src/mdlComponentHandler":"bs1FL","material-design-lite/src/button/button":"lGZ2m","material-design-lite/src/progress/progress":"fNjTf","material-design-lite/src/spinner/spinner":"b3IsY","material-design-lite/src/textfield/textfield":"4CPyy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2iVaZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>(0, _appCompatDefault.default));
var _appCompat = require("@firebase/app-compat");
var _appCompatDefault = parcelHelpers.interopDefault(_appCompat);
var name = "firebase";
var version = "9.8.4";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ (0, _appCompatDefault.default).registerVersion(name, version, "app-compat");

},{"@firebase/app-compat":"ibzr5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ibzr5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>firebase);
var _util = require("@firebase/util");
var _component = require("@firebase/component");
var _app = require("@firebase/app");
var _logger = require("@firebase/logger");
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Global context object for a collection of services using
 * a shared authentication state.
 *
 * marked as internal because it references internal types exported from @firebase/app
 * @internal
 */ class FirebaseAppImpl {
    constructor(_delegate, firebase1){
        this._delegate = _delegate;
        this.firebase = firebase1;
        // add itself to container
        (0, _app._addComponent)(_delegate, new (0, _component.Component)("app-compat", ()=>this, "PUBLIC" /* PUBLIC */ ));
        this.container = _delegate.container;
    }
    get automaticDataCollectionEnabled() {
        return this._delegate.automaticDataCollectionEnabled;
    }
    set automaticDataCollectionEnabled(val) {
        this._delegate.automaticDataCollectionEnabled = val;
    }
    get name() {
        return this._delegate.name;
    }
    get options() {
        return this._delegate.options;
    }
    delete() {
        return new Promise((resolve)=>{
            this._delegate.checkDestroyed();
            resolve();
        }).then(()=>{
            this.firebase.INTERNAL.removeApp(this.name);
            return (0, _app.deleteApp)(this._delegate);
        });
    }
    /**
     * Return a service instance associated with this app (creating it
     * on demand), identified by the passed instanceIdentifier.
     *
     * NOTE: Currently storage and functions are the only ones that are leveraging this
     * functionality. They invoke it by calling:
     *
     * ```javascript
     * firebase.app().storage('STORAGE BUCKET ID')
     * ```
     *
     * The service name is passed to this already
     * @internal
     */ _getService(name1, instanceIdentifier = (0, _app._DEFAULT_ENTRY_NAME)) {
        var _a;
        this._delegate.checkDestroyed();
        // Initialize instance if InstatiationMode is `EXPLICIT`.
        const provider = this._delegate.container.getProvider(name1);
        if (!provider.isInitialized() && ((_a = provider.getComponent()) === null || _a === void 0 ? void 0 : _a.instantiationMode) === "EXPLICIT" /* EXPLICIT */ ) provider.initialize();
        // getImmediate will always succeed because _getService is only called for registered components.
        return provider.getImmediate({
            identifier: instanceIdentifier
        });
    }
    /**
     * Remove a service instance from the cache, so we will create a new instance for this service
     * when people try to get it again.
     *
     * NOTE: currently only firestore uses this functionality to support firestore shutdown.
     *
     * @param name The service name
     * @param instanceIdentifier instance identifier in case multiple instances are allowed
     * @internal
     */ _removeServiceInstance(name2, instanceIdentifier = (0, _app._DEFAULT_ENTRY_NAME)) {
        this._delegate.container// eslint-disable-next-line @typescript-eslint/no-explicit-any
        .getProvider(name2).clearInstance(instanceIdentifier);
    }
    /**
     * @param component the component being added to this app's container
     * @internal
     */ _addComponent(component) {
        (0, _app._addComponent)(this._delegate, component);
    }
    _addOrOverwriteComponent(component) {
        (0, _app._addOrOverwriteComponent)(this._delegate, component);
    }
    toJSON() {
        return {
            name: this.name,
            automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,
            options: this.options
        };
    }
}
// TODO: investigate why the following needs to be commented out
// Prevent dead-code elimination of these methods w/o invalid property
// copying.
// (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
//   FirebaseAppImpl.prototype.delete ||
//   console.log('dc');
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const ERRORS = {
    ["no-app" /* NO_APP */ ]: "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",
    ["invalid-app-argument" /* INVALID_APP_ARGUMENT */ ]: "firebase.{$appName}() takes either no argument or a Firebase App instance."
};
const ERROR_FACTORY = new (0, _util.ErrorFactory)("app-compat", "Firebase", ERRORS);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Because auth can't share code with other components, we attach the utility functions
 * in an internal namespace to share code.
 * This function return a firebase namespace object without
 * any utility functions, so it can be shared between the regular firebaseNamespace and
 * the lite version.
 */ function createFirebaseNamespaceCore(firebaseAppImpl) {
    const apps = {};
    // // eslint-disable-next-line @typescript-eslint/no-explicit-any
    // const components = new Map<string, Component<any>>();
    // A namespace is a plain JavaScript Object.
    const namespace = {
        // Hack to prevent Babel from modifying the object returned
        // as the firebase namespace.
        // @ts-ignore
        __esModule: true,
        initializeApp: initializeAppCompat,
        // @ts-ignore
        app: app1,
        registerVersion: _app.registerVersion,
        setLogLevel: _app.setLogLevel,
        onLog: _app.onLog,
        // @ts-ignore
        apps: null,
        SDK_VERSION: _app.SDK_VERSION,
        INTERNAL: {
            registerComponent: registerComponentCompat,
            removeApp,
            useAsService,
            modularAPIs: _app
        }
    };
    // Inject a circular default export to allow Babel users who were previously
    // using:
    //
    //   import firebase from 'firebase';
    //   which becomes: var firebase = require('firebase').default;
    //
    // instead of
    //
    //   import * as firebase from 'firebase';
    //   which becomes: var firebase = require('firebase');
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    namespace["default"] = namespace;
    // firebase.apps is a read-only getter.
    Object.defineProperty(namespace, "apps", {
        get: getApps
    });
    /**
     * Called by App.delete() - but before any services associated with the App
     * are deleted.
     */ function removeApp(name3) {
        delete apps[name3];
    }
    /**
     * Get the App object for a given name (or DEFAULT).
     */ function app1(name4) {
        name4 = name4 || _app._DEFAULT_ENTRY_NAME;
        if (!(0, _util.contains)(apps, name4)) throw ERROR_FACTORY.create("no-app" /* NO_APP */ , {
            appName: name4
        });
        return apps[name4];
    }
    // @ts-ignore
    app1["App"] = firebaseAppImpl;
    /**
     * Create a new App instance (name must be unique).
     *
     * This function is idempotent. It can be called more than once and return the same instance using the same options and config.
     */ function initializeAppCompat(options, rawConfig = {}) {
        const app = _app.initializeApp(options, rawConfig);
        if ((0, _util.contains)(apps, app.name)) return apps[app.name];
        const appCompat = new firebaseAppImpl(app, namespace);
        apps[app.name] = appCompat;
        return appCompat;
    }
    /*
     * Return an array of all the non-deleted FirebaseApps.
     */ function getApps() {
        // Make a copy so caller cannot mutate the apps list.
        return Object.keys(apps).map((name5)=>apps[name5]);
    }
    function registerComponentCompat(component) {
        const componentName = component.name;
        const componentNameWithoutCompat = componentName.replace("-compat", "");
        if (_app._registerComponent(component) && component.type === "PUBLIC" /* PUBLIC */ ) {
            // create service namespace for public components
            // The Service namespace is an accessor function ...
            const serviceNamespace = (appArg = app1())=>{
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                if (typeof appArg[componentNameWithoutCompat] !== "function") // Invalid argument.
                // This happens in the following case: firebase.storage('gs:/')
                throw ERROR_FACTORY.create("invalid-app-argument" /* INVALID_APP_ARGUMENT */ , {
                    appName: componentName
                });
                // Forward service instance lookup to the FirebaseApp.
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                return appArg[componentNameWithoutCompat]();
            };
            // ... and a container for service-level properties.
            if (component.serviceProps !== undefined) (0, _util.deepExtend)(serviceNamespace, component.serviceProps);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            namespace[componentNameWithoutCompat] = serviceNamespace;
            // Patch the FirebaseAppImpl prototype
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            firebaseAppImpl.prototype[componentNameWithoutCompat] = // TODO: The eslint disable can be removed and the 'ignoreRestArgs'
            // option added to the no-explicit-any rule when ESlint releases it.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            function(...args) {
                const serviceFxn = this._getService.bind(this, componentName);
                return serviceFxn.apply(this, component.multipleInstances ? args : []);
            };
        }
        return component.type === "PUBLIC" /* PUBLIC */  ? namespace[componentNameWithoutCompat] : null;
    }
    // Map the requested service to a registered service name
    // (used to map auth to serverAuth service when needed).
    function useAsService(app, name6) {
        if (name6 === "serverAuth") return null;
        const useService = name6;
        return useService;
    }
    return namespace;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Return a firebase namespace object.
 *
 * In production, this will be called exactly once and the result
 * assigned to the 'firebase' global.  It may be called multiple times
 * in unit tests.
 */ function createFirebaseNamespace() {
    const namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
    namespace.INTERNAL = Object.assign(Object.assign({}, namespace.INTERNAL), {
        createFirebaseNamespace,
        extendNamespace,
        createSubscribe: (0, _util.createSubscribe),
        ErrorFactory: (0, _util.ErrorFactory),
        deepExtend: (0, _util.deepExtend)
    });
    /**
     * Patch the top-level firebase namespace with additional properties.
     *
     * firebase.INTERNAL.extendNamespace()
     */ function extendNamespace(props) {
        (0, _util.deepExtend)(namespace, props);
    }
    return namespace;
}
const firebase$1 = createFirebaseNamespace();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const logger = new (0, _logger.Logger)("@firebase/app-compat");
const name = "@firebase/app-compat";
const version = "0.1.28";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function registerCoreComponents(variant) {
    // Register `app` package.
    (0, _app.registerVersion)(name, version, variant);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Firebase Lite detection
// eslint-disable-next-line @typescript-eslint/no-explicit-any
if ((0, _util.isBrowser)() && self.firebase !== undefined) {
    logger.warn(`
    Warning: Firebase is already defined in the global scope. Please make sure
    Firebase library is only loaded once.
  `);
    // eslint-disable-next-line
    const sdkVersion = self.firebase.SDK_VERSION;
    if (sdkVersion && sdkVersion.indexOf("LITE") >= 0) logger.warn(`
    Warning: You are trying to load Firebase while using Firebase Performance standalone script.
    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.
    `);
}
const firebase = firebase$1;
registerCoreComponents();

},{"@firebase/util":"ePiK6","@firebase/component":"bi1VB","@firebase/app":"3AcPV","@firebase/logger":"fZmft","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ePiK6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CONSTANTS", ()=>CONSTANTS);
parcelHelpers.export(exports, "Deferred", ()=>Deferred);
parcelHelpers.export(exports, "ErrorFactory", ()=>ErrorFactory);
parcelHelpers.export(exports, "FirebaseError", ()=>FirebaseError);
parcelHelpers.export(exports, "MAX_VALUE_MILLIS", ()=>MAX_VALUE_MILLIS);
parcelHelpers.export(exports, "RANDOM_FACTOR", ()=>RANDOM_FACTOR);
parcelHelpers.export(exports, "Sha1", ()=>Sha1);
parcelHelpers.export(exports, "areCookiesEnabled", ()=>areCookiesEnabled);
parcelHelpers.export(exports, "assert", ()=>assert);
parcelHelpers.export(exports, "assertionError", ()=>assertionError);
parcelHelpers.export(exports, "async", ()=>async);
parcelHelpers.export(exports, "base64", ()=>base64);
parcelHelpers.export(exports, "base64Decode", ()=>base64Decode);
parcelHelpers.export(exports, "base64Encode", ()=>base64Encode);
parcelHelpers.export(exports, "base64urlEncodeWithoutPadding", ()=>base64urlEncodeWithoutPadding);
parcelHelpers.export(exports, "calculateBackoffMillis", ()=>calculateBackoffMillis);
parcelHelpers.export(exports, "contains", ()=>contains);
parcelHelpers.export(exports, "createMockUserToken", ()=>createMockUserToken);
parcelHelpers.export(exports, "createSubscribe", ()=>createSubscribe);
parcelHelpers.export(exports, "decode", ()=>decode);
parcelHelpers.export(exports, "deepCopy", ()=>deepCopy);
parcelHelpers.export(exports, "deepEqual", ()=>deepEqual);
parcelHelpers.export(exports, "deepExtend", ()=>deepExtend);
parcelHelpers.export(exports, "errorPrefix", ()=>errorPrefix);
parcelHelpers.export(exports, "extractQuerystring", ()=>extractQuerystring);
parcelHelpers.export(exports, "getGlobal", ()=>getGlobal);
parcelHelpers.export(exports, "getModularInstance", ()=>getModularInstance);
parcelHelpers.export(exports, "getUA", ()=>getUA);
parcelHelpers.export(exports, "isAdmin", ()=>isAdmin);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser);
parcelHelpers.export(exports, "isBrowserExtension", ()=>isBrowserExtension);
parcelHelpers.export(exports, "isElectron", ()=>isElectron);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty);
parcelHelpers.export(exports, "isIE", ()=>isIE);
parcelHelpers.export(exports, "isIndexedDBAvailable", ()=>isIndexedDBAvailable);
parcelHelpers.export(exports, "isMobileCordova", ()=>isMobileCordova);
parcelHelpers.export(exports, "isNode", ()=>isNode);
parcelHelpers.export(exports, "isNodeSdk", ()=>isNodeSdk);
parcelHelpers.export(exports, "isReactNative", ()=>isReactNative);
parcelHelpers.export(exports, "isSafari", ()=>isSafari);
parcelHelpers.export(exports, "isUWP", ()=>isUWP);
parcelHelpers.export(exports, "isValidFormat", ()=>isValidFormat);
parcelHelpers.export(exports, "isValidTimestamp", ()=>isValidTimestamp);
parcelHelpers.export(exports, "issuedAtTime", ()=>issuedAtTime);
parcelHelpers.export(exports, "jsonEval", ()=>jsonEval);
parcelHelpers.export(exports, "map", ()=>map);
parcelHelpers.export(exports, "ordinal", ()=>ordinal);
parcelHelpers.export(exports, "querystring", ()=>querystring);
parcelHelpers.export(exports, "querystringDecode", ()=>querystringDecode);
parcelHelpers.export(exports, "safeGet", ()=>safeGet);
parcelHelpers.export(exports, "stringLength", ()=>stringLength);
parcelHelpers.export(exports, "stringToByteArray", ()=>stringToByteArray);
parcelHelpers.export(exports, "stringify", ()=>stringify);
parcelHelpers.export(exports, "uuidv4", ()=>uuidv4);
parcelHelpers.export(exports, "validateArgCount", ()=>validateArgCount);
parcelHelpers.export(exports, "validateCallback", ()=>validateCallback);
parcelHelpers.export(exports, "validateContextObject", ()=>validateContextObject);
parcelHelpers.export(exports, "validateIndexedDBOpenable", ()=>validateIndexedDBOpenable);
parcelHelpers.export(exports, "validateNamespace", ()=>validateNamespace);
var global = arguments[3];
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */ const CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */ NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */ NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */ SDK_VERSION: "${JSCORE_VERSION}"
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Throws an error if the provided assertion is falsy
 */ const assert = function(assertion, message) {
    if (!assertion) throw assertionError(message);
};
/**
 * Returns an Error object suitable for throwing.
 */ const assertionError = function(message) {
    return new Error("Firebase Database (" + CONSTANTS.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + message);
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const stringToByteArray$1 = function(str) {
    // TODO(user): Use native implementations if/when available
    const out = [];
    let p = 0;
    for(let i = 0; i < str.length; i++){
        let c = str.charCodeAt(i);
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */ const byteArrayToString = function(bytes) {
    // TODO(user): Use native implementations if/when available
    const out = [];
    let pos = 0, c = 0;
    while(pos < bytes.length){
        const c1 = bytes[pos++];
        if (c1 < 128) out[c++] = String.fromCharCode(c1);
        else if (c1 > 191 && c1 < 224) {
            const c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            const c4 = bytes[pos++];
            const u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
        } else {
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
    }
    return out.join("");
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
const base64 = {
    /**
     * Maps bytes to characters.
     */ byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */ charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */ byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */ charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */ ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */ get ENCODED_VALS () {
        return this.ENCODED_VALS_BASE + "+/=";
    },
    /**
     * Our websafe alphabet.
     */ get ENCODED_VALS_WEBSAFE () {
        return this.ENCODED_VALS_BASE + "-_.";
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */ HAS_NATIVE_SUPPORT: typeof atob === "function",
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeByteArray (input, webSafe) {
        if (!Array.isArray(input)) throw Error("encodeByteArray takes an array as a parameter");
        this.init_();
        const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        const output = [];
        for(let i = 0; i < input.length; i += 3){
            const byte1 = input[i];
            const haveByte2 = i + 1 < input.length;
            const byte2 = haveByte2 ? input[i + 1] : 0;
            const haveByte3 = i + 2 < input.length;
            const byte3 = haveByte3 ? input[i + 2] : 0;
            const outByte1 = byte1 >> 2;
            const outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
            let outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
            let outByte4 = byte3 & 0x3f;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) outByte3 = 64;
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join("");
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */ encodeString (input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return btoa(input);
        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */ decodeString (input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) return atob(input);
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */ decodeStringToByteArray (input, webSafe) {
        this.init_();
        const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        const output = [];
        for(let i = 0; i < input.length;){
            const byte1 = charToByteMap[input.charAt(i++)];
            const haveByte2 = i < input.length;
            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            const haveByte3 = i < input.length;
            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            const haveByte4 = i < input.length;
            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) throw Error();
            const outByte1 = byte1 << 2 | byte2 >> 4;
            output.push(outByte1);
            if (byte3 !== 64) {
                const outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
                output.push(outByte2);
                if (byte4 !== 64) {
                    const outByte3 = byte3 << 6 & 0xc0 | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */ init_ () {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {};
            this.charToByteMap_ = {};
            this.byteToCharMapWebSafe_ = {};
            this.charToByteMapWebSafe_ = {};
            // We want quick mappings back and forth, so we precompute two maps.
            for(let i = 0; i < this.ENCODED_VALS.length; i++){
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * URL-safe base64 encoding
 */ const base64Encode = function(str) {
    const utf8Bytes = stringToByteArray$1(str);
    return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 encoding (without "." padding in the end).
 * e.g. Used in JSON Web Token (JWT) parts.
 */ const base64urlEncodeWithoutPadding = function(str) {
    // Use base64url encoding and remove padding in the end (dot characters).
    return base64Encode(str).replace(/\./g, "");
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */ const base64Decode = function(str) {
    try {
        return base64.decodeString(str, true);
    } catch (e) {
        console.error("base64Decode failed: ", e);
    }
    return null;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */ function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 *
 * Note: we don't merge __proto__ to prevent prototype pollution
 */ function deepExtend(target, source) {
    if (!(source instanceof Object)) return source;
    switch(source.constructor){
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            const dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) target = {};
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for(const prop in source){
        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) continue;
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
function isValidKey(key) {
    return key !== "__proto__";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Deferred {
    constructor(){
        this.reject = ()=>{};
        this.resolve = ()=>{};
        this.promise = new Promise((resolve, reject)=>{
            this.resolve = resolve;
            this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */ wrapCallback(callback) {
        return (error, value)=>{
            if (error) this.reject(error);
            else this.resolve(value);
            if (typeof callback === "function") {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                this.promise.catch(()=>{});
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) callback(error);
                else callback(error, value);
            }
        };
    }
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function createMockUserToken(token, projectId) {
    if (token.uid) throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
    // Unsecured JWTs use "none" as the algorithm.
    const header = {
        alg: "none",
        type: "JWT"
    };
    const project = projectId || "demo-project";
    const iat = token.iat || 0;
    const sub = token.sub || token.user_id;
    if (!sub) throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
    const payload = Object.assign({
        // Set all required fields to decent defaults
        iss: `https://securetoken.google.com/${project}`,
        aud: project,
        iat,
        exp: iat + 3600,
        auth_time: iat,
        sub,
        user_id: sub,
        firebase: {
            sign_in_provider: "custom",
            identities: {}
        }
    }, token);
    // Unsecured JWTs use the empty string as a signature.
    const signature = "";
    return [
        base64urlEncodeWithoutPadding(JSON.stringify(header)),
        base64urlEncodeWithoutPadding(JSON.stringify(payload)),
        signature
    ].join(".");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */ function getUA() {
    if (typeof navigator !== "undefined" && typeof navigator["userAgent"] === "string") return navigator["userAgent"];
    else return "";
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */ function isMobileCordova() {
    return typeof window !== "undefined" && // @ts-ignore Setting up an broadly applicable index signature for Window
    // just to deal with this case would probably be a bad idea.
    !!(window["cordova"] || window["phonegap"] || window["PhoneGap"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */ // Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
    try {
        return Object.prototype.toString.call(global.process) === "[object process]";
    } catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment
 */ function isBrowser() {
    return typeof self === "object" && self.self === self;
}
function isBrowserExtension() {
    const runtime = typeof chrome === "object" ? chrome.runtime : typeof browser === "object" ? browser.runtime : undefined;
    return typeof runtime === "object" && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */ function isReactNative() {
    return typeof navigator === "object" && navigator["product"] === "ReactNative";
}
/** Detects Electron apps. */ function isElectron() {
    return getUA().indexOf("Electron/") >= 0;
}
/** Detects Internet Explorer. */ function isIE() {
    const ua = getUA();
    return ua.indexOf("MSIE ") >= 0 || ua.indexOf("Trident/") >= 0;
}
/** Detects Universal Windows Platform apps. */ function isUWP() {
    return getUA().indexOf("MSAppHost/") >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */ function isNodeSdk() {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari. */ function isSafari() {
    return !isNode() && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome");
}
/**
 * This method checks if indexedDB is supported by current browser/service worker context
 * @return true if indexedDB is supported by current browser/service worker context
 */ function isIndexedDBAvailable() {
    return typeof indexedDB === "object";
}
/**
 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 *
 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
 * private browsing)
 */ function validateIndexedDBOpenable() {
    return new Promise((resolve, reject)=>{
        try {
            let preExist = true;
            const DB_CHECK_NAME = "validate-browser-context-for-indexeddb-analytics-module";
            const request = self.indexedDB.open(DB_CHECK_NAME);
            request.onsuccess = ()=>{
                request.result.close();
                // delete database only when it doesn't pre-exist
                if (!preExist) self.indexedDB.deleteDatabase(DB_CHECK_NAME);
                resolve(true);
            };
            request.onupgradeneeded = ()=>{
                preExist = false;
            };
            request.onerror = ()=>{
                var _a;
                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || "");
            };
        } catch (error) {
            reject(error);
        }
    });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */ function areCookiesEnabled() {
    if (typeof navigator === "undefined" || !navigator.cookieEnabled) return false;
    return true;
}
/**
 * Polyfill for `globalThis` object.
 * @returns the `globalThis` object for the given environment.
 */ function getGlobal() {
    if (typeof self !== "undefined") return self;
    if (typeof window !== "undefined") return window;
    if (typeof global !== "undefined") return global;
    throw new Error("Unable to locate global object.");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview Standardized Firebase Error.
 *
 * Usage:
 *
 *   // Typescript string literals for type-safe codes
 *   type Err =
 *     'unknown' |
 *     'object-not-found'
 *     ;
 *
 *   // Closure enum for type-safe error codes
 *   // at-enum {string}
 *   var Err = {
 *     UNKNOWN: 'unknown',
 *     OBJECT_NOT_FOUND: 'object-not-found',
 *   }
 *
 *   let errors: Map<Err, string> = {
 *     'generic-error': "Unknown error",
 *     'file-not-found': "Could not find file: {$file}",
 *   };
 *
 *   // Type-safe function - must pass a valid error code as param.
 *   let error = new ErrorFactory<Err>('service', 'Service', errors);
 *
 *   ...
 *   throw error.create(Err.GENERIC);
 *   ...
 *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
 *   ...
 *   // Service: Could not file file: foo.txt (service/file-not-found).
 *
 *   catch (e) {
 *     assert(e.message === "Could not find file: foo.txt.");
 *     if ((e as FirebaseError)?.code === 'service/file-not-found') {
 *       console.log("Could not read file: " + e['file']);
 *     }
 *   }
 */ const ERROR_NAME = "FirebaseError";
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
class FirebaseError extends Error {
    constructor(/** The error code for this error. */ code, message, /** Custom data for this error. */ customData){
        super(message);
        this.code = code;
        this.customData = customData;
        /** The custom name for all FirebaseErrors. */ this.name = ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, FirebaseError.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) Error.captureStackTrace(this, ErrorFactory.prototype.create);
    }
}
class ErrorFactory {
    constructor(service, serviceName, errors){
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    create(code, ...data) {
        const customData = data[0] || {};
        const fullCode = `${this.service}/${code}`;
        const template = this.errors[code];
        const message = template ? replaceTemplate(template, customData) : "Error";
        // Service Name: Error message (service/code).
        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
        const error = new FirebaseError(fullCode, fullMessage, customData);
        return error;
    }
}
function replaceTemplate(template, data) {
    return template.replace(PATTERN, (_, key)=>{
        const value = data[key];
        return value != null ? String(value) : `<${key}?>`;
    });
}
const PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */ function jsonEval(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */ function stringify(data) {
    return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const decode = function(token) {
    let header = {}, claims = {}, data = {}, signature = "";
    try {
        const parts = token.split(".");
        header = jsonEval(base64Decode(parts[0]) || "");
        claims = jsonEval(base64Decode(parts[1]) || "");
        signature = parts[2];
        data = claims["d"] || {};
        delete claims["d"];
    } catch (e) {}
    return {
        header,
        claims,
        data,
        signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const isValidTimestamp = function(token) {
    const claims = decode(token).claims;
    const now = Math.floor(new Date().getTime() / 1000);
    let validSince = 0, validUntil = 0;
    if (typeof claims === "object") {
        if (claims.hasOwnProperty("nbf")) validSince = claims["nbf"];
        else if (claims.hasOwnProperty("iat")) validSince = claims["iat"];
        if (claims.hasOwnProperty("exp")) validUntil = claims["exp"];
        else // token will expire after 24h by default
        validUntil = validSince + 86400;
    }
    return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const issuedAtTime = function(token) {
    const claims = decode(token).claims;
    if (typeof claims === "object" && claims.hasOwnProperty("iat")) return claims["iat"];
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const isValidFormat = function(token) {
    const decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === "object" && claims.hasOwnProperty("iat");
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */ const isAdmin = function(token) {
    const claims = decode(token).claims;
    return typeof claims === "object" && claims["admin"] === true;
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key];
    else return undefined;
}
function isEmpty(obj) {
    for(const key in obj){
        if (Object.prototype.hasOwnProperty.call(obj, key)) return false;
    }
    return true;
}
function map(obj, fn, contextObj) {
    const res = {};
    for(const key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res[key] = fn.call(contextObj, obj[key], key, obj);
    return res;
}
/**
 * Deep equal two objects. Support Arrays and Objects.
 */ function deepEqual(a, b) {
    if (a === b) return true;
    const aKeys = Object.keys(a);
    const bKeys = Object.keys(b);
    for (const k of aKeys){
        if (!bKeys.includes(k)) return false;
        const aProp = a[k];
        const bProp = b[k];
        if (isObject(aProp) && isObject(bProp)) {
            if (!deepEqual(aProp, bProp)) return false;
        } else if (aProp !== bProp) return false;
    }
    for (const k1 of bKeys){
        if (!aKeys.includes(k1)) return false;
    }
    return true;
}
function isObject(thing) {
    return thing !== null && typeof thing === "object";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */ function querystring(querystringParams) {
    const params = [];
    for (const [key, value] of Object.entries(querystringParams))if (Array.isArray(value)) value.forEach((arrayVal)=>{
        params.push(encodeURIComponent(key) + "=" + encodeURIComponent(arrayVal));
    });
    else params.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
    return params.length ? "&" + params.join("&") : "";
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */ function querystringDecode(querystring1) {
    const obj = {};
    const tokens = querystring1.replace(/^\?/, "").split("&");
    tokens.forEach((token)=>{
        if (token) {
            const [key, value] = token.split("=");
            obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }
    });
    return obj;
}
/**
 * Extract the query string part of a URL, including the leading question mark (if present).
 */ function extractQuerystring(url) {
    const queryStart = url.indexOf("?");
    if (!queryStart) return "";
    const fragmentStart = url.indexOf("#", queryStart);
    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */ /**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */ class Sha1 {
    constructor(){
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @private
         */ this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @private
         */ this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @private
         */ this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @private
         */ this.pad_ = [];
        /**
         * @private {number}
         */ this.inbuf_ = 0;
        /**
         * @private {number}
         */ this.total_ = 0;
        this.blockSize = 64;
        this.pad_[0] = 128;
        for(let i = 1; i < this.blockSize; ++i)this.pad_[i] = 0;
        this.reset();
    }
    reset() {
        this.chain_[0] = 0x67452301;
        this.chain_[1] = 0xefcdab89;
        this.chain_[2] = 0x98badcfe;
        this.chain_[3] = 0x10325476;
        this.chain_[4] = 0xc3d2e1f0;
        this.inbuf_ = 0;
        this.total_ = 0;
    }
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */ compress_(buf, offset) {
        if (!offset) offset = 0;
        const W = this.W_;
        // get 16 big endian words
        if (typeof buf === "string") for(let i = 0; i < 16; i++){
            // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
            // have a bug that turns the post-increment ++ operator into pre-increment
            // during JIT compilation.  We have code that depends heavily on SHA-1 for
            // correctness and which is affected by this bug, so I've removed all uses
            // of post-increment ++ in which the result value is used.  We can revert
            // this change once the Safari bug
            // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
            // most clients have been updated.
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
        }
        else for(let i1 = 0; i1 < 16; i1++){
            W[i1] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
        }
        // expand to 80 words
        for(let i2 = 16; i2 < 80; i2++){
            const t = W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16];
            W[i2] = (t << 1 | t >>> 31) & 0xffffffff;
        }
        let a = this.chain_[0];
        let b = this.chain_[1];
        let c = this.chain_[2];
        let d = this.chain_[3];
        let e = this.chain_[4];
        let f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for(let i3 = 0; i3 < 80; i3++){
            if (i3 < 40) {
                if (i3 < 20) {
                    f = d ^ b & (c ^ d);
                    k = 0x5a827999;
                } else {
                    f = b ^ c ^ d;
                    k = 0x6ed9eba1;
                }
            } else if (i3 < 60) {
                f = b & c | d & (b | c);
                k = 0x8f1bbcdc;
            } else {
                f = b ^ c ^ d;
                k = 0xca62c1d6;
            }
            const t = (a << 5 | a >>> 27) + f + e + k + W[i3] & 0xffffffff;
            e = d;
            d = c;
            c = (b << 30 | b >>> 2) & 0xffffffff;
            b = a;
            a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 0xffffffff;
        this.chain_[1] = this.chain_[1] + b & 0xffffffff;
        this.chain_[2] = this.chain_[2] + c & 0xffffffff;
        this.chain_[3] = this.chain_[3] + d & 0xffffffff;
        this.chain_[4] = this.chain_[4] + e & 0xffffffff;
    }
    update(bytes, length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) return;
        if (length === undefined) length = bytes.length;
        const lengthMinusBlock = length - this.blockSize;
        let n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        const buf = this.buf_;
        let inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while(n < length){
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf === 0) while(n <= lengthMinusBlock){
                this.compress_(bytes, n);
                n += this.blockSize;
            }
            if (typeof bytes === "string") while(n < length){
                buf[inbuf] = bytes.charCodeAt(n);
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
            else while(n < length){
                buf[inbuf] = bytes[n];
                ++inbuf;
                ++n;
                if (inbuf === this.blockSize) {
                    this.compress_(buf);
                    inbuf = 0;
                    break;
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
    }
    /** @override */ digest() {
        const digest = [];
        let totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) this.update(this.pad_, 56 - this.inbuf_);
        else this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        // Add # bits.
        for(let i = this.blockSize - 1; i >= 56; i--){
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        let n = 0;
        for(let i4 = 0; i4 < 5; i4++)for(let j = 24; j >= 0; j -= 8){
            digest[n] = this.chain_[i4] >> j & 255;
            ++n;
        }
        return digest;
    }
}
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */ function createSubscribe(executor, onNoObservers) {
    const proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */ class ObserverProxy {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */ constructor(executor, onNoObservers){
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task.then(()=>{
            executor(this);
        }).catch((e)=>{
            this.error(e);
        });
    }
    next(value) {
        this.forEachObserver((observer)=>{
            observer.next(value);
        });
    }
    error(error) {
        this.forEachObserver((observer)=>{
            observer.error(error);
        });
        this.close(error);
    }
    complete() {
        this.forEachObserver((observer)=>{
            observer.complete();
        });
        this.close();
    }
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */ subscribe(nextOrObserver, error, complete) {
        let observer;
        if (nextOrObserver === undefined && error === undefined && complete === undefined) throw new Error("Missing Observer.");
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, [
            "next",
            "error",
            "complete"
        ])) observer = nextOrObserver;
        else observer = {
            next: nextOrObserver,
            error,
            complete
        };
        if (observer.next === undefined) observer.next = noop;
        if (observer.error === undefined) observer.error = noop;
        if (observer.complete === undefined) observer.complete = noop;
        const unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(()=>{
            try {
                if (this.finalError) observer.error(this.finalError);
                else observer.complete();
            } catch (e) {
            // nothing
            }
            return;
        });
        this.observers.push(observer);
        return unsub;
    }
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    unsubscribeOne(i) {
        if (this.observers === undefined || this.observers[i] === undefined) return;
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) this.onNoObservers(this);
    }
    forEachObserver(fn) {
        if (this.finalized) // Already closed by previous event....just eat the additional values.
        return;
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for(let i = 0; i < this.observers.length; i++)this.sendOne(i, fn);
    }
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    sendOne(i, fn) {
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(()=>{
            if (this.observers !== undefined && this.observers[i] !== undefined) try {
                fn(this.observers[i]);
            } catch (e) {
                // Ignore exceptions raised in Observers or missing methods of an
                // Observer.
                // Log error to console. b/31404806
                if (typeof console !== "undefined" && console.error) console.error(e);
            }
        });
    }
    close(err) {
        if (this.finalized) return;
        this.finalized = true;
        if (err !== undefined) this.finalError = err;
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(()=>{
            this.observers = undefined;
            this.onNoObservers = undefined;
        });
    }
}
/** Turn synchronous function into one called asynchronously. */ // eslint-disable-next-line @typescript-eslint/ban-types
function async(fn, onError) {
    return (...args)=>{
        Promise.resolve(true).then(()=>{
            fn(...args);
        }).catch((error)=>{
            if (onError) onError(error);
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */ function implementsAnyMethods(obj, methods) {
    if (typeof obj !== "object" || obj === null) return false;
    for (const method of methods){
        if (method in obj && typeof obj[method] === "function") return true;
    }
    return false;
}
function noop() {
// do nothing
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */ const validateArgCount = function(fnName, minCount, maxCount, argCount) {
    let argError;
    if (argCount < minCount) argError = "at least " + minCount;
    else if (argCount > maxCount) argError = maxCount === 0 ? "none" : "no more than " + maxCount;
    if (argError) {
        const error = fnName + " failed: Was called with " + argCount + (argCount === 1 ? " argument." : " arguments.") + " Expects " + argError + ".";
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argName The name of the argument
 * @return The prefix to add to the error thrown for validation.
 */ function errorPrefix(fnName, argName) {
    return `${fnName} failed: ${argName} argument `;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */ function validateNamespace(fnName, namespace, optional) {
    if (optional && !namespace) return;
    if (typeof namespace !== "string") //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, "namespace") + "must be a valid firebase namespace.");
}
function validateCallback(fnName, argumentName, // eslint-disable-next-line @typescript-eslint/ban-types
callback, optional) {
    if (optional && !callback) return;
    if (typeof callback !== "function") throw new Error(errorPrefix(fnName, argumentName) + "must be a valid function.");
}
function validateContextObject(fnName, argumentName, context, optional) {
    if (optional && !context) return;
    if (typeof context !== "object" || context === null) throw new Error(errorPrefix(fnName, argumentName) + "must be a valid context object.");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */ const stringToByteArray = function(str) {
    const out = [];
    let p = 0;
    for(let i = 0; i < str.length; i++){
        let c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 0xd800 && c <= 0xdbff) {
            const high = c - 0xd800; // the high 10 bits.
            i++;
            assert(i < str.length, "Surrogate pair missing trail surrogate.");
            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
            c = 0x10000 + (high << 10) + low;
        }
        if (c < 128) out[p++] = c;
        else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
        } else if (c < 65536) {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        } else {
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */ const stringLength = function(str) {
    let p = 0;
    for(let i = 0; i < str.length; i++){
        const c = str.charCodeAt(i);
        if (c < 128) p++;
        else if (c < 2048) p += 2;
        else if (c >= 0xd800 && c <= 0xdbff) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        } else p += 3;
    }
    return p;
};
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Copied from https://stackoverflow.com/a/2117523
 * Generates a new uuid.
 * @public
 */ const uuidv4 = function() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c)=>{
        const r = Math.random() * 16 | 0, v = c === "x" ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The amount of milliseconds to exponentially increase.
 */ const DEFAULT_INTERVAL_MILLIS = 1000;
/**
 * The factor to backoff by.
 * Should be a number greater than 1.
 */ const DEFAULT_BACKOFF_FACTOR = 2;
/**
 * The maximum milliseconds to increase to.
 *
 * <p>Visible for testing
 */ const MAX_VALUE_MILLIS = 14400000; // Four hours, like iOS and Android.
/**
 * The percentage of backoff time to randomize by.
 * See
 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
 * for context.
 *
 * <p>Visible for testing
 */ const RANDOM_FACTOR = 0.5;
/**
 * Based on the backoff method from
 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
 */ function calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {
    // Calculates an exponentially increasing value.
    // Deviation: calculates value from count and a constant interval, so we only need to save value
    // and count to restore state.
    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
    // A random "fuzz" to avoid waves of retries.
    // Deviation: randomFactor is required.
    const randomWait = Math.round(// A fraction of the backoff value to add/subtract.
    // Deviation: changes multiplication order to improve readability.
    RANDOM_FACTOR * currBaseValue * (Math.random() - 0.5) * 2);
    // Limits backoff to max to avoid effectively permanent backoff.
    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provide English ordinal letters after a number
 */ function ordinal(i) {
    if (!Number.isFinite(i)) return `${i}`;
    return i + indicator(i);
}
function indicator(i) {
    i = Math.abs(i);
    const cent = i % 100;
    if (cent >= 10 && cent <= 20) return "th";
    const dec = i % 10;
    if (dec === 1) return "st";
    if (dec === 2) return "nd";
    if (dec === 3) return "rd";
    return "th";
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getModularInstance(service) {
    if (service && service._delegate) return service._delegate;
    else return service;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"bi1VB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Component", ()=>Component);
parcelHelpers.export(exports, "ComponentContainer", ()=>ComponentContainer);
parcelHelpers.export(exports, "Provider", ()=>Provider);
var _util = require("@firebase/util");
/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */ class Component {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */ constructor(name, instanceFactory, type){
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        /**
         * Properties to be added to the service namespace
         */ this.serviceProps = {};
        this.instantiationMode = "LAZY" /* LAZY */ ;
        this.onInstanceCreated = null;
    }
    setInstantiationMode(mode) {
        this.instantiationMode = mode;
        return this;
    }
    setMultipleInstances(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
    }
    setServiceProps(props) {
        this.serviceProps = props;
        return this;
    }
    setInstanceCreatedCallback(callback) {
        this.onInstanceCreated = callback;
        return this;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const DEFAULT_ENTRY_NAME = "[DEFAULT]";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */ class Provider {
    constructor(name, container){
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
        this.instancesOptions = new Map();
        this.onInitCallbacks = new Map();
    }
    /**
     * @param identifier A provider can provide mulitple instances of a service
     * if this.component.multipleInstances is true.
     */ get(identifier) {
        // if multipleInstances is not supported, use the default name
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
            const deferred = new (0, _util.Deferred)();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) // initialize the service if it can be auto-initialized
            try {
                const instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
                if (instance) deferred.resolve(instance);
            } catch (e) {
            // when the instance factory throws an exception during get(), it should not cause
            // a fatal error. We just return the unresolved promise in this case.
            }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
    }
    getImmediate(options) {
        var _a;
        // if multipleInstances is not supported, use the default name
        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) try {
            return this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
            });
        } catch (e) {
            if (optional) return null;
            else throw e;
        }
        else {
            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
            if (optional) return null;
            else throw Error(`Service ${this.name} is not available`);
        }
    }
    getComponent() {
        return this.component;
    }
    setComponent(component) {
        if (component.name !== this.name) throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
        if (this.component) throw Error(`Component for ${this.name} has already been provided`);
        this.component = component;
        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
        if (!this.shouldAutoInitialize()) return;
        // if the service is eager, initialize the default instance
        if (isComponentEager(component)) try {
            this.getOrInitializeService({
                instanceIdentifier: DEFAULT_ENTRY_NAME
            });
        } catch (e) {
        // when the instance factory for an eager Component throws an exception during the eager
        // initialization, it should not cause a fatal error.
        // TODO: Investigate if we need to make it configurable, because some component may want to cause
        // a fatal error in this case?
        }
        // Create service instances for the pending promises and resolve them
        // NOTE: if this.multipleInstances is false, only the default instance will be created
        // and all promises with resolve with it regardless of the identifier.
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()){
            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            try {
                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                const instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
                instanceDeferred.resolve(instance);
            } catch (e) {
            // when the instance factory throws an exception, it should not cause
            // a fatal error. We just leave the promise unresolved.
            }
        }
    }
    clearInstance(identifier = DEFAULT_ENTRY_NAME) {
        this.instancesDeferred.delete(identifier);
        this.instancesOptions.delete(identifier);
        this.instances.delete(identifier);
    }
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    async delete() {
        const services = Array.from(this.instances.values());
        await Promise.all([
            ...services.filter((service)=>"INTERNAL" in service) // legacy services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .map((service)=>service.INTERNAL.delete()),
            ...services.filter((service)=>"_delete" in service) // modularized services
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            .map((service)=>service._delete())
        ]);
    }
    isComponentSet() {
        return this.component != null;
    }
    isInitialized(identifier = DEFAULT_ENTRY_NAME) {
        return this.instances.has(identifier);
    }
    getOptions(identifier = DEFAULT_ENTRY_NAME) {
        return this.instancesOptions.get(identifier) || {};
    }
    initialize(opts = {}) {
        const { options ={}  } = opts;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
        if (!this.isComponentSet()) throw Error(`Component ${this.name} has not been registered yet`);
        const instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier,
            options
        });
        // resolve any pending promise waiting for the service instance
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()){
            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            if (normalizedIdentifier === normalizedDeferredIdentifier) instanceDeferred.resolve(instance);
        }
        return instance;
    }
    /**
     *
     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
     *
     * @param identifier An optional instance identifier
     * @returns a function to unregister the callback
     */ onInit(callback, identifier) {
        var _a;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
        existingCallbacks.add(callback);
        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
        const existingInstance = this.instances.get(normalizedIdentifier);
        if (existingInstance) callback(existingInstance, normalizedIdentifier);
        return ()=>{
            existingCallbacks.delete(callback);
        };
    }
    /**
     * Invoke onInit callbacks synchronously
     * @param instance the service instance`
     */ invokeOnInitCallbacks(instance, identifier) {
        const callbacks = this.onInitCallbacks.get(identifier);
        if (!callbacks) return;
        for (const callback of callbacks)try {
            callback(instance, identifier);
        } catch (_a) {
        // ignore errors in the onInit callback
        }
    }
    getOrInitializeService({ instanceIdentifier , options ={}  }) {
        let instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, {
                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                options
            });
            this.instances.set(instanceIdentifier, instance);
            this.instancesOptions.set(instanceIdentifier, options);
            /**
             * Invoke onInit listeners.
             * Note this.component.onInstanceCreated is different, which is used by the component creator,
             * while onInit listeners are registered by consumers of the provider.
             */ this.invokeOnInitCallbacks(instance, instanceIdentifier);
            /**
             * Order is important
             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
             * makes `isInitialized()` return true.
             */ if (this.component.onInstanceCreated) try {
                this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
            } catch (_a) {
            // ignore errors in the onInstanceCreatedCallback
            }
        }
        return instance || null;
    }
    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {
        if (this.component) return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        else return identifier; // assume multiple instances are supported before the component is provided.
    }
    shouldAutoInitialize() {
        return !!this.component && this.component.instantiationMode !== "EXPLICIT" /* EXPLICIT */ ;
    }
}
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function isComponentEager(component) {
    return component.instantiationMode === "EAGER" /* EAGER */ ;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */ class ComponentContainer {
    constructor(name){
        this.name = name;
        this.providers = new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */ addComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
        provider.setComponent(component);
    }
    addOrOverwriteComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) // delete the existing provider from the container, so we can register the new component
        this.providers.delete(component.name);
        this.addComponent(component);
    }
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */ getProvider(name) {
        if (this.providers.has(name)) return this.providers.get(name);
        // create a Provider for a service that hasn't registered with Firebase
        const provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
    }
    getProviders() {
        return Array.from(this.providers.values());
    }
}

},{"@firebase/util":"ePiK6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3AcPV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FirebaseError", ()=>(0, _util.FirebaseError));
parcelHelpers.export(exports, "SDK_VERSION", ()=>SDK_VERSION);
parcelHelpers.export(exports, "_DEFAULT_ENTRY_NAME", ()=>DEFAULT_ENTRY_NAME);
parcelHelpers.export(exports, "_addComponent", ()=>_addComponent);
parcelHelpers.export(exports, "_addOrOverwriteComponent", ()=>_addOrOverwriteComponent);
parcelHelpers.export(exports, "_apps", ()=>_apps);
parcelHelpers.export(exports, "_clearComponents", ()=>_clearComponents);
parcelHelpers.export(exports, "_components", ()=>_components);
parcelHelpers.export(exports, "_getProvider", ()=>_getProvider);
parcelHelpers.export(exports, "_registerComponent", ()=>_registerComponent);
parcelHelpers.export(exports, "_removeServiceInstance", ()=>_removeServiceInstance);
parcelHelpers.export(exports, "deleteApp", ()=>deleteApp);
parcelHelpers.export(exports, "getApp", ()=>getApp);
parcelHelpers.export(exports, "getApps", ()=>getApps);
parcelHelpers.export(exports, "initializeApp", ()=>initializeApp);
parcelHelpers.export(exports, "onLog", ()=>onLog);
parcelHelpers.export(exports, "registerVersion", ()=>registerVersion);
parcelHelpers.export(exports, "setLogLevel", ()=>setLogLevel);
var _component = require("@firebase/component");
var _logger = require("@firebase/logger");
var _util = require("@firebase/util");
var _idb = require("idb");
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class PlatformLoggerServiceImpl {
    constructor(container){
        this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    getPlatformInfoString() {
        const providers = this.container.getProviders();
        // Loop through providers and get library/version pairs from any that are
        // version components.
        return providers.map((provider)=>{
            if (isVersionServiceProvider(provider)) {
                const service = provider.getImmediate();
                return `${service.library}/${service.version}`;
            } else return null;
        }).filter((logString)=>logString).join(" ");
    }
}
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */ function isVersionServiceProvider(provider) {
    const component = provider.getComponent();
    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* VERSION */ ;
}
const name$o = "@firebase/app";
const version$1 = "0.7.27";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const logger = new (0, _logger.Logger)("@firebase/app");
const name$n = "@firebase/app-compat";
const name$m = "@firebase/analytics-compat";
const name$l = "@firebase/analytics";
const name$k = "@firebase/app-check-compat";
const name$j = "@firebase/app-check";
const name$i = "@firebase/auth";
const name$h = "@firebase/auth-compat";
const name$g = "@firebase/database";
const name$f = "@firebase/database-compat";
const name$e = "@firebase/functions";
const name$d = "@firebase/functions-compat";
const name$c = "@firebase/installations";
const name$b = "@firebase/installations-compat";
const name$a = "@firebase/messaging";
const name$9 = "@firebase/messaging-compat";
const name$8 = "@firebase/performance";
const name$7 = "@firebase/performance-compat";
const name$6 = "@firebase/remote-config";
const name$5 = "@firebase/remote-config-compat";
const name$4 = "@firebase/storage";
const name$3 = "@firebase/storage-compat";
const name$2 = "@firebase/firestore";
const name$1 = "@firebase/firestore-compat";
const name = "firebase";
const version = "9.8.4";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The default app name
 *
 * @internal
 */ const DEFAULT_ENTRY_NAME = "[DEFAULT]";
const PLATFORM_LOG_STRING = {
    [name$o]: "fire-core",
    [name$n]: "fire-core-compat",
    [name$l]: "fire-analytics",
    [name$m]: "fire-analytics-compat",
    [name$j]: "fire-app-check",
    [name$k]: "fire-app-check-compat",
    [name$i]: "fire-auth",
    [name$h]: "fire-auth-compat",
    [name$g]: "fire-rtdb",
    [name$f]: "fire-rtdb-compat",
    [name$e]: "fire-fn",
    [name$d]: "fire-fn-compat",
    [name$c]: "fire-iid",
    [name$b]: "fire-iid-compat",
    [name$a]: "fire-fcm",
    [name$9]: "fire-fcm-compat",
    [name$8]: "fire-perf",
    [name$7]: "fire-perf-compat",
    [name$6]: "fire-rc",
    [name$5]: "fire-rc-compat",
    [name$4]: "fire-gcs",
    [name$3]: "fire-gcs-compat",
    [name$2]: "fire-fst",
    [name$1]: "fire-fst-compat",
    "fire-js": "fire-js",
    [name]: "fire-js-all"
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @internal
 */ const _apps = new Map();
/**
 * Registered components.
 *
 * @internal
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
const _components = new Map();
/**
 * @param component - the component being added to this app's container
 *
 * @internal
 */ function _addComponent(app, component) {
    try {
        app.container.addComponent(component);
    } catch (e) {
        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
    }
}
/**
 *
 * @internal
 */ function _addOrOverwriteComponent(app, component) {
    app.container.addOrOverwriteComponent(component);
}
/**
 *
 * @param component - the component to register
 * @returns whether or not the component is registered successfully
 *
 * @internal
 */ function _registerComponent(component) {
    const componentName = component.name;
    if (_components.has(componentName)) {
        logger.debug(`There were multiple attempts to register component ${componentName}.`);
        return false;
    }
    _components.set(componentName, component);
    // add the component to existing app instances
    for (const app of _apps.values())_addComponent(app, component);
    return true;
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 *
 * @returns the provider for the service with the matching name
 *
 * @internal
 */ function _getProvider(app, name1) {
    const heartbeatController = app.container.getProvider("heartbeat").getImmediate({
        optional: true
    });
    if (heartbeatController) heartbeatController.triggerHeartbeat();
    return app.container.getProvider(name1);
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 * @param instanceIdentifier - service instance identifier in case the service supports multiple instances
 *
 * @internal
 */ function _removeServiceInstance(app, name2, instanceIdentifier = DEFAULT_ENTRY_NAME) {
    _getProvider(app, name2).clearInstance(instanceIdentifier);
}
/**
 * Test only
 *
 * @internal
 */ function _clearComponents() {
    _components.clear();
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const ERRORS = {
    ["no-app" /* NO_APP */ ]: "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",
    ["bad-app-name" /* BAD_APP_NAME */ ]: "Illegal App name: '{$appName}",
    ["duplicate-app" /* DUPLICATE_APP */ ]: "Firebase App named '{$appName}' already exists with different options or config",
    ["app-deleted" /* APP_DELETED */ ]: "Firebase App named '{$appName}' already deleted",
    ["invalid-app-argument" /* INVALID_APP_ARGUMENT */ ]: "firebase.{$appName}() takes either no argument or a Firebase App instance.",
    ["invalid-log-argument" /* INVALID_LOG_ARGUMENT */ ]: "First argument to `onLog` must be null or a function.",
    ["storage-open" /* STORAGE_OPEN */ ]: "Error thrown when opening storage. Original error: {$originalErrorMessage}.",
    ["storage-get" /* STORAGE_GET */ ]: "Error thrown when reading from storage. Original error: {$originalErrorMessage}.",
    ["storage-set" /* STORAGE_WRITE */ ]: "Error thrown when writing to storage. Original error: {$originalErrorMessage}.",
    ["storage-delete" /* STORAGE_DELETE */ ]: "Error thrown when deleting from storage. Original error: {$originalErrorMessage}."
};
const ERROR_FACTORY = new (0, _util.ErrorFactory)("app", "Firebase", ERRORS);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class FirebaseAppImpl {
    constructor(options, config, container){
        this._isDeleted = false;
        this._options = Object.assign({}, options);
        this._config = Object.assign({}, config);
        this._name = config.name;
        this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
        this._container = container;
        this.container.addComponent(new (0, _component.Component)("app", ()=>this, "PUBLIC" /* PUBLIC */ ));
    }
    get automaticDataCollectionEnabled() {
        this.checkDestroyed();
        return this._automaticDataCollectionEnabled;
    }
    set automaticDataCollectionEnabled(val) {
        this.checkDestroyed();
        this._automaticDataCollectionEnabled = val;
    }
    get name() {
        this.checkDestroyed();
        return this._name;
    }
    get options() {
        this.checkDestroyed();
        return this._options;
    }
    get config() {
        this.checkDestroyed();
        return this._config;
    }
    get container() {
        return this._container;
    }
    get isDeleted() {
        return this._isDeleted;
    }
    set isDeleted(val) {
        this._isDeleted = val;
    }
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */ checkDestroyed() {
        if (this.isDeleted) throw ERROR_FACTORY.create("app-deleted" /* APP_DELETED */ , {
            appName: this._name
        });
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The current SDK version.
 *
 * @public
 */ const SDK_VERSION = version;
function initializeApp(options, rawConfig = {}) {
    if (typeof rawConfig !== "object") {
        const name3 = rawConfig;
        rawConfig = {
            name: name3
        };
    }
    const config = Object.assign({
        name: DEFAULT_ENTRY_NAME,
        automaticDataCollectionEnabled: false
    }, rawConfig);
    const name4 = config.name;
    if (typeof name4 !== "string" || !name4) throw ERROR_FACTORY.create("bad-app-name" /* BAD_APP_NAME */ , {
        appName: String(name4)
    });
    const existingApp = _apps.get(name4);
    if (existingApp) {
        // return the existing app if options and config deep equal the ones in the existing app.
        if ((0, _util.deepEqual)(options, existingApp.options) && (0, _util.deepEqual)(config, existingApp.config)) return existingApp;
        else throw ERROR_FACTORY.create("duplicate-app" /* DUPLICATE_APP */ , {
            appName: name4
        });
    }
    const container = new (0, _component.ComponentContainer)(name4);
    for (const component of _components.values())container.addComponent(component);
    const newApp = new FirebaseAppImpl(options, config, container);
    _apps.set(name4, newApp);
    return newApp;
}
/**
 * Retrieves a {@link @firebase/app#FirebaseApp} instance.
 *
 * When called with no arguments, the default app is returned. When an app name
 * is provided, the app corresponding to that name is returned.
 *
 * An exception is thrown if the app being retrieved has not yet been
 * initialized.
 *
 * @example
 * ```javascript
 * // Return the default app
 * const app = getApp();
 * ```
 *
 * @example
 * ```javascript
 * // Return a named app
 * const otherApp = getApp("otherApp");
 * ```
 *
 * @param name - Optional name of the app to return. If no name is
 *   provided, the default is `"[DEFAULT]"`.
 *
 * @returns The app corresponding to the provided app name.
 *   If no app name is provided, the default app is returned.
 *
 * @public
 */ function getApp(name5 = DEFAULT_ENTRY_NAME) {
    const app = _apps.get(name5);
    if (!app) throw ERROR_FACTORY.create("no-app" /* NO_APP */ , {
        appName: name5
    });
    return app;
}
/**
 * A (read-only) array of all initialized apps.
 * @public
 */ function getApps() {
    return Array.from(_apps.values());
}
/**
 * Renders this app unusable and frees the resources of all associated
 * services.
 *
 * @example
 * ```javascript
 * deleteApp(app)
 *   .then(function() {
 *     console.log("App deleted successfully");
 *   })
 *   .catch(function(error) {
 *     console.log("Error deleting app:", error);
 *   });
 * ```
 *
 * @public
 */ async function deleteApp(app) {
    const name6 = app.name;
    if (_apps.has(name6)) {
        _apps.delete(name6);
        await Promise.all(app.container.getProviders().map((provider)=>provider.delete()));
        app.isDeleted = true;
    }
}
/**
 * Registers a library's name and version for platform logging purposes.
 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
 * @param version - Current version of that library.
 * @param variant - Bundle variant, e.g., node, rn, etc.
 *
 * @public
 */ function registerVersion(libraryKeyOrName, version1, variant) {
    var _a;
    // TODO: We can use this check to whitelist strings when/if we set up
    // a good whitelist system.
    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
    if (variant) library += `-${variant}`;
    const libraryMismatch = library.match(/\s|\//);
    const versionMismatch = version1.match(/\s|\//);
    if (libraryMismatch || versionMismatch) {
        const warning = [
            `Unable to register library "${library}" with version "${version1}":`
        ];
        if (libraryMismatch) warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
        if (libraryMismatch && versionMismatch) warning.push("and");
        if (versionMismatch) warning.push(`version name "${version1}" contains illegal characters (whitespace or "/")`);
        logger.warn(warning.join(" "));
        return;
    }
    _registerComponent(new (0, _component.Component)(`${library}-version`, ()=>({
            library,
            version: version1
        }), "VERSION" /* VERSION */ ));
}
/**
 * Sets log handler for all Firebase SDKs.
 * @param logCallback - An optional custom log handler that executes user code whenever
 * the Firebase SDK makes a logging call.
 *
 * @public
 */ function onLog(logCallback, options) {
    if (logCallback !== null && typeof logCallback !== "function") throw ERROR_FACTORY.create("invalid-log-argument" /* INVALID_LOG_ARGUMENT */ );
    (0, _logger.setUserLogHandler)(logCallback, options);
}
/**
 * Sets log level for all Firebase SDKs.
 *
 * All of the log types above the current log level are captured (i.e. if
 * you set the log level to `info`, errors are logged, but `debug` and
 * `verbose` logs are not).
 *
 * @public
 */ function setLogLevel(logLevel) {
    (0, _logger.setLogLevel)(logLevel);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const DB_NAME = "firebase-heartbeat-database";
const DB_VERSION = 1;
const STORE_NAME = "firebase-heartbeat-store";
let dbPromise = null;
function getDbPromise() {
    if (!dbPromise) dbPromise = (0, _idb.openDB)(DB_NAME, DB_VERSION, {
        upgrade: (db, oldVersion)=>{
            // We don't use 'break' in this switch statement, the fall-through
            // behavior is what we want, because if there are multiple versions between
            // the old version and the current version, we want ALL the migrations
            // that correspond to those versions to run, not only the last one.
            // eslint-disable-next-line default-case
            switch(oldVersion){
                case 0:
                    db.createObjectStore(STORE_NAME);
            }
        }
    }).catch((e)=>{
        throw ERROR_FACTORY.create("storage-open" /* STORAGE_OPEN */ , {
            originalErrorMessage: e.message
        });
    });
    return dbPromise;
}
async function readHeartbeatsFromIndexedDB(app) {
    var _a;
    try {
        const db = await getDbPromise();
        return db.transaction(STORE_NAME).objectStore(STORE_NAME).get(computeKey(app));
    } catch (e) {
        throw ERROR_FACTORY.create("storage-get" /* STORAGE_GET */ , {
            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message
        });
    }
}
async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
    var _a;
    try {
        const db = await getDbPromise();
        const tx = db.transaction(STORE_NAME, "readwrite");
        const objectStore = tx.objectStore(STORE_NAME);
        await objectStore.put(heartbeatObject, computeKey(app));
        return tx.done;
    } catch (e) {
        throw ERROR_FACTORY.create("storage-set" /* STORAGE_WRITE */ , {
            originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message
        });
    }
}
function computeKey(app) {
    return `${app.name}!${app.options.appId}`;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const MAX_HEADER_BYTES = 1024;
// 30 days
const STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 2592000000;
class HeartbeatServiceImpl {
    constructor(container){
        this.container = container;
        /**
         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
         * the header string.
         * Stores one record per date. This will be consolidated into the standard
         * format of one record per user agent string before being sent as a header.
         * Populated from indexedDB when the controller is instantiated and should
         * be kept in sync with indexedDB.
         * Leave public for easier testing.
         */ this._heartbeatsCache = null;
        const app = this.container.getProvider("app").getImmediate();
        this._storage = new HeartbeatStorageImpl(app);
        this._heartbeatsCachePromise = this._storage.read().then((result)=>{
            this._heartbeatsCache = result;
            return result;
        });
    }
    /**
     * Called to report a heartbeat. The function will generate
     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
     * to IndexedDB.
     * Note that we only store one heartbeat per day. So if a heartbeat for today is
     * already logged, subsequent calls to this function in the same day will be ignored.
     */ async triggerHeartbeat() {
        const platformLogger = this.container.getProvider("platform-logger").getImmediate();
        // This is the "Firebase user agent" string from the platform logger
        // service, not the browser user agent.
        const agent = platformLogger.getPlatformInfoString();
        const date = getUTCDateString();
        if (this._heartbeatsCache === null) this._heartbeatsCache = await this._heartbeatsCachePromise;
        // Do not store a heartbeat if one is already stored for this day
        // or if a header has already been sent today.
        if (this._heartbeatsCache.lastSentHeartbeatDate === date || this._heartbeatsCache.heartbeats.some((singleDateHeartbeat)=>singleDateHeartbeat.date === date)) return;
        else // There is no entry for this date. Create one.
        this._heartbeatsCache.heartbeats.push({
            date,
            agent
        });
        // Remove entries older than 30 days.
        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter((singleDateHeartbeat)=>{
            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
            const now = Date.now();
            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
        });
        return this._storage.overwrite(this._heartbeatsCache);
    }
    /**
     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
     * It also clears all heartbeats from memory as well as in IndexedDB.
     *
     * NOTE: Consuming product SDKs should not send the header if this method
     * returns an empty string.
     */ async getHeartbeatsHeader() {
        if (this._heartbeatsCache === null) await this._heartbeatsCachePromise;
        // If it's still null or the array is empty, there is no data to send.
        if (this._heartbeatsCache === null || this._heartbeatsCache.heartbeats.length === 0) return "";
        const date = getUTCDateString();
        // Extract as many heartbeats from the cache as will fit under the size limit.
        const { heartbeatsToSend , unsentEntries  } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
        const headerString = (0, _util.base64urlEncodeWithoutPadding)(JSON.stringify({
            version: 2,
            heartbeats: heartbeatsToSend
        }));
        // Store last sent date to prevent another being logged/sent for the same day.
        this._heartbeatsCache.lastSentHeartbeatDate = date;
        if (unsentEntries.length > 0) {
            // Store any unsent entries if they exist.
            this._heartbeatsCache.heartbeats = unsentEntries;
            // This seems more likely than emptying the array (below) to lead to some odd state
            // since the cache isn't empty and this will be called again on the next request,
            // and is probably safest if we await it.
            await this._storage.overwrite(this._heartbeatsCache);
        } else {
            this._heartbeatsCache.heartbeats = [];
            this._storage.overwrite(this._heartbeatsCache);
        }
        return headerString;
    }
}
function getUTCDateString() {
    const today = new Date();
    // Returns date format 'YYYY-MM-DD'
    return today.toISOString().substring(0, 10);
}
function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
    // Heartbeats grouped by user agent in the standard format to be sent in
    // the header.
    const heartbeatsToSend = [];
    // Single date format heartbeats that are not sent.
    let unsentEntries = heartbeatsCache.slice();
    for (const singleDateHeartbeat of heartbeatsCache){
        // Look for an existing entry with the same user agent.
        const heartbeatEntry = heartbeatsToSend.find((hb)=>hb.agent === singleDateHeartbeat.agent);
        if (!heartbeatEntry) {
            // If no entry for this user agent exists, create one.
            heartbeatsToSend.push({
                agent: singleDateHeartbeat.agent,
                dates: [
                    singleDateHeartbeat.date
                ]
            });
            if (countBytes(heartbeatsToSend) > maxSize) {
                // If the header would exceed max size, remove the added heartbeat
                // entry and stop adding to the header.
                heartbeatsToSend.pop();
                break;
            }
        } else {
            heartbeatEntry.dates.push(singleDateHeartbeat.date);
            // If the header would exceed max size, remove the added date
            // and stop adding to the header.
            if (countBytes(heartbeatsToSend) > maxSize) {
                heartbeatEntry.dates.pop();
                break;
            }
        }
        // Pop unsent entry from queue. (Skipped if adding the entry exceeded
        // quota and the loop breaks early.)
        unsentEntries = unsentEntries.slice(1);
    }
    return {
        heartbeatsToSend,
        unsentEntries
    };
}
class HeartbeatStorageImpl {
    constructor(app){
        this.app = app;
        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
    }
    async runIndexedDBEnvironmentCheck() {
        if (!(0, _util.isIndexedDBAvailable)()) return false;
        else return (0, _util.validateIndexedDBOpenable)().then(()=>true).catch(()=>false);
    }
    /**
     * Read all heartbeats.
     */ async read() {
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) return {
            heartbeats: []
        };
        else {
            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
            return idbHeartbeatObject || {
                heartbeats: []
            };
        }
    }
    // overwrite the storage with the provided heartbeats
    async overwrite(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) return;
        else {
            const existingHeartbeatsObject = await this.read();
            return writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: heartbeatsObject.heartbeats
            });
        }
    }
    // add heartbeats
    async add(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) return;
        else {
            const existingHeartbeatsObject = await this.read();
            return writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: [
                    ...existingHeartbeatsObject.heartbeats,
                    ...heartbeatsObject.heartbeats
                ]
            });
        }
    }
}
/**
 * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
 * in a platform logging header JSON object, stringified, and converted
 * to base 64.
 */ function countBytes(heartbeatsCache) {
    // base64 has a restricted set of characters, all of which should be 1 byte.
    return (0, _util.base64urlEncodeWithoutPadding)(// heartbeatsCache wrapper properties
    JSON.stringify({
        version: 2,
        heartbeats: heartbeatsCache
    })).length;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function registerCoreComponents(variant) {
    _registerComponent(new (0, _component.Component)("platform-logger", (container)=>new PlatformLoggerServiceImpl(container), "PRIVATE" /* PRIVATE */ ));
    _registerComponent(new (0, _component.Component)("heartbeat", (container)=>new HeartbeatServiceImpl(container), "PRIVATE" /* PRIVATE */ ));
    // Register `app` package.
    registerVersion(name$o, version$1, variant);
    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
    registerVersion(name$o, version$1, "esm2017");
    // Register platform SDK identifier (no version).
    registerVersion("fire-js", "");
}
/**
 * Firebase App
 *
 * @remarks This package coordinates the communication between the different Firebase components
 * @packageDocumentation
 */ registerCoreComponents("");

},{"@firebase/component":"bi1VB","@firebase/logger":"fZmft","@firebase/util":"ePiK6","idb":"kozAz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fZmft":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogLevel", ()=>LogLevel);
parcelHelpers.export(exports, "Logger", ()=>Logger);
parcelHelpers.export(exports, "setLogLevel", ()=>setLogLevel);
parcelHelpers.export(exports, "setUserLogHandler", ()=>setUserLogHandler);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A container for all of the Logger instances
 */ const instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */ var LogLevel;
(function(LogLevel1) {
    LogLevel1[LogLevel1["DEBUG"] = 0] = "DEBUG";
    LogLevel1[LogLevel1["VERBOSE"] = 1] = "VERBOSE";
    LogLevel1[LogLevel1["INFO"] = 2] = "INFO";
    LogLevel1[LogLevel1["WARN"] = 3] = "WARN";
    LogLevel1[LogLevel1["ERROR"] = 4] = "ERROR";
    LogLevel1[LogLevel1["SILENT"] = 5] = "SILENT";
})(LogLevel || (LogLevel = {}));
const levelStringToEnum = {
    "debug": LogLevel.DEBUG,
    "verbose": LogLevel.VERBOSE,
    "info": LogLevel.INFO,
    "warn": LogLevel.WARN,
    "error": LogLevel.ERROR,
    "silent": LogLevel.SILENT
};
/**
 * The default log level
 */ const defaultLogLevel = LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */ const ConsoleMethod = {
    [LogLevel.DEBUG]: "log",
    [LogLevel.VERBOSE]: "log",
    [LogLevel.INFO]: "info",
    [LogLevel.WARN]: "warn",
    [LogLevel.ERROR]: "error"
};
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */ const defaultLogHandler = (instance, logType, ...args)=>{
    if (logType < instance.logLevel) return;
    const now = new Date().toISOString();
    const method = ConsoleMethod[logType];
    if (method) console[method](`[${now}]  ${instance.name}:`, ...args);
    else throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
};
class Logger {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */ constructor(name){
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */ this._logLevel = defaultLogLevel;
        /**
         * The main (internal) log handler for the Logger instance.
         * Can be set to a new function in internal package code but not by user.
         */ this._logHandler = defaultLogHandler;
        /**
         * The optional, additional, user-defined log handler for the Logger instance.
         */ this._userLogHandler = null;
        /**
         * Capture the current instance for later use
         */ instances.push(this);
    }
    get logLevel() {
        return this._logLevel;
    }
    set logLevel(val) {
        if (!(val in LogLevel)) throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
        this._logLevel = val;
    }
    // Workaround for setter/getter having to be the same type.
    setLogLevel(val) {
        this._logLevel = typeof val === "string" ? levelStringToEnum[val] : val;
    }
    get logHandler() {
        return this._logHandler;
    }
    set logHandler(val) {
        if (typeof val !== "function") throw new TypeError("Value assigned to `logHandler` must be a function");
        this._logHandler = val;
    }
    get userLogHandler() {
        return this._userLogHandler;
    }
    set userLogHandler(val) {
        this._userLogHandler = val;
    }
    /**
     * The functions below are all based on the `console` interface
     */ debug(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
        this._logHandler(this, LogLevel.DEBUG, ...args);
    }
    log(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);
        this._logHandler(this, LogLevel.VERBOSE, ...args);
    }
    info(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
        this._logHandler(this, LogLevel.INFO, ...args);
    }
    warn(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
        this._logHandler(this, LogLevel.WARN, ...args);
    }
    error(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
        this._logHandler(this, LogLevel.ERROR, ...args);
    }
}
function setLogLevel(level) {
    instances.forEach((inst)=>{
        inst.setLogLevel(level);
    });
}
function setUserLogHandler(logCallback, options) {
    for (const instance1 of instances){
        let customLogLevel = null;
        if (options && options.level) customLogLevel = levelStringToEnum[options.level];
        if (logCallback === null) instance1.userLogHandler = null;
        else instance1.userLogHandler = (instance, level, ...args)=>{
            const message = args.map((arg)=>{
                if (arg == null) return null;
                else if (typeof arg === "string") return arg;
                else if (typeof arg === "number" || typeof arg === "boolean") return arg.toString();
                else if (arg instanceof Error) return arg.message;
                else try {
                    return JSON.stringify(arg);
                } catch (ignored) {
                    return null;
                }
            }).filter((arg)=>arg).join(" ");
            if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) logCallback({
                level: LogLevel[level].toLowerCase(),
                message,
                args,
                type: instance.name
            });
        };
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kozAz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unwrap", ()=>(0, _wrapIdbValueJs.u));
parcelHelpers.export(exports, "wrap", ()=>(0, _wrapIdbValueJs.w));
parcelHelpers.export(exports, "deleteDB", ()=>deleteDB);
parcelHelpers.export(exports, "openDB", ()=>openDB);
var _wrapIdbValueJs = require("./wrap-idb-value.js");
/**
 * Open a database.
 *
 * @param name Name of the database.
 * @param version Schema version.
 * @param callbacks Additional callbacks.
 */ function openDB(name, version, { blocked , upgrade , blocking , terminated  } = {}) {
    const request = indexedDB.open(name, version);
    const openPromise = (0, _wrapIdbValueJs.w)(request);
    if (upgrade) request.addEventListener("upgradeneeded", (event)=>{
        upgrade((0, _wrapIdbValueJs.w)(request.result), event.oldVersion, event.newVersion, (0, _wrapIdbValueJs.w)(request.transaction));
    });
    if (blocked) request.addEventListener("blocked", ()=>blocked());
    openPromise.then((db)=>{
        if (terminated) db.addEventListener("close", ()=>terminated());
        if (blocking) db.addEventListener("versionchange", ()=>blocking());
    }).catch(()=>{});
    return openPromise;
}
/**
 * Delete a database.
 *
 * @param name Name of the database.
 */ function deleteDB(name, { blocked  } = {}) {
    const request = indexedDB.deleteDatabase(name);
    if (blocked) request.addEventListener("blocked", ()=>blocked());
    return (0, _wrapIdbValueJs.w)(request).then(()=>undefined);
}
const readMethods = [
    "get",
    "getKey",
    "getAll",
    "getAllKeys",
    "count"
];
const writeMethods = [
    "put",
    "add",
    "delete",
    "clear"
];
const cachedMethods = new Map();
function getMethod(target1, prop) {
    if (!(target1 instanceof IDBDatabase && !(prop in target1) && typeof prop === "string")) return;
    if (cachedMethods.get(prop)) return cachedMethods.get(prop);
    const targetFuncName = prop.replace(/FromIndex$/, "");
    const useIndex = prop !== targetFuncName;
    const isWrite = writeMethods.includes(targetFuncName);
    if (// Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))) return;
    const method = async function(storeName, ...args) {
        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
        const tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly");
        let target = tx.store;
        if (useIndex) target = target.index(args.shift());
        // Must reject if op rejects.
        // If it's a write operation, must reject if tx.done rejects.
        // Must reject with op rejection first.
        // Must resolve with op value.
        // Must handle both promises (no unhandled rejections)
        return (await Promise.all([
            target[targetFuncName](...args),
            isWrite && tx.done, 
        ]))[0];
    };
    cachedMethods.set(prop, method);
    return method;
}
(0, _wrapIdbValueJs.r)((oldTraps)=>({
        ...oldTraps,
        get: (target, prop, receiver)=>getMethod(target, prop) || oldTraps.get(target, prop, receiver),
        has: (target, prop)=>!!getMethod(target, prop) || oldTraps.has(target, prop)
    }));

},{"./wrap-idb-value.js":"lS54k","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lS54k":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "a", ()=>reverseTransformCache);
parcelHelpers.export(exports, "i", ()=>instanceOfAny);
parcelHelpers.export(exports, "r", ()=>replaceTraps);
parcelHelpers.export(exports, "u", ()=>unwrap);
parcelHelpers.export(exports, "w", ()=>wrap);
const instanceOfAny = (object, constructors)=>constructors.some((c)=>object instanceof c);
let idbProxyableTypes;
let cursorAdvanceMethods;
// This is a function to prevent it throwing up in node environments.
function getIdbProxyableTypes() {
    return idbProxyableTypes || (idbProxyableTypes = [
        IDBDatabase,
        IDBObjectStore,
        IDBIndex,
        IDBCursor,
        IDBTransaction, 
    ]);
}
// This is a function to prevent it throwing up in node environments.
function getCursorAdvanceMethods() {
    return cursorAdvanceMethods || (cursorAdvanceMethods = [
        IDBCursor.prototype.advance,
        IDBCursor.prototype.continue,
        IDBCursor.prototype.continuePrimaryKey, 
    ]);
}
const cursorRequestMap = new WeakMap();
const transactionDoneMap = new WeakMap();
const transactionStoreNamesMap = new WeakMap();
const transformCache = new WeakMap();
const reverseTransformCache = new WeakMap();
function promisifyRequest(request) {
    const promise = new Promise((resolve, reject)=>{
        const unlisten = ()=>{
            request.removeEventListener("success", success);
            request.removeEventListener("error", error);
        };
        const success = ()=>{
            resolve(wrap(request.result));
            unlisten();
        };
        const error = ()=>{
            reject(request.error);
            unlisten();
        };
        request.addEventListener("success", success);
        request.addEventListener("error", error);
    });
    promise.then((value)=>{
        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
        // (see wrapFunction).
        if (value instanceof IDBCursor) cursorRequestMap.set(value, request);
    // Catching to avoid "Uncaught Promise exceptions"
    }).catch(()=>{});
    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
    // is because we create many promises from a single IDBRequest.
    reverseTransformCache.set(promise, request);
    return promise;
}
function cacheDonePromiseForTransaction(tx) {
    // Early bail if we've already created a done promise for this transaction.
    if (transactionDoneMap.has(tx)) return;
    const done = new Promise((resolve, reject)=>{
        const unlisten = ()=>{
            tx.removeEventListener("complete", complete);
            tx.removeEventListener("error", error);
            tx.removeEventListener("abort", error);
        };
        const complete = ()=>{
            resolve();
            unlisten();
        };
        const error = ()=>{
            reject(tx.error || new DOMException("AbortError", "AbortError"));
            unlisten();
        };
        tx.addEventListener("complete", complete);
        tx.addEventListener("error", error);
        tx.addEventListener("abort", error);
    });
    // Cache it for later retrieval.
    transactionDoneMap.set(tx, done);
}
let idbProxyTraps = {
    get (target, prop, receiver) {
        if (target instanceof IDBTransaction) {
            // Special handling for transaction.done.
            if (prop === "done") return transactionDoneMap.get(target);
            // Polyfill for objectStoreNames because of Edge.
            if (prop === "objectStoreNames") return target.objectStoreNames || transactionStoreNamesMap.get(target);
            // Make tx.store return the only store in the transaction, or undefined if there are many.
            if (prop === "store") return receiver.objectStoreNames[1] ? undefined : receiver.objectStore(receiver.objectStoreNames[0]);
        }
        // Else transform whatever we get back.
        return wrap(target[prop]);
    },
    set (target, prop, value) {
        target[prop] = value;
        return true;
    },
    has (target, prop) {
        if (target instanceof IDBTransaction && (prop === "done" || prop === "store")) return true;
        return prop in target;
    }
};
function replaceTraps(callback) {
    idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
    // Due to expected object equality (which is enforced by the caching in `wrap`), we
    // only create one new func per func.
    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
    if (func === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype)) return function(storeNames, ...args) {
        const tx = func.call(unwrap(this), storeNames, ...args);
        transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [
            storeNames
        ]);
        return wrap(tx);
    };
    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
    // with real promises, so each advance methods returns a new promise for the cursor object, or
    // undefined if the end of the cursor has been reached.
    if (getCursorAdvanceMethods().includes(func)) return function(...args) {
        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
        // the original object.
        func.apply(unwrap(this), args);
        return wrap(cursorRequestMap.get(this));
    };
    return function(...args) {
        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
        // the original object.
        return wrap(func.apply(unwrap(this), args));
    };
}
function transformCachableValue(value) {
    if (typeof value === "function") return wrapFunction(value);
    // This doesn't return, it just creates a 'done' promise for the transaction,
    // which is later returned for transaction.done (see idbObjectHandler).
    if (value instanceof IDBTransaction) cacheDonePromiseForTransaction(value);
    if (instanceOfAny(value, getIdbProxyableTypes())) return new Proxy(value, idbProxyTraps);
    // Return the same value back if we're not going to transform it.
    return value;
}
function wrap(value) {
    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
    if (value instanceof IDBRequest) return promisifyRequest(value);
    // If we've already transformed this value before, reuse the transformed value.
    // This is faster, but it also provides object equality.
    if (transformCache.has(value)) return transformCache.get(value);
    const newValue = transformCachableValue(value);
    // Not all types are transformed.
    // These may be primitive types, so they can't be WeakMap keys.
    if (newValue !== value) {
        transformCache.set(value, newValue);
        reverseTransformCache.set(newValue, value);
    }
    return newValue;
}
const unwrap = (value)=>reverseTransformCache.get(value);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hghl7":[function(require,module,exports) {
var _authCompat = require("@firebase/auth-compat");

},{"@firebase/auth-compat":"8L0Dz"}],"8L0Dz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _appCompat = require("@firebase/app-compat");
var _appCompatDefault = parcelHelpers.interopDefault(_appCompat);
var _internal = require("@firebase/auth/internal");
var _component = require("@firebase/component");
var _util = require("@firebase/util");
var global = arguments[3];
var name = "@firebase/auth-compat";
var version = "0.2.17";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;
function _getCurrentScheme() {
    var _a;
    return ((_a = self === null || self === void 0 ? void 0 : self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
}
/**
 * @return {boolean} Whether the current environment is http or https.
 */ function _isHttpOrHttps() {
    return _getCurrentScheme() === "http:" || _getCurrentScheme() === "https:";
}
/**
 * @param {?string=} ua The user agent.
 * @return {boolean} Whether the app is rendered in a mobile iOS or Android
 *     Cordova environment.
 */ function _isAndroidOrIosCordovaScheme(ua = (0, _util.getUA)()) {
    return !!((_getCurrentScheme() === "file:" || _getCurrentScheme() === "ionic:" || _getCurrentScheme() === "capacitor:") && ua.toLowerCase().match(/iphone|ipad|ipod|android/));
}
/**
 * @return {boolean} Whether the environment is a native environment, where
 *     CORS checks do not apply.
 */ function _isNativeEnvironment() {
    return (0, _util.isReactNative)() || (0, _util.isNode)();
}
/**
 * Checks whether the user agent is IE11.
 * @return {boolean} True if it is IE11.
 */ function _isIe11() {
    return (0, _util.isIE)() && (document === null || document === void 0 ? void 0 : document.documentMode) === 11;
}
/**
 * Checks whether the user agent is Edge.
 * @param {string} userAgent The browser user agent string.
 * @return {boolean} True if it is Edge.
 */ function _isEdge(ua = (0, _util.getUA)()) {
    return /Edge\/\d+/.test(ua);
}
/**
 * @param {?string=} opt_userAgent The navigator user agent.
 * @return {boolean} Whether local storage is not synchronized between an iframe
 *     and a popup of the same domain.
 */ function _isLocalStorageNotSynchronized(ua = (0, _util.getUA)()) {
    return _isIe11() || _isEdge(ua);
}
/** @return {boolean} Whether web storage is supported. */ function _isWebStorageSupported() {
    try {
        const storage = self.localStorage;
        const key = _internal._generateEventId();
        if (storage) {
            // setItem will throw an exception if we cannot access WebStorage (e.g.,
            // Safari in private mode).
            storage["setItem"](key, "1");
            storage["removeItem"](key);
            // For browsers where iframe web storage does not synchronize with a popup
            // of the same domain, indexedDB is used for persistent storage. These
            // browsers include IE11 and Edge.
            // Make sure it is supported (IE11 and Edge private mode does not support
            // that).
            if (_isLocalStorageNotSynchronized()) // In such browsers, if indexedDB is not supported, an iframe cannot be
            // notified of the popup sign in result.
            return (0, _util.isIndexedDBAvailable)();
            return true;
        }
    } catch (e) {
        // localStorage is not available from a worker. Test availability of
        // indexedDB.
        return _isWorker() && (0, _util.isIndexedDBAvailable)();
    }
    return false;
}
/**
 * @param {?Object=} global The optional global scope.
 * @return {boolean} Whether current environment is a worker.
 */ function _isWorker() {
    // WorkerGlobalScope only defined in worker environment.
    return typeof global !== "undefined" && "WorkerGlobalScope" in global && "importScripts" in global;
}
function _isPopupRedirectSupported() {
    return (_isHttpOrHttps() || (0, _util.isBrowserExtension)() || _isAndroidOrIosCordovaScheme()) && // React Native with remote debugging reports its location.protocol as
    // http.
    !_isNativeEnvironment() && // Local storage has to be supported for browser popup and redirect
    // operations to work.
    _isWebStorageSupported() && // DOM, popups and redirects are not supported within a worker.
    !_isWorker();
}
/** Quick check that indicates the platform *may* be Cordova */ function _isLikelyCordova() {
    return _isAndroidOrIosCordovaScheme() && typeof document !== "undefined";
}
async function _isCordova() {
    if (!_isLikelyCordova()) return false;
    return new Promise((resolve)=>{
        const timeoutId = setTimeout(()=>{
            // We've waited long enough; the telltale Cordova event didn't happen
            resolve(false);
        }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);
        document.addEventListener("deviceready", ()=>{
            clearTimeout(timeoutId);
            resolve(true);
        });
    });
}
function _getSelfWindow() {
    return typeof window !== "undefined" ? window : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const Persistence = {
    LOCAL: "local",
    NONE: "none",
    SESSION: "session"
};
const _assert$3 = _internal._assert;
const PERSISTENCE_KEY = "persistence";
/**
 * Validates that an argument is a valid persistence value. If an invalid type
 * is specified, an error is thrown synchronously.
 */ function _validatePersistenceArgument(auth, persistence) {
    _assert$3(Object.values(Persistence).includes(persistence), auth, "invalid-persistence-type" /* INVALID_PERSISTENCE */ );
    // Validate if the specified type is supported in the current environment.
    if ((0, _util.isReactNative)()) {
        // This is only supported in a browser.
        _assert$3(persistence !== Persistence.SESSION, auth, "unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */ );
        return;
    }
    if ((0, _util.isNode)()) {
        // Only none is supported in Node.js.
        _assert$3(persistence === Persistence.NONE, auth, "unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */ );
        return;
    }
    if (_isWorker()) {
        // In a worker environment, either LOCAL or NONE are supported.
        // If indexedDB not supported and LOCAL provided, throw an error
        _assert$3(persistence === Persistence.NONE || persistence === Persistence.LOCAL && (0, _util.isIndexedDBAvailable)(), auth, "unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */ );
        return;
    }
    // This is restricted by what the browser supports.
    _assert$3(persistence === Persistence.NONE || _isWebStorageSupported(), auth, "unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */ );
}
async function _savePersistenceForRedirect(auth) {
    await auth._initializationPromise;
    const session = getSessionStorageIfAvailable();
    const key = _internal._persistenceKeyName(PERSISTENCE_KEY, auth.config.apiKey, auth.name);
    if (session) session.setItem(key, auth._getPersistence());
}
function _getPersistencesFromRedirect(apiKey, appName) {
    const session = getSessionStorageIfAvailable();
    if (!session) return [];
    const key = _internal._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);
    const persistence = session.getItem(key);
    switch(persistence){
        case Persistence.NONE:
            return [
                _internal.inMemoryPersistence
            ];
        case Persistence.LOCAL:
            return [
                _internal.indexedDBLocalPersistence,
                _internal.browserSessionPersistence
            ];
        case Persistence.SESSION:
            return [
                _internal.browserSessionPersistence
            ];
        default:
            return [];
    }
}
/** Returns session storage, or null if the property access errors */ function getSessionStorageIfAvailable() {
    var _a;
    try {
        return ((_a = _getSelfWindow()) === null || _a === void 0 ? void 0 : _a.sessionStorage) || null;
    } catch (e) {
        return null;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const _assert$2 = _internal._assert;
/** Platform-agnostic popup-redirect resolver */ class CompatPopupRedirectResolver {
    constructor(){
        // Create both resolvers for dynamic resolution later
        this.browserResolver = _internal._getInstance(_internal.browserPopupRedirectResolver);
        this.cordovaResolver = _internal._getInstance(_internal.cordovaPopupRedirectResolver);
        // The actual resolver in use: either browserResolver or cordovaResolver.
        this.underlyingResolver = null;
        this._redirectPersistence = _internal.browserSessionPersistence;
        this._completeRedirectFn = _internal._getRedirectResult;
        this._overrideRedirectResult = _internal._overrideRedirectResult;
    }
    async _initialize(auth) {
        await this.selectUnderlyingResolver();
        return this.assertedUnderlyingResolver._initialize(auth);
    }
    async _openPopup(auth, provider, authType, eventId) {
        await this.selectUnderlyingResolver();
        return this.assertedUnderlyingResolver._openPopup(auth, provider, authType, eventId);
    }
    async _openRedirect(auth, provider, authType, eventId) {
        await this.selectUnderlyingResolver();
        return this.assertedUnderlyingResolver._openRedirect(auth, provider, authType, eventId);
    }
    _isIframeWebStorageSupported(auth, cb) {
        this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);
    }
    _originValidation(auth) {
        return this.assertedUnderlyingResolver._originValidation(auth);
    }
    get _shouldInitProactively() {
        return _isLikelyCordova() || this.browserResolver._shouldInitProactively;
    }
    get assertedUnderlyingResolver() {
        _assert$2(this.underlyingResolver, "internal-error" /* INTERNAL_ERROR */ );
        return this.underlyingResolver;
    }
    async selectUnderlyingResolver() {
        if (this.underlyingResolver) return;
        // We haven't yet determined whether or not we're in Cordova; go ahead
        // and determine that state now.
        const isCordova = await _isCordova();
        this.underlyingResolver = isCordova ? this.cordovaResolver : this.browserResolver;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function unwrap(object) {
    return object.unwrap();
}
function wrapped(object) {
    return object.wrapped();
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function credentialFromResponse(userCredential) {
    return credentialFromObject(userCredential);
}
function attachExtraErrorFields(auth, e) {
    var _a, _b;
    // The response contains all fields from the server which may or may not
    // actually match the underlying type
    const response = (_a = e.customData) === null || _a === void 0 ? void 0 : _a._tokenResponse;
    if (((_b = e) === null || _b === void 0 ? void 0 : _b.code) === "auth/multi-factor-auth-required") {
        const mfaErr = e;
        mfaErr.resolver = new MultiFactorResolver(auth, _internal.getMultiFactorResolver(auth, e));
    } else if (response) {
        const credential = credentialFromObject(e);
        const credErr = e;
        if (credential) {
            credErr.credential = credential;
            credErr.tenantId = response.tenantId || undefined;
            credErr.email = response.email || undefined;
            credErr.phoneNumber = response.phoneNumber || undefined;
        }
    }
}
function credentialFromObject(object) {
    const { _tokenResponse  } = object instanceof (0, _util.FirebaseError) ? object.customData : object;
    if (!_tokenResponse) return null;
    // Handle phone Auth credential responses, as they have a different format
    // from other backend responses (i.e. no providerId). This is also only the
    // case for user credentials (does not work for errors).
    if (!(object instanceof (0, _util.FirebaseError))) {
        if ("temporaryProof" in _tokenResponse && "phoneNumber" in _tokenResponse) return _internal.PhoneAuthProvider.credentialFromResult(object);
    }
    const providerId = _tokenResponse.providerId;
    // Email and password is not supported as there is no situation where the
    // server would return the password to the client.
    if (!providerId || providerId === _internal.ProviderId.PASSWORD) return null;
    let provider;
    switch(providerId){
        case _internal.ProviderId.GOOGLE:
            provider = _internal.GoogleAuthProvider;
            break;
        case _internal.ProviderId.FACEBOOK:
            provider = _internal.FacebookAuthProvider;
            break;
        case _internal.ProviderId.GITHUB:
            provider = _internal.GithubAuthProvider;
            break;
        case _internal.ProviderId.TWITTER:
            provider = _internal.TwitterAuthProvider;
            break;
        default:
            const { oauthIdToken , oauthAccessToken , oauthTokenSecret , pendingToken , nonce  } = _tokenResponse;
            if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) return null;
            // TODO(avolkovi): uncomment this and get it working with SAML & OIDC
            if (pendingToken) {
                if (providerId.startsWith("saml.")) return _internal.SAMLAuthCredential._create(providerId, pendingToken);
                else // OIDC and non-default providers excluding Twitter.
                return _internal.OAuthCredential._fromParams({
                    providerId,
                    signInMethod: providerId,
                    pendingToken,
                    idToken: oauthIdToken,
                    accessToken: oauthAccessToken
                });
            }
            return new _internal.OAuthProvider(providerId).credential({
                idToken: oauthIdToken,
                accessToken: oauthAccessToken,
                rawNonce: nonce
            });
    }
    return object instanceof (0, _util.FirebaseError) ? provider.credentialFromError(object) : provider.credentialFromResult(object);
}
function convertCredential(auth, credentialPromise) {
    return credentialPromise.catch((e)=>{
        if (e instanceof (0, _util.FirebaseError)) attachExtraErrorFields(auth, e);
        throw e;
    }).then((credential)=>{
        const operationType = credential.operationType;
        const user = credential.user;
        return {
            operationType,
            credential: credentialFromResponse(credential),
            additionalUserInfo: _internal.getAdditionalUserInfo(credential),
            user: User.getOrCreate(user)
        };
    });
}
async function convertConfirmationResult(auth, confirmationResultPromise) {
    const confirmationResultExp = await confirmationResultPromise;
    return {
        verificationId: confirmationResultExp.verificationId,
        confirm: (verificationCode)=>convertCredential(auth, confirmationResultExp.confirm(verificationCode))
    };
}
class MultiFactorResolver {
    constructor(auth, resolver){
        this.resolver = resolver;
        this.auth = wrapped(auth);
    }
    get session() {
        return this.resolver.session;
    }
    get hints() {
        return this.resolver.hints;
    }
    resolveSignIn(assertion) {
        return convertCredential(unwrap(this.auth), this.resolver.resolveSignIn(assertion));
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class User {
    constructor(_delegate){
        this._delegate = _delegate;
        this.multiFactor = _internal.multiFactor(_delegate);
    }
    static getOrCreate(user) {
        if (!User.USER_MAP.has(user)) User.USER_MAP.set(user, new User(user));
        return User.USER_MAP.get(user);
    }
    delete() {
        return this._delegate.delete();
    }
    reload() {
        return this._delegate.reload();
    }
    toJSON() {
        return this._delegate.toJSON();
    }
    getIdTokenResult(forceRefresh) {
        return this._delegate.getIdTokenResult(forceRefresh);
    }
    getIdToken(forceRefresh) {
        return this._delegate.getIdToken(forceRefresh);
    }
    linkAndRetrieveDataWithCredential(credential) {
        return this.linkWithCredential(credential);
    }
    async linkWithCredential(credential) {
        return convertCredential(this.auth, _internal.linkWithCredential(this._delegate, credential));
    }
    async linkWithPhoneNumber(phoneNumber, applicationVerifier) {
        return convertConfirmationResult(this.auth, _internal.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));
    }
    async linkWithPopup(provider) {
        return convertCredential(this.auth, _internal.linkWithPopup(this._delegate, provider, CompatPopupRedirectResolver));
    }
    async linkWithRedirect(provider) {
        await _savePersistenceForRedirect(_internal._castAuth(this.auth));
        return _internal.linkWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);
    }
    reauthenticateAndRetrieveDataWithCredential(credential) {
        return this.reauthenticateWithCredential(credential);
    }
    async reauthenticateWithCredential(credential) {
        return convertCredential(this.auth, _internal.reauthenticateWithCredential(this._delegate, credential));
    }
    reauthenticateWithPhoneNumber(phoneNumber, applicationVerifier) {
        return convertConfirmationResult(this.auth, _internal.reauthenticateWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));
    }
    reauthenticateWithPopup(provider) {
        return convertCredential(this.auth, _internal.reauthenticateWithPopup(this._delegate, provider, CompatPopupRedirectResolver));
    }
    async reauthenticateWithRedirect(provider) {
        await _savePersistenceForRedirect(_internal._castAuth(this.auth));
        return _internal.reauthenticateWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);
    }
    sendEmailVerification(actionCodeSettings) {
        return _internal.sendEmailVerification(this._delegate, actionCodeSettings);
    }
    async unlink(providerId) {
        await _internal.unlink(this._delegate, providerId);
        return this;
    }
    updateEmail(newEmail) {
        return _internal.updateEmail(this._delegate, newEmail);
    }
    updatePassword(newPassword) {
        return _internal.updatePassword(this._delegate, newPassword);
    }
    updatePhoneNumber(phoneCredential) {
        return _internal.updatePhoneNumber(this._delegate, phoneCredential);
    }
    updateProfile(profile) {
        return _internal.updateProfile(this._delegate, profile);
    }
    verifyBeforeUpdateEmail(newEmail, actionCodeSettings) {
        return _internal.verifyBeforeUpdateEmail(this._delegate, newEmail, actionCodeSettings);
    }
    get emailVerified() {
        return this._delegate.emailVerified;
    }
    get isAnonymous() {
        return this._delegate.isAnonymous;
    }
    get metadata() {
        return this._delegate.metadata;
    }
    get phoneNumber() {
        return this._delegate.phoneNumber;
    }
    get providerData() {
        return this._delegate.providerData;
    }
    get refreshToken() {
        return this._delegate.refreshToken;
    }
    get tenantId() {
        return this._delegate.tenantId;
    }
    get displayName() {
        return this._delegate.displayName;
    }
    get email() {
        return this._delegate.email;
    }
    get photoURL() {
        return this._delegate.photoURL;
    }
    get providerId() {
        return this._delegate.providerId;
    }
    get uid() {
        return this._delegate.uid;
    }
    get auth() {
        return this._delegate.auth;
    }
}
// Maintain a map so that there's always a 1:1 mapping between new User and
// legacy compat users
User.USER_MAP = new WeakMap();
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const _assert$1 = _internal._assert;
class Auth {
    constructor(app, provider){
        this.app = app;
        if (provider.isInitialized()) {
            this._delegate = provider.getImmediate();
            this.linkUnderlyingAuth();
            return;
        }
        const { apiKey  } = app.options;
        // TODO: platform needs to be determined using heuristics
        _assert$1(apiKey, "invalid-api-key" /* INVALID_API_KEY */ , {
            appName: app.name
        });
        // TODO: platform needs to be determined using heuristics
        _assert$1(apiKey, "invalid-api-key" /* INVALID_API_KEY */ , {
            appName: app.name
        });
        // Only use a popup/redirect resolver in browser environments
        const resolver = typeof window !== "undefined" ? CompatPopupRedirectResolver : undefined;
        this._delegate = provider.initialize({
            options: {
                persistence: buildPersistenceHierarchy(apiKey, app.name),
                popupRedirectResolver: resolver
            }
        });
        this._delegate._updateErrorMap(_internal.debugErrorMap);
        this.linkUnderlyingAuth();
    }
    get emulatorConfig() {
        return this._delegate.emulatorConfig;
    }
    get currentUser() {
        if (!this._delegate.currentUser) return null;
        return User.getOrCreate(this._delegate.currentUser);
    }
    get languageCode() {
        return this._delegate.languageCode;
    }
    set languageCode(languageCode) {
        this._delegate.languageCode = languageCode;
    }
    get settings() {
        return this._delegate.settings;
    }
    get tenantId() {
        return this._delegate.tenantId;
    }
    set tenantId(tid) {
        this._delegate.tenantId = tid;
    }
    useDeviceLanguage() {
        this._delegate.useDeviceLanguage();
    }
    signOut() {
        return this._delegate.signOut();
    }
    useEmulator(url, options) {
        _internal.connectAuthEmulator(this._delegate, url, options);
    }
    applyActionCode(code) {
        return _internal.applyActionCode(this._delegate, code);
    }
    checkActionCode(code) {
        return _internal.checkActionCode(this._delegate, code);
    }
    confirmPasswordReset(code, newPassword) {
        return _internal.confirmPasswordReset(this._delegate, code, newPassword);
    }
    async createUserWithEmailAndPassword(email, password) {
        return convertCredential(this._delegate, _internal.createUserWithEmailAndPassword(this._delegate, email, password));
    }
    fetchProvidersForEmail(email) {
        return this.fetchSignInMethodsForEmail(email);
    }
    fetchSignInMethodsForEmail(email) {
        return _internal.fetchSignInMethodsForEmail(this._delegate, email);
    }
    isSignInWithEmailLink(emailLink) {
        return _internal.isSignInWithEmailLink(this._delegate, emailLink);
    }
    async getRedirectResult() {
        _assert$1(_isPopupRedirectSupported(), this._delegate, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */ );
        const credential = await _internal.getRedirectResult(this._delegate, CompatPopupRedirectResolver);
        if (!credential) return {
            credential: null,
            user: null
        };
        return convertCredential(this._delegate, Promise.resolve(credential));
    }
    // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.
    // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it
    // out of autogenerated documentation pages to reduce accidental misuse.
    addFrameworkForLogging(framework) {
        _internal.addFrameworkForLogging(this._delegate, framework);
    }
    onAuthStateChanged(nextOrObserver, errorFn, completed) {
        const { next , error , complete  } = wrapObservers(nextOrObserver, errorFn, completed);
        return this._delegate.onAuthStateChanged(next, error, complete);
    }
    onIdTokenChanged(nextOrObserver, errorFn, completed) {
        const { next , error , complete  } = wrapObservers(nextOrObserver, errorFn, completed);
        return this._delegate.onIdTokenChanged(next, error, complete);
    }
    sendSignInLinkToEmail(email, actionCodeSettings) {
        return _internal.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);
    }
    sendPasswordResetEmail(email, actionCodeSettings) {
        return _internal.sendPasswordResetEmail(this._delegate, email, actionCodeSettings || undefined);
    }
    async setPersistence(persistence) {
        _validatePersistenceArgument(this._delegate, persistence);
        let converted;
        switch(persistence){
            case Persistence.SESSION:
                converted = _internal.browserSessionPersistence;
                break;
            case Persistence.LOCAL:
                // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.
                const isIndexedDBFullySupported = await _internal._getInstance(_internal.indexedDBLocalPersistence)._isAvailable();
                converted = isIndexedDBFullySupported ? _internal.indexedDBLocalPersistence : _internal.browserLocalPersistence;
                break;
            case Persistence.NONE:
                converted = _internal.inMemoryPersistence;
                break;
            default:
                return _internal._fail("argument-error" /* ARGUMENT_ERROR */ , {
                    appName: this._delegate.name
                });
        }
        return this._delegate.setPersistence(converted);
    }
    signInAndRetrieveDataWithCredential(credential) {
        return this.signInWithCredential(credential);
    }
    signInAnonymously() {
        return convertCredential(this._delegate, _internal.signInAnonymously(this._delegate));
    }
    signInWithCredential(credential) {
        return convertCredential(this._delegate, _internal.signInWithCredential(this._delegate, credential));
    }
    signInWithCustomToken(token) {
        return convertCredential(this._delegate, _internal.signInWithCustomToken(this._delegate, token));
    }
    signInWithEmailAndPassword(email, password) {
        return convertCredential(this._delegate, _internal.signInWithEmailAndPassword(this._delegate, email, password));
    }
    signInWithEmailLink(email, emailLink) {
        return convertCredential(this._delegate, _internal.signInWithEmailLink(this._delegate, email, emailLink));
    }
    signInWithPhoneNumber(phoneNumber, applicationVerifier) {
        return convertConfirmationResult(this._delegate, _internal.signInWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));
    }
    async signInWithPopup(provider) {
        _assert$1(_isPopupRedirectSupported(), this._delegate, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */ );
        return convertCredential(this._delegate, _internal.signInWithPopup(this._delegate, provider, CompatPopupRedirectResolver));
    }
    async signInWithRedirect(provider) {
        _assert$1(_isPopupRedirectSupported(), this._delegate, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */ );
        await _savePersistenceForRedirect(this._delegate);
        return _internal.signInWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);
    }
    updateCurrentUser(user) {
        // remove ts-ignore once overloads are defined for exp functions to accept compat objects
        // @ts-ignore
        return this._delegate.updateCurrentUser(user);
    }
    verifyPasswordResetCode(code) {
        return _internal.verifyPasswordResetCode(this._delegate, code);
    }
    unwrap() {
        return this._delegate;
    }
    _delete() {
        return this._delegate._delete();
    }
    linkUnderlyingAuth() {
        this._delegate.wrapped = ()=>this;
    }
}
Auth.Persistence = Persistence;
function wrapObservers(nextOrObserver, error, complete) {
    let next = nextOrObserver;
    if (typeof nextOrObserver !== "function") ({ next , error , complete  } = nextOrObserver);
    // We know 'next' is now a function
    const oldNext = next;
    const newNext = (user)=>oldNext(user && User.getOrCreate(user));
    return {
        next: newNext,
        error: error,
        complete
    };
}
function buildPersistenceHierarchy(apiKey, appName) {
    // Note this is slightly different behavior: in this case, the stored
    // persistence is checked *first* rather than last. This is because we want
    // to prefer stored persistence type in the hierarchy. This is an empty
    // array if window is not available or there is no pending redirect
    const persistences = _getPersistencesFromRedirect(apiKey, appName);
    // If "self" is available, add indexedDB
    if (typeof self !== "undefined" && !persistences.includes(_internal.indexedDBLocalPersistence)) persistences.push(_internal.indexedDBLocalPersistence);
    // If "window" is available, add HTML Storage persistences
    if (typeof window !== "undefined") {
        for (const persistence of [
            _internal.browserLocalPersistence,
            _internal.browserSessionPersistence
        ])if (!persistences.includes(persistence)) persistences.push(persistence);
    }
    // Add in-memory as a final fallback
    if (!persistences.includes(_internal.inMemoryPersistence)) persistences.push(_internal.inMemoryPersistence);
    return persistences;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class PhoneAuthProvider {
    constructor(){
        this.providerId = "phone";
        // TODO: remove ts-ignore when moving types from auth-types to auth-compat
        // @ts-ignore
        this._delegate = new _internal.PhoneAuthProvider(unwrap((0, _appCompatDefault.default).auth()));
    }
    static credential(verificationId, verificationCode) {
        return _internal.PhoneAuthProvider.credential(verificationId, verificationCode);
    }
    verifyPhoneNumber(phoneInfoOptions, applicationVerifier) {
        return this._delegate.verifyPhoneNumber(// The implementation matches but the types are subtly incompatible
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        phoneInfoOptions, applicationVerifier);
    }
    unwrap() {
        return this._delegate;
    }
}
PhoneAuthProvider.PHONE_SIGN_IN_METHOD = _internal.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;
PhoneAuthProvider.PROVIDER_ID = _internal.PhoneAuthProvider.PROVIDER_ID;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const _assert = _internal._assert;
class RecaptchaVerifier {
    constructor(container, parameters, app = (0, _appCompatDefault.default).app()){
        var _a;
        // API key is required for web client RPC calls.
        _assert((_a = app.options) === null || _a === void 0 ? void 0 : _a.apiKey, "invalid-api-key" /* INVALID_API_KEY */ , {
            appName: app.name
        });
        this._delegate = new _internal.RecaptchaVerifier(container, // eslint-disable-next-line @typescript-eslint/no-explicit-any
        parameters, // TODO: remove ts-ignore when moving types from auth-types to auth-compat
        // @ts-ignore
        app.auth());
        this.type = this._delegate.type;
    }
    clear() {
        this._delegate.clear();
    }
    render() {
        return this._delegate.render();
    }
    verify() {
        return this._delegate.verify();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const AUTH_TYPE = "auth-compat";
// Create auth components to register with firebase.
// Provides Auth public APIs.
function registerAuthCompat(instance) {
    instance.INTERNAL.registerComponent(new (0, _component.Component)(AUTH_TYPE, (container)=>{
        // getImmediate for FirebaseApp will always succeed
        const app = container.getProvider("app-compat").getImmediate();
        const authProvider = container.getProvider("auth");
        return new Auth(app, authProvider);
    }, "PUBLIC" /* PUBLIC */ ).setServiceProps({
        ActionCodeInfo: {
            Operation: {
                EMAIL_SIGNIN: _internal.ActionCodeOperation.EMAIL_SIGNIN,
                PASSWORD_RESET: _internal.ActionCodeOperation.PASSWORD_RESET,
                RECOVER_EMAIL: _internal.ActionCodeOperation.RECOVER_EMAIL,
                REVERT_SECOND_FACTOR_ADDITION: _internal.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,
                VERIFY_AND_CHANGE_EMAIL: _internal.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,
                VERIFY_EMAIL: _internal.ActionCodeOperation.VERIFY_EMAIL
            }
        },
        EmailAuthProvider: _internal.EmailAuthProvider,
        FacebookAuthProvider: _internal.FacebookAuthProvider,
        GithubAuthProvider: _internal.GithubAuthProvider,
        GoogleAuthProvider: _internal.GoogleAuthProvider,
        OAuthProvider: _internal.OAuthProvider,
        SAMLAuthProvider: _internal.SAMLAuthProvider,
        PhoneAuthProvider: PhoneAuthProvider,
        PhoneMultiFactorGenerator: _internal.PhoneMultiFactorGenerator,
        RecaptchaVerifier: RecaptchaVerifier,
        TwitterAuthProvider: _internal.TwitterAuthProvider,
        Auth,
        AuthCredential: _internal.AuthCredential,
        Error: (0, _util.FirebaseError)
    }).setInstantiationMode("LAZY" /* LAZY */ ).setMultipleInstances(false));
    instance.registerVersion(name, version);
}
registerAuthCompat((0, _appCompatDefault.default));

},{"@firebase/app-compat":"ibzr5","@firebase/auth/internal":"7KTjU","@firebase/component":"bi1VB","@firebase/util":"ePiK6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7KTjU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ActionCodeOperation", ()=>(0, _index58473F72Js.A));
parcelHelpers.export(exports, "ActionCodeURL", ()=>(0, _index58473F72Js.ad));
parcelHelpers.export(exports, "AuthCredential", ()=>(0, _index58473F72Js.H));
parcelHelpers.export(exports, "AuthErrorCodes", ()=>(0, _index58473F72Js.D));
parcelHelpers.export(exports, "AuthImpl", ()=>(0, _index58473F72Js.aG));
parcelHelpers.export(exports, "AuthPopup", ()=>(0, _index58473F72Js.aJ));
parcelHelpers.export(exports, "EmailAuthCredential", ()=>(0, _index58473F72Js.I));
parcelHelpers.export(exports, "EmailAuthProvider", ()=>(0, _index58473F72Js.M));
parcelHelpers.export(exports, "FacebookAuthProvider", ()=>(0, _index58473F72Js.N));
parcelHelpers.export(exports, "FactorId", ()=>(0, _index58473F72Js.F));
parcelHelpers.export(exports, "FetchProvider", ()=>(0, _index58473F72Js.aK));
parcelHelpers.export(exports, "GithubAuthProvider", ()=>(0, _index58473F72Js.T));
parcelHelpers.export(exports, "GoogleAuthProvider", ()=>(0, _index58473F72Js.Q));
parcelHelpers.export(exports, "OAuthCredential", ()=>(0, _index58473F72Js.J));
parcelHelpers.export(exports, "OAuthProvider", ()=>(0, _index58473F72Js.U));
parcelHelpers.export(exports, "OperationType", ()=>(0, _index58473F72Js.O));
parcelHelpers.export(exports, "PhoneAuthCredential", ()=>(0, _index58473F72Js.K));
parcelHelpers.export(exports, "PhoneAuthProvider", ()=>(0, _index58473F72Js.P));
parcelHelpers.export(exports, "PhoneMultiFactorGenerator", ()=>(0, _index58473F72Js.m));
parcelHelpers.export(exports, "ProviderId", ()=>(0, _index58473F72Js.o));
parcelHelpers.export(exports, "RecaptchaVerifier", ()=>(0, _index58473F72Js.R));
parcelHelpers.export(exports, "SAMLAuthCredential", ()=>(0, _index58473F72Js.aL));
parcelHelpers.export(exports, "SAMLAuthProvider", ()=>(0, _index58473F72Js.V));
parcelHelpers.export(exports, "SignInMethod", ()=>(0, _index58473F72Js.S));
parcelHelpers.export(exports, "TwitterAuthProvider", ()=>(0, _index58473F72Js.W));
parcelHelpers.export(exports, "UserImpl", ()=>(0, _index58473F72Js.aF));
parcelHelpers.export(exports, "_assert", ()=>(0, _index58473F72Js.ax));
parcelHelpers.export(exports, "_castAuth", ()=>(0, _index58473F72Js.aE));
parcelHelpers.export(exports, "_fail", ()=>(0, _index58473F72Js.at));
parcelHelpers.export(exports, "_generateEventId", ()=>(0, _index58473F72Js.aI));
parcelHelpers.export(exports, "_getClientVersion", ()=>(0, _index58473F72Js.aH));
parcelHelpers.export(exports, "_getInstance", ()=>(0, _index58473F72Js.ay));
parcelHelpers.export(exports, "_getRedirectResult", ()=>(0, _index58473F72Js.aB));
parcelHelpers.export(exports, "_overrideRedirectResult", ()=>(0, _index58473F72Js.aC));
parcelHelpers.export(exports, "_persistenceKeyName", ()=>(0, _index58473F72Js.az));
parcelHelpers.export(exports, "applyActionCode", ()=>(0, _index58473F72Js.a2));
parcelHelpers.export(exports, "beforeAuthStateChanged", ()=>(0, _index58473F72Js.t));
parcelHelpers.export(exports, "browserLocalPersistence", ()=>(0, _index58473F72Js.b));
parcelHelpers.export(exports, "browserPopupRedirectResolver", ()=>(0, _index58473F72Js.k));
parcelHelpers.export(exports, "browserSessionPersistence", ()=>(0, _index58473F72Js.a));
parcelHelpers.export(exports, "checkActionCode", ()=>(0, _index58473F72Js.a3));
parcelHelpers.export(exports, "confirmPasswordReset", ()=>(0, _index58473F72Js.a1));
parcelHelpers.export(exports, "connectAuthEmulator", ()=>(0, _index58473F72Js.G));
parcelHelpers.export(exports, "createUserWithEmailAndPassword", ()=>(0, _index58473F72Js.a5));
parcelHelpers.export(exports, "debugErrorMap", ()=>(0, _index58473F72Js.B));
parcelHelpers.export(exports, "deleteUser", ()=>(0, _index58473F72Js.z));
parcelHelpers.export(exports, "fetchSignInMethodsForEmail", ()=>(0, _index58473F72Js.aa));
parcelHelpers.export(exports, "getAdditionalUserInfo", ()=>(0, _index58473F72Js.al));
parcelHelpers.export(exports, "getAuth", ()=>(0, _index58473F72Js.n));
parcelHelpers.export(exports, "getIdToken", ()=>(0, _index58473F72Js.ai));
parcelHelpers.export(exports, "getIdTokenResult", ()=>(0, _index58473F72Js.aj));
parcelHelpers.export(exports, "getMultiFactorResolver", ()=>(0, _index58473F72Js.an));
parcelHelpers.export(exports, "getRedirectResult", ()=>(0, _index58473F72Js.j));
parcelHelpers.export(exports, "inMemoryPersistence", ()=>(0, _index58473F72Js.L));
parcelHelpers.export(exports, "indexedDBLocalPersistence", ()=>(0, _index58473F72Js.i));
parcelHelpers.export(exports, "initializeAuth", ()=>(0, _index58473F72Js.E));
parcelHelpers.export(exports, "isSignInWithEmailLink", ()=>(0, _index58473F72Js.a8));
parcelHelpers.export(exports, "linkWithCredential", ()=>(0, _index58473F72Js.Z));
parcelHelpers.export(exports, "linkWithPhoneNumber", ()=>(0, _index58473F72Js.l));
parcelHelpers.export(exports, "linkWithPopup", ()=>(0, _index58473F72Js.d));
parcelHelpers.export(exports, "linkWithRedirect", ()=>(0, _index58473F72Js.g));
parcelHelpers.export(exports, "multiFactor", ()=>(0, _index58473F72Js.ao));
parcelHelpers.export(exports, "onAuthStateChanged", ()=>(0, _index58473F72Js.v));
parcelHelpers.export(exports, "onIdTokenChanged", ()=>(0, _index58473F72Js.q));
parcelHelpers.export(exports, "parseActionCodeURL", ()=>(0, _index58473F72Js.ae));
parcelHelpers.export(exports, "prodErrorMap", ()=>(0, _index58473F72Js.C));
parcelHelpers.export(exports, "reauthenticateWithCredential", ()=>(0, _index58473F72Js._));
parcelHelpers.export(exports, "reauthenticateWithPhoneNumber", ()=>(0, _index58473F72Js.r));
parcelHelpers.export(exports, "reauthenticateWithPopup", ()=>(0, _index58473F72Js.e));
parcelHelpers.export(exports, "reauthenticateWithRedirect", ()=>(0, _index58473F72Js.h));
parcelHelpers.export(exports, "reload", ()=>(0, _index58473F72Js.am));
parcelHelpers.export(exports, "sendEmailVerification", ()=>(0, _index58473F72Js.ab));
parcelHelpers.export(exports, "sendPasswordResetEmail", ()=>(0, _index58473F72Js.a0));
parcelHelpers.export(exports, "sendSignInLinkToEmail", ()=>(0, _index58473F72Js.a7));
parcelHelpers.export(exports, "setPersistence", ()=>(0, _index58473F72Js.p));
parcelHelpers.export(exports, "signInAnonymously", ()=>(0, _index58473F72Js.X));
parcelHelpers.export(exports, "signInWithCredential", ()=>(0, _index58473F72Js.Y));
parcelHelpers.export(exports, "signInWithCustomToken", ()=>(0, _index58473F72Js.$));
parcelHelpers.export(exports, "signInWithEmailAndPassword", ()=>(0, _index58473F72Js.a6));
parcelHelpers.export(exports, "signInWithEmailLink", ()=>(0, _index58473F72Js.a9));
parcelHelpers.export(exports, "signInWithPhoneNumber", ()=>(0, _index58473F72Js.s));
parcelHelpers.export(exports, "signInWithPopup", ()=>(0, _index58473F72Js.c));
parcelHelpers.export(exports, "signInWithRedirect", ()=>(0, _index58473F72Js.f));
parcelHelpers.export(exports, "signOut", ()=>(0, _index58473F72Js.y));
parcelHelpers.export(exports, "unlink", ()=>(0, _index58473F72Js.ak));
parcelHelpers.export(exports, "updateCurrentUser", ()=>(0, _index58473F72Js.x));
parcelHelpers.export(exports, "updateEmail", ()=>(0, _index58473F72Js.ag));
parcelHelpers.export(exports, "updatePassword", ()=>(0, _index58473F72Js.ah));
parcelHelpers.export(exports, "updatePhoneNumber", ()=>(0, _index58473F72Js.u));
parcelHelpers.export(exports, "updateProfile", ()=>(0, _index58473F72Js.af));
parcelHelpers.export(exports, "useDeviceLanguage", ()=>(0, _index58473F72Js.w));
parcelHelpers.export(exports, "verifyBeforeUpdateEmail", ()=>(0, _index58473F72Js.ac));
parcelHelpers.export(exports, "verifyPasswordResetCode", ()=>(0, _index58473F72Js.a4));
parcelHelpers.export(exports, "addFrameworkForLogging", ()=>addFrameworkForLogging);
parcelHelpers.export(exports, "cordovaPopupRedirectResolver", ()=>cordovaPopupRedirectResolver);
var _index58473F72Js = require("./index-58473f72.js");
var _util = require("@firebase/util");
var _app = require("@firebase/app");
var _tslib = require("tslib");
var _logger = require("@firebase/logger");
var _component = require("@firebase/component");
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _cordovaWindow() {
    return window;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * How long to wait after the app comes back into focus before concluding that
 * the user closed the sign in tab.
 */ const REDIRECT_TIMEOUT_MS = 2000;
/**
 * Generates the URL for the OAuth handler.
 */ async function _generateHandlerUrl(auth, event, provider) {
    var _a;
    // Get the cordova plugins
    const { BuildInfo  } = _cordovaWindow();
    (0, _index58473F72Js.aq)(event.sessionId, "AuthEvent did not contain a session ID");
    const sessionDigest = await computeSha256(event.sessionId);
    const additionalParams = {};
    if ((0, _index58473F72Js.ar)()) // iOS app identifier
    additionalParams["ibi"] = BuildInfo.packageName;
    else if ((0, _index58473F72Js.as)()) // Android app identifier
    additionalParams["apn"] = BuildInfo.packageName;
    else (0, _index58473F72Js.at)(auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */ );
    // Add the display name if available
    if (BuildInfo.displayName) additionalParams["appDisplayName"] = BuildInfo.displayName;
    // Attached the hashed session ID
    additionalParams["sessionId"] = sessionDigest;
    return (0, _index58473F72Js.au)(auth, provider, event.type, undefined, (_a = event.eventId) !== null && _a !== void 0 ? _a : undefined, additionalParams);
}
/**
 * Validates that this app is valid for this project configuration
 */ async function _validateOrigin(auth) {
    const { BuildInfo  } = _cordovaWindow();
    const request = {};
    if ((0, _index58473F72Js.ar)()) request.iosBundleId = BuildInfo.packageName;
    else if ((0, _index58473F72Js.as)()) request.androidPackageName = BuildInfo.packageName;
    else (0, _index58473F72Js.at)(auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */ );
    // Will fail automatically if package name is not authorized
    await (0, _index58473F72Js.av)(auth, request);
}
function _performRedirect(handlerUrl) {
    // Get the cordova plugins
    const { cordova  } = _cordovaWindow();
    return new Promise((resolve)=>{
        cordova.plugins.browsertab.isAvailable((browserTabIsAvailable)=>{
            let iabRef = null;
            if (browserTabIsAvailable) cordova.plugins.browsertab.openUrl(handlerUrl);
            else // TODO: Return the inappbrowser ref that's returned from the open call
            iabRef = cordova.InAppBrowser.open(handlerUrl, (0, _index58473F72Js.ap)() ? "_blank" : "_system", "location=yes");
            resolve(iabRef);
        });
    });
}
/**
 * This function waits for app activity to be seen before resolving. It does
 * this by attaching listeners to various dom events. Once the app is determined
 * to be visible, this promise resolves. AFTER that resolution, the listeners
 * are detached and any browser tabs left open will be closed.
 */ async function _waitForAppResume(auth, eventListener, iabRef) {
    // Get the cordova plugins
    const { cordova  } = _cordovaWindow();
    let cleanup = ()=>{};
    try {
        await new Promise((resolve, reject)=>{
            let onCloseTimer = null;
            // DEFINE ALL THE CALLBACKS =====
            function authEventSeen() {
                var _a;
                // Auth event was detected. Resolve this promise and close the extra
                // window if it's still open.
                resolve();
                const closeBrowserTab = (_a = cordova.plugins.browsertab) === null || _a === void 0 ? void 0 : _a.close;
                if (typeof closeBrowserTab === "function") closeBrowserTab();
                // Close inappbrowser emebedded webview in iOS7 and 8 case if still
                // open.
                if (typeof (iabRef === null || iabRef === void 0 ? void 0 : iabRef.close) === "function") iabRef.close();
            }
            function resumed() {
                if (onCloseTimer) // This code already ran; do not rerun.
                return;
                onCloseTimer = window.setTimeout(()=>{
                    // Wait two seeconds after resume then reject.
                    reject((0, _index58473F72Js.aw)(auth, "redirect-cancelled-by-user" /* REDIRECT_CANCELLED_BY_USER */ ));
                }, REDIRECT_TIMEOUT_MS);
            }
            function visibilityChanged() {
                if ((document === null || document === void 0 ? void 0 : document.visibilityState) === "visible") resumed();
            }
            // ATTACH ALL THE LISTENERS =====
            // Listen for the auth event
            eventListener.addPassiveListener(authEventSeen);
            // Listen for resume and visibility events
            document.addEventListener("resume", resumed, false);
            if ((0, _index58473F72Js.as)()) document.addEventListener("visibilitychange", visibilityChanged, false);
            // SETUP THE CLEANUP FUNCTION =====
            cleanup = ()=>{
                eventListener.removePassiveListener(authEventSeen);
                document.removeEventListener("resume", resumed, false);
                document.removeEventListener("visibilitychange", visibilityChanged, false);
                if (onCloseTimer) window.clearTimeout(onCloseTimer);
            };
        });
    } finally{
        cleanup();
    }
}
/**
 * Checks the configuration of the Cordova environment. This has no side effect
 * if the configuration is correct; otherwise it throws an error with the
 * missing plugin.
 */ function _checkCordovaConfiguration(auth) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const win = _cordovaWindow();
    // Check all dependencies installed.
    // https://github.com/nordnet/cordova-universal-links-plugin
    // Note that cordova-universal-links-plugin has been abandoned.
    // A fork with latest fixes is available at:
    // https://www.npmjs.com/package/cordova-universal-links-plugin-fix
    (0, _index58473F72Js.ax)(typeof ((_a = win === null || win === void 0 ? void 0 : win.universalLinks) === null || _a === void 0 ? void 0 : _a.subscribe) === "function", auth, "invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */ , {
        missingPlugin: "cordova-universal-links-plugin-fix"
    });
    // https://www.npmjs.com/package/cordova-plugin-buildinfo
    (0, _index58473F72Js.ax)(typeof ((_b = win === null || win === void 0 ? void 0 : win.BuildInfo) === null || _b === void 0 ? void 0 : _b.packageName) !== "undefined", auth, "invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */ , {
        missingPlugin: "cordova-plugin-buildInfo"
    });
    // https://github.com/google/cordova-plugin-browsertab
    (0, _index58473F72Js.ax)(typeof ((_e = (_d = (_c = win === null || win === void 0 ? void 0 : win.cordova) === null || _c === void 0 ? void 0 : _c.plugins) === null || _d === void 0 ? void 0 : _d.browsertab) === null || _e === void 0 ? void 0 : _e.openUrl) === "function", auth, "invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */ , {
        missingPlugin: "cordova-plugin-browsertab"
    });
    (0, _index58473F72Js.ax)(typeof ((_h = (_g = (_f = win === null || win === void 0 ? void 0 : win.cordova) === null || _f === void 0 ? void 0 : _f.plugins) === null || _g === void 0 ? void 0 : _g.browsertab) === null || _h === void 0 ? void 0 : _h.isAvailable) === "function", auth, "invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */ , {
        missingPlugin: "cordova-plugin-browsertab"
    });
    // https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-inappbrowser/
    (0, _index58473F72Js.ax)(typeof ((_k = (_j = win === null || win === void 0 ? void 0 : win.cordova) === null || _j === void 0 ? void 0 : _j.InAppBrowser) === null || _k === void 0 ? void 0 : _k.open) === "function", auth, "invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */ , {
        missingPlugin: "cordova-plugin-inappbrowser"
    });
}
/**
 * Computes the SHA-256 of a session ID. The SubtleCrypto interface is only
 * available in "secure" contexts, which covers Cordova (which is served on a file
 * protocol).
 */ async function computeSha256(sessionId) {
    const bytes = stringToArrayBuffer(sessionId);
    // TODO: For IE11 crypto has a different name and this operation comes back
    //       as an object, not a promise. This is the old proposed standard that
    //       is used by IE11:
    // https://www.w3.org/TR/2013/WD-WebCryptoAPI-20130108/#cryptooperation-interface
    const buf = await crypto.subtle.digest("SHA-256", bytes);
    const arr = Array.from(new Uint8Array(buf));
    return arr.map((num)=>num.toString(16).padStart(2, "0")).join("");
}
function stringToArrayBuffer(str) {
    // This function is only meant to deal with an ASCII charset and makes
    // certain simplifying assumptions.
    (0, _index58473F72Js.aq)(/[0-9a-zA-Z]+/.test(str), "Can only convert alpha-numeric strings");
    if (typeof TextEncoder !== "undefined") return new TextEncoder().encode(str);
    const buff = new ArrayBuffer(str.length);
    const view = new Uint8Array(buff);
    for(let i = 0; i < str.length; i++)view[i] = str.charCodeAt(i);
    return view;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const SESSION_ID_LENGTH = 20;
/** Custom AuthEventManager that adds passive listeners to events */ class CordovaAuthEventManager extends (0, _index58473F72Js.aA) {
    constructor(){
        super(...arguments);
        this.passiveListeners = new Set();
        this.initPromise = new Promise((resolve)=>{
            this.resolveInialized = resolve;
        });
    }
    addPassiveListener(cb) {
        this.passiveListeners.add(cb);
    }
    removePassiveListener(cb) {
        this.passiveListeners.delete(cb);
    }
    // In a Cordova environment, this manager can live through multiple redirect
    // operations
    resetRedirect() {
        this.queuedRedirectEvent = null;
        this.hasHandledPotentialRedirect = false;
    }
    /** Override the onEvent method */ onEvent(event) {
        this.resolveInialized();
        this.passiveListeners.forEach((cb)=>cb(event));
        return super.onEvent(event);
    }
    async initialized() {
        await this.initPromise;
    }
}
/**
 * Generates a (partial) {@link AuthEvent}.
 */ function _generateNewEvent(auth, type, eventId = null) {
    return {
        type,
        eventId,
        urlResponse: null,
        sessionId: generateSessionId(),
        postBody: null,
        tenantId: auth.tenantId,
        error: (0, _index58473F72Js.aw)(auth, "no-auth-event" /* NO_AUTH_EVENT */ )
    };
}
function _savePartialEvent(auth, event) {
    return storage()._set(persistenceKey(auth), event);
}
async function _getAndRemoveEvent(auth) {
    const event = await storage()._get(persistenceKey(auth));
    if (event) await storage()._remove(persistenceKey(auth));
    return event;
}
function _eventFromPartialAndUrl(partialEvent, url) {
    var _a, _b;
    // Parse the deep link within the dynamic link URL.
    const callbackUrl = _getDeepLinkFromCallback(url);
    // Confirm it is actually a callback URL.
    // Currently the universal link will be of this format:
    // https://<AUTH_DOMAIN>/__/auth/callback<OAUTH_RESPONSE>
    // This is a fake URL but is not intended to take the user anywhere
    // and just redirect to the app.
    if (callbackUrl.includes("/__/auth/callback")) {
        // Check if there is an error in the URL.
        // This mechanism is also used to pass errors back to the app:
        // https://<AUTH_DOMAIN>/__/auth/callback?firebaseError=<STRINGIFIED_ERROR>
        const params = searchParamsOrEmpty(callbackUrl);
        // Get the error object corresponding to the stringified error if found.
        const errorObject = params["firebaseError"] ? parseJsonOrNull(decodeURIComponent(params["firebaseError"])) : null;
        const code = (_b = (_a = errorObject === null || errorObject === void 0 ? void 0 : errorObject["code"]) === null || _a === void 0 ? void 0 : _a.split("auth/")) === null || _b === void 0 ? void 0 : _b[1];
        const error = code ? (0, _index58473F72Js.aw)(code) : null;
        if (error) return {
            type: partialEvent.type,
            eventId: partialEvent.eventId,
            tenantId: partialEvent.tenantId,
            error,
            urlResponse: null,
            sessionId: null,
            postBody: null
        };
        else return {
            type: partialEvent.type,
            eventId: partialEvent.eventId,
            tenantId: partialEvent.tenantId,
            sessionId: partialEvent.sessionId,
            urlResponse: callbackUrl,
            postBody: null
        };
    }
    return null;
}
function generateSessionId() {
    const chars = [];
    const allowedChars = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for(let i = 0; i < SESSION_ID_LENGTH; i++){
        const idx = Math.floor(Math.random() * allowedChars.length);
        chars.push(allowedChars.charAt(idx));
    }
    return chars.join("");
}
function storage() {
    return (0, _index58473F72Js.ay)((0, _index58473F72Js.b));
}
function persistenceKey(auth) {
    return (0, _index58473F72Js.az)("authEvent" /* AUTH_EVENT */ , auth.config.apiKey, auth.name);
}
function parseJsonOrNull(json) {
    try {
        return JSON.parse(json);
    } catch (e) {
        return null;
    }
}
// Exported for testing
function _getDeepLinkFromCallback(url) {
    const params = searchParamsOrEmpty(url);
    const link = params["link"] ? decodeURIComponent(params["link"]) : undefined;
    // Double link case (automatic redirect)
    const doubleDeepLink = searchParamsOrEmpty(link)["link"];
    // iOS custom scheme links.
    const iOSDeepLink = params["deep_link_id"] ? decodeURIComponent(params["deep_link_id"]) : undefined;
    const iOSDoubleDeepLink = searchParamsOrEmpty(iOSDeepLink)["link"];
    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
}
/**
 * Optimistically tries to get search params from a string, or else returns an
 * empty search params object.
 */ function searchParamsOrEmpty(url) {
    if (!(url === null || url === void 0 ? void 0 : url.includes("?"))) return {};
    const [_, ...rest] = url.split("?");
    return (0, _util.querystringDecode)(rest.join("?"));
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * How long to wait for the initial auth event before concluding no
 * redirect pending
 */ const INITIAL_EVENT_TIMEOUT_MS = 500;
class CordovaPopupRedirectResolver {
    constructor(){
        this._redirectPersistence = (0, _index58473F72Js.a);
        this._shouldInitProactively = true; // This is lightweight for Cordova
        this.eventManagers = new Map();
        this.originValidationPromises = {};
        this._completeRedirectFn = (0, _index58473F72Js.aB);
        this._overrideRedirectResult = (0, _index58473F72Js.aC);
    }
    async _initialize(auth) {
        const key = auth._key();
        let manager = this.eventManagers.get(key);
        if (!manager) {
            manager = new CordovaAuthEventManager(auth);
            this.eventManagers.set(key, manager);
            this.attachCallbackListeners(auth, manager);
        }
        return manager;
    }
    _openPopup(auth) {
        (0, _index58473F72Js.at)(auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */ );
    }
    async _openRedirect(auth, provider, authType, eventId) {
        _checkCordovaConfiguration(auth);
        const manager = await this._initialize(auth);
        await manager.initialized();
        // Reset the persisted redirect states. This does not matter on Web where
        // the redirect always blows away application state entirely. On Cordova,
        // the app maintains control flow through the redirect.
        manager.resetRedirect();
        (0, _index58473F72Js.aD)();
        await this._originValidation(auth);
        const event = _generateNewEvent(auth, authType, eventId);
        await _savePartialEvent(auth, event);
        const url = await _generateHandlerUrl(auth, event, provider);
        const iabRef = await _performRedirect(url);
        return _waitForAppResume(auth, manager, iabRef);
    }
    _isIframeWebStorageSupported(_auth, _cb) {
        throw new Error("Method not implemented.");
    }
    _originValidation(auth) {
        const key = auth._key();
        if (!this.originValidationPromises[key]) this.originValidationPromises[key] = _validateOrigin(auth);
        return this.originValidationPromises[key];
    }
    attachCallbackListeners(auth, manager) {
        // Get the global plugins
        const { universalLinks , handleOpenURL , BuildInfo  } = _cordovaWindow();
        const noEventTimeout = setTimeout(async ()=>{
            // We didn't see that initial event. Clear any pending object and
            // dispatch no event
            await _getAndRemoveEvent(auth);
            manager.onEvent(generateNoEvent());
        }, INITIAL_EVENT_TIMEOUT_MS);
        const universalLinksCb = async (eventData)=>{
            // We have an event so we can clear the no event timeout
            clearTimeout(noEventTimeout);
            const partialEvent = await _getAndRemoveEvent(auth);
            let finalEvent = null;
            if (partialEvent && (eventData === null || eventData === void 0 ? void 0 : eventData["url"])) finalEvent = _eventFromPartialAndUrl(partialEvent, eventData["url"]);
            // If finalEvent is never filled, trigger with no event
            manager.onEvent(finalEvent || generateNoEvent());
        };
        // Universal links subscriber doesn't exist for iOS, so we need to check
        if (typeof universalLinks !== "undefined" && typeof universalLinks.subscribe === "function") universalLinks.subscribe(null, universalLinksCb);
        // iOS 7 or 8 custom URL schemes.
        // This is also the current default behavior for iOS 9+.
        // For this to work, cordova-plugin-customurlscheme needs to be installed.
        // https://github.com/EddyVerbruggen/Custom-URL-scheme
        // Do not overwrite the existing developer's URL handler.
        const existingHandleOpenURL = handleOpenURL;
        const packagePrefix = `${BuildInfo.packageName.toLowerCase()}://`;
        _cordovaWindow().handleOpenURL = async (url)=>{
            if (url.toLowerCase().startsWith(packagePrefix)) // We want this intentionally to float
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            universalLinksCb({
                url
            });
            // Call the developer's handler if it is present.
            if (typeof existingHandleOpenURL === "function") try {
                existingHandleOpenURL(url);
            } catch (e) {
                // This is a developer error. Don't stop the flow of the SDK.
                console.error(e);
            }
        };
    }
}
/**
 * An implementation of {@link PopupRedirectResolver} suitable for Cordova
 * based applications.
 *
 * @public
 */ const cordovaPopupRedirectResolver = CordovaPopupRedirectResolver;
function generateNoEvent() {
    return {
        type: "unknown" /* UNKNOWN */ ,
        eventId: null,
        sessionId: null,
        urlResponse: null,
        postBody: null,
        tenantId: null,
        error: (0, _index58473F72Js.aw)("no-auth-event" /* NO_AUTH_EVENT */ )
    };
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.
// It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it out
// of autogenerated documentation pages to reduce accidental misuse.
function addFrameworkForLogging(auth, framework) {
    (0, _index58473F72Js.aE)(auth)._logFramework(framework);
}

},{"./index-58473f72.js":"6dKgR","@firebase/util":"ePiK6","@firebase/app":"3AcPV","tslib":"lRdW5","@firebase/logger":"fZmft","@firebase/component":"bi1VB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6dKgR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$", ()=>signInWithCustomToken);
parcelHelpers.export(exports, "A", ()=>ActionCodeOperation);
parcelHelpers.export(exports, "B", ()=>debugErrorMap);
parcelHelpers.export(exports, "C", ()=>prodErrorMap);
parcelHelpers.export(exports, "D", ()=>AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY);
parcelHelpers.export(exports, "E", ()=>initializeAuth);
parcelHelpers.export(exports, "F", ()=>FactorId);
parcelHelpers.export(exports, "G", ()=>connectAuthEmulator);
parcelHelpers.export(exports, "H", ()=>AuthCredential);
parcelHelpers.export(exports, "I", ()=>EmailAuthCredential);
parcelHelpers.export(exports, "J", ()=>OAuthCredential);
parcelHelpers.export(exports, "K", ()=>PhoneAuthCredential);
parcelHelpers.export(exports, "L", ()=>inMemoryPersistence);
parcelHelpers.export(exports, "M", ()=>EmailAuthProvider);
parcelHelpers.export(exports, "N", ()=>FacebookAuthProvider);
parcelHelpers.export(exports, "O", ()=>OperationType);
parcelHelpers.export(exports, "P", ()=>PhoneAuthProvider);
parcelHelpers.export(exports, "Q", ()=>GoogleAuthProvider);
parcelHelpers.export(exports, "R", ()=>RecaptchaVerifier);
parcelHelpers.export(exports, "S", ()=>SignInMethod);
parcelHelpers.export(exports, "T", ()=>GithubAuthProvider);
parcelHelpers.export(exports, "U", ()=>OAuthProvider);
parcelHelpers.export(exports, "V", ()=>SAMLAuthProvider);
parcelHelpers.export(exports, "W", ()=>TwitterAuthProvider);
parcelHelpers.export(exports, "X", ()=>signInAnonymously);
parcelHelpers.export(exports, "Y", ()=>signInWithCredential);
parcelHelpers.export(exports, "Z", ()=>linkWithCredential);
parcelHelpers.export(exports, "_", ()=>reauthenticateWithCredential);
parcelHelpers.export(exports, "a", ()=>browserSessionPersistence);
parcelHelpers.export(exports, "a0", ()=>sendPasswordResetEmail);
parcelHelpers.export(exports, "a1", ()=>confirmPasswordReset);
parcelHelpers.export(exports, "a2", ()=>applyActionCode);
parcelHelpers.export(exports, "a3", ()=>checkActionCode);
parcelHelpers.export(exports, "a4", ()=>verifyPasswordResetCode);
parcelHelpers.export(exports, "a5", ()=>createUserWithEmailAndPassword);
parcelHelpers.export(exports, "a6", ()=>signInWithEmailAndPassword);
parcelHelpers.export(exports, "a7", ()=>sendSignInLinkToEmail);
parcelHelpers.export(exports, "a8", ()=>isSignInWithEmailLink);
parcelHelpers.export(exports, "a9", ()=>signInWithEmailLink);
parcelHelpers.export(exports, "aA", ()=>AuthEventManager);
parcelHelpers.export(exports, "aB", ()=>_getRedirectResult);
parcelHelpers.export(exports, "aC", ()=>_overrideRedirectResult);
parcelHelpers.export(exports, "aD", ()=>_clearRedirectOutcomes);
parcelHelpers.export(exports, "aE", ()=>_castAuth);
parcelHelpers.export(exports, "aF", ()=>UserImpl);
parcelHelpers.export(exports, "aG", ()=>AuthImpl);
parcelHelpers.export(exports, "aH", ()=>_getClientVersion);
parcelHelpers.export(exports, "aI", ()=>_generateEventId);
parcelHelpers.export(exports, "aJ", ()=>AuthPopup);
parcelHelpers.export(exports, "aK", ()=>FetchProvider);
parcelHelpers.export(exports, "aL", ()=>SAMLAuthCredential);
parcelHelpers.export(exports, "aa", ()=>fetchSignInMethodsForEmail);
parcelHelpers.export(exports, "ab", ()=>sendEmailVerification);
parcelHelpers.export(exports, "ac", ()=>verifyBeforeUpdateEmail);
parcelHelpers.export(exports, "ad", ()=>ActionCodeURL);
parcelHelpers.export(exports, "ae", ()=>parseActionCodeURL);
parcelHelpers.export(exports, "af", ()=>updateProfile);
parcelHelpers.export(exports, "ag", ()=>updateEmail);
parcelHelpers.export(exports, "ah", ()=>updatePassword);
parcelHelpers.export(exports, "ai", ()=>getIdToken);
parcelHelpers.export(exports, "aj", ()=>getIdTokenResult);
parcelHelpers.export(exports, "ak", ()=>unlink);
parcelHelpers.export(exports, "al", ()=>getAdditionalUserInfo);
parcelHelpers.export(exports, "am", ()=>reload);
parcelHelpers.export(exports, "an", ()=>getMultiFactorResolver);
parcelHelpers.export(exports, "ao", ()=>multiFactor);
parcelHelpers.export(exports, "ap", ()=>_isIOS7Or8);
parcelHelpers.export(exports, "aq", ()=>debugAssert);
parcelHelpers.export(exports, "ar", ()=>_isIOS);
parcelHelpers.export(exports, "as", ()=>_isAndroid);
parcelHelpers.export(exports, "at", ()=>_fail);
parcelHelpers.export(exports, "au", ()=>_getRedirectUrl);
parcelHelpers.export(exports, "av", ()=>_getProjectConfig);
parcelHelpers.export(exports, "aw", ()=>_createError);
parcelHelpers.export(exports, "ax", ()=>_assert);
parcelHelpers.export(exports, "ay", ()=>_getInstance);
parcelHelpers.export(exports, "az", ()=>_persistenceKeyName);
parcelHelpers.export(exports, "b", ()=>browserLocalPersistence);
parcelHelpers.export(exports, "c", ()=>signInWithPopup);
parcelHelpers.export(exports, "d", ()=>linkWithPopup);
parcelHelpers.export(exports, "e", ()=>reauthenticateWithPopup);
parcelHelpers.export(exports, "f", ()=>signInWithRedirect);
parcelHelpers.export(exports, "g", ()=>linkWithRedirect);
parcelHelpers.export(exports, "h", ()=>reauthenticateWithRedirect);
parcelHelpers.export(exports, "i", ()=>indexedDBLocalPersistence);
parcelHelpers.export(exports, "j", ()=>getRedirectResult);
parcelHelpers.export(exports, "k", ()=>browserPopupRedirectResolver);
parcelHelpers.export(exports, "l", ()=>linkWithPhoneNumber);
parcelHelpers.export(exports, "m", ()=>PhoneMultiFactorGenerator);
parcelHelpers.export(exports, "n", ()=>getAuth);
parcelHelpers.export(exports, "o", ()=>ProviderId);
parcelHelpers.export(exports, "p", ()=>setPersistence);
parcelHelpers.export(exports, "q", ()=>onIdTokenChanged);
parcelHelpers.export(exports, "r", ()=>reauthenticateWithPhoneNumber);
parcelHelpers.export(exports, "s", ()=>signInWithPhoneNumber);
parcelHelpers.export(exports, "t", ()=>beforeAuthStateChanged);
parcelHelpers.export(exports, "u", ()=>updatePhoneNumber);
parcelHelpers.export(exports, "v", ()=>onAuthStateChanged);
parcelHelpers.export(exports, "w", ()=>useDeviceLanguage);
parcelHelpers.export(exports, "x", ()=>updateCurrentUser);
parcelHelpers.export(exports, "y", ()=>signOut);
parcelHelpers.export(exports, "z", ()=>deleteUser);
var _util = require("@firebase/util");
var _app = require("@firebase/app");
var _tslib = require("tslib");
var _logger = require("@firebase/logger");
var _component = require("@firebase/component");
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An enum of factors that may be used for multifactor authentication.
 *
 * @public
 */ const FactorId = {
    /** Phone as second factor */ PHONE: "phone"
};
/**
 * Enumeration of supported providers.
 *
 * @public
 */ const ProviderId = {
    /** Facebook provider ID */ FACEBOOK: "facebook.com",
    /** GitHub provider ID */ GITHUB: "github.com",
    /** Google provider ID */ GOOGLE: "google.com",
    /** Password provider */ PASSWORD: "password",
    /** Phone provider */ PHONE: "phone",
    /** Twitter provider ID */ TWITTER: "twitter.com"
};
/**
 * Enumeration of supported sign-in methods.
 *
 * @public
 */ const SignInMethod = {
    /** Email link sign in method */ EMAIL_LINK: "emailLink",
    /** Email/password sign in method */ EMAIL_PASSWORD: "password",
    /** Facebook sign in method */ FACEBOOK: "facebook.com",
    /** GitHub sign in method */ GITHUB: "github.com",
    /** Google sign in method */ GOOGLE: "google.com",
    /** Phone sign in method */ PHONE: "phone",
    /** Twitter sign in method */ TWITTER: "twitter.com"
};
/**
 * Enumeration of supported operation types.
 *
 * @public
 */ const OperationType = {
    /** Operation involving linking an additional provider to an already signed-in user. */ LINK: "link",
    /** Operation involving using a provider to reauthenticate an already signed-in user. */ REAUTHENTICATE: "reauthenticate",
    /** Operation involving signing in a user. */ SIGN_IN: "signIn"
};
/**
 * An enumeration of the possible email action types.
 *
 * @public
 */ const ActionCodeOperation = {
    /** The email link sign-in action. */ EMAIL_SIGNIN: "EMAIL_SIGNIN",
    /** The password reset action. */ PASSWORD_RESET: "PASSWORD_RESET",
    /** The email revocation action. */ RECOVER_EMAIL: "RECOVER_EMAIL",
    /** The revert second factor addition email action. */ REVERT_SECOND_FACTOR_ADDITION: "REVERT_SECOND_FACTOR_ADDITION",
    /** The revert second factor addition email action. */ VERIFY_AND_CHANGE_EMAIL: "VERIFY_AND_CHANGE_EMAIL",
    /** The email verification action. */ VERIFY_EMAIL: "VERIFY_EMAIL"
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _debugErrorMap() {
    return {
        ["admin-restricted-operation" /* ADMIN_ONLY_OPERATION */ ]: "This operation is restricted to administrators only.",
        ["argument-error" /* ARGUMENT_ERROR */ ]: "",
        ["app-not-authorized" /* APP_NOT_AUTHORIZED */ ]: "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
        ["app-not-installed" /* APP_NOT_INSTALLED */ ]: "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
        ["captcha-check-failed" /* CAPTCHA_CHECK_FAILED */ ]: "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
        ["code-expired" /* CODE_EXPIRED */ ]: "The SMS code has expired. Please re-send the verification code to try again.",
        ["cordova-not-ready" /* CORDOVA_NOT_READY */ ]: "Cordova framework is not ready.",
        ["cors-unsupported" /* CORS_UNSUPPORTED */ ]: "This browser is not supported.",
        ["credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */ ]: "This credential is already associated with a different user account.",
        ["custom-token-mismatch" /* CREDENTIAL_MISMATCH */ ]: "The custom token corresponds to a different audience.",
        ["requires-recent-login" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ]: "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
        ["dependent-sdk-initialized-before-auth" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */ ]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK.",
        ["dynamic-link-not-activated" /* DYNAMIC_LINK_NOT_ACTIVATED */ ]: "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
        ["email-change-needs-verification" /* EMAIL_CHANGE_NEEDS_VERIFICATION */ ]: "Multi-factor users must always have a verified email.",
        ["email-already-in-use" /* EMAIL_EXISTS */ ]: "The email address is already in use by another account.",
        ["emulator-config-failed" /* EMULATOR_CONFIG_FAILED */ ]: 'Auth instance has already been used to make a network call. Auth can no longer be configured to use the emulator. Try calling "connectAuthEmulator()" sooner.',
        ["expired-action-code" /* EXPIRED_OOB_CODE */ ]: "The action code has expired.",
        ["cancelled-popup-request" /* EXPIRED_POPUP_REQUEST */ ]: "This operation has been cancelled due to another conflicting popup being opened.",
        ["internal-error" /* INTERNAL_ERROR */ ]: "An internal AuthError has occurred.",
        ["invalid-app-credential" /* INVALID_APP_CREDENTIAL */ ]: "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
        ["invalid-app-id" /* INVALID_APP_ID */ ]: "The mobile app identifier is not registed for the current project.",
        ["invalid-user-token" /* INVALID_AUTH */ ]: "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
        ["invalid-auth-event" /* INVALID_AUTH_EVENT */ ]: "An internal AuthError has occurred.",
        ["invalid-verification-code" /* INVALID_CODE */ ]: "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure to use the verification code provided by the user.",
        ["invalid-continue-uri" /* INVALID_CONTINUE_URI */ ]: "The continue URL provided in the request is invalid.",
        ["invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */ ]: "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
        ["invalid-custom-token" /* INVALID_CUSTOM_TOKEN */ ]: "The custom token format is incorrect. Please check the documentation.",
        ["invalid-dynamic-link-domain" /* INVALID_DYNAMIC_LINK_DOMAIN */ ]: "The provided dynamic link domain is not configured or authorized for the current project.",
        ["invalid-email" /* INVALID_EMAIL */ ]: "The email address is badly formatted.",
        ["invalid-emulator-scheme" /* INVALID_EMULATOR_SCHEME */ ]: "Emulator URL must start with a valid scheme (http:// or https://).",
        ["invalid-api-key" /* INVALID_API_KEY */ ]: "Your API key is invalid, please check you have copied it correctly.",
        ["invalid-cert-hash" /* INVALID_CERT_HASH */ ]: "The SHA-1 certificate hash provided is invalid.",
        ["invalid-credential" /* INVALID_IDP_RESPONSE */ ]: "The supplied auth credential is malformed or has expired.",
        ["invalid-message-payload" /* INVALID_MESSAGE_PAYLOAD */ ]: "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
        ["invalid-multi-factor-session" /* INVALID_MFA_SESSION */ ]: "The request does not contain a valid proof of first factor successful sign-in.",
        ["invalid-oauth-provider" /* INVALID_OAUTH_PROVIDER */ ]: "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
        ["invalid-oauth-client-id" /* INVALID_OAUTH_CLIENT_ID */ ]: "The OAuth client ID provided is either invalid or does not match the specified API key.",
        ["unauthorized-domain" /* INVALID_ORIGIN */ ]: "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
        ["invalid-action-code" /* INVALID_OOB_CODE */ ]: "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
        ["wrong-password" /* INVALID_PASSWORD */ ]: "The password is invalid or the user does not have a password.",
        ["invalid-persistence-type" /* INVALID_PERSISTENCE */ ]: "The specified persistence type is invalid. It can only be local, session or none.",
        ["invalid-phone-number" /* INVALID_PHONE_NUMBER */ ]: "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
        ["invalid-provider-id" /* INVALID_PROVIDER_ID */ ]: "The specified provider ID is invalid.",
        ["invalid-recipient-email" /* INVALID_RECIPIENT_EMAIL */ ]: "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
        ["invalid-sender" /* INVALID_SENDER */ ]: "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
        ["invalid-verification-id" /* INVALID_SESSION_INFO */ ]: "The verification ID used to create the phone auth credential is invalid.",
        ["invalid-tenant-id" /* INVALID_TENANT_ID */ ]: "The Auth instance's tenant ID is invalid.",
        ["login-blocked" /* LOGIN_BLOCKED */ ]: "Login blocked by user-provided method: {$originalMessage}",
        ["missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */ ]: "An Android Package Name must be provided if the Android App is required to be installed.",
        ["auth-domain-config-required" /* MISSING_AUTH_DOMAIN */ ]: "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
        ["missing-app-credential" /* MISSING_APP_CREDENTIAL */ ]: "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
        ["missing-verification-code" /* MISSING_CODE */ ]: "The phone auth credential was created with an empty SMS verification code.",
        ["missing-continue-uri" /* MISSING_CONTINUE_URI */ ]: "A continue URL must be provided in the request.",
        ["missing-iframe-start" /* MISSING_IFRAME_START */ ]: "An internal AuthError has occurred.",
        ["missing-ios-bundle-id" /* MISSING_IOS_BUNDLE_ID */ ]: "An iOS Bundle ID must be provided if an App Store ID is provided.",
        ["missing-or-invalid-nonce" /* MISSING_OR_INVALID_NONCE */ ]: "The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.",
        ["missing-multi-factor-info" /* MISSING_MFA_INFO */ ]: "No second factor identifier is provided.",
        ["missing-multi-factor-session" /* MISSING_MFA_SESSION */ ]: "The request is missing proof of first factor successful sign-in.",
        ["missing-phone-number" /* MISSING_PHONE_NUMBER */ ]: "To send verification codes, provide a phone number for the recipient.",
        ["missing-verification-id" /* MISSING_SESSION_INFO */ ]: "The phone auth credential was created with an empty verification ID.",
        ["app-deleted" /* MODULE_DESTROYED */ ]: "This instance of FirebaseApp has been deleted.",
        ["multi-factor-info-not-found" /* MFA_INFO_NOT_FOUND */ ]: "The user does not have a second factor matching the identifier provided.",
        ["multi-factor-auth-required" /* MFA_REQUIRED */ ]: "Proof of ownership of a second factor is required to complete sign-in.",
        ["account-exists-with-different-credential" /* NEED_CONFIRMATION */ ]: "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
        ["network-request-failed" /* NETWORK_REQUEST_FAILED */ ]: "A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.",
        ["no-auth-event" /* NO_AUTH_EVENT */ ]: "An internal AuthError has occurred.",
        ["no-such-provider" /* NO_SUCH_PROVIDER */ ]: "User was not linked to an account with the given provider.",
        ["null-user" /* NULL_USER */ ]: "A null user object was provided as the argument for an operation which requires a non-null user object.",
        ["operation-not-allowed" /* OPERATION_NOT_ALLOWED */ ]: "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
        ["operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */ ]: 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
        ["popup-blocked" /* POPUP_BLOCKED */ ]: "Unable to establish a connection with the popup. It may have been blocked by the browser.",
        ["popup-closed-by-user" /* POPUP_CLOSED_BY_USER */ ]: "The popup has been closed by the user before finalizing the operation.",
        ["provider-already-linked" /* PROVIDER_ALREADY_LINKED */ ]: "User can only be linked to one identity for the given provider.",
        ["quota-exceeded" /* QUOTA_EXCEEDED */ ]: "The project's quota for this operation has been exceeded.",
        ["redirect-cancelled-by-user" /* REDIRECT_CANCELLED_BY_USER */ ]: "The redirect operation has been cancelled by the user before finalizing.",
        ["redirect-operation-pending" /* REDIRECT_OPERATION_PENDING */ ]: "A redirect sign-in operation is already pending.",
        ["rejected-credential" /* REJECTED_CREDENTIAL */ ]: "The request contains malformed or mismatching credentials.",
        ["second-factor-already-in-use" /* SECOND_FACTOR_ALREADY_ENROLLED */ ]: "The second factor is already enrolled on this account.",
        ["maximum-second-factor-count-exceeded" /* SECOND_FACTOR_LIMIT_EXCEEDED */ ]: "The maximum allowed number of second factors on a user has been exceeded.",
        ["tenant-id-mismatch" /* TENANT_ID_MISMATCH */ ]: "The provided tenant ID does not match the Auth instance's tenant ID",
        ["timeout" /* TIMEOUT */ ]: "The operation has timed out.",
        ["user-token-expired" /* TOKEN_EXPIRED */ ]: "The user's credential is no longer valid. The user must sign in again.",
        ["too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */ ]: "We have blocked all requests from this device due to unusual activity. Try again later.",
        ["unauthorized-continue-uri" /* UNAUTHORIZED_DOMAIN */ ]: "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
        ["unsupported-first-factor" /* UNSUPPORTED_FIRST_FACTOR */ ]: "Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.",
        ["unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */ ]: "The current environment does not support the specified persistence type.",
        ["unsupported-tenant-operation" /* UNSUPPORTED_TENANT_OPERATION */ ]: "This operation is not supported in a multi-tenant context.",
        ["unverified-email" /* UNVERIFIED_EMAIL */ ]: "The operation requires a verified email.",
        ["user-cancelled" /* USER_CANCELLED */ ]: "The user did not grant your application the permissions it requested.",
        ["user-not-found" /* USER_DELETED */ ]: "There is no user record corresponding to this identifier. The user may have been deleted.",
        ["user-disabled" /* USER_DISABLED */ ]: "The user account has been disabled by an administrator.",
        ["user-mismatch" /* USER_MISMATCH */ ]: "The supplied credentials do not correspond to the previously signed in user.",
        ["user-signed-out" /* USER_SIGNED_OUT */ ]: "",
        ["weak-password" /* WEAK_PASSWORD */ ]: "The password must be 6 characters long or more.",
        ["web-storage-unsupported" /* WEB_STORAGE_UNSUPPORTED */ ]: "This browser is not supported or 3rd party cookies and data may be disabled.",
        ["already-initialized" /* ALREADY_INITIALIZED */ ]: "initializeAuth() has already been called with different options. To avoid this error, call initializeAuth() with the same options as when it was originally called, or call getAuth() to return the already initialized instance."
    };
}
function _prodErrorMap() {
    // We will include this one message in the prod error map since by the very
    // nature of this error, developers will never be able to see the message
    // using the debugErrorMap (which is installed during auth initialization).
    return {
        ["dependent-sdk-initialized-before-auth" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */ ]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."
    };
}
/**
 * A verbose error map with detailed descriptions for most error codes.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */ const debugErrorMap = _debugErrorMap;
/**
 * A minimal error map with all verbose error messages stripped.
 *
 * See discussion at {@link AuthErrorMap}
 *
 * @public
 */ const prodErrorMap = _prodErrorMap;
const _DEFAULT_AUTH_ERROR_FACTORY = new (0, _util.ErrorFactory)("auth", "Firebase", _prodErrorMap());
/**
 * A map of potential `Auth` error codes, for easier comparison with errors
 * thrown by the SDK.
 *
 * @remarks
 * Note that you can't tree-shake individual keys
 * in the map, so by using the map you might substantially increase your
 * bundle size.
 *
 * @public
 */ const AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {
    ADMIN_ONLY_OPERATION: "auth/admin-restricted-operation",
    ARGUMENT_ERROR: "auth/argument-error",
    APP_NOT_AUTHORIZED: "auth/app-not-authorized",
    APP_NOT_INSTALLED: "auth/app-not-installed",
    CAPTCHA_CHECK_FAILED: "auth/captcha-check-failed",
    CODE_EXPIRED: "auth/code-expired",
    CORDOVA_NOT_READY: "auth/cordova-not-ready",
    CORS_UNSUPPORTED: "auth/cors-unsupported",
    CREDENTIAL_ALREADY_IN_USE: "auth/credential-already-in-use",
    CREDENTIAL_MISMATCH: "auth/custom-token-mismatch",
    CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "auth/requires-recent-login",
    DEPENDENT_SDK_INIT_BEFORE_AUTH: "auth/dependent-sdk-initialized-before-auth",
    DYNAMIC_LINK_NOT_ACTIVATED: "auth/dynamic-link-not-activated",
    EMAIL_CHANGE_NEEDS_VERIFICATION: "auth/email-change-needs-verification",
    EMAIL_EXISTS: "auth/email-already-in-use",
    EMULATOR_CONFIG_FAILED: "auth/emulator-config-failed",
    EXPIRED_OOB_CODE: "auth/expired-action-code",
    EXPIRED_POPUP_REQUEST: "auth/cancelled-popup-request",
    INTERNAL_ERROR: "auth/internal-error",
    INVALID_API_KEY: "auth/invalid-api-key",
    INVALID_APP_CREDENTIAL: "auth/invalid-app-credential",
    INVALID_APP_ID: "auth/invalid-app-id",
    INVALID_AUTH: "auth/invalid-user-token",
    INVALID_AUTH_EVENT: "auth/invalid-auth-event",
    INVALID_CERT_HASH: "auth/invalid-cert-hash",
    INVALID_CODE: "auth/invalid-verification-code",
    INVALID_CONTINUE_URI: "auth/invalid-continue-uri",
    INVALID_CORDOVA_CONFIGURATION: "auth/invalid-cordova-configuration",
    INVALID_CUSTOM_TOKEN: "auth/invalid-custom-token",
    INVALID_DYNAMIC_LINK_DOMAIN: "auth/invalid-dynamic-link-domain",
    INVALID_EMAIL: "auth/invalid-email",
    INVALID_EMULATOR_SCHEME: "auth/invalid-emulator-scheme",
    INVALID_IDP_RESPONSE: "auth/invalid-credential",
    INVALID_MESSAGE_PAYLOAD: "auth/invalid-message-payload",
    INVALID_MFA_SESSION: "auth/invalid-multi-factor-session",
    INVALID_OAUTH_CLIENT_ID: "auth/invalid-oauth-client-id",
    INVALID_OAUTH_PROVIDER: "auth/invalid-oauth-provider",
    INVALID_OOB_CODE: "auth/invalid-action-code",
    INVALID_ORIGIN: "auth/unauthorized-domain",
    INVALID_PASSWORD: "auth/wrong-password",
    INVALID_PERSISTENCE: "auth/invalid-persistence-type",
    INVALID_PHONE_NUMBER: "auth/invalid-phone-number",
    INVALID_PROVIDER_ID: "auth/invalid-provider-id",
    INVALID_RECIPIENT_EMAIL: "auth/invalid-recipient-email",
    INVALID_SENDER: "auth/invalid-sender",
    INVALID_SESSION_INFO: "auth/invalid-verification-id",
    INVALID_TENANT_ID: "auth/invalid-tenant-id",
    MFA_INFO_NOT_FOUND: "auth/multi-factor-info-not-found",
    MFA_REQUIRED: "auth/multi-factor-auth-required",
    MISSING_ANDROID_PACKAGE_NAME: "auth/missing-android-pkg-name",
    MISSING_APP_CREDENTIAL: "auth/missing-app-credential",
    MISSING_AUTH_DOMAIN: "auth/auth-domain-config-required",
    MISSING_CODE: "auth/missing-verification-code",
    MISSING_CONTINUE_URI: "auth/missing-continue-uri",
    MISSING_IFRAME_START: "auth/missing-iframe-start",
    MISSING_IOS_BUNDLE_ID: "auth/missing-ios-bundle-id",
    MISSING_OR_INVALID_NONCE: "auth/missing-or-invalid-nonce",
    MISSING_MFA_INFO: "auth/missing-multi-factor-info",
    MISSING_MFA_SESSION: "auth/missing-multi-factor-session",
    MISSING_PHONE_NUMBER: "auth/missing-phone-number",
    MISSING_SESSION_INFO: "auth/missing-verification-id",
    MODULE_DESTROYED: "auth/app-deleted",
    NEED_CONFIRMATION: "auth/account-exists-with-different-credential",
    NETWORK_REQUEST_FAILED: "auth/network-request-failed",
    NULL_USER: "auth/null-user",
    NO_AUTH_EVENT: "auth/no-auth-event",
    NO_SUCH_PROVIDER: "auth/no-such-provider",
    OPERATION_NOT_ALLOWED: "auth/operation-not-allowed",
    OPERATION_NOT_SUPPORTED: "auth/operation-not-supported-in-this-environment",
    POPUP_BLOCKED: "auth/popup-blocked",
    POPUP_CLOSED_BY_USER: "auth/popup-closed-by-user",
    PROVIDER_ALREADY_LINKED: "auth/provider-already-linked",
    QUOTA_EXCEEDED: "auth/quota-exceeded",
    REDIRECT_CANCELLED_BY_USER: "auth/redirect-cancelled-by-user",
    REDIRECT_OPERATION_PENDING: "auth/redirect-operation-pending",
    REJECTED_CREDENTIAL: "auth/rejected-credential",
    SECOND_FACTOR_ALREADY_ENROLLED: "auth/second-factor-already-in-use",
    SECOND_FACTOR_LIMIT_EXCEEDED: "auth/maximum-second-factor-count-exceeded",
    TENANT_ID_MISMATCH: "auth/tenant-id-mismatch",
    TIMEOUT: "auth/timeout",
    TOKEN_EXPIRED: "auth/user-token-expired",
    TOO_MANY_ATTEMPTS_TRY_LATER: "auth/too-many-requests",
    UNAUTHORIZED_DOMAIN: "auth/unauthorized-continue-uri",
    UNSUPPORTED_FIRST_FACTOR: "auth/unsupported-first-factor",
    UNSUPPORTED_PERSISTENCE: "auth/unsupported-persistence-type",
    UNSUPPORTED_TENANT_OPERATION: "auth/unsupported-tenant-operation",
    UNVERIFIED_EMAIL: "auth/unverified-email",
    USER_CANCELLED: "auth/user-cancelled",
    USER_DELETED: "auth/user-not-found",
    USER_DISABLED: "auth/user-disabled",
    USER_MISMATCH: "auth/user-mismatch",
    USER_SIGNED_OUT: "auth/user-signed-out",
    WEAK_PASSWORD: "auth/weak-password",
    WEB_STORAGE_UNSUPPORTED: "auth/web-storage-unsupported",
    ALREADY_INITIALIZED: "auth/already-initialized"
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const logClient = new (0, _logger.Logger)("@firebase/auth");
function _logError(msg, ...args) {
    if (logClient.logLevel <= (0, _logger.LogLevel).ERROR) logClient.error(`Auth (${(0, _app.SDK_VERSION)}): ${msg}`, ...args);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _fail(authOrCode, ...rest) {
    throw createErrorInternal(authOrCode, ...rest);
}
function _createError(authOrCode, ...rest) {
    return createErrorInternal(authOrCode, ...rest);
}
function _errorWithCustomMessage(auth, code, message) {
    const errorMap = Object.assign(Object.assign({}, prodErrorMap()), {
        [code]: message
    });
    const factory = new (0, _util.ErrorFactory)("auth", "Firebase", errorMap);
    return factory.create(code, {
        appName: auth.name
    });
}
function _assertInstanceOf(auth, object, instance) {
    const constructorInstance = instance;
    if (!(object instanceof constructorInstance)) {
        if (constructorInstance.name !== object.constructor.name) _fail(auth, "argument-error" /* ARGUMENT_ERROR */ );
        throw _errorWithCustomMessage(auth, "argument-error" /* ARGUMENT_ERROR */ , `Type of ${object.constructor.name} does not match expected instance.` + `Did you pass a reference from a different Auth SDK?`);
    }
}
function createErrorInternal(authOrCode, ...rest) {
    if (typeof authOrCode !== "string") {
        const code = rest[0];
        const fullParams = [
            ...rest.slice(1)
        ];
        if (fullParams[0]) fullParams[0].appName = authOrCode.name;
        return authOrCode._errorFactory.create(code, ...fullParams);
    }
    return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
}
function _assert(assertion, authOrCode, ...rest) {
    if (!assertion) throw createErrorInternal(authOrCode, ...rest);
}
/**
 * Unconditionally fails, throwing an internal error with the given message.
 *
 * @param failure type of failure encountered
 * @throws Error
 */ function debugFail(failure) {
    // Log the failure in addition to throw an exception, just in case the
    // exception is swallowed.
    const message = `INTERNAL ASSERTION FAILED: ` + failure;
    _logError(message);
    // NOTE: We don't use FirebaseError here because these are internal failures
    // that cannot be handled by the user. (Also it would create a circular
    // dependency between the error and assert modules which doesn't work.)
    throw new Error(message);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * @param assertion
 * @param message
 */ function debugAssert(assertion, message) {
    if (!assertion) debugFail(message);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const instanceCache = new Map();
function _getInstance(cls) {
    debugAssert(cls instanceof Function, "Expected a class definition");
    let instance = instanceCache.get(cls);
    if (instance) {
        debugAssert(instance instanceof cls, "Instance stored in cache mismatched with class");
        return instance;
    }
    instance = new cls();
    instanceCache.set(cls, instance);
    return instance;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Initializes an {@link Auth} instance with fine-grained control over
 * {@link Dependencies}.
 *
 * @remarks
 *
 * This function allows more control over the {@link Auth} instance than
 * {@link getAuth}. `getAuth` uses platform-specific defaults to supply
 * the {@link Dependencies}. In general, `getAuth` is the easiest way to
 * initialize Auth and works for most use cases. Use `initializeAuth` if you
 * need control over which persistence layer is used, or to minimize bundle
 * size if you're not using either `signInWithPopup` or `signInWithRedirect`.
 *
 * For example, if your app only uses anonymous accounts and you only want
 * accounts saved for the current session, initialize `Auth` with:
 *
 * ```js
 * const auth = initializeAuth(app, {
 *   persistence: browserSessionPersistence,
 *   popupRedirectResolver: undefined,
 * });
 * ```
 *
 * @public
 */ function initializeAuth(app, deps) {
    const provider = (0, _app._getProvider)(app, "auth");
    if (provider.isInitialized()) {
        const auth = provider.getImmediate();
        const initialOptions = provider.getOptions();
        if ((0, _util.deepEqual)(initialOptions, deps !== null && deps !== void 0 ? deps : {})) return auth;
        else _fail(auth, "already-initialized" /* ALREADY_INITIALIZED */ );
    }
    const auth = provider.initialize({
        options: deps
    });
    return auth;
}
function _initializeAuthInstance(auth, deps) {
    const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
    const hierarchy = (Array.isArray(persistence) ? persistence : [
        persistence
    ]).map(_getInstance);
    if (deps === null || deps === void 0 ? void 0 : deps.errorMap) auth._updateErrorMap(deps.errorMap);
    // This promise is intended to float; auth initialization happens in the
    // background, meanwhile the auth object may be used by the app.
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _getCurrentUrl() {
    var _a;
    return typeof self !== "undefined" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || "";
}
function _isHttpOrHttps() {
    return _getCurrentScheme() === "http:" || _getCurrentScheme() === "https:";
}
function _getCurrentScheme() {
    var _a;
    return typeof self !== "undefined" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Determine whether the browser is working online
 */ function _isOnline() {
    if (typeof navigator !== "undefined" && navigator && "onLine" in navigator && typeof navigator.onLine === "boolean" && (_isHttpOrHttps() || (0, _util.isBrowserExtension)() || "connection" in navigator)) return navigator.onLine;
    // If we can't determine the state, assume it is online.
    return true;
}
function _getUserLanguage() {
    if (typeof navigator === "undefined") return null;
    const navigatorLanguage = navigator;
    return(// Most reliable, but only supported in Chrome/Firefox.
    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser
    // UI, not the language set in browser settings.
    navigatorLanguage.language || // Couldn't determine language.
    null);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A structure to help pick between a range of long and short delay durations
 * depending on the current environment. In general, the long delay is used for
 * mobile environments whereas short delays are used for desktop environments.
 */ class Delay {
    constructor(shortDelay, longDelay){
        this.shortDelay = shortDelay;
        this.longDelay = longDelay;
        // Internal error when improperly initialized.
        debugAssert(longDelay > shortDelay, "Short delay should be less than long delay!");
        this.isMobile = (0, _util.isMobileCordova)() || (0, _util.isReactNative)();
    }
    get() {
        if (!_isOnline()) // Pick the shorter timeout.
        return Math.min(5000 /* OFFLINE */ , this.shortDelay);
        // If running in a mobile environment, return the long delay, otherwise
        // return the short delay.
        // This could be improved in the future to dynamically change based on other
        // variables instead of just reading the current environment.
        return this.isMobile ? this.longDelay : this.shortDelay;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _emulatorUrl(config, path) {
    debugAssert(config.emulator, "Emulator should always be set here");
    const { url  } = config.emulator;
    if (!path) return url;
    return `${url}${path.startsWith("/") ? path.slice(1) : path}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class FetchProvider {
    static initialize(fetchImpl, headersImpl, responseImpl) {
        this.fetchImpl = fetchImpl;
        if (headersImpl) this.headersImpl = headersImpl;
        if (responseImpl) this.responseImpl = responseImpl;
    }
    static fetch() {
        if (this.fetchImpl) return this.fetchImpl;
        if (typeof self !== "undefined" && "fetch" in self) return self.fetch;
        debugFail("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
    }
    static headers() {
        if (this.headersImpl) return this.headersImpl;
        if (typeof self !== "undefined" && "Headers" in self) return self.Headers;
        debugFail("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
    }
    static response() {
        if (this.responseImpl) return this.responseImpl;
        if (typeof self !== "undefined" && "Response" in self) return self.Response;
        debugFail("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Map from errors returned by the server to errors to developer visible errors
 */ const SERVER_ERROR_MAP = {
    // Custom token errors.
    ["CREDENTIAL_MISMATCH" /* CREDENTIAL_MISMATCH */ ]: "custom-token-mismatch" /* CREDENTIAL_MISMATCH */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_CUSTOM_TOKEN" /* MISSING_CUSTOM_TOKEN */ ]: "internal-error" /* INTERNAL_ERROR */ ,
    // Create Auth URI errors.
    ["INVALID_IDENTIFIER" /* INVALID_IDENTIFIER */ ]: "invalid-email" /* INVALID_EMAIL */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_CONTINUE_URI" /* MISSING_CONTINUE_URI */ ]: "internal-error" /* INTERNAL_ERROR */ ,
    // Sign in with email and password errors (some apply to sign up too).
    ["INVALID_PASSWORD" /* INVALID_PASSWORD */ ]: "wrong-password" /* INVALID_PASSWORD */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_PASSWORD" /* MISSING_PASSWORD */ ]: "internal-error" /* INTERNAL_ERROR */ ,
    // Sign up with email and password errors.
    ["EMAIL_EXISTS" /* EMAIL_EXISTS */ ]: "email-already-in-use" /* EMAIL_EXISTS */ ,
    ["PASSWORD_LOGIN_DISABLED" /* PASSWORD_LOGIN_DISABLED */ ]: "operation-not-allowed" /* OPERATION_NOT_ALLOWED */ ,
    // Verify assertion for sign in with credential errors:
    ["INVALID_IDP_RESPONSE" /* INVALID_IDP_RESPONSE */ ]: "invalid-credential" /* INVALID_IDP_RESPONSE */ ,
    ["INVALID_PENDING_TOKEN" /* INVALID_PENDING_TOKEN */ ]: "invalid-credential" /* INVALID_IDP_RESPONSE */ ,
    ["FEDERATED_USER_ID_ALREADY_LINKED" /* FEDERATED_USER_ID_ALREADY_LINKED */ ]: "credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_REQ_TYPE" /* MISSING_REQ_TYPE */ ]: "internal-error" /* INTERNAL_ERROR */ ,
    // Send Password reset email errors:
    ["EMAIL_NOT_FOUND" /* EMAIL_NOT_FOUND */ ]: "user-not-found" /* USER_DELETED */ ,
    ["RESET_PASSWORD_EXCEED_LIMIT" /* RESET_PASSWORD_EXCEED_LIMIT */ ]: "too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */ ,
    ["EXPIRED_OOB_CODE" /* EXPIRED_OOB_CODE */ ]: "expired-action-code" /* EXPIRED_OOB_CODE */ ,
    ["INVALID_OOB_CODE" /* INVALID_OOB_CODE */ ]: "invalid-action-code" /* INVALID_OOB_CODE */ ,
    // This can only happen if the SDK sends a bad request.
    ["MISSING_OOB_CODE" /* MISSING_OOB_CODE */ ]: "internal-error" /* INTERNAL_ERROR */ ,
    // Operations that require ID token in request:
    ["CREDENTIAL_TOO_OLD_LOGIN_AGAIN" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ]: "requires-recent-login" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */ ,
    ["INVALID_ID_TOKEN" /* INVALID_ID_TOKEN */ ]: "invalid-user-token" /* INVALID_AUTH */ ,
    ["TOKEN_EXPIRED" /* TOKEN_EXPIRED */ ]: "user-token-expired" /* TOKEN_EXPIRED */ ,
    ["USER_NOT_FOUND" /* USER_NOT_FOUND */ ]: "user-token-expired" /* TOKEN_EXPIRED */ ,
    // Other errors.
    ["TOO_MANY_ATTEMPTS_TRY_LATER" /* TOO_MANY_ATTEMPTS_TRY_LATER */ ]: "too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */ ,
    // Phone Auth related errors.
    ["INVALID_CODE" /* INVALID_CODE */ ]: "invalid-verification-code" /* INVALID_CODE */ ,
    ["INVALID_SESSION_INFO" /* INVALID_SESSION_INFO */ ]: "invalid-verification-id" /* INVALID_SESSION_INFO */ ,
    ["INVALID_TEMPORARY_PROOF" /* INVALID_TEMPORARY_PROOF */ ]: "invalid-credential" /* INVALID_IDP_RESPONSE */ ,
    ["MISSING_SESSION_INFO" /* MISSING_SESSION_INFO */ ]: "missing-verification-id" /* MISSING_SESSION_INFO */ ,
    ["SESSION_EXPIRED" /* SESSION_EXPIRED */ ]: "code-expired" /* CODE_EXPIRED */ ,
    // Other action code errors when additional settings passed.
    // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
    // This is OK as this error will be caught by client side validation.
    ["MISSING_ANDROID_PACKAGE_NAME" /* MISSING_ANDROID_PACKAGE_NAME */ ]: "missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */ ,
    ["UNAUTHORIZED_DOMAIN" /* UNAUTHORIZED_DOMAIN */ ]: "unauthorized-continue-uri" /* UNAUTHORIZED_DOMAIN */ ,
    // getProjectConfig errors when clientId is passed.
    ["INVALID_OAUTH_CLIENT_ID" /* INVALID_OAUTH_CLIENT_ID */ ]: "invalid-oauth-client-id" /* INVALID_OAUTH_CLIENT_ID */ ,
    // User actions (sign-up or deletion) disabled errors.
    ["ADMIN_ONLY_OPERATION" /* ADMIN_ONLY_OPERATION */ ]: "admin-restricted-operation" /* ADMIN_ONLY_OPERATION */ ,
    // Multi factor related errors.
    ["INVALID_MFA_PENDING_CREDENTIAL" /* INVALID_MFA_PENDING_CREDENTIAL */ ]: "invalid-multi-factor-session" /* INVALID_MFA_SESSION */ ,
    ["MFA_ENROLLMENT_NOT_FOUND" /* MFA_ENROLLMENT_NOT_FOUND */ ]: "multi-factor-info-not-found" /* MFA_INFO_NOT_FOUND */ ,
    ["MISSING_MFA_ENROLLMENT_ID" /* MISSING_MFA_ENROLLMENT_ID */ ]: "missing-multi-factor-info" /* MISSING_MFA_INFO */ ,
    ["MISSING_MFA_PENDING_CREDENTIAL" /* MISSING_MFA_PENDING_CREDENTIAL */ ]: "missing-multi-factor-session" /* MISSING_MFA_SESSION */ ,
    ["SECOND_FACTOR_EXISTS" /* SECOND_FACTOR_EXISTS */ ]: "second-factor-already-in-use" /* SECOND_FACTOR_ALREADY_ENROLLED */ ,
    ["SECOND_FACTOR_LIMIT_EXCEEDED" /* SECOND_FACTOR_LIMIT_EXCEEDED */ ]: "maximum-second-factor-count-exceeded" /* SECOND_FACTOR_LIMIT_EXCEEDED */ ,
    // Blocking functions related errors.
    ["BLOCKING_FUNCTION_ERROR_RESPONSE" /* BLOCKING_FUNCTION_ERROR_RESPONSE */ ]: "internal-error" /* INTERNAL_ERROR */ 
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);
function _addTidIfNecessary(auth, request) {
    if (auth.tenantId && !request.tenantId) return Object.assign(Object.assign({}, request), {
        tenantId: auth.tenantId
    });
    return request;
}
async function _performApiRequest(auth, method, path, request, customErrorMap = {}) {
    return _performFetchWithErrorHandling(auth, customErrorMap, async ()=>{
        let body = {};
        let params = {};
        if (request) {
            if (method === "GET" /* GET */ ) params = request;
            else body = {
                body: JSON.stringify(request)
            };
        }
        const query = (0, _util.querystring)(Object.assign({
            key: auth.config.apiKey
        }, params)).slice(1);
        const headers = await auth._getAdditionalHeaders();
        headers["Content-Type" /* CONTENT_TYPE */ ] = "application/json";
        if (auth.languageCode) headers["X-Firebase-Locale" /* X_FIREBASE_LOCALE */ ] = auth.languageCode;
        return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), Object.assign({
            method,
            headers,
            referrerPolicy: "no-referrer"
        }, body));
    });
}
async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
    auth._canInitEmulator = false;
    const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);
    try {
        const networkTimeout = new NetworkTimeout(auth);
        const response = await Promise.race([
            fetchFn(),
            networkTimeout.promise
        ]);
        // If we've reached this point, the fetch succeeded and the networkTimeout
        // didn't throw; clear the network timeout delay so that Node won't hang
        networkTimeout.clearNetworkTimeout();
        const json = await response.json();
        if ("needConfirmation" in json) throw _makeTaggedError(auth, "account-exists-with-different-credential" /* NEED_CONFIRMATION */ , json);
        if (response.ok && !("errorMessage" in json)) return json;
        else {
            const errorMessage = response.ok ? json.errorMessage : json.error.message;
            const [serverErrorCode, serverErrorMessage] = errorMessage.split(" : ");
            if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED" /* FEDERATED_USER_ID_ALREADY_LINKED */ ) throw _makeTaggedError(auth, "credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */ , json);
            else if (serverErrorCode === "EMAIL_EXISTS" /* EMAIL_EXISTS */ ) throw _makeTaggedError(auth, "email-already-in-use" /* EMAIL_EXISTS */ , json);
            else if (serverErrorCode === "USER_DISABLED" /* USER_DISABLED */ ) throw _makeTaggedError(auth, "user-disabled" /* USER_DISABLED */ , json);
            const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, "-");
            if (serverErrorMessage) throw _errorWithCustomMessage(auth, authError, serverErrorMessage);
            else _fail(auth, authError);
        }
    } catch (e) {
        if (e instanceof (0, _util.FirebaseError)) throw e;
        _fail(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */ );
    }
}
async function _performSignInRequest(auth, method, path, request, customErrorMap = {}) {
    const serverResponse = await _performApiRequest(auth, method, path, request, customErrorMap);
    if ("mfaPendingCredential" in serverResponse) _fail(auth, "multi-factor-auth-required" /* MFA_REQUIRED */ , {
        _serverResponse: serverResponse
    });
    return serverResponse;
}
function _getFinalTarget(auth, host, path, query) {
    const base = `${host}${path}?${query}`;
    if (!auth.config.emulator) return `${auth.config.apiScheme}://${base}`;
    return _emulatorUrl(auth.config, base);
}
class NetworkTimeout {
    constructor(auth){
        this.auth = auth;
        // Node timers and browser timers are fundamentally incompatible, but we
        // don't care about the value here
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.timer = null;
        this.promise = new Promise((_, reject)=>{
            this.timer = setTimeout(()=>{
                return reject(_createError(this.auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */ ));
            }, DEFAULT_API_TIMEOUT_MS.get());
        });
    }
    clearNetworkTimeout() {
        clearTimeout(this.timer);
    }
}
function _makeTaggedError(auth, code, response) {
    const errorParams = {
        appName: auth.name
    };
    if (response.email) errorParams.email = response.email;
    if (response.phoneNumber) errorParams.phoneNumber = response.phoneNumber;
    const error = _createError(auth, code, errorParams);
    // We know customData is defined on error because errorParams is defined
    error.customData._tokenResponse = response;
    return error;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function deleteAccount(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:delete" /* DELETE_ACCOUNT */ , request);
}
async function deleteLinkedAccounts(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:update" /* SET_ACCOUNT_INFO */ , request);
}
async function getAccountInfo(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:lookup" /* GET_ACCOUNT_INFO */ , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function utcTimestampToDateString(utcTimestamp) {
    if (!utcTimestamp) return undefined;
    try {
        // Convert to date object.
        const date = new Date(Number(utcTimestamp));
        // Test date is valid.
        if (!isNaN(date.getTime())) // Convert to UTC date string.
        return date.toUTCString();
    } catch (e) {
    // Do nothing. undefined will be returned.
    }
    return undefined;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */ function getIdToken(user, forceRefresh = false) {
    return (0, _util.getModularInstance)(user).getIdToken(forceRefresh);
}
/**
 * Returns a deserialized JSON Web Token (JWT) used to identitfy the user to a Firebase service.
 *
 * @remarks
 * Returns the current token if it has not expired or if it will not expire in the next five
 * minutes. Otherwise, this will refresh the token and return a new one.
 *
 * @param user - The user.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */ async function getIdTokenResult(user, forceRefresh = false) {
    const userInternal = (0, _util.getModularInstance)(user);
    const token = await userInternal.getIdToken(forceRefresh);
    const claims = _parseToken(token);
    _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error" /* INTERNAL_ERROR */ );
    const firebase = typeof claims.firebase === "object" ? claims.firebase : undefined;
    const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase["sign_in_provider"];
    return {
        claims,
        token,
        authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
        issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
        expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
        signInProvider: signInProvider || null,
        signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase["sign_in_second_factor"]) || null
    };
}
function secondsStringToMilliseconds(seconds) {
    return Number(seconds) * 1000;
}
function _parseToken(token) {
    var _a;
    const [algorithm, payload, signature] = token.split(".");
    if (algorithm === undefined || payload === undefined || signature === undefined) {
        _logError("JWT malformed, contained fewer than 3 sections");
        return null;
    }
    try {
        const decoded = (0, _util.base64Decode)(payload);
        if (!decoded) {
            _logError("Failed to decode base64 JWT payload");
            return null;
        }
        return JSON.parse(decoded);
    } catch (e) {
        _logError("Caught error parsing JWT payload as JSON", (_a = e) === null || _a === void 0 ? void 0 : _a.toString());
        return null;
    }
}
/**
 * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.
 */ function _tokenExpiresIn(token) {
    const parsedToken = _parseToken(token);
    _assert(parsedToken, "internal-error" /* INTERNAL_ERROR */ );
    _assert(typeof parsedToken.exp !== "undefined", "internal-error" /* INTERNAL_ERROR */ );
    _assert(typeof parsedToken.iat !== "undefined", "internal-error" /* INTERNAL_ERROR */ );
    return Number(parsedToken.exp) - Number(parsedToken.iat);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _logoutIfInvalidated(user, promise, bypassAuthState = false) {
    if (bypassAuthState) return promise;
    try {
        return await promise;
    } catch (e) {
        if (e instanceof (0, _util.FirebaseError) && isUserInvalidated(e)) {
            if (user.auth.currentUser === user) await user.auth.signOut();
        }
        throw e;
    }
}
function isUserInvalidated({ code  }) {
    return code === `auth/${"user-disabled" /* USER_DISABLED */ }` || code === `auth/${"user-token-expired" /* TOKEN_EXPIRED */ }`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class ProactiveRefresh {
    constructor(user){
        this.user = user;
        this.isRunning = false;
        // Node timers and browser timers return fundamentally different types.
        // We don't actually care what the value is but TS won't accept unknown and
        // we can't cast properly in both environments.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.timerId = null;
        this.errorBackoff = 30000 /* RETRY_BACKOFF_MIN */ ;
    }
    _start() {
        if (this.isRunning) return;
        this.isRunning = true;
        this.schedule();
    }
    _stop() {
        if (!this.isRunning) return;
        this.isRunning = false;
        if (this.timerId !== null) clearTimeout(this.timerId);
    }
    getInterval(wasError) {
        var _a;
        if (wasError) {
            const interval = this.errorBackoff;
            this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* RETRY_BACKOFF_MAX */ );
            return interval;
        } else {
            // Reset the error backoff
            this.errorBackoff = 30000 /* RETRY_BACKOFF_MIN */ ;
            const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
            const interval = expTime - Date.now() - 300000 /* OFFSET */ ;
            return Math.max(0, interval);
        }
    }
    schedule(wasError = false) {
        if (!this.isRunning) // Just in case...
        return;
        const interval = this.getInterval(wasError);
        this.timerId = setTimeout(async ()=>{
            await this.iteration();
        }, interval);
    }
    async iteration() {
        var _a;
        try {
            await this.user.getIdToken(true);
        } catch (e) {
            // Only retry on network errors
            if (((_a = e) === null || _a === void 0 ? void 0 : _a.code) === `auth/${"network-request-failed" /* NETWORK_REQUEST_FAILED */ }`) this.schedule(/* wasError */ true);
            return;
        }
        this.schedule();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class UserMetadata {
    constructor(createdAt, lastLoginAt){
        this.createdAt = createdAt;
        this.lastLoginAt = lastLoginAt;
        this._initializeTime();
    }
    _initializeTime() {
        this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
        this.creationTime = utcTimestampToDateString(this.createdAt);
    }
    _copy(metadata) {
        this.createdAt = metadata.createdAt;
        this.lastLoginAt = metadata.lastLoginAt;
        this._initializeTime();
    }
    toJSON() {
        return {
            createdAt: this.createdAt,
            lastLoginAt: this.lastLoginAt
        };
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _reloadWithoutSaving(user) {
    var _a;
    const auth = user.auth;
    const idToken = await user.getIdToken();
    const response = await _logoutIfInvalidated(user, getAccountInfo(auth, {
        idToken
    }));
    _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, "internal-error" /* INTERNAL_ERROR */ );
    const coreAccount = response.users[0];
    user._notifyReloadListener(coreAccount);
    const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];
    const providerData = mergeProviderData(user.providerData, newProviderData);
    // Preserves the non-nonymous status of the stored user, even if no more
    // credentials (federated or email/password) are linked to the user. If
    // the user was previously anonymous, then use provider data to update.
    // On the other hand, if it was not anonymous before, it should never be
    // considered anonymous now.
    const oldIsAnonymous = user.isAnonymous;
    const newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
    const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
    const updates = {
        uid: coreAccount.localId,
        displayName: coreAccount.displayName || null,
        photoURL: coreAccount.photoUrl || null,
        email: coreAccount.email || null,
        emailVerified: coreAccount.emailVerified || false,
        phoneNumber: coreAccount.phoneNumber || null,
        tenantId: coreAccount.tenantId || null,
        providerData,
        metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
        isAnonymous
    };
    Object.assign(user, updates);
}
/**
 * Reloads user account data, if signed in.
 *
 * @param user - The user.
 *
 * @public
 */ async function reload(user) {
    const userInternal = (0, _util.getModularInstance)(user);
    await _reloadWithoutSaving(userInternal);
    // Even though the current user hasn't changed, update
    // current user will trigger a persistence update w/ the
    // new info.
    await userInternal.auth._persistUserIfCurrent(userInternal);
    userInternal.auth._notifyListenersIfCurrent(userInternal);
}
function mergeProviderData(original, newData) {
    const deduped = original.filter((o)=>!newData.some((n)=>n.providerId === o.providerId));
    return [
        ...deduped,
        ...newData
    ];
}
function extractProviderData(providers) {
    return providers.map((_a)=>{
        var { providerId  } = _a, provider = (0, _tslib.__rest)(_a, [
            "providerId"
        ]);
        return {
            providerId,
            uid: provider.rawId || "",
            displayName: provider.displayName || null,
            email: provider.email || null,
            phoneNumber: provider.phoneNumber || null,
            photoURL: provider.photoUrl || null
        };
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function requestStsToken(auth, refreshToken) {
    const response = await _performFetchWithErrorHandling(auth, {}, async ()=>{
        const body = (0, _util.querystring)({
            "grant_type": "refresh_token",
            "refresh_token": refreshToken
        }).slice(1);
        const { tokenApiHost , apiKey  } = auth.config;
        const url = _getFinalTarget(auth, tokenApiHost, "/v1/token" /* TOKEN */ , `key=${apiKey}`);
        const headers = await auth._getAdditionalHeaders();
        headers["Content-Type" /* CONTENT_TYPE */ ] = "application/x-www-form-urlencoded";
        return FetchProvider.fetch()(url, {
            method: "POST" /* POST */ ,
            headers,
            body
        });
    });
    // The response comes back in snake_case. Convert to camel:
    return {
        accessToken: response.access_token,
        expiresIn: response.expires_in,
        refreshToken: response.refresh_token
    };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * We need to mark this class as internal explicitly to exclude it in the public typings, because
 * it references AuthInternal which has a circular dependency with UserInternal.
 *
 * @internal
 */ class StsTokenManager {
    constructor(){
        this.refreshToken = null;
        this.accessToken = null;
        this.expirationTime = null;
    }
    get isExpired() {
        return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* TOKEN_REFRESH */ ;
    }
    updateFromServerResponse(response) {
        _assert(response.idToken, "internal-error" /* INTERNAL_ERROR */ );
        _assert(typeof response.idToken !== "undefined", "internal-error" /* INTERNAL_ERROR */ );
        _assert(typeof response.refreshToken !== "undefined", "internal-error" /* INTERNAL_ERROR */ );
        const expiresIn = "expiresIn" in response && typeof response.expiresIn !== "undefined" ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);
        this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
    }
    async getToken(auth, forceRefresh = false) {
        _assert(!this.accessToken || this.refreshToken, auth, "user-token-expired" /* TOKEN_EXPIRED */ );
        if (!forceRefresh && this.accessToken && !this.isExpired) return this.accessToken;
        if (this.refreshToken) {
            await this.refresh(auth, this.refreshToken);
            return this.accessToken;
        }
        return null;
    }
    clearRefreshToken() {
        this.refreshToken = null;
    }
    async refresh(auth, oldToken) {
        const { accessToken , refreshToken , expiresIn  } = await requestStsToken(auth, oldToken);
        this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
    }
    updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
        this.refreshToken = refreshToken || null;
        this.accessToken = accessToken || null;
        this.expirationTime = Date.now() + expiresInSec * 1000;
    }
    static fromJSON(appName, object) {
        const { refreshToken , accessToken , expirationTime  } = object;
        const manager = new StsTokenManager();
        if (refreshToken) {
            _assert(typeof refreshToken === "string", "internal-error" /* INTERNAL_ERROR */ , {
                appName
            });
            manager.refreshToken = refreshToken;
        }
        if (accessToken) {
            _assert(typeof accessToken === "string", "internal-error" /* INTERNAL_ERROR */ , {
                appName
            });
            manager.accessToken = accessToken;
        }
        if (expirationTime) {
            _assert(typeof expirationTime === "number", "internal-error" /* INTERNAL_ERROR */ , {
                appName
            });
            manager.expirationTime = expirationTime;
        }
        return manager;
    }
    toJSON() {
        return {
            refreshToken: this.refreshToken,
            accessToken: this.accessToken,
            expirationTime: this.expirationTime
        };
    }
    _assign(stsTokenManager) {
        this.accessToken = stsTokenManager.accessToken;
        this.refreshToken = stsTokenManager.refreshToken;
        this.expirationTime = stsTokenManager.expirationTime;
    }
    _clone() {
        return Object.assign(new StsTokenManager(), this.toJSON());
    }
    _performRefresh() {
        return debugFail("not implemented");
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function assertStringOrUndefined(assertion, appName) {
    _assert(typeof assertion === "string" || typeof assertion === "undefined", "internal-error" /* INTERNAL_ERROR */ , {
        appName
    });
}
class UserImpl {
    constructor(_a){
        var { uid , auth , stsTokenManager  } = _a, opt = (0, _tslib.__rest)(_a, [
            "uid",
            "auth",
            "stsTokenManager"
        ]);
        // For the user object, provider is always Firebase.
        this.providerId = "firebase" /* FIREBASE */ ;
        this.proactiveRefresh = new ProactiveRefresh(this);
        this.reloadUserInfo = null;
        this.reloadListener = null;
        this.uid = uid;
        this.auth = auth;
        this.stsTokenManager = stsTokenManager;
        this.accessToken = stsTokenManager.accessToken;
        this.displayName = opt.displayName || null;
        this.email = opt.email || null;
        this.emailVerified = opt.emailVerified || false;
        this.phoneNumber = opt.phoneNumber || null;
        this.photoURL = opt.photoURL || null;
        this.isAnonymous = opt.isAnonymous || false;
        this.tenantId = opt.tenantId || null;
        this.providerData = opt.providerData ? [
            ...opt.providerData
        ] : [];
        this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
    }
    async getIdToken(forceRefresh) {
        const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
        _assert(accessToken, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        if (this.accessToken !== accessToken) {
            this.accessToken = accessToken;
            await this.auth._persistUserIfCurrent(this);
            this.auth._notifyListenersIfCurrent(this);
        }
        return accessToken;
    }
    getIdTokenResult(forceRefresh) {
        return getIdTokenResult(this, forceRefresh);
    }
    reload() {
        return reload(this);
    }
    _assign(user) {
        if (this === user) return;
        _assert(this.uid === user.uid, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        this.displayName = user.displayName;
        this.photoURL = user.photoURL;
        this.email = user.email;
        this.emailVerified = user.emailVerified;
        this.phoneNumber = user.phoneNumber;
        this.isAnonymous = user.isAnonymous;
        this.tenantId = user.tenantId;
        this.providerData = user.providerData.map((userInfo)=>Object.assign({}, userInfo));
        this.metadata._copy(user.metadata);
        this.stsTokenManager._assign(user.stsTokenManager);
    }
    _clone(auth) {
        return new UserImpl(Object.assign(Object.assign({}, this), {
            auth,
            stsTokenManager: this.stsTokenManager._clone()
        }));
    }
    _onReload(callback) {
        // There should only ever be one listener, and that is a single instance of MultiFactorUser
        _assert(!this.reloadListener, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        this.reloadListener = callback;
        if (this.reloadUserInfo) {
            this._notifyReloadListener(this.reloadUserInfo);
            this.reloadUserInfo = null;
        }
    }
    _notifyReloadListener(userInfo) {
        if (this.reloadListener) this.reloadListener(userInfo);
        else // If no listener is subscribed yet, save the result so it's available when they do subscribe
        this.reloadUserInfo = userInfo;
    }
    _startProactiveRefresh() {
        this.proactiveRefresh._start();
    }
    _stopProactiveRefresh() {
        this.proactiveRefresh._stop();
    }
    async _updateTokensIfNecessary(response, reload1 = false) {
        let tokensRefreshed = false;
        if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
            this.stsTokenManager.updateFromServerResponse(response);
            tokensRefreshed = true;
        }
        if (reload1) await _reloadWithoutSaving(this);
        await this.auth._persistUserIfCurrent(this);
        if (tokensRefreshed) this.auth._notifyListenersIfCurrent(this);
    }
    async delete() {
        const idToken = await this.getIdToken();
        await _logoutIfInvalidated(this, deleteAccount(this.auth, {
            idToken
        }));
        this.stsTokenManager.clearRefreshToken();
        // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()
        //       cancels pending actions...
        return this.auth.signOut();
    }
    toJSON() {
        return Object.assign(Object.assign({
            uid: this.uid,
            email: this.email || undefined,
            emailVerified: this.emailVerified,
            displayName: this.displayName || undefined,
            isAnonymous: this.isAnonymous,
            photoURL: this.photoURL || undefined,
            phoneNumber: this.phoneNumber || undefined,
            tenantId: this.tenantId || undefined,
            providerData: this.providerData.map((userInfo)=>Object.assign({}, userInfo)),
            stsTokenManager: this.stsTokenManager.toJSON(),
            // Redirect event ID must be maintained in case there is a pending
            // redirect event.
            _redirectEventId: this._redirectEventId
        }, this.metadata.toJSON()), {
            // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):
            apiKey: this.auth.config.apiKey,
            appName: this.auth.name
        });
    }
    get refreshToken() {
        return this.stsTokenManager.refreshToken || "";
    }
    static _fromJSON(auth, object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;
        const email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;
        const phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;
        const photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;
        const tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;
        const _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;
        const createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;
        const lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;
        const { uid , emailVerified , isAnonymous , providerData , stsTokenManager: plainObjectTokenManager  } = object;
        _assert(uid && plainObjectTokenManager, auth, "internal-error" /* INTERNAL_ERROR */ );
        const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
        _assert(typeof uid === "string", auth, "internal-error" /* INTERNAL_ERROR */ );
        assertStringOrUndefined(displayName, auth.name);
        assertStringOrUndefined(email, auth.name);
        _assert(typeof emailVerified === "boolean", auth, "internal-error" /* INTERNAL_ERROR */ );
        _assert(typeof isAnonymous === "boolean", auth, "internal-error" /* INTERNAL_ERROR */ );
        assertStringOrUndefined(phoneNumber, auth.name);
        assertStringOrUndefined(photoURL, auth.name);
        assertStringOrUndefined(tenantId, auth.name);
        assertStringOrUndefined(_redirectEventId, auth.name);
        assertStringOrUndefined(createdAt, auth.name);
        assertStringOrUndefined(lastLoginAt, auth.name);
        const user = new UserImpl({
            uid,
            auth,
            email,
            emailVerified,
            displayName,
            isAnonymous,
            photoURL,
            phoneNumber,
            tenantId,
            stsTokenManager,
            createdAt,
            lastLoginAt
        });
        if (providerData && Array.isArray(providerData)) user.providerData = providerData.map((userInfo)=>Object.assign({}, userInfo));
        if (_redirectEventId) user._redirectEventId = _redirectEventId;
        return user;
    }
    /**
     * Initialize a User from an idToken server response
     * @param auth
     * @param idTokenResponse
     */ static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {
        const stsTokenManager = new StsTokenManager();
        stsTokenManager.updateFromServerResponse(idTokenResponse);
        // Initialize the Firebase Auth user.
        const user = new UserImpl({
            uid: idTokenResponse.localId,
            auth,
            stsTokenManager,
            isAnonymous
        });
        // Updates the user info and data and resolves with a user instance.
        await _reloadWithoutSaving(user);
        return user;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class InMemoryPersistence {
    constructor(){
        this.type = "NONE" /* NONE */ ;
        this.storage = {};
    }
    async _isAvailable() {
        return true;
    }
    async _set(key, value) {
        this.storage[key] = value;
    }
    async _get(key) {
        const value = this.storage[key];
        return value === undefined ? null : value;
    }
    async _remove(key) {
        delete this.storage[key];
    }
    _addListener(_key, _listener) {
        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
        return;
    }
    _removeListener(_key, _listener) {
        // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
        return;
    }
}
InMemoryPersistence.type = "NONE";
/**
 * An implementation of {@link Persistence} of type 'NONE'.
 *
 * @public
 */ const inMemoryPersistence = InMemoryPersistence;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _persistenceKeyName(key, apiKey, appName) {
    return `${"firebase" /* PERSISTENCE */ }:${key}:${apiKey}:${appName}`;
}
class PersistenceUserManager {
    constructor(persistence, auth, userKey){
        this.persistence = persistence;
        this.auth = auth;
        this.userKey = userKey;
        const { config , name: name1  } = this.auth;
        this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name1);
        this.fullPersistenceKey = _persistenceKeyName("persistence" /* PERSISTENCE_USER */ , config.apiKey, name1);
        this.boundEventHandler = auth._onStorageEvent.bind(auth);
        this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
    }
    setCurrentUser(user) {
        return this.persistence._set(this.fullUserKey, user.toJSON());
    }
    async getCurrentUser() {
        const blob = await this.persistence._get(this.fullUserKey);
        return blob ? UserImpl._fromJSON(this.auth, blob) : null;
    }
    removeCurrentUser() {
        return this.persistence._remove(this.fullUserKey);
    }
    savePersistenceForRedirect() {
        return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
    }
    async setPersistence(newPersistence) {
        if (this.persistence === newPersistence) return;
        const currentUser = await this.getCurrentUser();
        await this.removeCurrentUser();
        this.persistence = newPersistence;
        if (currentUser) return this.setCurrentUser(currentUser);
    }
    delete() {
        this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
    }
    static async create(auth, persistenceHierarchy, userKey = "authUser" /* AUTH_USER */ ) {
        if (!persistenceHierarchy.length) return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);
        // Eliminate any persistences that are not available
        const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence)=>{
            if (await persistence._isAvailable()) return persistence;
            return undefined;
        }))).filter((persistence)=>persistence);
        // Fall back to the first persistence listed, or in memory if none available
        let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);
        const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
        // Pull out the existing user, setting the chosen persistence to that
        // persistence if the user exists.
        let userToMigrate = null;
        // Note, here we check for a user in _all_ persistences, not just the
        // ones deemed available. If we can migrate a user out of a broken
        // persistence, we will (but only if that persistence supports migration).
        for (const persistence1 of persistenceHierarchy)try {
            const blob = await persistence1._get(key);
            if (blob) {
                const user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)
                if (persistence1 !== selectedPersistence) userToMigrate = user;
                selectedPersistence = persistence1;
                break;
            }
        } catch (_a) {}
        // If we find the user in a persistence that does support migration, use
        // that migration path (of only persistences that support migration)
        const migrationHierarchy = availablePersistences.filter((p)=>p._shouldAllowMigration);
        // If the persistence does _not_ allow migration, just finish off here
        if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) return new PersistenceUserManager(selectedPersistence, auth, userKey);
        selectedPersistence = migrationHierarchy[0];
        if (userToMigrate) // This normally shouldn't throw since chosenPersistence.isAvailable() is true, but if it does
        // we'll just let it bubble to surface the error.
        await selectedPersistence._set(key, userToMigrate.toJSON());
        // Attempt to clear the key in other persistences but ignore errors. This helps prevent issues
        // such as users getting stuck with a previous account after signing out and refreshing the tab.
        await Promise.all(persistenceHierarchy.map(async (persistence)=>{
            if (persistence !== selectedPersistence) try {
                await persistence._remove(key);
            } catch (_a) {}
        }));
        return new PersistenceUserManager(selectedPersistence, auth, userKey);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Determine the browser for the purposes of reporting usage to the API
 */ function _getBrowserName(userAgent) {
    const ua = userAgent.toLowerCase();
    if (ua.includes("opera/") || ua.includes("opr/") || ua.includes("opios/")) return "Opera" /* OPERA */ ;
    else if (_isIEMobile(ua)) // Windows phone IEMobile browser.
    return "IEMobile" /* IEMOBILE */ ;
    else if (ua.includes("msie") || ua.includes("trident/")) return "IE" /* IE */ ;
    else if (ua.includes("edge/")) return "Edge" /* EDGE */ ;
    else if (_isFirefox(ua)) return "Firefox" /* FIREFOX */ ;
    else if (ua.includes("silk/")) return "Silk" /* SILK */ ;
    else if (_isBlackBerry(ua)) // Blackberry browser.
    return "Blackberry" /* BLACKBERRY */ ;
    else if (_isWebOS(ua)) // WebOS default browser.
    return "Webos" /* WEBOS */ ;
    else if (_isSafari(ua)) return "Safari" /* SAFARI */ ;
    else if ((ua.includes("chrome/") || _isChromeIOS(ua)) && !ua.includes("edge/")) return "Chrome" /* CHROME */ ;
    else if (_isAndroid(ua)) // Android stock browser.
    return "Android" /* ANDROID */ ;
    else {
        // Most modern browsers have name/version at end of user agent string.
        const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
        const matches = userAgent.match(re);
        if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) return matches[1];
    }
    return "Other" /* OTHER */ ;
}
function _isFirefox(ua = (0, _util.getUA)()) {
    return /firefox\//i.test(ua);
}
function _isSafari(userAgent = (0, _util.getUA)()) {
    const ua = userAgent.toLowerCase();
    return ua.includes("safari/") && !ua.includes("chrome/") && !ua.includes("crios/") && !ua.includes("android");
}
function _isChromeIOS(ua = (0, _util.getUA)()) {
    return /crios\//i.test(ua);
}
function _isIEMobile(ua = (0, _util.getUA)()) {
    return /iemobile/i.test(ua);
}
function _isAndroid(ua = (0, _util.getUA)()) {
    return /android/i.test(ua);
}
function _isBlackBerry(ua = (0, _util.getUA)()) {
    return /blackberry/i.test(ua);
}
function _isWebOS(ua = (0, _util.getUA)()) {
    return /webos/i.test(ua);
}
function _isIOS(ua = (0, _util.getUA)()) {
    return /iphone|ipad|ipod/i.test(ua);
}
function _isIOS7Or8(ua = (0, _util.getUA)()) {
    return /(iPad|iPhone|iPod).*OS 7_\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\d/i.test(ua);
}
function _isIOSStandalone(ua = (0, _util.getUA)()) {
    var _a;
    return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
}
function _isIE10() {
    return (0, _util.isIE)() && document.documentMode === 10;
}
function _isMobileBrowser(ua = (0, _util.getUA)()) {
    // TODO: implement getBrowserName equivalent for OS.
    return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);
}
function _isIframe() {
    try {
        // Check that the current window is not the top window.
        // If so, return true.
        return !!(window && window !== window.top);
    } catch (e) {
        return false;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * Determine the SDK version string
 */ function _getClientVersion(clientPlatform, frameworks = []) {
    let reportedPlatform;
    switch(clientPlatform){
        case "Browser" /* BROWSER */ :
            // In a browser environment, report the browser name.
            reportedPlatform = _getBrowserName((0, _util.getUA)());
            break;
        case "Worker" /* WORKER */ :
            // Technically a worker runs from a browser but we need to differentiate a
            // worker from a browser.
            // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.
            reportedPlatform = `${_getBrowserName((0, _util.getUA)())}-${clientPlatform}`;
            break;
        default:
            reportedPlatform = clientPlatform;
    }
    const reportedFrameworks = frameworks.length ? frameworks.join(",") : "FirebaseCore-web"; /* default value if no other framework is used */ 
    return `${reportedPlatform}/${"JsCore" /* CORE */ }/${0, _app.SDK_VERSION}/${reportedFrameworks}`;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class AuthMiddlewareQueue {
    constructor(auth){
        this.auth = auth;
        this.queue = [];
    }
    pushCallback(callback, onAbort) {
        // The callback could be sync or async. Wrap it into a
        // function that is always async.
        const wrappedCallback = (user)=>new Promise((resolve, reject)=>{
                try {
                    const result = callback(user);
                    // Either resolve with existing promise or wrap a non-promise
                    // return value into a promise.
                    resolve(result);
                } catch (e) {
                    // Sync callback throws.
                    reject(e);
                }
            });
        // Attach the onAbort if present
        wrappedCallback.onAbort = onAbort;
        this.queue.push(wrappedCallback);
        const index = this.queue.length - 1;
        return ()=>{
            // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb
            // indexing of other elements.
            this.queue[index] = ()=>Promise.resolve();
        };
    }
    async runMiddleware(nextUser) {
        var _a;
        if (this.auth.currentUser === nextUser) return;
        // While running the middleware, build a temporary stack of onAbort
        // callbacks to call if one middleware callback rejects.
        const onAbortStack = [];
        try {
            for (const beforeStateCallback of this.queue){
                await beforeStateCallback(nextUser);
                // Only push the onAbort if the callback succeeds
                if (beforeStateCallback.onAbort) onAbortStack.push(beforeStateCallback.onAbort);
            }
        } catch (e) {
            // Run all onAbort, with separate try/catch to ignore any errors and
            // continue
            onAbortStack.reverse();
            for (const onAbort of onAbortStack)try {
                onAbort();
            } catch (_) {}
            throw this.auth._errorFactory.create("login-blocked" /* LOGIN_BLOCKED */ , {
                originalMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message
            });
        }
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class AuthImpl {
    constructor(app, heartbeatServiceProvider, config){
        this.app = app;
        this.heartbeatServiceProvider = heartbeatServiceProvider;
        this.config = config;
        this.currentUser = null;
        this.emulatorConfig = null;
        this.operations = Promise.resolve();
        this.authStateSubscription = new Subscription(this);
        this.idTokenSubscription = new Subscription(this);
        this.beforeStateQueue = new AuthMiddlewareQueue(this);
        this.redirectUser = null;
        this.isProactiveRefreshEnabled = false;
        // Any network calls will set this to true and prevent subsequent emulator
        // initialization
        this._canInitEmulator = true;
        this._isInitialized = false;
        this._deleted = false;
        this._initializationPromise = null;
        this._popupRedirectResolver = null;
        this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
        // Tracks the last notified UID for state change listeners to prevent
        // repeated calls to the callbacks. Undefined means it's never been
        // called, whereas null means it's been called with a signed out user
        this.lastNotifiedUid = undefined;
        this.languageCode = null;
        this.tenantId = null;
        this.settings = {
            appVerificationDisabledForTesting: false
        };
        this.frameworks = [];
        this.name = app.name;
        this.clientVersion = config.sdkClientVersion;
    }
    _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
        if (popupRedirectResolver) this._popupRedirectResolver = _getInstance(popupRedirectResolver);
        // Have to check for app deletion throughout initialization (after each
        // promise resolution)
        this._initializationPromise = this.queue(async ()=>{
            var _a, _b;
            if (this._deleted) return;
            this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);
            if (this._deleted) return;
            // Initialize the resolver early if necessary (only applicable to web:
            // this will cause the iframe to load immediately in certain cases)
            if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) // If this fails, don't halt auth loading
            try {
                await this._popupRedirectResolver._initialize(this);
            } catch (e) {}
            await this.initializeCurrentUser(popupRedirectResolver);
            this.lastNotifiedUid = ((_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;
            if (this._deleted) return;
            this._isInitialized = true;
        });
        return this._initializationPromise;
    }
    /**
     * If the persistence is changed in another window, the user manager will let us know
     */ async _onStorageEvent() {
        if (this._deleted) return;
        const user = await this.assertedPersistence.getCurrentUser();
        if (!this.currentUser && !user) // No change, do nothing (was signed out and remained signed out).
        return;
        // If the same user is to be synchronized.
        if (this.currentUser && user && this.currentUser.uid === user.uid) {
            // Data update, simply copy data changes.
            this._currentUser._assign(user);
            // If tokens changed from previous user tokens, this will trigger
            // notifyAuthListeners_.
            await this.currentUser.getIdToken();
            return;
        }
        // Update current Auth state. Either a new login or logout.
        // Skip blocking callbacks, they should not apply to a change in another tab.
        await this._updateCurrentUser(user, /* skipBeforeStateCallbacks */ true);
    }
    async initializeCurrentUser(popupRedirectResolver) {
        var _a;
        // First check to see if we have a pending redirect event.
        const previouslyStoredUser = await this.assertedPersistence.getCurrentUser();
        let futureCurrentUser = previouslyStoredUser;
        let needsTocheckMiddleware = false;
        if (popupRedirectResolver && this.config.authDomain) {
            await this.getOrInitRedirectPersistenceManager();
            const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
            const storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;
            const result = await this.tryRedirectSignIn(popupRedirectResolver);
            // If the stored user (i.e. the old "currentUser") has a redirectId that
            // matches the redirect user, then we want to initially sign in with the
            // new user object from result.
            // TODO(samgho): More thoroughly test all of this
            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
                futureCurrentUser = result.user;
                needsTocheckMiddleware = true;
            }
        }
        // If no user in persistence, there is no current user. Set to null.
        if (!futureCurrentUser) return this.directlySetCurrentUser(null);
        if (!futureCurrentUser._redirectEventId) {
            // This isn't a redirect link operation, we can reload and bail.
            // First though, ensure that we check the middleware is happy.
            if (needsTocheckMiddleware) try {
                await this.beforeStateQueue.runMiddleware(futureCurrentUser);
            } catch (e) {
                futureCurrentUser = previouslyStoredUser;
                // We know this is available since the bit is only set when the
                // resolver is available
                this._popupRedirectResolver._overrideRedirectResult(this, ()=>Promise.reject(e));
            }
            if (futureCurrentUser) return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
            else return this.directlySetCurrentUser(null);
        }
        _assert(this._popupRedirectResolver, this, "argument-error" /* ARGUMENT_ERROR */ );
        await this.getOrInitRedirectPersistenceManager();
        // If the redirect user's event ID matches the current user's event ID,
        // DO NOT reload the current user, otherwise they'll be cleared from storage.
        // This is important for the reauthenticateWithRedirect() flow.
        if (this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId) return this.directlySetCurrentUser(futureCurrentUser);
        return this.reloadAndSetCurrentUserOrClear(futureCurrentUser);
    }
    async tryRedirectSignIn(redirectResolver) {
        // The redirect user needs to be checked (and signed in if available)
        // during auth initialization. All of the normal sign in and link/reauth
        // flows call back into auth and push things onto the promise queue. We
        // need to await the result of the redirect sign in *inside the promise
        // queue*. This presents a problem: we run into deadlock. See:
        //    ┌> [Initialization] ─────┐
        //    ┌> [<other queue tasks>] │
        //    └─ [getRedirectResult] <─┘
        //    where [] are tasks on the queue and arrows denote awaits
        // Initialization will never complete because it's waiting on something
        // that's waiting for initialization to complete!
        //
        // Instead, this method calls getRedirectResult() (stored in
        // _completeRedirectFn) with an optional parameter that instructs all of
        // the underlying auth operations to skip anything that mutates auth state.
        let result = null;
        try {
            // We know this._popupRedirectResolver is set since redirectResolver
            // is passed in. The _completeRedirectFn expects the unwrapped extern.
            result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
        } catch (e) {
            // Swallow any errors here; the code can retrieve them in
            // getRedirectResult().
            await this._setRedirectUser(null);
        }
        return result;
    }
    async reloadAndSetCurrentUserOrClear(user) {
        var _a;
        try {
            await _reloadWithoutSaving(user);
        } catch (e) {
            if (((_a = e) === null || _a === void 0 ? void 0 : _a.code) !== `auth/${"network-request-failed" /* NETWORK_REQUEST_FAILED */ }`) // Something's wrong with the user's token. Log them out and remove
            // them from storage
            return this.directlySetCurrentUser(null);
        }
        return this.directlySetCurrentUser(user);
    }
    useDeviceLanguage() {
        this.languageCode = _getUserLanguage();
    }
    async _delete() {
        this._deleted = true;
    }
    async updateCurrentUser(userExtern) {
        // The public updateCurrentUser method needs to make a copy of the user,
        // and also check that the project matches
        const user = userExtern ? (0, _util.getModularInstance)(userExtern) : null;
        if (user) _assert(user.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token" /* INVALID_AUTH */ );
        return this._updateCurrentUser(user && user._clone(this));
    }
    async _updateCurrentUser(user, skipBeforeStateCallbacks = false) {
        if (this._deleted) return;
        if (user) _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch" /* TENANT_ID_MISMATCH */ );
        if (!skipBeforeStateCallbacks) await this.beforeStateQueue.runMiddleware(user);
        return this.queue(async ()=>{
            await this.directlySetCurrentUser(user);
            this.notifyAuthListeners();
        });
    }
    async signOut() {
        // Run first, to block _setRedirectUser() if any callbacks fail.
        await this.beforeStateQueue.runMiddleware(null);
        // Clear the redirect user when signOut is called
        if (this.redirectPersistenceManager || this._popupRedirectResolver) await this._setRedirectUser(null);
        // Prevent callbacks from being called again in _updateCurrentUser, as
        // they were already called in the first line.
        return this._updateCurrentUser(null, /* skipBeforeStateCallbacks */ true);
    }
    setPersistence(persistence) {
        return this.queue(async ()=>{
            await this.assertedPersistence.setPersistence(_getInstance(persistence));
        });
    }
    _getPersistence() {
        return this.assertedPersistence.persistence.type;
    }
    _updateErrorMap(errorMap) {
        this._errorFactory = new (0, _util.ErrorFactory)("auth", "Firebase", errorMap());
    }
    onAuthStateChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
    }
    beforeAuthStateChanged(callback, onAbort) {
        return this.beforeStateQueue.pushCallback(callback, onAbort);
    }
    onIdTokenChanged(nextOrObserver, error, completed) {
        return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
    }
    toJSON() {
        var _a;
        return {
            apiKey: this.config.apiKey,
            authDomain: this.config.authDomain,
            appName: this.name,
            currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
        };
    }
    async _setRedirectUser(user, popupRedirectResolver) {
        const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
        return user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user);
    }
    async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
        if (!this.redirectPersistenceManager) {
            const resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;
            _assert(resolver, this, "argument-error" /* ARGUMENT_ERROR */ );
            this.redirectPersistenceManager = await PersistenceUserManager.create(this, [
                _getInstance(resolver._redirectPersistence)
            ], "redirectUser" /* REDIRECT_USER */ );
            this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
        }
        return this.redirectPersistenceManager;
    }
    async _redirectUserForId(id) {
        var _a, _b;
        // Make sure we've cleared any pending persistence actions if we're not in
        // the initializer
        if (this._isInitialized) await this.queue(async ()=>{});
        if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) return this._currentUser;
        if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) return this.redirectUser;
        return null;
    }
    async _persistUserIfCurrent(user) {
        if (user === this.currentUser) return this.queue(async ()=>this.directlySetCurrentUser(user));
    }
    /** Notifies listeners only if the user is current */ _notifyListenersIfCurrent(user) {
        if (user === this.currentUser) this.notifyAuthListeners();
    }
    _key() {
        return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
    }
    _startProactiveRefresh() {
        this.isProactiveRefreshEnabled = true;
        if (this.currentUser) this._currentUser._startProactiveRefresh();
    }
    _stopProactiveRefresh() {
        this.isProactiveRefreshEnabled = false;
        if (this.currentUser) this._currentUser._stopProactiveRefresh();
    }
    /** Returns the current user cast as the internal type */ get _currentUser() {
        return this.currentUser;
    }
    notifyAuthListeners() {
        var _a, _b;
        if (!this._isInitialized) return;
        this.idTokenSubscription.next(this.currentUser);
        const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
        if (this.lastNotifiedUid !== currentUid) {
            this.lastNotifiedUid = currentUid;
            this.authStateSubscription.next(this.currentUser);
        }
    }
    registerStateListener(subscription, nextOrObserver, error, completed) {
        if (this._deleted) return ()=>{};
        const cb = typeof nextOrObserver === "function" ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);
        const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;
        _assert(promise, this, "internal-error" /* INTERNAL_ERROR */ );
        // The callback needs to be called asynchronously per the spec.
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        promise.then(()=>cb(this.currentUser));
        if (typeof nextOrObserver === "function") return subscription.addObserver(nextOrObserver, error, completed);
        else return subscription.addObserver(nextOrObserver);
    }
    /**
     * Unprotected (from race conditions) method to set the current user. This
     * should only be called from within a queued callback. This is necessary
     * because the queue shouldn't rely on another queued callback.
     */ async directlySetCurrentUser(user) {
        if (this.currentUser && this.currentUser !== user) {
            this._currentUser._stopProactiveRefresh();
            if (user && this.isProactiveRefreshEnabled) user._startProactiveRefresh();
        }
        this.currentUser = user;
        if (user) await this.assertedPersistence.setCurrentUser(user);
        else await this.assertedPersistence.removeCurrentUser();
    }
    queue(action) {
        // In case something errors, the callback still should be called in order
        // to keep the promise chain alive
        this.operations = this.operations.then(action, action);
        return this.operations;
    }
    get assertedPersistence() {
        _assert(this.persistenceManager, this, "internal-error" /* INTERNAL_ERROR */ );
        return this.persistenceManager;
    }
    _logFramework(framework) {
        if (!framework || this.frameworks.includes(framework)) return;
        this.frameworks.push(framework);
        // Sort alphabetically so that "FirebaseCore-web,FirebaseUI-web" and
        // "FirebaseUI-web,FirebaseCore-web" aren't viewed as different.
        this.frameworks.sort();
        this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
    }
    _getFrameworks() {
        return this.frameworks;
    }
    async _getAdditionalHeaders() {
        var _a;
        // Additional headers on every request
        const headers = {
            ["X-Client-Version" /* X_CLIENT_VERSION */ ]: this.clientVersion
        };
        if (this.app.options.appId) headers["X-Firebase-gmpid" /* X_FIREBASE_GMPID */ ] = this.app.options.appId;
        // If the heartbeat service exists, add the heartbeat string
        const heartbeatsHeader = await ((_a = this.heartbeatServiceProvider.getImmediate({
            optional: true
        })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader());
        if (heartbeatsHeader) headers["X-Firebase-Client" /* X_FIREBASE_CLIENT */ ] = heartbeatsHeader;
        return headers;
    }
}
/**
 * Method to be used to cast down to our private implmentation of Auth.
 * It will also handle unwrapping from the compat type if necessary
 *
 * @param auth Auth object passed in from developer
 */ function _castAuth(auth) {
    return (0, _util.getModularInstance)(auth);
}
/** Helper class to wrap subscriber logic */ class Subscription {
    constructor(auth){
        this.auth = auth;
        this.observer = null;
        this.addObserver = (0, _util.createSubscribe)((observer)=>this.observer = observer);
    }
    get next() {
        _assert(this.observer, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        return this.observer.next.bind(this.observer);
    }
}
/**
 * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production
 * Firebase Auth services.
 *
 * @remarks
 * This must be called synchronously immediately following the first call to
 * {@link initializeAuth}.  Do not use with production credentials as emulator
 * traffic is not encrypted.
 *
 *
 * @example
 * ```javascript
 * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').
 * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to
 * `true` to disable the warning banner attached to the DOM.
 *
 * @public
 */ function connectAuthEmulator(auth, url, options) {
    const authInternal = _castAuth(auth);
    _assert(authInternal._canInitEmulator, authInternal, "emulator-config-failed" /* EMULATOR_CONFIG_FAILED */ );
    _assert(/^https?:\/\//.test(url), authInternal, "invalid-emulator-scheme" /* INVALID_EMULATOR_SCHEME */ );
    const disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);
    const protocol = extractProtocol(url);
    const { host , port  } = extractHostAndPort(url);
    const portStr = port === null ? "" : `:${port}`;
    // Always replace path with "/" (even if input url had no path at all, or had a different one).
    authInternal.config.emulator = {
        url: `${protocol}//${host}${portStr}/`
    };
    authInternal.settings.appVerificationDisabledForTesting = true;
    authInternal.emulatorConfig = Object.freeze({
        host,
        port,
        protocol: protocol.replace(":", ""),
        options: Object.freeze({
            disableWarnings
        })
    });
    if (!disableWarnings) emitEmulatorWarning();
}
function extractProtocol(url) {
    const protocolEnd = url.indexOf(":");
    return protocolEnd < 0 ? "" : url.substr(0, protocolEnd + 1);
}
function extractHostAndPort(url) {
    const protocol = extractProtocol(url);
    const authority = /(\/\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.
    if (!authority) return {
        host: "",
        port: null
    };
    const hostAndPort = authority[2].split("@").pop() || ""; // Strip out "username:password@".
    const bracketedIPv6 = /^(\[[^\]]+\])(:|$)/.exec(hostAndPort);
    if (bracketedIPv6) {
        const host = bracketedIPv6[1];
        return {
            host,
            port: parsePort(hostAndPort.substr(host.length + 1))
        };
    } else {
        const [host, port] = hostAndPort.split(":");
        return {
            host,
            port: parsePort(port)
        };
    }
}
function parsePort(portStr) {
    if (!portStr) return null;
    const port = Number(portStr);
    if (isNaN(port)) return null;
    return port;
}
function emitEmulatorWarning() {
    function attachBanner() {
        const el = document.createElement("p");
        const sty = el.style;
        el.innerText = "Running in emulator mode. Do not use with production credentials.";
        sty.position = "fixed";
        sty.width = "100%";
        sty.backgroundColor = "#ffffff";
        sty.border = ".1em solid #000000";
        sty.color = "#b50000";
        sty.bottom = "0px";
        sty.left = "0px";
        sty.margin = "0px";
        sty.zIndex = "10000";
        sty.textAlign = "center";
        el.classList.add("firebase-emulator-warning");
        document.body.appendChild(el);
    }
    if (typeof console !== "undefined" && typeof console.info === "function") console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials.");
    if (typeof window !== "undefined" && typeof document !== "undefined") {
        if (document.readyState === "loading") window.addEventListener("DOMContentLoaded", attachBanner);
        else attachBanner();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface that represents the credentials returned by an {@link AuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */ class AuthCredential {
    /** @internal */ constructor(/**
     * The authentication provider ID for the credential.
     *
     * @remarks
     * For example, 'facebook.com', or 'google.com'.
     */ providerId, /**
     * The authentication sign in method for the credential.
     *
     * @remarks
     * For example, {@link SignInMethod}.EMAIL_PASSWORD, or
     * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method
     * identifier as returned in {@link fetchSignInMethodsForEmail}.
     */ signInMethod){
        this.providerId = providerId;
        this.signInMethod = signInMethod;
    }
    /**
     * Returns a JSON-serializable representation of this object.
     *
     * @returns a JSON-serializable representation of this object.
     */ toJSON() {
        return debugFail("not implemented");
    }
    /** @internal */ _getIdTokenResponse(_auth) {
        return debugFail("not implemented");
    }
    /** @internal */ _linkToIdToken(_auth, _idToken) {
        return debugFail("not implemented");
    }
    /** @internal */ _getReauthenticationResolver(_auth) {
        return debugFail("not implemented");
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function resetPassword(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:resetPassword" /* RESET_PASSWORD */ , _addTidIfNecessary(auth, request));
}
async function updateEmailPassword(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:update" /* SET_ACCOUNT_INFO */ , request);
}
async function applyActionCode$1(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:update" /* SET_ACCOUNT_INFO */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signInWithPassword(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithPassword" /* SIGN_IN_WITH_PASSWORD */ , _addTidIfNecessary(auth, request));
}
async function sendOobCode(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:sendOobCode" /* SEND_OOB_CODE */ , _addTidIfNecessary(auth, request));
}
async function sendEmailVerification$1(auth, request) {
    return sendOobCode(auth, request);
}
async function sendPasswordResetEmail$1(auth, request) {
    return sendOobCode(auth, request);
}
async function sendSignInLinkToEmail$1(auth, request) {
    return sendOobCode(auth, request);
}
async function verifyAndChangeEmail(auth, request) {
    return sendOobCode(auth, request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signInWithEmailLink$1(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithEmailLink" /* SIGN_IN_WITH_EMAIL_LINK */ , _addTidIfNecessary(auth, request));
}
async function signInWithEmailLinkForLinking(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithEmailLink" /* SIGN_IN_WITH_EMAIL_LINK */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface that represents the credentials returned by {@link EmailAuthProvider} for
 * {@link ProviderId}.PASSWORD
 *
 * @remarks
 * Covers both {@link SignInMethod}.EMAIL_PASSWORD and
 * {@link SignInMethod}.EMAIL_LINK.
 *
 * @public
 */ class EmailAuthCredential extends AuthCredential {
    /** @internal */ constructor(/** @internal */ _email, /** @internal */ _password, signInMethod, /** @internal */ _tenantId = null){
        super("password" /* PASSWORD */ , signInMethod);
        this._email = _email;
        this._password = _password;
        this._tenantId = _tenantId;
    }
    /** @internal */ static _fromEmailAndPassword(email, password) {
        return new EmailAuthCredential(email, password, "password" /* EMAIL_PASSWORD */ );
    }
    /** @internal */ static _fromEmailAndCode(email, oobCode, tenantId = null) {
        return new EmailAuthCredential(email, oobCode, "emailLink" /* EMAIL_LINK */ , tenantId);
    }
    /** {@inheritdoc AuthCredential.toJSON} */ toJSON() {
        return {
            email: this._email,
            password: this._password,
            signInMethod: this.signInMethod,
            tenantId: this._tenantId
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.
     *
     * @param json - Either `object` or the stringified representation of the object. When string is
     * provided, `JSON.parse` would be called first.
     *
     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.
     */ static fromJSON(json) {
        const obj = typeof json === "string" ? JSON.parse(json) : json;
        if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
            if (obj.signInMethod === "password" /* EMAIL_PASSWORD */ ) return this._fromEmailAndPassword(obj.email, obj.password);
            else if (obj.signInMethod === "emailLink" /* EMAIL_LINK */ ) return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
        }
        return null;
    }
    /** @internal */ async _getIdTokenResponse(auth) {
        switch(this.signInMethod){
            case "password" /* EMAIL_PASSWORD */ :
                return signInWithPassword(auth, {
                    returnSecureToken: true,
                    email: this._email,
                    password: this._password
                });
            case "emailLink" /* EMAIL_LINK */ :
                return signInWithEmailLink$1(auth, {
                    email: this._email,
                    oobCode: this._password
                });
            default:
                _fail(auth, "internal-error" /* INTERNAL_ERROR */ );
        }
    }
    /** @internal */ async _linkToIdToken(auth, idToken) {
        switch(this.signInMethod){
            case "password" /* EMAIL_PASSWORD */ :
                return updateEmailPassword(auth, {
                    idToken,
                    returnSecureToken: true,
                    email: this._email,
                    password: this._password
                });
            case "emailLink" /* EMAIL_LINK */ :
                return signInWithEmailLinkForLinking(auth, {
                    idToken,
                    email: this._email,
                    oobCode: this._password
                });
            default:
                _fail(auth, "internal-error" /* INTERNAL_ERROR */ );
        }
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        return this._getIdTokenResponse(auth);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signInWithIdp(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithIdp" /* SIGN_IN_WITH_IDP */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const IDP_REQUEST_URI$1 = "http://localhost";
/**
 * Represents the OAuth credentials returned by an {@link OAuthProvider}.
 *
 * @remarks
 * Implementations specify the details about each auth provider's credential requirements.
 *
 * @public
 */ class OAuthCredential extends AuthCredential {
    constructor(){
        super(...arguments);
        this.pendingToken = null;
    }
    /** @internal */ static _fromParams(params) {
        const cred = new OAuthCredential(params.providerId, params.signInMethod);
        if (params.idToken || params.accessToken) {
            // OAuth 2 and either ID token or access token.
            if (params.idToken) cred.idToken = params.idToken;
            if (params.accessToken) cred.accessToken = params.accessToken;
            // Add nonce if available and no pendingToken is present.
            if (params.nonce && !params.pendingToken) cred.nonce = params.nonce;
            if (params.pendingToken) cred.pendingToken = params.pendingToken;
        } else if (params.oauthToken && params.oauthTokenSecret) {
            // OAuth 1 and OAuth token with token secret
            cred.accessToken = params.oauthToken;
            cred.secret = params.oauthTokenSecret;
        } else _fail("argument-error" /* ARGUMENT_ERROR */ );
        return cred;
    }
    /** {@inheritdoc AuthCredential.toJSON}  */ toJSON() {
        return {
            idToken: this.idToken,
            accessToken: this.accessToken,
            secret: this.secret,
            nonce: this.nonce,
            pendingToken: this.pendingToken,
            providerId: this.providerId,
            signInMethod: this.signInMethod
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an
     * {@link  AuthCredential}.
     *
     * @param json - Input can be either Object or the stringified representation of the object.
     * When string is provided, JSON.parse would be called first.
     *
     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
     */ static fromJSON(json) {
        const obj = typeof json === "string" ? JSON.parse(json) : json;
        const { providerId , signInMethod  } = obj, rest = (0, _tslib.__rest)(obj, [
            "providerId",
            "signInMethod"
        ]);
        if (!providerId || !signInMethod) return null;
        const cred = new OAuthCredential(providerId, signInMethod);
        cred.idToken = rest.idToken || undefined;
        cred.accessToken = rest.accessToken || undefined;
        cred.secret = rest.secret;
        cred.nonce = rest.nonce;
        cred.pendingToken = rest.pendingToken || null;
        return cred;
    }
    /** @internal */ _getIdTokenResponse(auth) {
        const request = this.buildRequest();
        return signInWithIdp(auth, request);
    }
    /** @internal */ _linkToIdToken(auth, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth, request);
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth, request);
    }
    buildRequest() {
        const request = {
            requestUri: IDP_REQUEST_URI$1,
            returnSecureToken: true
        };
        if (this.pendingToken) request.pendingToken = this.pendingToken;
        else {
            const postBody = {};
            if (this.idToken) postBody["id_token"] = this.idToken;
            if (this.accessToken) postBody["access_token"] = this.accessToken;
            if (this.secret) postBody["oauth_token_secret"] = this.secret;
            postBody["providerId"] = this.providerId;
            if (this.nonce && !this.pendingToken) postBody["nonce"] = this.nonce;
            request.postBody = (0, _util.querystring)(postBody);
        }
        return request;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function sendPhoneVerificationCode(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:sendVerificationCode" /* SEND_VERIFICATION_CODE */ , _addTidIfNecessary(auth, request));
}
async function signInWithPhoneNumber$1(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */ , _addTidIfNecessary(auth, request));
}
async function linkWithPhoneNumber$1(auth, request) {
    const response = await _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */ , _addTidIfNecessary(auth, request));
    if (response.temporaryProof) throw _makeTaggedError(auth, "account-exists-with-different-credential" /* NEED_CONFIRMATION */ , response);
    return response;
}
const VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = {
    ["USER_NOT_FOUND" /* USER_NOT_FOUND */ ]: "user-not-found" /* USER_DELETED */ 
};
async function verifyPhoneNumberForExisting(auth, request) {
    const apiRequest = Object.assign(Object.assign({}, request), {
        operation: "REAUTH"
    });
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */ , _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents the credentials returned by {@link PhoneAuthProvider}.
 *
 * @public
 */ class PhoneAuthCredential extends AuthCredential {
    constructor(params){
        super("phone" /* PHONE */ , "phone" /* PHONE */ );
        this.params = params;
    }
    /** @internal */ static _fromVerification(verificationId, verificationCode) {
        return new PhoneAuthCredential({
            verificationId,
            verificationCode
        });
    }
    /** @internal */ static _fromTokenResponse(phoneNumber, temporaryProof) {
        return new PhoneAuthCredential({
            phoneNumber,
            temporaryProof
        });
    }
    /** @internal */ _getIdTokenResponse(auth) {
        return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());
    }
    /** @internal */ _linkToIdToken(auth, idToken) {
        return linkWithPhoneNumber$1(auth, Object.assign({
            idToken
        }, this._makeVerificationRequest()));
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());
    }
    /** @internal */ _makeVerificationRequest() {
        const { temporaryProof , phoneNumber , verificationId , verificationCode  } = this.params;
        if (temporaryProof && phoneNumber) return {
            temporaryProof,
            phoneNumber
        };
        return {
            sessionInfo: verificationId,
            code: verificationCode
        };
    }
    /** {@inheritdoc AuthCredential.toJSON} */ toJSON() {
        const obj = {
            providerId: this.providerId
        };
        if (this.params.phoneNumber) obj.phoneNumber = this.params.phoneNumber;
        if (this.params.temporaryProof) obj.temporaryProof = this.params.temporaryProof;
        if (this.params.verificationCode) obj.verificationCode = this.params.verificationCode;
        if (this.params.verificationId) obj.verificationId = this.params.verificationId;
        return obj;
    }
    /** Generates a phone credential based on a plain object or a JSON string. */ static fromJSON(json) {
        if (typeof json === "string") json = JSON.parse(json);
        const { verificationId , verificationCode , phoneNumber , temporaryProof  } = json;
        if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) return null;
        return new PhoneAuthCredential({
            verificationId,
            verificationCode,
            phoneNumber,
            temporaryProof
        });
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Maps the mode string in action code URL to Action Code Info operation.
 *
 * @param mode
 */ function parseMode(mode) {
    switch(mode){
        case "recoverEmail":
            return "RECOVER_EMAIL" /* RECOVER_EMAIL */ ;
        case "resetPassword":
            return "PASSWORD_RESET" /* PASSWORD_RESET */ ;
        case "signIn":
            return "EMAIL_SIGNIN" /* EMAIL_SIGNIN */ ;
        case "verifyEmail":
            return "VERIFY_EMAIL" /* VERIFY_EMAIL */ ;
        case "verifyAndChangeEmail":
            return "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */ ;
        case "revertSecondFactorAddition":
            return "REVERT_SECOND_FACTOR_ADDITION" /* REVERT_SECOND_FACTOR_ADDITION */ ;
        default:
            return null;
    }
}
/**
 * Helper to parse FDL links
 *
 * @param url
 */ function parseDeepLink(url) {
    const link = (0, _util.querystringDecode)((0, _util.extractQuerystring)(url))["link"];
    // Double link case (automatic redirect).
    const doubleDeepLink = link ? (0, _util.querystringDecode)((0, _util.extractQuerystring)(link))["deep_link_id"] : null;
    // iOS custom scheme links.
    const iOSDeepLink = (0, _util.querystringDecode)((0, _util.extractQuerystring)(url))["deep_link_id"];
    const iOSDoubleDeepLink = iOSDeepLink ? (0, _util.querystringDecode)((0, _util.extractQuerystring)(iOSDeepLink))["link"] : null;
    return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
}
/**
 * A utility class to parse email action URLs such as password reset, email verification,
 * email link sign in, etc.
 *
 * @public
 */ class ActionCodeURL {
    /**
     * @param actionLink - The link from which to extract the URL.
     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
     *
     * @internal
     */ constructor(actionLink){
        var _a, _b, _c, _d, _e, _f;
        const searchParams = (0, _util.querystringDecode)((0, _util.extractQuerystring)(actionLink));
        const apiKey = (_a = searchParams["apiKey" /* API_KEY */ ]) !== null && _a !== void 0 ? _a : null;
        const code = (_b = searchParams["oobCode" /* CODE */ ]) !== null && _b !== void 0 ? _b : null;
        const operation = parseMode((_c = searchParams["mode" /* MODE */ ]) !== null && _c !== void 0 ? _c : null);
        // Validate API key, code and mode.
        _assert(apiKey && code && operation, "argument-error" /* ARGUMENT_ERROR */ );
        this.apiKey = apiKey;
        this.operation = operation;
        this.code = code;
        this.continueUrl = (_d = searchParams["continueUrl" /* CONTINUE_URL */ ]) !== null && _d !== void 0 ? _d : null;
        this.languageCode = (_e = searchParams["languageCode" /* LANGUAGE_CODE */ ]) !== null && _e !== void 0 ? _e : null;
        this.tenantId = (_f = searchParams["tenantId" /* TENANT_ID */ ]) !== null && _f !== void 0 ? _f : null;
    }
    /**
     * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,
     * otherwise returns null.
     *
     * @param link  - The email action link string.
     * @returns The {@link ActionCodeURL} object, or null if the link is invalid.
     *
     * @public
     */ static parseLink(link) {
        const actionLink = parseDeepLink(link);
        try {
            return new ActionCodeURL(actionLink);
        } catch (_a) {
            return null;
        }
    }
}
/**
 * Parses the email action link string and returns an {@link ActionCodeURL} if
 * the link is valid, otherwise returns null.
 *
 * @public
 */ function parseActionCodeURL(link) {
    return ActionCodeURL.parseLink(link);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating {@link EmailAuthCredential}.
 *
 * @public
 */ class EmailAuthProvider {
    constructor(){
        /**
         * Always set to {@link ProviderId}.PASSWORD, even for email link.
         */ this.providerId = EmailAuthProvider.PROVIDER_ID;
    }
    /**
     * Initialize an {@link AuthCredential} using an email and password.
     *
     * @example
     * ```javascript
     * const authCredential = EmailAuthProvider.credential(email, password);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * ```javascript
     * const userCredential = await signInWithEmailAndPassword(auth, email, password);
     * ```
     *
     * @param email - Email address.
     * @param password - User account password.
     * @returns The auth provider credential.
     */ static credential(email, password) {
        return EmailAuthCredential._fromEmailAndPassword(email, password);
    }
    /**
     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with
     * email link operation.
     *
     * @example
     * ```javascript
     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * ```javascript
     * await sendSignInLinkToEmail(auth, email);
     * // Obtain emailLink from user.
     * const userCredential = await signInWithEmailLink(auth, email, emailLink);
     * ```
     *
     * @param auth - The {@link Auth} instance used to verify the link.
     * @param email - Email address.
     * @param emailLink - Sign-in email link.
     * @returns - The auth provider credential.
     */ static credentialWithLink(email, emailLink) {
        const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
        _assert(actionCodeUrl, "argument-error" /* ARGUMENT_ERROR */ );
        return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
    }
}
/**
 * Always set to {@link ProviderId}.PASSWORD, even for email link.
 */ EmailAuthProvider.PROVIDER_ID = "password" /* PASSWORD */ ;
/**
 * Always set to {@link SignInMethod}.EMAIL_PASSWORD.
 */ EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password" /* EMAIL_PASSWORD */ ;
/**
 * Always set to {@link SignInMethod}.EMAIL_LINK.
 */ EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink" /* EMAIL_LINK */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The base class for all Federated providers (OAuth (including OIDC), SAML).
 *
 * This class is not meant to be instantiated directly.
 *
 * @public
 */ class FederatedAuthProvider {
    /**
     * Constructor for generic OAuth providers.
     *
     * @param providerId - Provider for which credentials should be generated.
     */ constructor(providerId){
        this.providerId = providerId;
        /** @internal */ this.defaultLanguageCode = null;
        /** @internal */ this.customParameters = {};
    }
    /**
     * Set the language gode.
     *
     * @param languageCode - language code
     */ setDefaultLanguage(languageCode) {
        this.defaultLanguageCode = languageCode;
    }
    /**
     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
     * operations.
     *
     * @remarks
     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
     *
     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
     */ setCustomParameters(customOAuthParameters) {
        this.customParameters = customOAuthParameters;
        return this;
    }
    /**
     * Retrieve the current list of {@link CustomParameters}.
     */ getCustomParameters() {
        return this.customParameters;
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Common code to all OAuth providers. This is separate from the
 * {@link OAuthProvider} so that child providers (like
 * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.
 * Instead, they rely on a static `credential` method.
 */ class BaseOAuthProvider extends FederatedAuthProvider {
    constructor(){
        super(...arguments);
        /** @internal */ this.scopes = [];
    }
    /**
     * Add an OAuth scope to the credential.
     *
     * @param scope - Provider OAuth scope to add.
     */ addScope(scope) {
        // If not already added, add scope to list.
        if (!this.scopes.includes(scope)) this.scopes.push(scope);
        return this;
    }
    /**
     * Retrieve the current list of OAuth scopes.
     */ getScopes() {
        return [
            ...this.scopes
        ];
    }
}
/**
 * Provider for generating generic {@link OAuthCredential}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new OAuthProvider('google.com');
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a OAuth Access Token for the provider.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new OAuthProvider('google.com');
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a OAuth Access Token for the provider.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 * @public
 */ class OAuthProvider extends BaseOAuthProvider {
    /**
     * Creates an {@link OAuthCredential} from a JSON string or a plain object.
     * @param json - A plain object or a JSON string
     */ static credentialFromJSON(json) {
        const obj = typeof json === "string" ? JSON.parse(json) : json;
        _assert("providerId" in obj && "signInMethod" in obj, "argument-error" /* ARGUMENT_ERROR */ );
        return OAuthCredential._fromParams(obj);
    }
    /**
     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.
     *
     * @remarks
     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of
     * the raw nonce must match the nonce field in the ID token.
     *
     * @example
     * ```javascript
     * // `googleUser` from the onsuccess Google Sign In callback.
     * // Initialize a generate OAuth provider with a `google.com` providerId.
     * const provider = new OAuthProvider('google.com');
     * const credential = provider.credential({
     *   idToken: googleUser.getAuthResponse().id_token,
     * });
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param params - Either the options object containing the ID token, access token and raw nonce
     * or the ID token string.
     */ credential(params) {
        return this._credential(Object.assign(Object.assign({}, params), {
            nonce: params.rawNonce
        }));
    }
    /** An internal credential method that accepts more permissive options */ _credential(params) {
        _assert(params.idToken || params.accessToken, "argument-error" /* ARGUMENT_ERROR */ );
        // For OAuthCredential, sign in method is same as providerId.
        return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), {
            providerId: this.providerId,
            signInMethod: this.providerId
        }));
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});
    }
    static oauthCredentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse) return null;
        const { oauthIdToken , oauthAccessToken , oauthTokenSecret , pendingToken , nonce , providerId  } = tokenResponse;
        if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) return null;
        if (!providerId) return null;
        try {
            return new OAuthProvider(providerId)._credential({
                idToken: oauthIdToken,
                accessToken: oauthAccessToken,
                nonce,
                pendingToken
            });
        } catch (e) {
            return null;
        }
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('user_birthday');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = FacebookAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * provider.addScope('user_birthday');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = FacebookAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */ class FacebookAuthProvider extends BaseOAuthProvider {
    constructor(){
        super("facebook.com" /* FACEBOOK */ );
    }
    /**
     * Creates a credential for Facebook.
     *
     * @example
     * ```javascript
     * // `event` from the Facebook auth.authResponseChange callback.
     * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param accessToken - Facebook access token.
     */ static credential(accessToken) {
        return OAuthCredential._fromParams({
            providerId: FacebookAuthProvider.PROVIDER_ID,
            signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
            accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse || !("oauthAccessToken" in tokenResponse)) return null;
        if (!tokenResponse.oauthAccessToken) return null;
        try {
            return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
        } catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.FACEBOOK. */ FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com" /* FACEBOOK */ ;
/** Always set to {@link ProviderId}.FACEBOOK. */ FacebookAuthProvider.PROVIDER_ID = "facebook.com" /* FACEBOOK */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GoogleAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('profile');
 * provider.addScope('email');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Google Access Token.
 *   const credential = GoogleAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GoogleAuthProvider();
 * provider.addScope('profile');
 * provider.addScope('email');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Google Access Token.
 * const credential = GoogleAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 *
 * @public
 */ class GoogleAuthProvider extends BaseOAuthProvider {
    constructor(){
        super("google.com" /* GOOGLE */ );
        this.addScope("profile");
    }
    /**
     * Creates a credential for Google. At least one of ID token and access token is required.
     *
     * @example
     * ```javascript
     * // \`googleUser\` from the onsuccess Google Sign In callback.
     * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
     * const result = await signInWithCredential(credential);
     * ```
     *
     * @param idToken - Google ID token.
     * @param accessToken - Google access token.
     */ static credential(idToken, accessToken) {
        return OAuthCredential._fromParams({
            providerId: GoogleAuthProvider.PROVIDER_ID,
            signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
            idToken,
            accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse) return null;
        const { oauthIdToken , oauthAccessToken  } = tokenResponse;
        if (!oauthIdToken && !oauthAccessToken) // This could be an oauth 1 credential or a phone credential
        return null;
        try {
            return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
        } catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.GOOGLE. */ GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com" /* GOOGLE */ ;
/** Always set to {@link ProviderId}.GOOGLE. */ GoogleAuthProvider.PROVIDER_ID = "google.com" /* GOOGLE */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.
 *
 * @remarks
 * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use
 * the {@link signInWithPopup} handler:
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new GithubAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * provider.addScope('repo');
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Github Access Token.
 *   const credential = GithubAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new GithubAuthProvider();
 * provider.addScope('repo');
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Github Access Token.
 * const credential = GithubAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * ```
 * @public
 */ class GithubAuthProvider extends BaseOAuthProvider {
    constructor(){
        super("github.com" /* GITHUB */ );
    }
    /**
     * Creates a credential for Github.
     *
     * @param accessToken - Github access token.
     */ static credential(accessToken) {
        return OAuthCredential._fromParams({
            providerId: GithubAuthProvider.PROVIDER_ID,
            signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
            accessToken
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return GithubAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse || !("oauthAccessToken" in tokenResponse)) return null;
        if (!tokenResponse.oauthAccessToken) return null;
        try {
            return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
        } catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.GITHUB. */ GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com" /* GITHUB */ ;
/** Always set to {@link ProviderId}.GITHUB. */ GithubAuthProvider.PROVIDER_ID = "github.com" /* GITHUB */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const IDP_REQUEST_URI = "http://localhost";
/**
 * @public
 */ class SAMLAuthCredential extends AuthCredential {
    /** @internal */ constructor(providerId, pendingToken){
        super(providerId, providerId);
        this.pendingToken = pendingToken;
    }
    /** @internal */ _getIdTokenResponse(auth) {
        const request = this.buildRequest();
        return signInWithIdp(auth, request);
    }
    /** @internal */ _linkToIdToken(auth, idToken) {
        const request = this.buildRequest();
        request.idToken = idToken;
        return signInWithIdp(auth, request);
    }
    /** @internal */ _getReauthenticationResolver(auth) {
        const request = this.buildRequest();
        request.autoCreate = false;
        return signInWithIdp(auth, request);
    }
    /** {@inheritdoc AuthCredential.toJSON}  */ toJSON() {
        return {
            signInMethod: this.signInMethod,
            providerId: this.providerId,
            pendingToken: this.pendingToken
        };
    }
    /**
     * Static method to deserialize a JSON representation of an object into an
     * {@link  AuthCredential}.
     *
     * @param json - Input can be either Object or the stringified representation of the object.
     * When string is provided, JSON.parse would be called first.
     *
     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.
     */ static fromJSON(json) {
        const obj = typeof json === "string" ? JSON.parse(json) : json;
        const { providerId , signInMethod , pendingToken  } = obj;
        if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) return null;
        return new SAMLAuthCredential(providerId, pendingToken);
    }
    /**
     * Helper static method to avoid exposing the constructor to end users.
     *
     * @internal
     */ static _create(providerId, pendingToken) {
        return new SAMLAuthCredential(providerId, pendingToken);
    }
    buildRequest() {
        return {
            requestUri: IDP_REQUEST_URI,
            returnSecureToken: true,
            pendingToken: this.pendingToken
        };
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const SAML_PROVIDER_PREFIX = "saml.";
/**
 * An {@link AuthProvider} for SAML.
 *
 * @public
 */ class SAMLAuthProvider extends FederatedAuthProvider {
    /**
     * Constructor. The providerId must start with "saml."
     * @param providerId - SAML provider ID.
     */ constructor(providerId){
        _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), "argument-error" /* ARGUMENT_ERROR */ );
        super(providerId);
    }
    /**
     * Generates an {@link AuthCredential} from a {@link UserCredential} after a
     * successful SAML flow completes.
     *
     * @remarks
     *
     * For example, to get an {@link AuthCredential}, you could write the
     * following code:
     *
     * ```js
     * const userCredential = await signInWithPopup(auth, samlProvider);
     * const credential = SAMLAuthProvider.credentialFromResult(userCredential);
     * ```
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});
    }
    /**
     * Creates an {@link AuthCredential} from a JSON string or a plain object.
     * @param json - A plain object or a JSON string
     */ static credentialFromJSON(json) {
        const credential = SAMLAuthCredential.fromJSON(json);
        _assert(credential, "argument-error" /* ARGUMENT_ERROR */ );
        return credential;
    }
    static samlCredentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse) return null;
        const { pendingToken , providerId  } = tokenResponse;
        if (!pendingToken || !providerId) return null;
        try {
            return SAMLAuthCredential._create(providerId, pendingToken);
        } catch (e) {
            return null;
        }
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new TwitterAuthProvider();
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Twitter Access Token and Secret.
 *   const credential = TwitterAuthProvider.credentialFromResult(result);
 *   const token = credential.accessToken;
 *   const secret = credential.secret;
 * }
 * ```
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new TwitterAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Twitter Access Token and Secret.
 * const credential = TwitterAuthProvider.credentialFromResult(result);
 * const token = credential.accessToken;
 * const secret = credential.secret;
 * ```
 *
 * @public
 */ class TwitterAuthProvider extends BaseOAuthProvider {
    constructor(){
        super("twitter.com" /* TWITTER */ );
    }
    /**
     * Creates a credential for Twitter.
     *
     * @param token - Twitter access token.
     * @param secret - Twitter secret.
     */ static credential(token, secret) {
        return OAuthCredential._fromParams({
            providerId: TwitterAuthProvider.PROVIDER_ID,
            signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
            oauthToken: token,
            oauthTokenSecret: secret
        });
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.
     *
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
    }
    /**
     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was
     * thrown during a sign-in, link, or reauthenticate operation.
     *
     * @param userCredential - The user credential.
     */ static credentialFromError(error) {
        return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse) return null;
        const { oauthAccessToken , oauthTokenSecret  } = tokenResponse;
        if (!oauthAccessToken || !oauthTokenSecret) return null;
        try {
            return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
        } catch (_a) {
            return null;
        }
    }
}
/** Always set to {@link SignInMethod}.TWITTER. */ TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com" /* TWITTER */ ;
/** Always set to {@link ProviderId}.TWITTER. */ TwitterAuthProvider.PROVIDER_ID = "twitter.com" /* TWITTER */ ;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signUp(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signUp" /* SIGN_UP */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class UserCredentialImpl {
    constructor(params){
        this.user = params.user;
        this.providerId = params.providerId;
        this._tokenResponse = params._tokenResponse;
        this.operationType = params.operationType;
    }
    static async _fromIdTokenResponse(auth, operationType, idTokenResponse, isAnonymous = false) {
        const user = await UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);
        const providerId = providerIdForResponse(idTokenResponse);
        const userCred = new UserCredentialImpl({
            user,
            providerId,
            _tokenResponse: idTokenResponse,
            operationType
        });
        return userCred;
    }
    static async _forOperation(user, operationType, response) {
        await user._updateTokensIfNecessary(response, /* reload */ true);
        const providerId = providerIdForResponse(response);
        return new UserCredentialImpl({
            user,
            providerId,
            _tokenResponse: response,
            operationType
        });
    }
}
function providerIdForResponse(response) {
    if (response.providerId) return response.providerId;
    if ("phoneNumber" in response) return "phone" /* PHONE */ ;
    return null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Asynchronously signs in as an anonymous user.
 *
 * @remarks
 * If there is already an anonymous user signed in, that user will be returned; otherwise, a
 * new anonymous user identity will be created and returned.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ async function signInAnonymously(auth) {
    var _a;
    const authInternal = _castAuth(auth);
    await authInternal._initializationPromise;
    if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) // If an anonymous user is already signed in, no need to sign them in again.
    return new UserCredentialImpl({
        user: authInternal.currentUser,
        providerId: null,
        operationType: "signIn" /* SIGN_IN */ 
    });
    const response = await signUp(authInternal, {
        returnSecureToken: true
    });
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */ , response, true);
    await authInternal._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class MultiFactorError extends (0, _util.FirebaseError) {
    constructor(auth, error, operationType, user){
        var _a;
        super(error.code, error.message);
        this.operationType = operationType;
        this.user = user;
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, MultiFactorError.prototype);
        this.customData = {
            appName: auth.name,
            tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,
            _serverResponse: error.customData._serverResponse,
            operationType
        };
    }
    static _fromErrorAndOperation(auth, error, operationType, user) {
        return new MultiFactorError(auth, error, operationType, user);
    }
}
function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
    const idTokenProvider = operationType === "reauthenticate" /* REAUTHENTICATE */  ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);
    return idTokenProvider.catch((error)=>{
        if (error.code === `auth/${"multi-factor-auth-required" /* MFA_REQUIRED */ }`) throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
        throw error;
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Takes a set of UserInfo provider data and converts it to a set of names
 */ function providerDataAsNames(providerData) {
    return new Set(providerData.map(({ providerId  })=>providerId).filter((pid)=>!!pid));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Unlinks a provider from a user account.
 *
 * @param user - The user.
 * @param providerId - The provider to unlink.
 *
 * @public
 */ async function unlink(user, providerId) {
    const userInternal = (0, _util.getModularInstance)(user);
    await _assertLinkedStatus(true, userInternal, providerId);
    const { providerUserInfo  } = await deleteLinkedAccounts(userInternal.auth, {
        idToken: await userInternal.getIdToken(),
        deleteProvider: [
            providerId
        ]
    });
    const providersLeft = providerDataAsNames(providerUserInfo || []);
    userInternal.providerData = userInternal.providerData.filter((pd)=>providersLeft.has(pd.providerId));
    if (!providersLeft.has("phone" /* PHONE */ )) userInternal.phoneNumber = null;
    await userInternal.auth._persistUserIfCurrent(userInternal);
    return userInternal;
}
async function _link$1(user, credential, bypassAuthState = false) {
    const response = await _logoutIfInvalidated(user, credential._linkToIdToken(user.auth, await user.getIdToken()), bypassAuthState);
    return UserCredentialImpl._forOperation(user, "link" /* LINK */ , response);
}
async function _assertLinkedStatus(expected, user, provider) {
    await _reloadWithoutSaving(user);
    const providerIds = providerDataAsNames(user.providerData);
    const code = expected === false ? "provider-already-linked" /* PROVIDER_ALREADY_LINKED */  : "no-such-provider" /* NO_SUCH_PROVIDER */ ;
    _assert(providerIds.has(provider) === expected, user.auth, code);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _reauthenticate(user, credential, bypassAuthState = false) {
    var _a;
    const { auth  } = user;
    const operationType = "reauthenticate" /* REAUTHENTICATE */ ;
    try {
        const response = await _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);
        _assert(response.idToken, auth, "internal-error" /* INTERNAL_ERROR */ );
        const parsed = _parseToken(response.idToken);
        _assert(parsed, auth, "internal-error" /* INTERNAL_ERROR */ );
        const { sub: localId  } = parsed;
        _assert(user.uid === localId, auth, "user-mismatch" /* USER_MISMATCH */ );
        return UserCredentialImpl._forOperation(user, operationType, response);
    } catch (e) {
        // Convert user deleted error into user mismatch
        if (((_a = e) === null || _a === void 0 ? void 0 : _a.code) === `auth/${"user-not-found" /* USER_DELETED */ }`) _fail(auth, "user-mismatch" /* USER_MISMATCH */ );
        throw e;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _signInWithCredential(auth, credential, bypassAuthState = false) {
    const operationType = "signIn" /* SIGN_IN */ ;
    const response = await _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);
    if (!bypassAuthState) await auth._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * Asynchronously signs in with the given credentials.
 *
 * @remarks
 * An {@link AuthProvider} can be used to generate the credential.
 *
 * @param auth - The {@link Auth} instance.
 * @param credential - The auth credential.
 *
 * @public
 */ async function signInWithCredential(auth, credential) {
    return _signInWithCredential(_castAuth(auth), credential);
}
/**
 * Links the user account with the given credentials.
 *
 * @remarks
 * An {@link AuthProvider} can be used to generate the credential.
 *
 * @param user - The user.
 * @param credential - The auth credential.
 *
 * @public
 */ async function linkWithCredential(user, credential) {
    const userInternal = (0, _util.getModularInstance)(user);
    await _assertLinkedStatus(false, userInternal, credential.providerId);
    return _link$1(userInternal, credential);
}
/**
 * Re-authenticates a user using a fresh credential.
 *
 * @remarks
 * Use before operations such as {@link updatePassword} that require tokens from recent sign-in
 * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error.
 *
 * @param user - The user.
 * @param credential - The auth credential.
 *
 * @public
 */ async function reauthenticateWithCredential(user, credential) {
    return _reauthenticate((0, _util.getModularInstance)(user), credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function signInWithCustomToken$1(auth, request) {
    return _performSignInRequest(auth, "POST" /* POST */ , "/v1/accounts:signInWithCustomToken" /* SIGN_IN_WITH_CUSTOM_TOKEN */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Asynchronously signs in using a custom token.
 *
 * @remarks
 * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must
 * be generated by an auth backend using the
 * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}
 * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .
 *
 * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.
 *
 * @param auth - The {@link Auth} instance.
 * @param customToken - The custom token to sign in with.
 *
 * @public
 */ async function signInWithCustomToken(auth, customToken) {
    const authInternal = _castAuth(auth);
    const response = await signInWithCustomToken$1(authInternal, {
        token: customToken,
        returnSecureToken: true
    });
    const cred = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */ , response);
    await authInternal._updateCurrentUser(cred.user);
    return cred;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class MultiFactorInfoImpl {
    constructor(factorId, response){
        this.factorId = factorId;
        this.uid = response.mfaEnrollmentId;
        this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
        this.displayName = response.displayName;
    }
    static _fromServerResponse(auth, enrollment) {
        if ("phoneInfo" in enrollment) return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);
        return _fail(auth, "internal-error" /* INTERNAL_ERROR */ );
    }
}
class PhoneMultiFactorInfoImpl extends MultiFactorInfoImpl {
    constructor(response){
        super("phone" /* PHONE */ , response);
        this.phoneNumber = response.phoneInfo;
    }
    static _fromServerResponse(_auth, enrollment) {
        return new PhoneMultiFactorInfoImpl(enrollment);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {
    var _a;
    _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, "invalid-continue-uri" /* INVALID_CONTINUE_URI */ );
    _assert(typeof actionCodeSettings.dynamicLinkDomain === "undefined" || actionCodeSettings.dynamicLinkDomain.length > 0, auth, "invalid-dynamic-link-domain" /* INVALID_DYNAMIC_LINK_DOMAIN */ );
    request.continueUrl = actionCodeSettings.url;
    request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
    request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;
    if (actionCodeSettings.iOS) {
        _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, "missing-ios-bundle-id" /* MISSING_IOS_BUNDLE_ID */ );
        request.iOSBundleId = actionCodeSettings.iOS.bundleId;
    }
    if (actionCodeSettings.android) {
        _assert(actionCodeSettings.android.packageName.length > 0, auth, "missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */ );
        request.androidInstallApp = actionCodeSettings.android.installApp;
        request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;
        request.androidPackageName = actionCodeSettings.android.packageName;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Sends a password reset email to the given email address.
 *
 * @remarks
 * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in
 * the email sent to the user, along with the new password specified by the user.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain code from user.
 * await confirmPasswordReset('user@example.com', code);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function sendPasswordResetEmail(auth, email, actionCodeSettings) {
    const authModular = (0, _util.getModularInstance)(auth);
    const request = {
        requestType: "PASSWORD_RESET" /* PASSWORD_RESET */ ,
        email
    };
    if (actionCodeSettings) _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);
    await sendPasswordResetEmail$1(authModular, request);
}
/**
 * Completes the password reset process, given a confirmation code and new password.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A confirmation code sent to the user.
 * @param newPassword - The new password.
 *
 * @public
 */ async function confirmPasswordReset(auth, oobCode, newPassword) {
    await resetPassword((0, _util.getModularInstance)(auth), {
        oobCode,
        newPassword
    });
// Do not return the email.
}
/**
 * Applies a verification code sent to the user by email or other out-of-band mechanism.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A verification code sent to the user.
 *
 * @public
 */ async function applyActionCode(auth, oobCode) {
    await applyActionCode$1((0, _util.getModularInstance)(auth), {
        oobCode
    });
}
/**
 * Checks a verification code sent to the user by email or other out-of-band mechanism.
 *
 * @returns metadata about the code.
 *
 * @param auth - The {@link Auth} instance.
 * @param oobCode - A verification code sent to the user.
 *
 * @public
 */ async function checkActionCode(auth, oobCode) {
    const authModular = (0, _util.getModularInstance)(auth);
    const response = await resetPassword(authModular, {
        oobCode
    });
    // Email could be empty only if the request type is EMAIL_SIGNIN or
    // VERIFY_AND_CHANGE_EMAIL.
    // New email should not be empty if the request type is
    // VERIFY_AND_CHANGE_EMAIL.
    // Multi-factor info could not be empty if the request type is
    // REVERT_SECOND_FACTOR_ADDITION.
    const operation = response.requestType;
    _assert(operation, authModular, "internal-error" /* INTERNAL_ERROR */ );
    switch(operation){
        case "EMAIL_SIGNIN" /* EMAIL_SIGNIN */ :
            break;
        case "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */ :
            _assert(response.newEmail, authModular, "internal-error" /* INTERNAL_ERROR */ );
            break;
        case "REVERT_SECOND_FACTOR_ADDITION" /* REVERT_SECOND_FACTOR_ADDITION */ :
            _assert(response.mfaInfo, authModular, "internal-error" /* INTERNAL_ERROR */ );
        // fall through
        default:
            _assert(response.email, authModular, "internal-error" /* INTERNAL_ERROR */ );
    }
    // The multi-factor info for revert second factor addition
    let multiFactorInfo = null;
    if (response.mfaInfo) multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);
    return {
        data: {
            email: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */  ? response.newEmail : response.email) || null,
            previousEmail: (response.requestType === "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */  ? response.email : response.newEmail) || null,
            multiFactorInfo
        },
        operation
    };
}
/**
 * Checks a password reset code sent to the user by email or other out-of-band mechanism.
 *
 * @returns the user's email address if valid.
 *
 * @param auth - The {@link Auth} instance.
 * @param code - A verification code sent to the user.
 *
 * @public
 */ async function verifyPasswordResetCode(auth, code) {
    const { data  } = await checkActionCode((0, _util.getModularInstance)(auth), code);
    // Email should always be present since a code was sent to it
    return data.email;
}
/**
 * Creates a new user account associated with the specified email address and password.
 *
 * @remarks
 * On successful creation of the user account, this user will also be signed in to your application.
 *
 * User account creation can fail if the account already exists or the password is invalid.
 *
 * Note: The email address acts as a unique identifier for the user and enables an email-based
 * password reset. This function will create a new user account and set the initial user password.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param password - The user's chosen password.
 *
 * @public
 */ async function createUserWithEmailAndPassword(auth, email, password) {
    const authInternal = _castAuth(auth);
    const response = await signUp(authInternal, {
        returnSecureToken: true,
        email,
        password
    });
    const userCredential = await UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */ , response);
    await authInternal._updateCurrentUser(userCredential.user);
    return userCredential;
}
/**
 * Asynchronously signs in using an email and password.
 *
 * @remarks
 * Fails with an error if the email address and password do not match.
 *
 * Note: The user's password is NOT the password used to access the user's email account. The
 * email address serves as a unique identifier for the user, and the password is used to access
 * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The users email address.
 * @param password - The users password.
 *
 * @public
 */ function signInWithEmailAndPassword(auth, email, password) {
    return signInWithCredential((0, _util.getModularInstance)(auth), EmailAuthProvider.credential(email, password));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Sends a sign-in email link to the user with the specified email.
 *
 * @remarks
 * The sign-in operation has to always be completed in the app unlike other out of band email
 * actions (password reset and email verifications). This is because, at the end of the flow,
 * the user is expected to be signed in and their Auth state persisted within the app.
 *
 * To complete sign in with the email link, call {@link signInWithEmailLink} with the email
 * address and the email link supplied in the email sent to the user.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain emailLink from the user.
 * if(isSignInWithEmailLink(auth, emailLink)) {
 *   await signInWithEmailLink(auth, 'user@example.com', emailLink);
 * }
 * ```
 *
 * @param authInternal - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function sendSignInLinkToEmail(auth, email, actionCodeSettings) {
    const authModular = (0, _util.getModularInstance)(auth);
    const request = {
        requestType: "EMAIL_SIGNIN" /* EMAIL_SIGNIN */ ,
        email
    };
    _assert(actionCodeSettings.handleCodeInApp, authModular, "argument-error" /* ARGUMENT_ERROR */ );
    if (actionCodeSettings) _setActionCodeSettingsOnRequest(authModular, request, actionCodeSettings);
    await sendSignInLinkToEmail$1(authModular, request);
}
/**
 * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.
 *
 * @param auth - The {@link Auth} instance.
 * @param emailLink - The link sent to the user's email address.
 *
 * @public
 */ function isSignInWithEmailLink(auth, emailLink) {
    const actionCodeUrl = ActionCodeURL.parseLink(emailLink);
    return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === "EMAIL_SIGNIN" /* EMAIL_SIGNIN */ ;
}
/**
 * Asynchronously signs in using an email and sign-in email link.
 *
 * @remarks
 * If no link is passed, the link is inferred from the current URL.
 *
 * Fails with an error if the email address is invalid or OTP in email link expires.
 *
 * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
 * // Obtain emailLink from the user.
 * if(isSignInWithEmailLink(auth, emailLink)) {
 *   await signInWithEmailLink(auth, 'user@example.com', emailLink);
 * }
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 * @param emailLink - The link sent to the user's email address.
 *
 * @public
 */ async function signInWithEmailLink(auth, email, emailLink) {
    const authModular = (0, _util.getModularInstance)(auth);
    const credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());
    // Check if the tenant ID in the email link matches the tenant ID on Auth
    // instance.
    _assert(credential._tenantId === (authModular.tenantId || null), authModular, "tenant-id-mismatch" /* TENANT_ID_MISMATCH */ );
    return signInWithCredential(authModular, credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function createAuthUri(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:createAuthUri" /* CREATE_AUTH_URI */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Gets the list of possible sign in methods for the given email address.
 *
 * @remarks
 * This is useful to differentiate methods of sign-in for the same provider, eg.
 * {@link EmailAuthProvider} which has 2 methods of sign-in,
 * {@link SignInMethod}.EMAIL_PASSWORD and
 * {@link SignInMethod}.EMAIL_LINK.
 *
 * @param auth - The {@link Auth} instance.
 * @param email - The user's email address.
 *
 * @public
 */ async function fetchSignInMethodsForEmail(auth, email) {
    // createAuthUri returns an error if continue URI is not http or https.
    // For environments like Cordova, Chrome extensions, native frameworks, file
    // systems, etc, use http://localhost as continue URL.
    const continueUri = _isHttpOrHttps() ? _getCurrentUrl() : "http://localhost";
    const request = {
        identifier: email,
        continueUri
    };
    const { signinMethods  } = await createAuthUri((0, _util.getModularInstance)(auth), request);
    return signinMethods || [];
}
/**
 * Sends a verification email to a user.
 *
 * @remarks
 * The verification process is completed by calling {@link applyActionCode}.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await sendEmailVerification(user, actionCodeSettings);
 * // Obtain code from the user.
 * await applyActionCode(auth, code);
 * ```
 *
 * @param user - The user.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function sendEmailVerification(user, actionCodeSettings) {
    const userInternal = (0, _util.getModularInstance)(user);
    const idToken = await user.getIdToken();
    const request = {
        requestType: "VERIFY_EMAIL" /* VERIFY_EMAIL */ ,
        idToken
    };
    if (actionCodeSettings) _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
    const { email  } = await sendEmailVerification$1(userInternal.auth, request);
    if (email !== user.email) await user.reload();
}
/**
 * Sends a verification email to a new email address.
 *
 * @remarks
 * The user's email will be updated to the new one after being verified.
 *
 * If you have a custom email action handler, you can complete the verification process by calling
 * {@link applyActionCode}.
 *
 * @example
 * ```javascript
 * const actionCodeSettings = {
 *   url: 'https://www.example.com/?email=user@example.com',
 *   iOS: {
 *      bundleId: 'com.example.ios'
 *   },
 *   android: {
 *     packageName: 'com.example.android',
 *     installApp: true,
 *     minimumVersion: '12'
 *   },
 *   handleCodeInApp: true
 * };
 * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);
 * // Obtain code from the user.
 * await applyActionCode(auth, code);
 * ```
 *
 * @param user - The user.
 * @param newEmail - The new email address to be verified before update.
 * @param actionCodeSettings - The {@link ActionCodeSettings}.
 *
 * @public
 */ async function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {
    const userInternal = (0, _util.getModularInstance)(user);
    const idToken = await user.getIdToken();
    const request = {
        requestType: "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */ ,
        idToken,
        newEmail
    };
    if (actionCodeSettings) _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
    const { email  } = await verifyAndChangeEmail(userInternal.auth, request);
    if (email !== user.email) // If the local copy of the email on user is outdated, reload the
    // user.
    await user.reload();
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function updateProfile$1(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v1/accounts:update" /* SET_ACCOUNT_INFO */ , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Updates a user's profile data.
 *
 * @param user - The user.
 * @param profile - The profile's `displayName` and `photoURL` to update.
 *
 * @public
 */ async function updateProfile(user, { displayName , photoURL: photoUrl  }) {
    if (displayName === undefined && photoUrl === undefined) return;
    const userInternal = (0, _util.getModularInstance)(user);
    const idToken = await userInternal.getIdToken();
    const profileRequest = {
        idToken,
        displayName,
        photoUrl,
        returnSecureToken: true
    };
    const response = await _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));
    userInternal.displayName = response.displayName || null;
    userInternal.photoURL = response.photoUrl || null;
    // Update the password provider as well
    const passwordProvider = userInternal.providerData.find(({ providerId  })=>providerId === "password" /* PASSWORD */ );
    if (passwordProvider) {
        passwordProvider.displayName = userInternal.displayName;
        passwordProvider.photoURL = userInternal.photoURL;
    }
    await userInternal._updateTokensIfNecessary(response);
}
/**
 * Updates the user's email address.
 *
 * @remarks
 * An email will be sent to the original email address (if it was set) that allows to revoke the
 * email address change, in order to protect them from account hijacking.
 *
 * Important: this is a security sensitive operation that requires the user to have recently signed
 * in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 * @param newEmail - The new email address.
 *
 * @public
 */ function updateEmail(user, newEmail) {
    return updateEmailOrPassword((0, _util.getModularInstance)(user), newEmail, null);
}
/**
 * Updates the user's password.
 *
 * @remarks
 * Important: this is a security sensitive operation that requires the user to have recently signed
 * in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 * @param newPassword - The new password.
 *
 * @public
 */ function updatePassword(user, newPassword) {
    return updateEmailOrPassword((0, _util.getModularInstance)(user), null, newPassword);
}
async function updateEmailOrPassword(user, email, password) {
    const { auth  } = user;
    const idToken = await user.getIdToken();
    const request = {
        idToken,
        returnSecureToken: true
    };
    if (email) request.email = email;
    if (password) request.password = password;
    const response = await _logoutIfInvalidated(user, updateEmailPassword(auth, request));
    await user._updateTokensIfNecessary(response, /* reload */ true);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Parse the `AdditionalUserInfo` from the ID token response.
 *
 */ function _fromIdTokenResponse(idTokenResponse) {
    var _a, _b;
    if (!idTokenResponse) return null;
    const { providerId  } = idTokenResponse;
    const profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};
    const isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse" /* SignupNewUser */ ;
    if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {
        const signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b["sign_in_provider"];
        if (signInProvider) {
            const filteredProviderId = signInProvider !== "anonymous" /* ANONYMOUS */  && signInProvider !== "custom" /* CUSTOM */  ? signInProvider : null;
            // Uses generic class in accordance with the legacy SDK.
            return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);
        }
    }
    if (!providerId) return null;
    switch(providerId){
        case "facebook.com" /* FACEBOOK */ :
            return new FacebookAdditionalUserInfo(isNewUser, profile);
        case "github.com" /* GITHUB */ :
            return new GithubAdditionalUserInfo(isNewUser, profile);
        case "google.com" /* GOOGLE */ :
            return new GoogleAdditionalUserInfo(isNewUser, profile);
        case "twitter.com" /* TWITTER */ :
            return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);
        case "custom" /* CUSTOM */ :
        case "anonymous" /* ANONYMOUS */ :
            return new GenericAdditionalUserInfo(isNewUser, null);
        default:
            return new GenericAdditionalUserInfo(isNewUser, providerId, profile);
    }
}
class GenericAdditionalUserInfo {
    constructor(isNewUser, providerId, profile = {}){
        this.isNewUser = isNewUser;
        this.providerId = providerId;
        this.profile = profile;
    }
}
class FederatedAdditionalUserInfoWithUsername extends GenericAdditionalUserInfo {
    constructor(isNewUser, providerId, profile, username){
        super(isNewUser, providerId, profile);
        this.username = username;
    }
}
class FacebookAdditionalUserInfo extends GenericAdditionalUserInfo {
    constructor(isNewUser, profile){
        super(isNewUser, "facebook.com" /* FACEBOOK */ , profile);
    }
}
class GithubAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {
    constructor(isNewUser, profile){
        super(isNewUser, "github.com" /* GITHUB */ , profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === "string" ? profile === null || profile === void 0 ? void 0 : profile.login : null);
    }
}
class GoogleAdditionalUserInfo extends GenericAdditionalUserInfo {
    constructor(isNewUser, profile){
        super(isNewUser, "google.com" /* GOOGLE */ , profile);
    }
}
class TwitterAdditionalUserInfo extends FederatedAdditionalUserInfoWithUsername {
    constructor(isNewUser, profile, screenName){
        super(isNewUser, "twitter.com" /* TWITTER */ , profile, screenName);
    }
}
/**
 * Extracts provider specific {@link AdditionalUserInfo} for the given credential.
 *
 * @param userCredential - The user credential.
 *
 * @public
 */ function getAdditionalUserInfo(userCredential) {
    const { user , _tokenResponse  } = userCredential;
    if (user.isAnonymous && !_tokenResponse) // Handle the special case where signInAnonymously() gets called twice.
    // No network call is made so there's nothing to actually fill this in
    return {
        providerId: null,
        isNewUser: false,
        profile: null
    };
    return _fromIdTokenResponse(_tokenResponse);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Non-optional auth methods.
/**
 * Changes the type of persistence on the {@link Auth} instance for the currently saved
 * `Auth` session and applies this type of persistence for future sign-in requests, including
 * sign-in with redirect requests.
 *
 * @remarks
 * This makes it easy for a user signing in to specify whether their session should be
 * remembered or not. It also makes it easier to never persist the `Auth` state for applications
 * that are shared by other users or have sensitive data.
 *
 * @example
 * ```javascript
 * setPersistence(auth, browserSessionPersistence);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param persistence - The {@link Persistence} to use.
 * @returns A `Promise` that resolves once the persistence change has completed
 *
 * @public
 */ function setPersistence(auth, persistence) {
    return (0, _util.getModularInstance)(auth).setPersistence(persistence);
}
/**
 * Adds an observer for changes to the signed-in user's ID token.
 *
 * @remarks
 * This includes sign-in, sign-out, and token refresh events.
 *
 * @param auth - The {@link Auth} instance.
 * @param nextOrObserver - callback triggered on change.
 * @param error - Deprecated. This callback is never triggered. Errors
 * on signing in/out can be caught in promises returned from
 * sign-in/sign-out functions.
 * @param completed - Deprecated. This callback is never triggered.
 *
 * @public
 */ function onIdTokenChanged(auth, nextOrObserver, error, completed) {
    return (0, _util.getModularInstance)(auth).onIdTokenChanged(nextOrObserver, error, completed);
}
/**
 * Adds a blocking callback that runs before an auth state change
 * sets a new user.
 *
 * @param auth - The {@link Auth} instance.
 * @param callback - callback triggered before new user value is set.
 *   If this throws, it blocks the user from being set.
 * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`
 *   callback throws, allowing you to undo any side effects.
 */ function beforeAuthStateChanged(auth, callback, onAbort) {
    return (0, _util.getModularInstance)(auth).beforeAuthStateChanged(callback, onAbort);
}
/**
 * Adds an observer for changes to the user's sign-in state.
 *
 * @remarks
 * To keep the old behavior, see {@link onIdTokenChanged}.
 *
 * @param auth - The {@link Auth} instance.
 * @param nextOrObserver - callback triggered on change.
 * @param error - Deprecated. This callback is never triggered. Errors
 * on signing in/out can be caught in promises returned from
 * sign-in/sign-out functions.
 * @param completed - Deprecated. This callback is never triggered.
 *
 * @public
 */ function onAuthStateChanged(auth, nextOrObserver, error, completed) {
    return (0, _util.getModularInstance)(auth).onAuthStateChanged(nextOrObserver, error, completed);
}
/**
 * Sets the current language to the default device/browser preference.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ function useDeviceLanguage(auth) {
    (0, _util.getModularInstance)(auth).useDeviceLanguage();
}
/**
 * Asynchronously sets the provided user as {@link Auth.currentUser} on the
 * {@link Auth} instance.
 *
 * @remarks
 * A new instance copy of the user provided will be made and set as currentUser.
 *
 * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners
 * like other sign in methods.
 *
 * The operation fails with an error if the user to be updated belongs to a different Firebase
 * project.
 *
 * @param auth - The {@link Auth} instance.
 * @param user - The new {@link User}.
 *
 * @public
 */ function updateCurrentUser(auth, user) {
    return (0, _util.getModularInstance)(auth).updateCurrentUser(user);
}
/**
 * Signs out the current user.
 *
 * @param auth - The {@link Auth} instance.
 *
 * @public
 */ function signOut(auth) {
    return (0, _util.getModularInstance)(auth).signOut();
}
/**
 * Deletes and signs out the user.
 *
 * @remarks
 * Important: this is a security-sensitive operation that requires the user to have recently
 * signed in. If this requirement isn't met, ask the user to authenticate again and then call
 * {@link reauthenticateWithCredential}.
 *
 * @param user - The user.
 *
 * @public
 */ async function deleteUser(user) {
    return (0, _util.getModularInstance)(user).delete();
}
class MultiFactorSessionImpl {
    constructor(type, credential){
        this.type = type;
        this.credential = credential;
    }
    static _fromIdtoken(idToken) {
        return new MultiFactorSessionImpl("enroll" /* ENROLL */ , idToken);
    }
    static _fromMfaPendingCredential(mfaPendingCredential) {
        return new MultiFactorSessionImpl("signin" /* SIGN_IN */ , mfaPendingCredential);
    }
    toJSON() {
        const key = this.type === "enroll" /* ENROLL */  ? "idToken" : "pendingCredential";
        return {
            multiFactorSession: {
                [key]: this.credential
            }
        };
    }
    static fromJSON(obj) {
        var _a, _b;
        if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {
            if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
            else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);
        }
        return null;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class MultiFactorResolverImpl {
    constructor(session, hints, signInResolver){
        this.session = session;
        this.hints = hints;
        this.signInResolver = signInResolver;
    }
    /** @internal */ static _fromError(authExtern, error) {
        const auth = _castAuth(authExtern);
        const serverResponse = error.customData._serverResponse;
        const hints = (serverResponse.mfaInfo || []).map((enrollment)=>MultiFactorInfoImpl._fromServerResponse(auth, enrollment));
        _assert(serverResponse.mfaPendingCredential, auth, "internal-error" /* INTERNAL_ERROR */ );
        const session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);
        return new MultiFactorResolverImpl(session, hints, async (assertion)=>{
            const mfaResponse = await assertion._process(auth, session);
            // Clear out the unneeded fields from the old login response
            delete serverResponse.mfaInfo;
            delete serverResponse.mfaPendingCredential;
            // Use in the new token & refresh token in the old response
            const idTokenResponse = Object.assign(Object.assign({}, serverResponse), {
                idToken: mfaResponse.idToken,
                refreshToken: mfaResponse.refreshToken
            });
            // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case
            switch(error.operationType){
                case "signIn" /* SIGN_IN */ :
                    const userCredential = await UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);
                    await auth._updateCurrentUser(userCredential.user);
                    return userCredential;
                case "reauthenticate" /* REAUTHENTICATE */ :
                    _assert(error.user, auth, "internal-error" /* INTERNAL_ERROR */ );
                    return UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse);
                default:
                    _fail(auth, "internal-error" /* INTERNAL_ERROR */ );
            }
        });
    }
    async resolveSignIn(assertionExtern) {
        const assertion = assertionExtern;
        return this.signInResolver(assertion);
    }
}
/**
 * Provides a {@link MultiFactorResolver} suitable for completion of a
 * multi-factor flow.
 *
 * @param auth - The {@link Auth} instance.
 * @param error - The {@link MultiFactorError} raised during a sign-in, or
 * reauthentication operation.
 *
 * @public
 */ function getMultiFactorResolver(auth, error) {
    var _a;
    const authModular = (0, _util.getModularInstance)(auth);
    const errorInternal = error;
    _assert(error.customData.operationType, authModular, "argument-error" /* ARGUMENT_ERROR */ );
    _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, "argument-error" /* ARGUMENT_ERROR */ );
    return MultiFactorResolverImpl._fromError(authModular, errorInternal);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function startEnrollPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v2/accounts/mfaEnrollment:start" /* START_PHONE_MFA_ENROLLMENT */ , _addTidIfNecessary(auth, request));
}
function finalizeEnrollPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v2/accounts/mfaEnrollment:finalize" /* FINALIZE_PHONE_MFA_ENROLLMENT */ , _addTidIfNecessary(auth, request));
}
function withdrawMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v2/accounts/mfaEnrollment:withdraw" /* WITHDRAW_MFA */ , _addTidIfNecessary(auth, request));
}
class MultiFactorUserImpl {
    constructor(user){
        this.user = user;
        this.enrolledFactors = [];
        user._onReload((userInfo)=>{
            if (userInfo.mfaInfo) this.enrolledFactors = userInfo.mfaInfo.map((enrollment)=>MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment));
        });
    }
    static _fromUser(user) {
        return new MultiFactorUserImpl(user);
    }
    async getSession() {
        return MultiFactorSessionImpl._fromIdtoken(await this.user.getIdToken());
    }
    async enroll(assertionExtern, displayName) {
        const assertion = assertionExtern;
        const session = await this.getSession();
        const finalizeMfaResponse = await _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));
        // New tokens will be issued after enrollment of the new second factors.
        // They need to be updated on the user.
        await this.user._updateTokensIfNecessary(finalizeMfaResponse);
        // The user needs to be reloaded to get the new multi-factor information
        // from server. USER_RELOADED event will be triggered and `enrolledFactors`
        // will be updated.
        return this.user.reload();
    }
    async unenroll(infoOrUid) {
        var _a;
        const mfaEnrollmentId = typeof infoOrUid === "string" ? infoOrUid : infoOrUid.uid;
        const idToken = await this.user.getIdToken();
        const idTokenResponse = await _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {
            idToken,
            mfaEnrollmentId
        }));
        // Remove the second factor from the user's list.
        this.enrolledFactors = this.enrolledFactors.filter(({ uid  })=>uid !== mfaEnrollmentId);
        // Depending on whether the backend decided to revoke the user's session,
        // the tokenResponse may be empty. If the tokens were not updated (and they
        // are now invalid), reloading the user will discover this and invalidate
        // the user's state accordingly.
        await this.user._updateTokensIfNecessary(idTokenResponse);
        try {
            await this.user.reload();
        } catch (e) {
            if (((_a = e) === null || _a === void 0 ? void 0 : _a.code) !== `auth/${"user-token-expired" /* TOKEN_EXPIRED */ }`) throw e;
        }
    }
}
const multiFactorUserCache = new WeakMap();
/**
 * The {@link MultiFactorUser} corresponding to the user.
 *
 * @remarks
 * This is used to access all multi-factor properties and operations related to the user.
 *
 * @param user - The user.
 *
 * @public
 */ function multiFactor(user) {
    const userModular = (0, _util.getModularInstance)(user);
    if (!multiFactorUserCache.has(userModular)) multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));
    return multiFactorUserCache.get(userModular);
}
const STORAGE_AVAILABLE_KEY = "__sak";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // There are two different browser persistence types: local and session.
// Both have the same implementation but use a different underlying storage
// object.
class BrowserPersistenceClass {
    constructor(storageRetriever, type){
        this.storageRetriever = storageRetriever;
        this.type = type;
    }
    _isAvailable() {
        try {
            if (!this.storage) return Promise.resolve(false);
            this.storage.setItem(STORAGE_AVAILABLE_KEY, "1");
            this.storage.removeItem(STORAGE_AVAILABLE_KEY);
            return Promise.resolve(true);
        } catch (_a) {
            return Promise.resolve(false);
        }
    }
    _set(key, value) {
        this.storage.setItem(key, JSON.stringify(value));
        return Promise.resolve();
    }
    _get(key) {
        const json = this.storage.getItem(key);
        return Promise.resolve(json ? JSON.parse(json) : null);
    }
    _remove(key) {
        this.storage.removeItem(key);
        return Promise.resolve();
    }
    get storage() {
        return this.storageRetriever();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _iframeCannotSyncWebStorage() {
    const ua = (0, _util.getUA)();
    return _isSafari(ua) || _isIOS(ua);
}
// The polling period in case events are not supported
const _POLLING_INTERVAL_MS$1 = 1000;
// The IE 10 localStorage cross tab synchronization delay in milliseconds
const IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
class BrowserLocalPersistence extends BrowserPersistenceClass {
    constructor(){
        super(()=>window.localStorage, "LOCAL" /* LOCAL */ );
        this.boundEventHandler = (event, poll)=>this.onStorageEvent(event, poll);
        this.listeners = {};
        this.localCache = {};
        // setTimeout return value is platform specific
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.pollTimer = null;
        // Safari or iOS browser and embedded in an iframe.
        this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();
        // Whether to use polling instead of depending on window events
        this.fallbackToPolling = _isMobileBrowser();
        this._shouldAllowMigration = true;
    }
    forAllChangedKeys(cb) {
        // Check all keys with listeners on them.
        for (const key of Object.keys(this.listeners)){
            // Get value from localStorage.
            const newValue = this.storage.getItem(key);
            const oldValue = this.localCache[key];
            // If local map value does not match, trigger listener with storage event.
            // Differentiate this simulated event from the real storage event.
            if (newValue !== oldValue) cb(key, oldValue, newValue);
        }
    }
    onStorageEvent(event, poll = false) {
        // Key would be null in some situations, like when localStorage is cleared
        if (!event.key) {
            this.forAllChangedKeys((key, _oldValue, newValue)=>{
                this.notifyListeners(key, newValue);
            });
            return;
        }
        const key1 = event.key;
        // Check the mechanism how this event was detected.
        // The first event will dictate the mechanism to be used.
        if (poll) // Environment detects storage changes via polling.
        // Remove storage event listener to prevent possible event duplication.
        this.detachListener();
        else // Environment detects storage changes via storage event listener.
        // Remove polling listener to prevent possible event duplication.
        this.stopPolling();
        // Safari embedded iframe. Storage event will trigger with the delta
        // changes but no changes will be applied to the iframe localStorage.
        if (this.safariLocalStorageNotSynced) {
            // Get current iframe page value.
            const storedValue = this.storage.getItem(key1);
            // Value not synchronized, synchronize manually.
            if (event.newValue !== storedValue) {
                if (event.newValue !== null) // Value changed from current value.
                this.storage.setItem(key1, event.newValue);
                else // Current value deleted.
                this.storage.removeItem(key1);
            } else if (this.localCache[key1] === event.newValue && !poll) // Already detected and processed, do not trigger listeners again.
            return;
        }
        const triggerListeners = ()=>{
            // Keep local map up to date in case storage event is triggered before
            // poll.
            const storedValue = this.storage.getItem(key1);
            if (!poll && this.localCache[key1] === storedValue) // Real storage event which has already been detected, do nothing.
            // This seems to trigger in some IE browsers for some reason.
            return;
            this.notifyListeners(key1, storedValue);
        };
        const storedValue1 = this.storage.getItem(key1);
        if (_isIE10() && storedValue1 !== event.newValue && event.newValue !== event.oldValue) // IE 10 has this weird bug where a storage event would trigger with the
        // correct key, oldValue and newValue but localStorage.getItem(key) does
        // not yield the updated value until a few milliseconds. This ensures
        // this recovers from that situation.
        setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
        else triggerListeners();
    }
    notifyListeners(key, value) {
        this.localCache[key] = value;
        const listeners = this.listeners[key];
        if (listeners) for (const listener of Array.from(listeners))listener(value ? JSON.parse(value) : value);
    }
    startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(()=>{
            this.forAllChangedKeys((key, oldValue, newValue)=>{
                this.onStorageEvent(new StorageEvent("storage", {
                    key,
                    oldValue,
                    newValue
                }), /* poll */ true);
            });
        }, _POLLING_INTERVAL_MS$1);
    }
    stopPolling() {
        if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
        }
    }
    attachListener() {
        window.addEventListener("storage", this.boundEventHandler);
    }
    detachListener() {
        window.removeEventListener("storage", this.boundEventHandler);
    }
    _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) {
            // Whether browser can detect storage event when it had already been pushed to the background.
            // This may happen in some mobile browsers. A localStorage change in the foreground window
            // will not be detected in the background window via the storage event.
            // This was detected in iOS 7.x mobile browsers
            if (this.fallbackToPolling) this.startPolling();
            else this.attachListener();
        }
        if (!this.listeners[key]) {
            this.listeners[key] = new Set();
            // Populate the cache to avoid spuriously triggering on first poll.
            this.localCache[key] = this.storage.getItem(key);
        }
        this.listeners[key].add(listener);
    }
    _removeListener(key, listener) {
        if (this.listeners[key]) {
            this.listeners[key].delete(listener);
            if (this.listeners[key].size === 0) delete this.listeners[key];
        }
        if (Object.keys(this.listeners).length === 0) {
            this.detachListener();
            this.stopPolling();
        }
    }
    // Update local cache on base operations:
    async _set(key, value) {
        await super._set(key, value);
        this.localCache[key] = JSON.stringify(value);
    }
    async _get(key) {
        const value = await super._get(key);
        this.localCache[key] = JSON.stringify(value);
        return value;
    }
    async _remove(key) {
        await super._remove(key);
        delete this.localCache[key];
    }
}
BrowserLocalPersistence.type = "LOCAL";
/**
 * An implementation of {@link Persistence} of type `LOCAL` using `localStorage`
 * for the underlying storage.
 *
 * @public
 */ const browserLocalPersistence = BrowserLocalPersistence;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class BrowserSessionPersistence extends BrowserPersistenceClass {
    constructor(){
        super(()=>window.sessionStorage, "SESSION" /* SESSION */ );
    }
    _addListener(_key, _listener) {
        // Listeners are not supported for session storage since it cannot be shared across windows
        return;
    }
    _removeListener(_key, _listener) {
        // Listeners are not supported for session storage since it cannot be shared across windows
        return;
    }
}
BrowserSessionPersistence.type = "SESSION";
/**
 * An implementation of {@link Persistence} of `SESSION` using `sessionStorage`
 * for the underlying storage.
 *
 * @public
 */ const browserSessionPersistence = BrowserSessionPersistence;
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.
 *
 * @param promises - Array of promises to wait on.
 */ function _allSettled(promises) {
    return Promise.all(promises.map(async (promise)=>{
        try {
            const value = await promise;
            return {
                fulfilled: true,
                value
            };
        } catch (reason) {
            return {
                fulfilled: false,
                reason
            };
        }
    }));
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface class for receiving messages.
 *
 */ class Receiver {
    constructor(eventTarget){
        this.eventTarget = eventTarget;
        this.handlersMap = {};
        this.boundEventHandler = this.handleEvent.bind(this);
    }
    /**
     * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
     *
     * @param eventTarget - An event target (such as window or self) through which the underlying
     * messages will be received.
     */ static _getInstance(eventTarget) {
        // The results are stored in an array since objects can't be keys for other
        // objects. In addition, setting a unique property on an event target as a
        // hash map key may not be allowed due to CORS restrictions.
        const existingInstance = this.receivers.find((receiver)=>receiver.isListeningto(eventTarget));
        if (existingInstance) return existingInstance;
        const newInstance = new Receiver(eventTarget);
        this.receivers.push(newInstance);
        return newInstance;
    }
    isListeningto(eventTarget) {
        return this.eventTarget === eventTarget;
    }
    /**
     * Fans out a MessageEvent to the appropriate listeners.
     *
     * @remarks
     * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
     * finished processing.
     *
     * @param event - The MessageEvent.
     *
     */ async handleEvent(event) {
        const messageEvent = event;
        const { eventId , eventType , data  } = messageEvent.data;
        const handlers = this.handlersMap[eventType];
        if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) return;
        messageEvent.ports[0].postMessage({
            status: "ack" /* ACK */ ,
            eventId,
            eventType
        });
        const promises = Array.from(handlers).map(async (handler)=>handler(messageEvent.origin, data));
        const response = await _allSettled(promises);
        messageEvent.ports[0].postMessage({
            status: "done" /* DONE */ ,
            eventId,
            eventType,
            response
        });
    }
    /**
     * Subscribe an event handler for a particular event.
     *
     * @param eventType - Event name to subscribe to.
     * @param eventHandler - The event handler which should receive the events.
     *
     */ _subscribe(eventType, eventHandler) {
        if (Object.keys(this.handlersMap).length === 0) this.eventTarget.addEventListener("message", this.boundEventHandler);
        if (!this.handlersMap[eventType]) this.handlersMap[eventType] = new Set();
        this.handlersMap[eventType].add(eventHandler);
    }
    /**
     * Unsubscribe an event handler from a particular event.
     *
     * @param eventType - Event name to unsubscribe from.
     * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.
     *
     */ _unsubscribe(eventType, eventHandler) {
        if (this.handlersMap[eventType] && eventHandler) this.handlersMap[eventType].delete(eventHandler);
        if (!eventHandler || this.handlersMap[eventType].size === 0) delete this.handlersMap[eventType];
        if (Object.keys(this.handlersMap).length === 0) this.eventTarget.removeEventListener("message", this.boundEventHandler);
    }
}
Receiver.receivers = [];
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _generateEventId(prefix = "", digits = 10) {
    let random = "";
    for(let i = 0; i < digits; i++)random += Math.floor(Math.random() * 10);
    return prefix + random;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Interface for sending messages and waiting for a completion response.
 *
 */ class Sender {
    constructor(target){
        this.target = target;
        this.handlers = new Set();
    }
    /**
     * Unsubscribe the handler and remove it from our tracking Set.
     *
     * @param handler - The handler to unsubscribe.
     */ removeMessageHandler(handler) {
        if (handler.messageChannel) {
            handler.messageChannel.port1.removeEventListener("message", handler.onMessage);
            handler.messageChannel.port1.close();
        }
        this.handlers.delete(handler);
    }
    /**
     * Send a message to the Receiver located at {@link target}.
     *
     * @remarks
     * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
     * receiver has had a chance to fully process the event.
     *
     * @param eventType - Type of event to send.
     * @param data - The payload of the event.
     * @param timeout - Timeout for waiting on an ACK from the receiver.
     *
     * @returns An array of settled promises from all the handlers that were listening on the receiver.
     */ async _send(eventType, data, timeout = 50 /* ACK */ ) {
        const messageChannel = typeof MessageChannel !== "undefined" ? new MessageChannel() : null;
        if (!messageChannel) throw new Error("connection_unavailable" /* CONNECTION_UNAVAILABLE */ );
        // Node timers and browser timers return fundamentally different types.
        // We don't actually care what the value is but TS won't accept unknown and
        // we can't cast properly in both environments.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let completionTimer;
        let handler;
        return new Promise((resolve, reject)=>{
            const eventId = _generateEventId("", 20);
            messageChannel.port1.start();
            const ackTimer = setTimeout(()=>{
                reject(new Error("unsupported_event" /* UNSUPPORTED_EVENT */ ));
            }, timeout);
            handler = {
                messageChannel,
                onMessage (event) {
                    const messageEvent = event;
                    if (messageEvent.data.eventId !== eventId) return;
                    switch(messageEvent.data.status){
                        case "ack" /* ACK */ :
                            // The receiver should ACK first.
                            clearTimeout(ackTimer);
                            completionTimer = setTimeout(()=>{
                                reject(new Error("timeout" /* TIMEOUT */ ));
                            }, 3000 /* COMPLETION */ );
                            break;
                        case "done" /* DONE */ :
                            // Once the receiver's handlers are finished we will get the results.
                            clearTimeout(completionTimer);
                            resolve(messageEvent.data.response);
                            break;
                        default:
                            clearTimeout(ackTimer);
                            clearTimeout(completionTimer);
                            reject(new Error("invalid_response" /* INVALID_RESPONSE */ ));
                            break;
                    }
                }
            };
            this.handlers.add(handler);
            messageChannel.port1.addEventListener("message", handler.onMessage);
            this.target.postMessage({
                eventType,
                eventId,
                data
            }, [
                messageChannel.port2
            ]);
        }).finally(()=>{
            if (handler) this.removeMessageHandler(handler);
        });
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Lazy accessor for window, since the compat layer won't tree shake this out,
 * we need to make sure not to mess with window unless we have to
 */ function _window() {
    return window;
}
function _setWindowLocation(url) {
    _window().location.href = url;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function _isWorker() {
    return typeof _window()["WorkerGlobalScope"] !== "undefined" && typeof _window()["importScripts"] === "function";
}
async function _getActiveServiceWorker() {
    if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) return null;
    try {
        const registration = await navigator.serviceWorker.ready;
        return registration.active;
    } catch (_a) {
        return null;
    }
}
function _getServiceWorkerController() {
    var _a;
    return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;
}
function _getWorkerGlobalScope() {
    return _isWorker() ? self : null;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const DB_NAME = "firebaseLocalStorageDb";
const DB_VERSION = 1;
const DB_OBJECTSTORE_NAME = "firebaseLocalStorage";
const DB_DATA_KEYPATH = "fbase_key";
/**
 * Promise wrapper for IDBRequest
 *
 * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6
 *
 */ class DBPromise {
    constructor(request){
        this.request = request;
    }
    toPromise() {
        return new Promise((resolve, reject)=>{
            this.request.addEventListener("success", ()=>{
                resolve(this.request.result);
            });
            this.request.addEventListener("error", ()=>{
                reject(this.request.error);
            });
        });
    }
}
function getObjectStore(db, isReadWrite) {
    return db.transaction([
        DB_OBJECTSTORE_NAME
    ], isReadWrite ? "readwrite" : "readonly").objectStore(DB_OBJECTSTORE_NAME);
}
function _deleteDatabase() {
    const request = indexedDB.deleteDatabase(DB_NAME);
    return new DBPromise(request).toPromise();
}
function _openDatabase() {
    const request = indexedDB.open(DB_NAME, DB_VERSION);
    return new Promise((resolve, reject)=>{
        request.addEventListener("error", ()=>{
            reject(request.error);
        });
        request.addEventListener("upgradeneeded", ()=>{
            const db = request.result;
            try {
                db.createObjectStore(DB_OBJECTSTORE_NAME, {
                    keyPath: DB_DATA_KEYPATH
                });
            } catch (e) {
                reject(e);
            }
        });
        request.addEventListener("success", async ()=>{
            const db = request.result;
            // Strange bug that occurs in Firefox when multiple tabs are opened at the
            // same time. The only way to recover seems to be deleting the database
            // and re-initializing it.
            // https://github.com/firebase/firebase-js-sdk/issues/634
            if (!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) {
                // Need to close the database or else you get a `blocked` event
                db.close();
                await _deleteDatabase();
                resolve(await _openDatabase());
            } else resolve(db);
        });
    });
}
async function _putObject(db, key, value) {
    const request = getObjectStore(db, true).put({
        [DB_DATA_KEYPATH]: key,
        value
    });
    return new DBPromise(request).toPromise();
}
async function getObject(db, key) {
    const request = getObjectStore(db, false).get(key);
    const data = await new DBPromise(request).toPromise();
    return data === undefined ? null : data.value;
}
function _deleteObject(db, key) {
    const request = getObjectStore(db, true).delete(key);
    return new DBPromise(request).toPromise();
}
const _POLLING_INTERVAL_MS = 800;
const _TRANSACTION_RETRY_COUNT = 3;
class IndexedDBLocalPersistence {
    constructor(){
        this.type = "LOCAL" /* LOCAL */ ;
        this._shouldAllowMigration = true;
        this.listeners = {};
        this.localCache = {};
        // setTimeout return value is platform specific
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.pollTimer = null;
        this.pendingWrites = 0;
        this.receiver = null;
        this.sender = null;
        this.serviceWorkerReceiverAvailable = false;
        this.activeServiceWorker = null;
        // Fire & forget the service worker registration as it may never resolve
        this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(()=>{}, ()=>{});
    }
    async _openDb() {
        if (this.db) return this.db;
        this.db = await _openDatabase();
        return this.db;
    }
    async _withRetries(op) {
        let numAttempts = 0;
        while(true)try {
            const db = await this._openDb();
            return await op(db);
        } catch (e) {
            if ((numAttempts++) > _TRANSACTION_RETRY_COUNT) throw e;
            if (this.db) {
                this.db.close();
                this.db = undefined;
            }
        // TODO: consider adding exponential backoff
        }
    }
    /**
     * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
     * postMessage interface to send these events to the worker ourselves.
     */ async initializeServiceWorkerMessaging() {
        return _isWorker() ? this.initializeReceiver() : this.initializeSender();
    }
    /**
     * As the worker we should listen to events from the main window.
     */ async initializeReceiver() {
        this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
        // Refresh from persistence if we receive a KeyChanged message.
        this.receiver._subscribe("keyChanged" /* KEY_CHANGED */ , async (_origin, data)=>{
            const keys = await this._poll();
            return {
                keyProcessed: keys.includes(data.key)
            };
        });
        // Let the sender know that we are listening so they give us more timeout.
        this.receiver._subscribe("ping" /* PING */ , async (_origin, _data)=>{
            return [
                "keyChanged" /* KEY_CHANGED */ 
            ];
        });
    }
    /**
     * As the main window, we should let the worker know when keys change (set and remove).
     *
     * @remarks
     * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
     * may not resolve.
     */ async initializeSender() {
        var _a, _b;
        // Check to see if there's an active service worker.
        this.activeServiceWorker = await _getActiveServiceWorker();
        if (!this.activeServiceWorker) return;
        this.sender = new Sender(this.activeServiceWorker);
        // Ping the service worker to check what events they can handle.
        const results = await this.sender._send("ping" /* PING */ , {}, 800 /* LONG_ACK */ );
        if (!results) return;
        if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes("keyChanged" /* KEY_CHANGED */ ))) this.serviceWorkerReceiverAvailable = true;
    }
    /**
     * Let the worker know about a changed key, the exact key doesn't technically matter since the
     * worker will just trigger a full sync anyway.
     *
     * @remarks
     * For now, we only support one service worker per page.
     *
     * @param key - Storage key which changed.
     */ async notifyServiceWorker(key) {
        if (!this.sender || !this.activeServiceWorker || _getServiceWorkerController() !== this.activeServiceWorker) return;
        try {
            await this.sender._send("keyChanged" /* KEY_CHANGED */ , {
                key
            }, // Use long timeout if receiver has previously responded to a ping from us.
            this.serviceWorkerReceiverAvailable ? 800 /* LONG_ACK */  : 50 /* ACK */ );
        } catch (_a) {
        // This is a best effort approach. Ignore errors.
        }
    }
    async _isAvailable() {
        try {
            if (!indexedDB) return false;
            const db = await _openDatabase();
            await _putObject(db, STORAGE_AVAILABLE_KEY, "1");
            await _deleteObject(db, STORAGE_AVAILABLE_KEY);
            return true;
        } catch (_a) {}
        return false;
    }
    async _withPendingWrite(write) {
        this.pendingWrites++;
        try {
            await write();
        } finally{
            this.pendingWrites--;
        }
    }
    async _set(key, value) {
        return this._withPendingWrite(async ()=>{
            await this._withRetries((db)=>_putObject(db, key, value));
            this.localCache[key] = value;
            return this.notifyServiceWorker(key);
        });
    }
    async _get(key) {
        const obj = await this._withRetries((db)=>getObject(db, key));
        this.localCache[key] = obj;
        return obj;
    }
    async _remove(key) {
        return this._withPendingWrite(async ()=>{
            await this._withRetries((db)=>_deleteObject(db, key));
            delete this.localCache[key];
            return this.notifyServiceWorker(key);
        });
    }
    async _poll() {
        // TODO: check if we need to fallback if getAll is not supported
        const result = await this._withRetries((db)=>{
            const getAllRequest = getObjectStore(db, false).getAll();
            return new DBPromise(getAllRequest).toPromise();
        });
        if (!result) return [];
        // If we have pending writes in progress abort, we'll get picked up on the next poll
        if (this.pendingWrites !== 0) return [];
        const keys = [];
        const keysInResult = new Set();
        for (const { fbase_key: key , value  } of result){
            keysInResult.add(key);
            if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
                this.notifyListeners(key, value);
                keys.push(key);
            }
        }
        for (const localKey of Object.keys(this.localCache))if (this.localCache[localKey] && !keysInResult.has(localKey)) {
            // Deleted
            this.notifyListeners(localKey, null);
            keys.push(localKey);
        }
        return keys;
    }
    notifyListeners(key, newValue) {
        this.localCache[key] = newValue;
        const listeners = this.listeners[key];
        if (listeners) for (const listener of Array.from(listeners))listener(newValue);
    }
    startPolling() {
        this.stopPolling();
        this.pollTimer = setInterval(async ()=>this._poll(), _POLLING_INTERVAL_MS);
    }
    stopPolling() {
        if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
        }
    }
    _addListener(key, listener) {
        if (Object.keys(this.listeners).length === 0) this.startPolling();
        if (!this.listeners[key]) {
            this.listeners[key] = new Set();
            this._get(key); // This can happen in the background async and we can return immediately.
        }
        this.listeners[key].add(listener);
    }
    _removeListener(key, listener) {
        if (this.listeners[key]) {
            this.listeners[key].delete(listener);
            if (this.listeners[key].size === 0) delete this.listeners[key];
        }
        if (Object.keys(this.listeners).length === 0) this.stopPolling();
    }
}
IndexedDBLocalPersistence.type = "LOCAL";
/**
 * An implementation of {@link Persistence} of type `LOCAL` using `indexedDB`
 * for the underlying storage.
 *
 * @public
 */ const indexedDBLocalPersistence = IndexedDBLocalPersistence;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function startSignInPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v2/accounts/mfaSignIn:start" /* START_PHONE_MFA_SIGN_IN */ , _addTidIfNecessary(auth, request));
}
function finalizeSignInPhoneMfa(auth, request) {
    return _performApiRequest(auth, "POST" /* POST */ , "/v2/accounts/mfaSignIn:finalize" /* FINALIZE_PHONE_MFA_SIGN_IN */ , _addTidIfNecessary(auth, request));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function getRecaptchaParams(auth) {
    return (await _performApiRequest(auth, "GET" /* GET */ , "/v1/recaptchaParams" /* GET_RECAPTCHA_PARAM */ )).recaptchaSiteKey || "";
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getScriptParentElement() {
    var _a, _b;
    return (_b = (_a = document.getElementsByTagName("head")) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
}
function _loadJS(url) {
    // TODO: consider adding timeout support & cancellation
    return new Promise((resolve, reject)=>{
        const el = document.createElement("script");
        el.setAttribute("src", url);
        el.onload = resolve;
        el.onerror = (e)=>{
            const error = _createError("internal-error" /* INTERNAL_ERROR */ );
            error.customData = e;
            reject(error);
        };
        el.type = "text/javascript";
        el.charset = "UTF-8";
        getScriptParentElement().appendChild(el);
    });
}
function _generateCallbackName(prefix) {
    return `__${prefix}${Math.floor(Math.random() * 1000000)}`;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const _SOLVE_TIME_MS = 500;
const _EXPIRATION_TIME_MS = 60000;
const _WIDGET_ID_START = 1000000000000;
class MockReCaptcha {
    constructor(auth){
        this.auth = auth;
        this.counter = _WIDGET_ID_START;
        this._widgets = new Map();
    }
    render(container, parameters) {
        const id = this.counter;
        this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));
        this.counter++;
        return id;
    }
    reset(optWidgetId) {
        var _a;
        const id = optWidgetId || _WIDGET_ID_START;
        (_a = this._widgets.get(id)) === null || _a === void 0 || _a.delete();
        this._widgets.delete(id);
    }
    getResponse(optWidgetId) {
        var _a;
        const id = optWidgetId || _WIDGET_ID_START;
        return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || "";
    }
    async execute(optWidgetId) {
        var _a;
        const id = optWidgetId || _WIDGET_ID_START;
        (_a = this._widgets.get(id)) === null || _a === void 0 || _a.execute();
        return "";
    }
}
class MockWidget {
    constructor(containerOrId, appName, params){
        this.params = params;
        this.timerId = null;
        this.deleted = false;
        this.responseToken = null;
        this.clickHandler = ()=>{
            this.execute();
        };
        const container = typeof containerOrId === "string" ? document.getElementById(containerOrId) : containerOrId;
        _assert(container, "argument-error" /* ARGUMENT_ERROR */ , {
            appName
        });
        this.container = container;
        this.isVisible = this.params.size !== "invisible";
        if (this.isVisible) this.execute();
        else this.container.addEventListener("click", this.clickHandler);
    }
    getResponse() {
        this.checkIfDeleted();
        return this.responseToken;
    }
    delete() {
        this.checkIfDeleted();
        this.deleted = true;
        if (this.timerId) {
            clearTimeout(this.timerId);
            this.timerId = null;
        }
        this.container.removeEventListener("click", this.clickHandler);
    }
    execute() {
        this.checkIfDeleted();
        if (this.timerId) return;
        this.timerId = window.setTimeout(()=>{
            this.responseToken = generateRandomAlphaNumericString(50);
            const { callback , "expired-callback": expiredCallback  } = this.params;
            if (callback) try {
                callback(this.responseToken);
            } catch (e) {}
            this.timerId = window.setTimeout(()=>{
                this.timerId = null;
                this.responseToken = null;
                if (expiredCallback) try {
                    expiredCallback();
                } catch (e) {}
                if (this.isVisible) this.execute();
            }, _EXPIRATION_TIME_MS);
        }, _SOLVE_TIME_MS);
    }
    checkIfDeleted() {
        if (this.deleted) throw new Error("reCAPTCHA mock was already deleted!");
    }
}
function generateRandomAlphaNumericString(len) {
    const chars = [];
    const allowedChars = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for(let i = 0; i < len; i++)chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));
    return chars.join("");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // ReCaptcha will load using the same callback, so the callback function needs
// to be kept around
const _JSLOAD_CALLBACK = _generateCallbackName("rcb");
const NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);
const RECAPTCHA_BASE = "https://www.google.com/recaptcha/api.js?";
/**
 * Loader for the GReCaptcha library. There should only ever be one of this.
 */ class ReCaptchaLoaderImpl {
    constructor(){
        this.hostLanguage = "";
        this.counter = 0;
        this.librarySeparatelyLoaded = !!_window().grecaptcha;
    }
    load(auth, hl = "") {
        _assert(isHostLanguageValid(hl), auth, "argument-error" /* ARGUMENT_ERROR */ );
        if (this.shouldResolveImmediately(hl)) return Promise.resolve(_window().grecaptcha);
        return new Promise((resolve, reject)=>{
            const networkTimeout = _window().setTimeout(()=>{
                reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */ ));
            }, NETWORK_TIMEOUT_DELAY.get());
            _window()[_JSLOAD_CALLBACK] = ()=>{
                _window().clearTimeout(networkTimeout);
                delete _window()[_JSLOAD_CALLBACK];
                const recaptcha = _window().grecaptcha;
                if (!recaptcha) {
                    reject(_createError(auth, "internal-error" /* INTERNAL_ERROR */ ));
                    return;
                }
                // Wrap the greptcha render function so that we know if the developer has
                // called it separately
                const render = recaptcha.render;
                recaptcha.render = (container, params)=>{
                    const widgetId = render(container, params);
                    this.counter++;
                    return widgetId;
                };
                this.hostLanguage = hl;
                resolve(recaptcha);
            };
            const url = `${RECAPTCHA_BASE}?${(0, _util.querystring)({
                onload: _JSLOAD_CALLBACK,
                render: "explicit",
                hl
            })}`;
            _loadJS(url).catch(()=>{
                clearTimeout(networkTimeout);
                reject(_createError(auth, "internal-error" /* INTERNAL_ERROR */ ));
            });
        });
    }
    clearedOneInstance() {
        this.counter--;
    }
    shouldResolveImmediately(hl) {
        // We can resolve immediately if:
        //   • grecaptcha is already defined AND (
        //     1. the requested language codes are the same OR
        //     2. there exists already a ReCaptcha on the page
        //     3. the library was already loaded by the app
        // In cases (2) and (3), we _can't_ reload as it would break the recaptchas
        // that are already in the page
        return !!_window().grecaptcha && (hl === this.hostLanguage || this.counter > 0 || this.librarySeparatelyLoaded);
    }
}
function isHostLanguageValid(hl) {
    return hl.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(hl);
}
class MockReCaptchaLoaderImpl {
    async load(auth) {
        return new MockReCaptcha(auth);
    }
    clearedOneInstance() {}
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const RECAPTCHA_VERIFIER_TYPE = "recaptcha";
const DEFAULT_PARAMS = {
    theme: "light",
    type: "image"
};
/**
 * An {@link https://www.google.com/recaptcha/ | reCAPTCHA}-based application verifier.
 *
 * @public
 */ class RecaptchaVerifier {
    /**
     *
     * @param containerOrId - The reCAPTCHA container parameter.
     *
     * @remarks
     * This has different meaning depending on whether the reCAPTCHA is hidden or visible. For a
     * visible reCAPTCHA the container must be empty. If a string is used, it has to correspond to
     * an element ID. The corresponding element must also must be in the DOM at the time of
     * initialization.
     *
     * @param parameters - The optional reCAPTCHA parameters.
     *
     * @remarks
     * Check the reCAPTCHA docs for a comprehensive list. All parameters are accepted except for
     * the sitekey. Firebase Auth backend provisions a reCAPTCHA for each project and will
     * configure this upon rendering. For an invisible reCAPTCHA, a size key must have the value
     * 'invisible'.
     *
     * @param authExtern - The corresponding Firebase {@link Auth} instance.
     *
     * @remarks
     * If none is provided, the default Firebase {@link Auth} instance is used. A Firebase {@link Auth} instance
     * must be initialized with an API key, otherwise an error will be thrown.
     */ constructor(containerOrId, parameters = Object.assign({}, DEFAULT_PARAMS), authExtern){
        this.parameters = parameters;
        /**
         * The application verifier type.
         *
         * @remarks
         * For a reCAPTCHA verifier, this is 'recaptcha'.
         */ this.type = RECAPTCHA_VERIFIER_TYPE;
        this.destroyed = false;
        this.widgetId = null;
        this.tokenChangeListeners = new Set();
        this.renderPromise = null;
        this.recaptcha = null;
        this.auth = _castAuth(authExtern);
        this.isInvisible = this.parameters.size === "invisible";
        _assert(typeof document !== "undefined", this.auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */ );
        const container = typeof containerOrId === "string" ? document.getElementById(containerOrId) : containerOrId;
        _assert(container, this.auth, "argument-error" /* ARGUMENT_ERROR */ );
        this.container = container;
        this.parameters.callback = this.makeTokenCallback(this.parameters.callback);
        this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting ? new MockReCaptchaLoaderImpl() : new ReCaptchaLoaderImpl();
        this.validateStartingState();
    // TODO: Figure out if sdk version is needed
    }
    /**
     * Waits for the user to solve the reCAPTCHA and resolves with the reCAPTCHA token.
     *
     * @returns A Promise for the reCAPTCHA token.
     */ async verify() {
        this.assertNotDestroyed();
        const id = await this.render();
        const recaptcha = this.getAssertedRecaptcha();
        const response = recaptcha.getResponse(id);
        if (response) return response;
        return new Promise((resolve)=>{
            const tokenChange = (token)=>{
                if (!token) return; // Ignore token expirations.
                this.tokenChangeListeners.delete(tokenChange);
                resolve(token);
            };
            this.tokenChangeListeners.add(tokenChange);
            if (this.isInvisible) recaptcha.execute(id);
        });
    }
    /**
     * Renders the reCAPTCHA widget on the page.
     *
     * @returns A Promise that resolves with the reCAPTCHA widget ID.
     */ render() {
        try {
            this.assertNotDestroyed();
        } catch (e1) {
            // This method returns a promise. Since it's not async (we want to return the
            // _same_ promise if rendering is still occurring), the API surface should
            // reject with the error rather than just throw
            return Promise.reject(e1);
        }
        if (this.renderPromise) return this.renderPromise;
        this.renderPromise = this.makeRenderPromise().catch((e)=>{
            this.renderPromise = null;
            throw e;
        });
        return this.renderPromise;
    }
    /** @internal */ _reset() {
        this.assertNotDestroyed();
        if (this.widgetId !== null) this.getAssertedRecaptcha().reset(this.widgetId);
    }
    /**
     * Clears the reCAPTCHA widget from the page and destroys the instance.
     */ clear() {
        this.assertNotDestroyed();
        this.destroyed = true;
        this._recaptchaLoader.clearedOneInstance();
        if (!this.isInvisible) this.container.childNodes.forEach((node)=>{
            this.container.removeChild(node);
        });
    }
    validateStartingState() {
        _assert(!this.parameters.sitekey, this.auth, "argument-error" /* ARGUMENT_ERROR */ );
        _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, "argument-error" /* ARGUMENT_ERROR */ );
        _assert(typeof document !== "undefined", this.auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */ );
    }
    makeTokenCallback(existing) {
        return (token)=>{
            this.tokenChangeListeners.forEach((listener)=>listener(token));
            if (typeof existing === "function") existing(token);
            else if (typeof existing === "string") {
                const globalFunc = _window()[existing];
                if (typeof globalFunc === "function") globalFunc(token);
            }
        };
    }
    assertNotDestroyed() {
        _assert(!this.destroyed, this.auth, "internal-error" /* INTERNAL_ERROR */ );
    }
    async makeRenderPromise() {
        await this.init();
        if (!this.widgetId) {
            let container = this.container;
            if (!this.isInvisible) {
                const guaranteedEmpty = document.createElement("div");
                container.appendChild(guaranteedEmpty);
                container = guaranteedEmpty;
            }
            this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);
        }
        return this.widgetId;
    }
    async init() {
        _assert(_isHttpOrHttps() && !_isWorker(), this.auth, "internal-error" /* INTERNAL_ERROR */ );
        await domReady();
        this.recaptcha = await this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined);
        const siteKey = await getRecaptchaParams(this.auth);
        _assert(siteKey, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        this.parameters.sitekey = siteKey;
    }
    getAssertedRecaptcha() {
        _assert(this.recaptcha, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        return this.recaptcha;
    }
}
function domReady() {
    let resolver = null;
    return new Promise((resolve)=>{
        if (document.readyState === "complete") {
            resolve();
            return;
        }
        // Document not ready, wait for load before resolving.
        // Save resolver, so we can remove listener in case it was externally
        // cancelled.
        resolver = ()=>resolve();
        window.addEventListener("load", resolver);
    }).catch((e)=>{
        if (resolver) window.removeEventListener("load", resolver);
        throw e;
    });
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class ConfirmationResultImpl {
    constructor(verificationId, onConfirmation){
        this.verificationId = verificationId;
        this.onConfirmation = onConfirmation;
    }
    confirm(verificationCode) {
        const authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);
        return this.onConfirmation(authCredential);
    }
}
/**
 * Asynchronously signs in using a phone number.
 *
 * @remarks
 * This method sends a code via SMS to the given
 * phone number, and returns a {@link ConfirmationResult}. After the user
 * provides the code sent to their phone, call {@link ConfirmationResult.confirm}
 * with the code to sign the user in.
 *
 * For abuse prevention, this method also requires a {@link ApplicationVerifier}.
 * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.
 * This function can work on other platforms that do not support the
 * {@link RecaptchaVerifier} (like React Native), but you need to use a
 * third-party {@link ApplicationVerifier} implementation.
 *
 * @example
 * ```javascript
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');
 * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
 * // Obtain a verificationCode from the user.
 * const credential = await confirmationResult.confirm(verificationCode);
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */ async function signInWithPhoneNumber(auth, phoneNumber, appVerifier) {
    const authInternal = _castAuth(auth);
    const verificationId = await _verifyPhoneNumber(authInternal, phoneNumber, (0, _util.getModularInstance)(appVerifier));
    return new ConfirmationResultImpl(verificationId, (cred)=>signInWithCredential(authInternal, cred));
}
/**
 * Links the user account with the given phone number.
 *
 * @param user - The user.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */ async function linkWithPhoneNumber(user, phoneNumber, appVerifier) {
    const userInternal = (0, _util.getModularInstance)(user);
    await _assertLinkedStatus(false, userInternal, "phone" /* PHONE */ );
    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0, _util.getModularInstance)(appVerifier));
    return new ConfirmationResultImpl(verificationId, (cred)=>linkWithCredential(userInternal, cred));
}
/**
 * Re-authenticates a user using a fresh phone credential.
 *
 * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.
 *
 * @param user - The user.
 * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
 * @param appVerifier - The {@link ApplicationVerifier}.
 *
 * @public
 */ async function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {
    const userInternal = (0, _util.getModularInstance)(user);
    const verificationId = await _verifyPhoneNumber(userInternal.auth, phoneNumber, (0, _util.getModularInstance)(appVerifier));
    return new ConfirmationResultImpl(verificationId, (cred)=>reauthenticateWithCredential(userInternal, cred));
}
/**
 * Returns a verification ID to be used in conjunction with the SMS code that is sent.
 *
 */ async function _verifyPhoneNumber(auth, options, verifier) {
    var _a;
    const recaptchaToken = await verifier.verify();
    try {
        _assert(typeof recaptchaToken === "string", auth, "argument-error" /* ARGUMENT_ERROR */ );
        _assert(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, "argument-error" /* ARGUMENT_ERROR */ );
        let phoneInfoOptions;
        if (typeof options === "string") phoneInfoOptions = {
            phoneNumber: options
        };
        else phoneInfoOptions = options;
        if ("session" in phoneInfoOptions) {
            const session = phoneInfoOptions.session;
            if ("phoneNumber" in phoneInfoOptions) {
                _assert(session.type === "enroll" /* ENROLL */ , auth, "internal-error" /* INTERNAL_ERROR */ );
                const response = await startEnrollPhoneMfa(auth, {
                    idToken: session.credential,
                    phoneEnrollmentInfo: {
                        phoneNumber: phoneInfoOptions.phoneNumber,
                        recaptchaToken
                    }
                });
                return response.phoneSessionInfo.sessionInfo;
            } else {
                _assert(session.type === "signin" /* SIGN_IN */ , auth, "internal-error" /* INTERNAL_ERROR */ );
                const mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) || phoneInfoOptions.multiFactorUid;
                _assert(mfaEnrollmentId, auth, "missing-multi-factor-info" /* MISSING_MFA_INFO */ );
                const response = await startSignInPhoneMfa(auth, {
                    mfaPendingCredential: session.credential,
                    mfaEnrollmentId,
                    phoneSignInInfo: {
                        recaptchaToken
                    }
                });
                return response.phoneResponseInfo.sessionInfo;
            }
        } else {
            const { sessionInfo  } = await sendPhoneVerificationCode(auth, {
                phoneNumber: phoneInfoOptions.phoneNumber,
                recaptchaToken
            });
            return sessionInfo;
        }
    } finally{
        verifier._reset();
    }
}
/**
 * Updates the user's phone number.
 *
 * @example
 * ```
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
 * const provider = new PhoneAuthProvider(auth);
 * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
 * // Obtain the verificationCode from the user.
 * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
 * await updatePhoneNumber(user, phoneCredential);
 * ```
 *
 * @param user - The user.
 * @param credential - A credential authenticating the new phone number.
 *
 * @public
 */ async function updatePhoneNumber(user, credential) {
    await _link$1((0, _util.getModularInstance)(user), credential);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provider for generating an {@link PhoneAuthCredential}.
 *
 * @example
 * ```javascript
 * // 'recaptcha-container' is the ID of an element in the DOM.
 * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
 * const provider = new PhoneAuthProvider(auth);
 * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
 * // Obtain the verificationCode from the user.
 * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
 * const userCredential = await signInWithCredential(auth, phoneCredential);
 * ```
 *
 * @public
 */ class PhoneAuthProvider {
    /**
     * @param auth - The Firebase {@link Auth} instance in which sign-ins should occur.
     *
     */ constructor(auth){
        /** Always set to {@link ProviderId}.PHONE. */ this.providerId = PhoneAuthProvider.PROVIDER_ID;
        this.auth = _castAuth(auth);
    }
    /**
     *
     * Starts a phone number authentication flow by sending a verification code to the given phone
     * number.
     *
     * @example
     * ```javascript
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * const userCredential = await signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * An alternative flow is provided using the `signInWithPhoneNumber` method.
     * ```javascript
     * const confirmationResult = signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const userCredential = confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param phoneInfoOptions - The user's {@link PhoneInfoOptions}. The phone number should be in
     * E.164 format (e.g. +16505550101).
     * @param applicationVerifier - For abuse prevention, this method also requires a
     * {@link ApplicationVerifier}. This SDK includes a reCAPTCHA-based implementation,
     * {@link RecaptchaVerifier}.
     *
     * @returns A Promise for a verification ID that can be passed to
     * {@link PhoneAuthProvider.credential} to identify this flow..
     */ verifyPhoneNumber(phoneOptions, applicationVerifier) {
        return _verifyPhoneNumber(this.auth, phoneOptions, (0, _util.getModularInstance)(applicationVerifier));
    }
    /**
     * Creates a phone auth credential, given the verification ID from
     * {@link PhoneAuthProvider.verifyPhoneNumber} and the code that was sent to the user's
     * mobile device.
     *
     * @example
     * ```javascript
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = provider.verifyPhoneNumber(phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const authCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * const userCredential = signInWithCredential(auth, authCredential);
     * ```
     *
     * @example
     * An alternative flow is provided using the `signInWithPhoneNumber` method.
     * ```javascript
     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain verificationCode from the user.
     * const userCredential = await confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param verificationId - The verification ID returned from {@link PhoneAuthProvider.verifyPhoneNumber}.
     * @param verificationCode - The verification code sent to the user's mobile device.
     *
     * @returns The auth provider credential.
     */ static credential(verificationId, verificationCode) {
        return PhoneAuthCredential._fromVerification(verificationId, verificationCode);
    }
    /**
     * Generates an {@link AuthCredential} from a {@link UserCredential}.
     * @param userCredential - The user credential.
     */ static credentialFromResult(userCredential) {
        const credential = userCredential;
        return PhoneAuthProvider.credentialFromTaggedObject(credential);
    }
    /**
     * Returns an {@link AuthCredential} when passed an error.
     *
     * @remarks
     *
     * This method works for errors like
     * `auth/account-exists-with-different-credentials`. This is useful for
     * recovering when attempting to set a user's phone number but the number
     * in question is already tied to another account. For example, the following
     * code tries to update the current user's phone number, and if that
     * fails, links the user with the account associated with that number:
     *
     * ```js
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber(number, verifier);
     * try {
     *   const code = ''; // Prompt the user for the verification code
     *   await updatePhoneNumber(
     *       auth.currentUser,
     *       PhoneAuthProvider.credential(verificationId, code));
     * } catch (e) {
     *   if ((e as FirebaseError)?.code === 'auth/account-exists-with-different-credential') {
     *     const cred = PhoneAuthProvider.credentialFromError(e);
     *     await linkWithCredential(auth.currentUser, cred);
     *   }
     * }
     *
     * // At this point, auth.currentUser.phoneNumber === number.
     * ```
     *
     * @param error - The error to generate a credential from.
     */ static credentialFromError(error) {
        return PhoneAuthProvider.credentialFromTaggedObject(error.customData || {});
    }
    static credentialFromTaggedObject({ _tokenResponse: tokenResponse  }) {
        if (!tokenResponse) return null;
        const { phoneNumber , temporaryProof  } = tokenResponse;
        if (phoneNumber && temporaryProof) return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);
        return null;
    }
}
/** Always set to {@link ProviderId}.PHONE. */ PhoneAuthProvider.PROVIDER_ID = "phone" /* PHONE */ ;
/** Always set to {@link SignInMethod}.PHONE. */ PhoneAuthProvider.PHONE_SIGN_IN_METHOD = "phone" /* PHONE */ ;
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Chooses a popup/redirect resolver to use. This prefers the override (which
 * is directly passed in), and falls back to the property set on the auth
 * object. If neither are available, this function errors w/ an argument error.
 */ function _withDefaultResolver(auth, resolverOverride) {
    if (resolverOverride) return _getInstance(resolverOverride);
    _assert(auth._popupRedirectResolver, auth, "argument-error" /* ARGUMENT_ERROR */ );
    return auth._popupRedirectResolver;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class IdpCredential extends AuthCredential {
    constructor(params){
        super("custom" /* CUSTOM */ , "custom" /* CUSTOM */ );
        this.params = params;
    }
    _getIdTokenResponse(auth) {
        return signInWithIdp(auth, this._buildIdpRequest());
    }
    _linkToIdToken(auth, idToken) {
        return signInWithIdp(auth, this._buildIdpRequest(idToken));
    }
    _getReauthenticationResolver(auth) {
        return signInWithIdp(auth, this._buildIdpRequest());
    }
    _buildIdpRequest(idToken) {
        const request = {
            requestUri: this.params.requestUri,
            sessionId: this.params.sessionId,
            postBody: this.params.postBody,
            tenantId: this.params.tenantId,
            pendingToken: this.params.pendingToken,
            returnSecureToken: true,
            returnIdpCredential: true
        };
        if (idToken) request.idToken = idToken;
        return request;
    }
}
function _signIn(params) {
    return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
}
function _reauth(params) {
    const { auth , user  } = params;
    _assert(user, auth, "internal-error" /* INTERNAL_ERROR */ );
    return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
}
async function _link(params) {
    const { auth , user  } = params;
    _assert(user, auth, "internal-error" /* INTERNAL_ERROR */ );
    return _link$1(user, new IdpCredential(params), params.bypassAuthState);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 */ class AbstractPopupRedirectOperation {
    constructor(auth, filter, resolver, user, bypassAuthState = false){
        this.auth = auth;
        this.resolver = resolver;
        this.user = user;
        this.bypassAuthState = bypassAuthState;
        this.pendingPromise = null;
        this.eventManager = null;
        this.filter = Array.isArray(filter) ? filter : [
            filter
        ];
    }
    execute() {
        return new Promise(async (resolve, reject)=>{
            this.pendingPromise = {
                resolve,
                reject
            };
            try {
                this.eventManager = await this.resolver._initialize(this.auth);
                await this.onExecution();
                this.eventManager.registerConsumer(this);
            } catch (e) {
                this.reject(e);
            }
        });
    }
    async onAuthEvent(event) {
        const { urlResponse , sessionId , postBody , tenantId , error , type  } = event;
        if (error) {
            this.reject(error);
            return;
        }
        const params = {
            auth: this.auth,
            requestUri: urlResponse,
            sessionId: sessionId,
            tenantId: tenantId || undefined,
            postBody: postBody || undefined,
            user: this.user,
            bypassAuthState: this.bypassAuthState
        };
        try {
            this.resolve(await this.getIdpTask(type)(params));
        } catch (e) {
            this.reject(e);
        }
    }
    onError(error) {
        this.reject(error);
    }
    getIdpTask(type) {
        switch(type){
            case "signInViaPopup" /* SIGN_IN_VIA_POPUP */ :
            case "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */ :
                return _signIn;
            case "linkViaPopup" /* LINK_VIA_POPUP */ :
            case "linkViaRedirect" /* LINK_VIA_REDIRECT */ :
                return _link;
            case "reauthViaPopup" /* REAUTH_VIA_POPUP */ :
            case "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */ :
                return _reauth;
            default:
                _fail(this.auth, "internal-error" /* INTERNAL_ERROR */ );
        }
    }
    resolve(cred) {
        debugAssert(this.pendingPromise, "Pending promise was never set");
        this.pendingPromise.resolve(cred);
        this.unregisterAndCleanUp();
    }
    reject(error) {
        debugAssert(this.pendingPromise, "Pending promise was never set");
        this.pendingPromise.reject(error);
        this.unregisterAndCleanUp();
    }
    unregisterAndCleanUp() {
        if (this.eventManager) this.eventManager.unregisterConsumer(this);
        this.pendingPromise = null;
        this.cleanUp();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);
/**
 * Authenticates a Firebase client using a popup-based OAuth authentication flow.
 *
 * @remarks
 * If succeeds, returns the signed in user along with the provider's credential. If sign in was
 * unsuccessful, returns an error object containing additional information about the error.
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 *
 * // The signed-in user info.
 * const user = result.user;
 * // This gives you a Facebook Access Token.
 * const credential = provider.credentialFromResult(auth, result);
 * const token = credential.accessToken;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 *
 * @public
 */ async function signInWithPopup(auth, provider, resolver) {
    const authInternal = _castAuth(auth);
    _assertInstanceOf(auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(authInternal, resolver);
    const action = new PopupOperation(authInternal, "signInViaPopup" /* SIGN_IN_VIA_POPUP */ , provider, resolverInternal);
    return action.executeNotNull();
}
/**
 * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based
 * OAuth flow.
 *
 * @remarks
 * If the reauthentication is successful, the returned result will contain the user and the
 * provider's credential.
 *
 * @example
 * ```javascript
 * // Sign in using a popup.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithPopup(auth, provider);
 * // Reauthenticate using a popup.
 * await reauthenticateWithPopup(result.user, provider);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function reauthenticateWithPopup(user, provider, resolver) {
    const userInternal = (0, _util.getModularInstance)(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    const action = new PopupOperation(userInternal.auth, "reauthViaPopup" /* REAUTH_VIA_POPUP */ , provider, resolverInternal, userInternal);
    return action.executeNotNull();
}
/**
 * Links the authenticated provider to the user account using a pop-up based OAuth flow.
 *
 * @remarks
 * If the linking is successful, the returned result will contain the user and the provider's credential.
 *
 *
 * @example
 * ```javascript
 * // Sign in using some other provider.
 * const result = await signInWithEmailAndPassword(auth, email, password);
 * // Link using a popup.
 * const provider = new FacebookAuthProvider();
 * await linkWithPopup(result.user, provider);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function linkWithPopup(user, provider, resolver) {
    const userInternal = (0, _util.getModularInstance)(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    const action = new PopupOperation(userInternal.auth, "linkViaPopup" /* LINK_VIA_POPUP */ , provider, resolverInternal, userInternal);
    return action.executeNotNull();
}
/**
 * Popup event manager. Handles the popup's entire lifecycle; listens to auth
 * events
 *
 */ class PopupOperation extends AbstractPopupRedirectOperation {
    constructor(auth, filter, provider, resolver, user){
        super(auth, filter, resolver, user);
        this.provider = provider;
        this.authWindow = null;
        this.pollId = null;
        if (PopupOperation.currentPopupAction) PopupOperation.currentPopupAction.cancel();
        PopupOperation.currentPopupAction = this;
    }
    async executeNotNull() {
        const result = await this.execute();
        _assert(result, this.auth, "internal-error" /* INTERNAL_ERROR */ );
        return result;
    }
    async onExecution() {
        debugAssert(this.filter.length === 1, "Popup operations only handle one event");
        const eventId = _generateEventId();
        this.authWindow = await this.resolver._openPopup(this.auth, this.provider, this.filter[0], eventId);
        this.authWindow.associatedEvent = eventId;
        // Check for web storage support and origin validation _after_ the popup is
        // loaded. These operations are slow (~1 second or so) Rather than
        // waiting on them before opening the window, optimistically open the popup
        // and check for storage support at the same time. If storage support is
        // not available, this will cause the whole thing to reject properly. It
        // will also close the popup, but since the promise has already rejected,
        // the popup closed by user poll will reject into the void.
        this.resolver._originValidation(this.auth).catch((e)=>{
            this.reject(e);
        });
        this.resolver._isIframeWebStorageSupported(this.auth, (isSupported)=>{
            if (!isSupported) this.reject(_createError(this.auth, "web-storage-unsupported" /* WEB_STORAGE_UNSUPPORTED */ ));
        });
        // Handle user closure. Notice this does *not* use await
        this.pollUserCancellation();
    }
    get eventId() {
        var _a;
        return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
    }
    cancel() {
        this.reject(_createError(this.auth, "cancelled-popup-request" /* EXPIRED_POPUP_REQUEST */ ));
    }
    cleanUp() {
        if (this.authWindow) this.authWindow.close();
        if (this.pollId) window.clearTimeout(this.pollId);
        this.authWindow = null;
        this.pollId = null;
        PopupOperation.currentPopupAction = null;
    }
    pollUserCancellation() {
        const poll = ()=>{
            var _a, _b;
            if ((_b = (_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
                // Make sure that there is sufficient time for whatever action to
                // complete. The window could have closed but the sign in network
                // call could still be in flight.
                this.pollId = window.setTimeout(()=>{
                    this.pollId = null;
                    this.reject(_createError(this.auth, "popup-closed-by-user" /* POPUP_CLOSED_BY_USER */ ));
                }, 2000 /* AUTH_EVENT */ );
                return;
            }
            this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
        };
        poll();
    }
}
// Only one popup is ever shown at once. The lifecycle of the current popup
// can be managed / cancelled by the constructor.
PopupOperation.currentPopupAction = null;
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const PENDING_REDIRECT_KEY = "pendingRedirect";
// We only get one redirect outcome for any one auth, so just store it
// in here.
const redirectOutcomeMap = new Map();
class RedirectAction extends AbstractPopupRedirectOperation {
    constructor(auth, resolver, bypassAuthState = false){
        super(auth, [
            "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */ ,
            "linkViaRedirect" /* LINK_VIA_REDIRECT */ ,
            "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */ ,
            "unknown" /* UNKNOWN */ 
        ], resolver, undefined, bypassAuthState);
        this.eventId = null;
    }
    /**
     * Override the execute function; if we already have a redirect result, then
     * just return it.
     */ async execute() {
        let readyOutcome = redirectOutcomeMap.get(this.auth._key());
        if (!readyOutcome) {
            try {
                const hasPendingRedirect = await _getAndClearPendingRedirectStatus(this.resolver, this.auth);
                const result = hasPendingRedirect ? await super.execute() : null;
                readyOutcome = ()=>Promise.resolve(result);
            } catch (e) {
                readyOutcome = ()=>Promise.reject(e);
            }
            redirectOutcomeMap.set(this.auth._key(), readyOutcome);
        }
        // If we're not bypassing auth state, the ready outcome should be set to
        // null.
        if (!this.bypassAuthState) redirectOutcomeMap.set(this.auth._key(), ()=>Promise.resolve(null));
        return readyOutcome();
    }
    async onAuthEvent(event) {
        if (event.type === "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */ ) return super.onAuthEvent(event);
        else if (event.type === "unknown" /* UNKNOWN */ ) {
            // This is a sentinel value indicating there's no pending redirect
            this.resolve(null);
            return;
        }
        if (event.eventId) {
            const user = await this.auth._redirectUserForId(event.eventId);
            if (user) {
                this.user = user;
                return super.onAuthEvent(event);
            } else this.resolve(null);
        }
    }
    async onExecution() {}
    cleanUp() {}
}
async function _getAndClearPendingRedirectStatus(resolver, auth) {
    const key = pendingRedirectKey(auth);
    const persistence = resolverPersistence(resolver);
    if (!await persistence._isAvailable()) return false;
    const hasPendingRedirect = await persistence._get(key) === "true";
    await persistence._remove(key);
    return hasPendingRedirect;
}
async function _setPendingRedirectStatus(resolver, auth) {
    return resolverPersistence(resolver)._set(pendingRedirectKey(auth), "true");
}
function _clearRedirectOutcomes() {
    redirectOutcomeMap.clear();
}
function _overrideRedirectResult(auth, result) {
    redirectOutcomeMap.set(auth._key(), result);
}
function resolverPersistence(resolver) {
    return _getInstance(resolver._redirectPersistence);
}
function pendingRedirectKey(auth) {
    return _persistenceKeyName(PENDING_REDIRECT_KEY, auth.config.apiKey, auth.name);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Authenticates a Firebase client using a full-page redirect flow.
 *
 * @remarks
 * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // You can add additional scopes to the provider:
 * provider.addScope('user_birthday');
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * // As this API can be used for sign-in, linking and reauthentication,
 * // check the operationType to determine what triggered this redirect
 * // operation.
 * const operationType = result.operationType;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ function signInWithRedirect(auth, provider, resolver) {
    return _signInWithRedirect(auth, provider, resolver);
}
async function _signInWithRedirect(auth, provider, resolver) {
    const authInternal = _castAuth(auth);
    _assertInstanceOf(auth, provider, FederatedAuthProvider);
    const resolverInternal = _withDefaultResolver(authInternal, resolver);
    await _setPendingRedirectStatus(resolverInternal, authInternal);
    return resolverInternal._openRedirect(authInternal, provider, "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */ );
}
/**
 * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * const result = await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * // Link using a redirect.
 * await linkWithRedirect(result.user, provider);
 * // This will again trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ function reauthenticateWithRedirect(user, provider, resolver) {
    return _reauthenticateWithRedirect(user, provider, resolver);
}
async function _reauthenticateWithRedirect(user, provider, resolver) {
    const userInternal = (0, _util.getModularInstance)(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    // Allow the resolver to error before persisting the redirect user
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
    const eventId = await prepareUserForRedirect(userInternal);
    return resolverInternal._openRedirect(userInternal.auth, provider, "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */ , eventId);
}
/**
 * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.
 *
 * @example
 * ```javascript
 * // Sign in using some other provider.
 * const result = await signInWithEmailAndPassword(auth, email, password);
 * // Link using a redirect.
 * const provider = new FacebookAuthProvider();
 * await linkWithRedirect(result.user, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * ```
 *
 * @param user - The user.
 * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
 * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 *
 * @public
 */ function linkWithRedirect(user, provider, resolver) {
    return _linkWithRedirect(user, provider, resolver);
}
async function _linkWithRedirect(user, provider, resolver) {
    const userInternal = (0, _util.getModularInstance)(user);
    _assertInstanceOf(userInternal.auth, provider, FederatedAuthProvider);
    // Allow the resolver to error before persisting the redirect user
    const resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
    await _assertLinkedStatus(false, userInternal, provider.providerId);
    await _setPendingRedirectStatus(resolverInternal, userInternal.auth);
    const eventId = await prepareUserForRedirect(userInternal);
    return resolverInternal._openRedirect(userInternal.auth, provider, "linkViaRedirect" /* LINK_VIA_REDIRECT */ , eventId);
}
/**
 * Returns a {@link UserCredential} from the redirect-based sign-in flow.
 *
 * @remarks
 * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an
 * error. If no redirect operation was called, returns a {@link UserCredential}
 * with a null `user`.
 *
 * @example
 * ```javascript
 * // Sign in using a redirect.
 * const provider = new FacebookAuthProvider();
 * // You can add additional scopes to the provider:
 * provider.addScope('user_birthday');
 * // Start a sign in process for an unauthenticated user.
 * await signInWithRedirect(auth, provider);
 * // This will trigger a full page redirect away from your app
 *
 * // After returning from the redirect when your app initializes you can obtain the result
 * const result = await getRedirectResult(auth);
 * if (result) {
 *   // This is the signed-in user
 *   const user = result.user;
 *   // This gives you a Facebook Access Token.
 *   const credential = provider.credentialFromResult(auth, result);
 *   const token = credential.accessToken;
 * }
 * // As this API can be used for sign-in, linking and reauthentication,
 * // check the operationType to determine what triggered this redirect
 * // operation.
 * const operationType = result.operationType;
 * ```
 *
 * @param auth - The {@link Auth} instance.
 * @param resolver - An instance of {@link PopupRedirectResolver}, optional
 * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
 *
 * @public
 */ async function getRedirectResult(auth, resolver) {
    await _castAuth(auth)._initializationPromise;
    return _getRedirectResult(auth, resolver, false);
}
async function _getRedirectResult(auth, resolverExtern, bypassAuthState = false) {
    const authInternal = _castAuth(auth);
    const resolver = _withDefaultResolver(authInternal, resolverExtern);
    const action = new RedirectAction(authInternal, resolver, bypassAuthState);
    const result = await action.execute();
    if (result && !bypassAuthState) {
        delete result.user._redirectEventId;
        await authInternal._persistUserIfCurrent(result.user);
        await authInternal._setRedirectUser(null, resolverExtern);
    }
    return result;
}
async function prepareUserForRedirect(user) {
    const eventId = _generateEventId(`${user.uid}:::`);
    user._redirectEventId = eventId;
    await user.auth._setRedirectUser(user);
    await user.auth._persistUserIfCurrent(user);
    return eventId;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The amount of time to store the UIDs of seen events; this is
// set to 10 min by default
const EVENT_DUPLICATION_CACHE_DURATION_MS = 600000;
class AuthEventManager {
    constructor(auth){
        this.auth = auth;
        this.cachedEventUids = new Set();
        this.consumers = new Set();
        this.queuedRedirectEvent = null;
        this.hasHandledPotentialRedirect = false;
        this.lastProcessedEventTime = Date.now();
    }
    registerConsumer(authEventConsumer) {
        this.consumers.add(authEventConsumer);
        if (this.queuedRedirectEvent && this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
            this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
            this.saveEventToCache(this.queuedRedirectEvent);
            this.queuedRedirectEvent = null;
        }
    }
    unregisterConsumer(authEventConsumer) {
        this.consumers.delete(authEventConsumer);
    }
    onEvent(event) {
        // Check if the event has already been handled
        if (this.hasEventBeenHandled(event)) return false;
        let handled = false;
        this.consumers.forEach((consumer)=>{
            if (this.isEventForConsumer(event, consumer)) {
                handled = true;
                this.sendToConsumer(event, consumer);
                this.saveEventToCache(event);
            }
        });
        if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) // If we've already seen a redirect before, or this is a popup event,
        // bail now
        return handled;
        this.hasHandledPotentialRedirect = true;
        // If the redirect wasn't handled, hang on to it
        if (!handled) {
            this.queuedRedirectEvent = event;
            handled = true;
        }
        return handled;
    }
    sendToConsumer(event, consumer) {
        var _a;
        if (event.error && !isNullRedirectEvent(event)) {
            const code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split("auth/")[1]) || "internal-error" /* INTERNAL_ERROR */ ;
            consumer.onError(_createError(this.auth, code));
        } else consumer.onAuthEvent(event);
    }
    isEventForConsumer(event, consumer) {
        const eventIdMatches = consumer.eventId === null || !!event.eventId && event.eventId === consumer.eventId;
        return consumer.filter.includes(event.type) && eventIdMatches;
    }
    hasEventBeenHandled(event) {
        if (Date.now() - this.lastProcessedEventTime >= EVENT_DUPLICATION_CACHE_DURATION_MS) this.cachedEventUids.clear();
        return this.cachedEventUids.has(eventUid(event));
    }
    saveEventToCache(event) {
        this.cachedEventUids.add(eventUid(event));
        this.lastProcessedEventTime = Date.now();
    }
}
function eventUid(e) {
    return [
        e.type,
        e.eventId,
        e.sessionId,
        e.tenantId
    ].filter((v)=>v).join("-");
}
function isNullRedirectEvent({ type , error  }) {
    return type === "unknown" /* UNKNOWN */  && (error === null || error === void 0 ? void 0 : error.code) === `auth/${"no-auth-event" /* NO_AUTH_EVENT */ }`;
}
function isRedirectEvent(event) {
    switch(event.type){
        case "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */ :
        case "linkViaRedirect" /* LINK_VIA_REDIRECT */ :
        case "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */ :
            return true;
        case "unknown" /* UNKNOWN */ :
            return isNullRedirectEvent(event);
        default:
            return false;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ async function _getProjectConfig(auth, request = {}) {
    return _performApiRequest(auth, "GET" /* GET */ , "/v1/projects" /* GET_PROJECT_CONFIG */ , request);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
const HTTP_REGEX = /^https?/;
async function _validateOrigin(auth) {
    // Skip origin validation if we are in an emulated environment
    if (auth.config.emulator) return;
    const { authorizedDomains  } = await _getProjectConfig(auth);
    for (const domain of authorizedDomains)try {
        if (matchDomain(domain)) return;
    } catch (_a) {
    // Do nothing if there's a URL error; just continue searching
    }
    // In the old SDK, this error also provides helpful messages.
    _fail(auth, "unauthorized-domain" /* INVALID_ORIGIN */ );
}
function matchDomain(expected) {
    const currentUrl = _getCurrentUrl();
    const { protocol , hostname  } = new URL(currentUrl);
    if (expected.startsWith("chrome-extension://")) {
        const ceUrl = new URL(expected);
        if (ceUrl.hostname === "" && hostname === "") // For some reason we're not parsing chrome URLs properly
        return protocol === "chrome-extension:" && expected.replace("chrome-extension://", "") === currentUrl.replace("chrome-extension://", "");
        return protocol === "chrome-extension:" && ceUrl.hostname === hostname;
    }
    if (!HTTP_REGEX.test(protocol)) return false;
    if (IP_ADDRESS_REGEX.test(expected)) // The domain has to be exactly equal to the pattern, as an IP domain will
    // only contain the IP, no extra character.
    return hostname === expected;
    // Dots in pattern should be escaped.
    const escapedDomainPattern = expected.replace(/\./g, "\\.");
    // Non ip address domains.
    // domain.com = *.domain.com OR domain.com
    const re = new RegExp("^(.+\\." + escapedDomainPattern + "|" + escapedDomainPattern + ")$", "i");
    return re.test(hostname);
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const NETWORK_TIMEOUT = new Delay(30000, 60000);
/**
 * Reset unlaoded GApi modules. If gapi.load fails due to a network error,
 * it will stop working after a retrial. This is a hack to fix this issue.
 */ function resetUnloadedGapiModules() {
    // Clear last failed gapi.load state to force next gapi.load to first
    // load the failed gapi.iframes module.
    // Get gapix.beacon context.
    const beacon = _window().___jsl;
    // Get current hint.
    if (beacon === null || beacon === void 0 ? void 0 : beacon.H) // Get gapi hint.
    for (const hint of Object.keys(beacon.H)){
        // Requested modules.
        beacon.H[hint].r = beacon.H[hint].r || [];
        // Loaded modules.
        beacon.H[hint].L = beacon.H[hint].L || [];
        // Set requested modules to a copy of the loaded modules.
        beacon.H[hint].r = [
            ...beacon.H[hint].L
        ];
        // Clear pending callbacks.
        if (beacon.CP) for(let i = 0; i < beacon.CP.length; i++)// Remove all failed pending callbacks.
        beacon.CP[i] = null;
    }
}
function loadGapi(auth) {
    return new Promise((resolve, reject)=>{
        var _a, _b, _c;
        // Function to run when gapi.load is ready.
        function loadGapiIframe() {
            // The developer may have tried to previously run gapi.load and failed.
            // Run this to fix that.
            resetUnloadedGapiModules();
            gapi.load("gapi.iframes", {
                callback: ()=>{
                    resolve(gapi.iframes.getContext());
                },
                ontimeout: ()=>{
                    // The above reset may be sufficient, but having this reset after
                    // failure ensures that if the developer calls gapi.load after the
                    // connection is re-established and before another attempt to embed
                    // the iframe, it would work and would not be broken because of our
                    // failed attempt.
                    // Timeout when gapi.iframes.Iframe not loaded.
                    resetUnloadedGapiModules();
                    reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */ ));
                },
                timeout: NETWORK_TIMEOUT.get()
            });
        }
        if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) // If gapi.iframes.Iframe available, resolve.
        resolve(gapi.iframes.getContext());
        else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) // Gapi loader ready, load gapi.iframes.
        loadGapiIframe();
        else {
            // Create a new iframe callback when this is called so as not to overwrite
            // any previous defined callback. This happens if this method is called
            // multiple times in parallel and could result in the later callback
            // overwriting the previous one. This would end up with a iframe
            // timeout.
            const cbName = _generateCallbackName("iframefcb");
            // GApi loader not available, dynamically load platform.js.
            _window()[cbName] = ()=>{
                // GApi loader should be ready.
                if (!!gapi.load) loadGapiIframe();
                else // Gapi loader failed, throw error.
                reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */ ));
            };
            // Load GApi loader.
            return _loadJS(`https://apis.google.com/js/api.js?onload=${cbName}`).catch((e)=>reject(e));
        }
    }).catch((error)=>{
        // Reset cached promise to allow for retrial.
        cachedGApiLoader = null;
        throw error;
    });
}
let cachedGApiLoader = null;
function _loadGapi(auth) {
    cachedGApiLoader = cachedGApiLoader || loadGapi(auth);
    return cachedGApiLoader;
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const PING_TIMEOUT = new Delay(5000, 15000);
const IFRAME_PATH = "__/auth/iframe";
const EMULATED_IFRAME_PATH = "emulator/auth/iframe";
const IFRAME_ATTRIBUTES = {
    style: {
        position: "absolute",
        top: "-100px",
        width: "1px",
        height: "1px"
    },
    "aria-hidden": "true",
    tabindex: "-1"
};
// Map from apiHost to endpoint ID for passing into iframe. In current SDK, apiHost can be set to
// anything (not from a list of endpoints with IDs as in legacy), so this is the closest we can get.
const EID_FROM_APIHOST = new Map([
    [
        "identitytoolkit.googleapis.com" /* API_HOST */ ,
        "p"
    ],
    [
        "staging-identitytoolkit.sandbox.googleapis.com",
        "s"
    ],
    [
        "test-identitytoolkit.sandbox.googleapis.com",
        "t"
    ] // test
]);
function getIframeUrl(auth) {
    const config = auth.config;
    _assert(config.authDomain, auth, "auth-domain-config-required" /* MISSING_AUTH_DOMAIN */ );
    const url = config.emulator ? _emulatorUrl(config, EMULATED_IFRAME_PATH) : `https://${auth.config.authDomain}/${IFRAME_PATH}`;
    const params = {
        apiKey: config.apiKey,
        appName: auth.name,
        v: (0, _app.SDK_VERSION)
    };
    const eid = EID_FROM_APIHOST.get(auth.config.apiHost);
    if (eid) params.eid = eid;
    const frameworks = auth._getFrameworks();
    if (frameworks.length) params.fw = frameworks.join(",");
    return `${url}?${(0, _util.querystring)(params).slice(1)}`;
}
async function _openIframe(auth) {
    const context = await _loadGapi(auth);
    const gapi = _window().gapi;
    _assert(gapi, auth, "internal-error" /* INTERNAL_ERROR */ );
    return context.open({
        where: document.body,
        url: getIframeUrl(auth),
        messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
        attributes: IFRAME_ATTRIBUTES,
        dontclear: true
    }, (iframe)=>new Promise(async (resolve, reject)=>{
            await iframe.restyle({
                // Prevent iframe from closing on mouse out.
                setHideOnLeave: false
            });
            const networkError = _createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */ );
            // Confirm iframe is correctly loaded.
            // To fallback on failure, set a timeout.
            const networkErrorTimer = _window().setTimeout(()=>{
                reject(networkError);
            }, PING_TIMEOUT.get());
            // Clear timer and resolve pending iframe ready promise.
            function clearTimerAndResolve() {
                _window().clearTimeout(networkErrorTimer);
                resolve(iframe);
            }
            // This returns an IThenable. However the reject part does not call
            // when the iframe is not loaded.
            iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, ()=>{
                reject(networkError);
            });
        }));
}
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const BASE_POPUP_OPTIONS = {
    location: "yes",
    resizable: "yes",
    statusbar: "yes",
    toolbar: "no"
};
const DEFAULT_WIDTH = 500;
const DEFAULT_HEIGHT = 600;
const TARGET_BLANK = "_blank";
const FIREFOX_EMPTY_URL = "http://localhost";
class AuthPopup {
    constructor(window){
        this.window = window;
        this.associatedEvent = null;
    }
    close() {
        if (this.window) try {
            this.window.close();
        } catch (e) {}
    }
}
function _open(auth, url, name2, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {
    const top = Math.max((window.screen.availHeight - height) / 2, 0).toString();
    const left = Math.max((window.screen.availWidth - width) / 2, 0).toString();
    let target = "";
    const options = Object.assign(Object.assign({}, BASE_POPUP_OPTIONS), {
        width: width.toString(),
        height: height.toString(),
        top,
        left
    });
    // Chrome iOS 7 and 8 is returning an undefined popup win when target is
    // specified, even though the popup is not necessarily blocked.
    const ua = (0, _util.getUA)().toLowerCase();
    if (name2) target = _isChromeIOS(ua) ? TARGET_BLANK : name2;
    if (_isFirefox(ua)) {
        // Firefox complains when invalid URLs are popped out. Hacky way to bypass.
        url = url || FIREFOX_EMPTY_URL;
        // Firefox disables by default scrolling on popup windows, which can create
        // issues when the user has many Google accounts, for instance.
        options.scrollbars = "yes";
    }
    const optionsString = Object.entries(options).reduce((accum, [key, value])=>`${accum}${key}=${value},`, "");
    if (_isIOSStandalone(ua) && target !== "_self") {
        openAsNewWindowIOS(url || "", target);
        return new AuthPopup(null);
    }
    // about:blank getting sanitized causing browsers like IE/Edge to display
    // brief error message before redirecting to handler.
    const newWin = window.open(url || "", target, optionsString);
    _assert(newWin, auth, "popup-blocked" /* POPUP_BLOCKED */ );
    // Flaky on IE edge, encapsulate with a try and catch.
    try {
        newWin.focus();
    } catch (e) {}
    return new AuthPopup(newWin);
}
function openAsNewWindowIOS(url, target) {
    const el = document.createElement("a");
    el.href = url;
    el.target = target;
    const click = document.createEvent("MouseEvent");
    click.initMouseEvent("click", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
    el.dispatchEvent(click);
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * URL for Authentication widget which will initiate the OAuth handshake
 *
 * @internal
 */ const WIDGET_PATH = "__/auth/handler";
/**
 * URL for emulated environment
 *
 * @internal
 */ const EMULATOR_WIDGET_PATH = "emulator/auth/handler";
function _getRedirectUrl(auth, provider, authType, redirectUrl, eventId, additionalParams) {
    _assert(auth.config.authDomain, auth, "auth-domain-config-required" /* MISSING_AUTH_DOMAIN */ );
    _assert(auth.config.apiKey, auth, "invalid-api-key" /* INVALID_API_KEY */ );
    const params = {
        apiKey: auth.config.apiKey,
        appName: auth.name,
        authType,
        redirectUrl,
        v: (0, _app.SDK_VERSION),
        eventId
    };
    if (provider instanceof FederatedAuthProvider) {
        provider.setDefaultLanguage(auth.languageCode);
        params.providerId = provider.providerId || "";
        if (!(0, _util.isEmpty)(provider.getCustomParameters())) params.customParameters = JSON.stringify(provider.getCustomParameters());
        // TODO set additionalParams from the provider as well?
        for (const [key, value] of Object.entries(additionalParams || {}))params[key] = value;
    }
    if (provider instanceof BaseOAuthProvider) {
        const scopes = provider.getScopes().filter((scope)=>scope !== "");
        if (scopes.length > 0) params.scopes = scopes.join(",");
    }
    if (auth.tenantId) params.tid = auth.tenantId;
    // TODO: maybe set eid as endipointId
    // TODO: maybe set fw as Frameworks.join(",")
    const paramsDict = params;
    for (const key of Object.keys(paramsDict))if (paramsDict[key] === undefined) delete paramsDict[key];
    return `${getHandlerBase(auth)}?${(0, _util.querystring)(paramsDict).slice(1)}`;
}
function getHandlerBase({ config  }) {
    if (!config.emulator) return `https://${config.authDomain}/${WIDGET_PATH}`;
    return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The special web storage event
 *
 */ const WEB_STORAGE_SUPPORT_KEY = "webStorageSupport";
class BrowserPopupRedirectResolver {
    constructor(){
        this.eventManagers = {};
        this.iframes = {};
        this.originValidationPromises = {};
        this._redirectPersistence = browserSessionPersistence;
        this._completeRedirectFn = _getRedirectResult;
        this._overrideRedirectResult = _overrideRedirectResult;
    }
    // Wrapping in async even though we don't await anywhere in order
    // to make sure errors are raised as promise rejections
    async _openPopup(auth, provider, authType, eventId) {
        var _a;
        debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, "_initialize() not called before _openPopup()");
        const url = _getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId);
        return _open(auth, url, _generateEventId());
    }
    async _openRedirect(auth, provider, authType, eventId) {
        await this._originValidation(auth);
        _setWindowLocation(_getRedirectUrl(auth, provider, authType, _getCurrentUrl(), eventId));
        return new Promise(()=>{});
    }
    _initialize(auth) {
        const key = auth._key();
        if (this.eventManagers[key]) {
            const { manager , promise  } = this.eventManagers[key];
            if (manager) return Promise.resolve(manager);
            else {
                debugAssert(promise, "If manager is not set, promise should be");
                return promise;
            }
        }
        const promise = this.initAndGetManager(auth);
        this.eventManagers[key] = {
            promise
        };
        // If the promise is rejected, the key should be removed so that the
        // operation can be retried later.
        promise.catch(()=>{
            delete this.eventManagers[key];
        });
        return promise;
    }
    async initAndGetManager(auth) {
        const iframe = await _openIframe(auth);
        const manager = new AuthEventManager(auth);
        iframe.register("authEvent", (iframeEvent)=>{
            _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, "invalid-auth-event" /* INVALID_AUTH_EVENT */ );
            // TODO: Consider splitting redirect and popup events earlier on
            const handled = manager.onEvent(iframeEvent.authEvent);
            return {
                status: handled ? "ACK" /* ACK */  : "ERROR" /* ERROR */ 
            };
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
        this.eventManagers[auth._key()] = {
            manager
        };
        this.iframes[auth._key()] = iframe;
        return manager;
    }
    _isIframeWebStorageSupported(auth, cb) {
        const iframe = this.iframes[auth._key()];
        iframe.send(WEB_STORAGE_SUPPORT_KEY, {
            type: WEB_STORAGE_SUPPORT_KEY
        }, (result)=>{
            var _a;
            const isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];
            if (isSupported !== undefined) cb(!!isSupported);
            _fail(auth, "internal-error" /* INTERNAL_ERROR */ );
        }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
    }
    _originValidation(auth) {
        const key = auth._key();
        if (!this.originValidationPromises[key]) this.originValidationPromises[key] = _validateOrigin(auth);
        return this.originValidationPromises[key];
    }
    get _shouldInitProactively() {
        // Mobile browsers and Safari need to optimistically initialize
        return _isMobileBrowser() || _isSafari() || _isIOS();
    }
}
/**
 * An implementation of {@link PopupRedirectResolver} suitable for browser
 * based applications.
 *
 * @public
 */ const browserPopupRedirectResolver = BrowserPopupRedirectResolver;
class MultiFactorAssertionImpl {
    constructor(factorId){
        this.factorId = factorId;
    }
    _process(auth, session, displayName) {
        switch(session.type){
            case "enroll" /* ENROLL */ :
                return this._finalizeEnroll(auth, session.credential, displayName);
            case "signin" /* SIGN_IN */ :
                return this._finalizeSignIn(auth, session.credential);
            default:
                return debugFail("unexpected MultiFactorSessionType");
        }
    }
}
/**
 * {@inheritdoc PhoneMultiFactorAssertion}
 *
 * @public
 */ class PhoneMultiFactorAssertionImpl extends MultiFactorAssertionImpl {
    constructor(credential){
        super("phone" /* PHONE */ );
        this.credential = credential;
    }
    /** @internal */ static _fromCredential(credential) {
        return new PhoneMultiFactorAssertionImpl(credential);
    }
    /** @internal */ _finalizeEnroll(auth, idToken, displayName) {
        return finalizeEnrollPhoneMfa(auth, {
            idToken,
            displayName,
            phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
    }
    /** @internal */ _finalizeSignIn(auth, mfaPendingCredential) {
        return finalizeSignInPhoneMfa(auth, {
            mfaPendingCredential,
            phoneVerificationInfo: this.credential._makeVerificationRequest()
        });
    }
}
/**
 * Provider for generating a {@link PhoneMultiFactorAssertion}.
 *
 * @public
 */ class PhoneMultiFactorGenerator {
    constructor(){}
    /**
     * Provides a {@link PhoneMultiFactorAssertion} to confirm ownership of the phone second factor.
     *
     * @param phoneAuthCredential - A credential provided by {@link PhoneAuthProvider.credential}.
     * @returns A {@link PhoneMultiFactorAssertion} which can be used with
     * {@link MultiFactorResolver.resolveSignIn}
     */ static assertion(credential) {
        return PhoneMultiFactorAssertionImpl._fromCredential(credential);
    }
}
/**
 * The identifier of the phone second factor: `phone`.
 */ PhoneMultiFactorGenerator.FACTOR_ID = "phone";
var name = "@firebase/auth";
var version = "0.20.4";
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class AuthInterop {
    constructor(auth){
        this.auth = auth;
        this.internalListeners = new Map();
    }
    getUid() {
        var _a;
        this.assertAuthConfigured();
        return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
    }
    async getToken(forceRefresh) {
        this.assertAuthConfigured();
        await this.auth._initializationPromise;
        if (!this.auth.currentUser) return null;
        const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
        return {
            accessToken
        };
    }
    addAuthTokenListener(listener) {
        this.assertAuthConfigured();
        if (this.internalListeners.has(listener)) return;
        const unsubscribe = this.auth.onIdTokenChanged((user)=>{
            var _a;
            listener(((_a = user) === null || _a === void 0 ? void 0 : _a.stsTokenManager.accessToken) || null);
        });
        this.internalListeners.set(listener, unsubscribe);
        this.updateProactiveRefresh();
    }
    removeAuthTokenListener(listener) {
        this.assertAuthConfigured();
        const unsubscribe = this.internalListeners.get(listener);
        if (!unsubscribe) return;
        this.internalListeners.delete(listener);
        unsubscribe();
        this.updateProactiveRefresh();
    }
    assertAuthConfigured() {
        _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth" /* DEPENDENT_SDK_INIT_BEFORE_AUTH */ );
    }
    updateProactiveRefresh() {
        if (this.internalListeners.size > 0) this.auth._startProactiveRefresh();
        else this.auth._stopProactiveRefresh();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function getVersionForPlatform(clientPlatform) {
    switch(clientPlatform){
        case "Node" /* NODE */ :
            return "node";
        case "ReactNative" /* REACT_NATIVE */ :
            return "rn";
        case "Worker" /* WORKER */ :
            return "webworker";
        case "Cordova" /* CORDOVA */ :
            return "cordova";
        default:
            return undefined;
    }
}
/** @internal */ function registerAuth(clientPlatform) {
    (0, _app._registerComponent)(new (0, _component.Component)("auth" /* AUTH */ , (container, { options: deps  })=>{
        const app1 = container.getProvider("app").getImmediate();
        const heartbeatServiceProvider1 = container.getProvider("heartbeat");
        const { apiKey , authDomain  } = app1.options;
        return ((app, heartbeatServiceProvider)=>{
            _assert(apiKey && !apiKey.includes(":"), "invalid-api-key" /* INVALID_API_KEY */ , {
                appName: app.name
            });
            // Auth domain is optional if IdP sign in isn't being used
            _assert(!(authDomain === null || authDomain === void 0 ? void 0 : authDomain.includes(":")), "argument-error" /* ARGUMENT_ERROR */ , {
                appName: app.name
            });
            const config = {
                apiKey,
                authDomain,
                clientPlatform,
                apiHost: "identitytoolkit.googleapis.com" /* API_HOST */ ,
                tokenApiHost: "securetoken.googleapis.com" /* TOKEN_API_HOST */ ,
                apiScheme: "https" /* API_SCHEME */ ,
                sdkClientVersion: _getClientVersion(clientPlatform)
            };
            const authInstance = new AuthImpl(app, heartbeatServiceProvider, config);
            _initializeAuthInstance(authInstance, deps);
            return authInstance;
        })(app1, heartbeatServiceProvider1);
    }, "PUBLIC" /* PUBLIC */ )/**
         * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()
         * For why we do this, See go/firebase-next-auth-init
         */ .setInstantiationMode("EXPLICIT" /* EXPLICIT */ )/**
         * Because all firebase products that depend on auth depend on auth-internal directly,
         * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.
         */ .setInstanceCreatedCallback((container, _instanceIdentifier, _instance)=>{
        const authInternalProvider = container.getProvider("auth-internal" /* AUTH_INTERNAL */ );
        authInternalProvider.initialize();
    }));
    (0, _app._registerComponent)(new (0, _component.Component)("auth-internal" /* AUTH_INTERNAL */ , (container)=>{
        const auth1 = _castAuth(container.getProvider("auth" /* AUTH */ ).getImmediate());
        return ((auth)=>new AuthInterop(auth))(auth1);
    }, "PRIVATE" /* PRIVATE */ ).setInstantiationMode("EXPLICIT" /* EXPLICIT */ ));
    (0, _app.registerVersion)(name, version, getVersionForPlatform(clientPlatform));
    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
    (0, _app.registerVersion)(name, version, "esm2017");
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns the Auth instance associated with the provided {@link @firebase/app#FirebaseApp}.
 * If no instance exists, initializes an Auth instance with platform-specific default dependencies.
 *
 * @param app - The Firebase App.
 *
 * @public
 */ function getAuth(app = (0, _app.getApp)()) {
    const provider = (0, _app._getProvider)(app, "auth");
    if (provider.isInitialized()) return provider.getImmediate();
    return initializeAuth(app, {
        popupRedirectResolver: browserPopupRedirectResolver,
        persistence: [
            indexedDBLocalPersistence,
            browserLocalPersistence,
            browserSessionPersistence
        ]
    });
}
registerAuth("Browser" /* BROWSER */ );

},{"@firebase/util":"ePiK6","@firebase/app":"3AcPV","tslib":"lRdW5","@firebase/logger":"fZmft","@firebase/component":"bi1VB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRdW5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
parcelHelpers.export(exports, "__classPrivateFieldIn", ()=>__classPrivateFieldIn);
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d1, b1) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d1, b1);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v1) {
        Promise.resolve(v1).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"blEyr":[function(require,module,exports) {
(function() {
    // nb. This is for IE10 and lower _only_.
    var supportCustomEvent = window.CustomEvent;
    if (!supportCustomEvent || typeof supportCustomEvent === "object") {
        supportCustomEvent = function CustomEvent(event, x) {
            x = x || {};
            var ev = document.createEvent("CustomEvent");
            ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);
            return ev;
        };
        supportCustomEvent.prototype = window.Event.prototype;
    }
    /**
   * @param {Element} el to check for stacking context
   * @return {boolean} whether this el or its parents creates a stacking context
   */ function createsStackingContext(el) {
        while(el && el !== document.body){
            var s = window.getComputedStyle(el);
            var invalid = function(k, ok) {
                return !(s[k] === undefined || s[k] === ok);
            };
            if (s.opacity < 1 || invalid("zIndex", "auto") || invalid("transform", "none") || invalid("mixBlendMode", "normal") || invalid("filter", "none") || invalid("perspective", "none") || s["isolation"] === "isolate" || s.position === "fixed" || s.webkitOverflowScrolling === "touch") return true;
            el = el.parentElement;
        }
        return false;
    }
    /**
   * Finds the nearest <dialog> from the passed element.
   *
   * @param {Element} el to search from
   * @return {HTMLDialogElement} dialog found
   */ function findNearestDialog(el) {
        while(el){
            if (el.localName === "dialog") return el;
            el = el.parentElement;
        }
        return null;
    }
    /**
   * Blur the specified element, as long as it's not the HTML body element.
   * This works around an IE9/10 bug - blurring the body causes Windows to
   * blur the whole application.
   *
   * @param {Element} el to blur
   */ function safeBlur(el) {
        if (el && el.blur && el !== document.body) el.blur();
    }
    /**
   * @param {!NodeList} nodeList to search
   * @param {Node} node to find
   * @return {boolean} whether node is inside nodeList
   */ function inNodeList(nodeList, node) {
        for(var i = 0; i < nodeList.length; ++i){
            if (nodeList[i] === node) return true;
        }
        return false;
    }
    /**
   * @param {HTMLFormElement} el to check
   * @return {boolean} whether this form has method="dialog"
   */ function isFormMethodDialog(el) {
        if (!el || !el.hasAttribute("method")) return false;
        return el.getAttribute("method").toLowerCase() === "dialog";
    }
    /**
   * @param {!HTMLDialogElement} dialog to upgrade
   * @constructor
   */ function dialogPolyfillInfo(dialog) {
        this.dialog_ = dialog;
        this.replacedStyleTop_ = false;
        this.openAsModal_ = false;
        // Set a11y role. Browsers that support dialog implicitly know this already.
        if (!dialog.hasAttribute("role")) dialog.setAttribute("role", "dialog");
        dialog.show = this.show.bind(this);
        dialog.showModal = this.showModal.bind(this);
        dialog.close = this.close.bind(this);
        if (!("returnValue" in dialog)) dialog.returnValue = "";
        if ("MutationObserver" in window) {
            var mo = new MutationObserver(this.maybeHideModal.bind(this));
            mo.observe(dialog, {
                attributes: true,
                attributeFilter: [
                    "open"
                ]
            });
        } else {
            // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also
            // seem to fire even if the element was removed as part of a parent removal. Use the removed
            // events to force downgrade (useful if removed/immediately added).
            var removed = false;
            var cb = (function() {
                removed ? this.downgradeModal() : this.maybeHideModal();
                removed = false;
            }).bind(this);
            var timeout;
            var delayModel = function(ev) {
                if (ev.target !== dialog) return;
                 // not for a child element
                var cand = "DOMNodeRemoved";
                removed |= ev.type.substr(0, cand.length) === cand;
                window.clearTimeout(timeout);
                timeout = window.setTimeout(cb, 0);
            };
            [
                "DOMAttrModified",
                "DOMNodeRemoved",
                "DOMNodeRemovedFromDocument"
            ].forEach(function(name) {
                dialog.addEventListener(name, delayModel);
            });
        }
        // Note that the DOM is observed inside DialogManager while any dialog
        // is being displayed as a modal, to catch modal removal from the DOM.
        Object.defineProperty(dialog, "open", {
            set: this.setOpen.bind(this),
            get: dialog.hasAttribute.bind(dialog, "open")
        });
        this.backdrop_ = document.createElement("div");
        this.backdrop_.className = "backdrop";
        this.backdrop_.addEventListener("click", this.backdropClick_.bind(this));
    }
    dialogPolyfillInfo.prototype = {
        get dialog () {
            return this.dialog_;
        },
        /**
     * Maybe remove this dialog from the modal top layer. This is called when
     * a modal dialog may no longer be tenable, e.g., when the dialog is no
     * longer open or is no longer part of the DOM.
     */ maybeHideModal: function() {
            if (this.dialog_.hasAttribute("open") && document.body.contains(this.dialog_)) return;
            this.downgradeModal();
        },
        /**
     * Remove this dialog from the modal top layer, leaving it as a non-modal.
     */ downgradeModal: function() {
            if (!this.openAsModal_) return;
            this.openAsModal_ = false;
            this.dialog_.style.zIndex = "";
            // This won't match the native <dialog> exactly because if the user set top on a centered
            // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's
            // possible to polyfill this perfectly.
            if (this.replacedStyleTop_) {
                this.dialog_.style.top = "";
                this.replacedStyleTop_ = false;
            }
            // Clear the backdrop and remove from the manager.
            this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);
            dialogPolyfill.dm.removeDialog(this);
        },
        /**
     * @param {boolean} value whether to open or close this dialog
     */ setOpen: function(value) {
            if (value) this.dialog_.hasAttribute("open") || this.dialog_.setAttribute("open", "");
            else {
                this.dialog_.removeAttribute("open");
                this.maybeHideModal(); // nb. redundant with MutationObserver
            }
        },
        /**
     * Handles clicks on the fake .backdrop element, redirecting them as if
     * they were on the dialog itself.
     *
     * @param {!Event} e to redirect
     */ backdropClick_: function(e) {
            if (!this.dialog_.hasAttribute("tabindex")) {
                // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be
                // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this
                // would not be needed - clicks would move the implicit cursor there.
                var fake = document.createElement("div");
                this.dialog_.insertBefore(fake, this.dialog_.firstChild);
                fake.tabIndex = -1;
                fake.focus();
                this.dialog_.removeChild(fake);
            } else this.dialog_.focus();
            var redirectedEvent = document.createEvent("MouseEvents");
            redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window, e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);
            this.dialog_.dispatchEvent(redirectedEvent);
            e.stopPropagation();
        },
        /**
     * Focuses on the first focusable element within the dialog. This will always blur the current
     * focus, even if nothing within the dialog is found.
     */ focus_: function() {
            // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.
            var target = this.dialog_.querySelector("[autofocus]:not([disabled])");
            if (!target && this.dialog_.tabIndex >= 0) target = this.dialog_;
            if (!target) {
                // Note that this is 'any focusable area'. This list is probably not exhaustive, but the
                // alternative involves stepping through and trying to focus everything.
                var opts = [
                    "button",
                    "input",
                    "keygen",
                    "select",
                    "textarea"
                ];
                var query = opts.map(function(el) {
                    return el + ":not([disabled])";
                });
                // TODO(samthor): tabindex values that are not numeric are not focusable.
                query.push('[tabindex]:not([disabled]):not([tabindex=""])'); // tabindex != "", not disabled
                target = this.dialog_.querySelector(query.join(", "));
            }
            safeBlur(document.activeElement);
            target && target.focus();
        },
        /**
     * Sets the zIndex for the backdrop and dialog.
     *
     * @param {number} dialogZ
     * @param {number} backdropZ
     */ updateZIndex: function(dialogZ, backdropZ) {
            if (dialogZ < backdropZ) throw new Error("dialogZ should never be < backdropZ");
            this.dialog_.style.zIndex = dialogZ;
            this.backdrop_.style.zIndex = backdropZ;
        },
        /**
     * Shows the dialog. If the dialog is already open, this does nothing.
     */ show: function() {
            if (!this.dialog_.open) {
                this.setOpen(true);
                this.focus_();
            }
        },
        /**
     * Show this dialog modally.
     */ showModal: function() {
            if (this.dialog_.hasAttribute("open")) throw new Error("Failed to execute 'showModal' on dialog: The element is already open, and therefore cannot be opened modally.");
            if (!document.body.contains(this.dialog_)) throw new Error("Failed to execute 'showModal' on dialog: The element is not in a Document.");
            if (!dialogPolyfill.dm.pushDialog(this)) throw new Error("Failed to execute 'showModal' on dialog: There are too many open modal dialogs.");
            if (createsStackingContext(this.dialog_.parentElement)) console.warn("A dialog is being shown inside a stacking context. This may cause it to be unusable. For more information, see this link: https://github.com/GoogleChrome/dialog-polyfill/#stacking-context");
            this.setOpen(true);
            this.openAsModal_ = true;
            // Optionally center vertically, relative to the current viewport.
            if (dialogPolyfill.needsCentering(this.dialog_)) {
                dialogPolyfill.reposition(this.dialog_);
                this.replacedStyleTop_ = true;
            } else this.replacedStyleTop_ = false;
            // Insert backdrop.
            this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);
            // Focus on whatever inside the dialog.
            this.focus_();
        },
        /**
     * Closes this HTMLDialogElement. This is optional vs clearing the open
     * attribute, however this fires a 'close' event.
     *
     * @param {string=} opt_returnValue to use as the returnValue
     */ close: function(opt_returnValue) {
            if (!this.dialog_.hasAttribute("open")) throw new Error("Failed to execute 'close' on dialog: The element does not have an 'open' attribute, and therefore cannot be closed.");
            this.setOpen(false);
            // Leave returnValue untouched in case it was set directly on the element
            if (opt_returnValue !== undefined) this.dialog_.returnValue = opt_returnValue;
            // Triggering "close" event for any attached listeners on the <dialog>.
            var closeEvent = new supportCustomEvent("close", {
                bubbles: false,
                cancelable: false
            });
            this.dialog_.dispatchEvent(closeEvent);
        }
    };
    var dialogPolyfill = {};
    dialogPolyfill.reposition = function(element) {
        var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
        var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;
        element.style.top = Math.max(scrollTop, topValue) + "px";
    };
    dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {
        for(var i = 0; i < document.styleSheets.length; ++i){
            var styleSheet = document.styleSheets[i];
            var cssRules = null;
            // Some browsers throw on cssRules.
            try {
                cssRules = styleSheet.cssRules;
            } catch (e) {}
            if (!cssRules) continue;
            for(var j = 0; j < cssRules.length; ++j){
                var rule = cssRules[j];
                var selectedNodes = null;
                // Ignore errors on invalid selector texts.
                try {
                    selectedNodes = document.querySelectorAll(rule.selectorText);
                } catch (e) {}
                if (!selectedNodes || !inNodeList(selectedNodes, element)) continue;
                var cssTop = rule.style.getPropertyValue("top");
                var cssBottom = rule.style.getPropertyValue("bottom");
                if (cssTop && cssTop !== "auto" || cssBottom && cssBottom !== "auto") return true;
            }
        }
        return false;
    };
    dialogPolyfill.needsCentering = function(dialog) {
        var computedStyle = window.getComputedStyle(dialog);
        if (computedStyle.position !== "absolute") return false;
        // We must determine whether the top/bottom specified value is non-auto.  In
        // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but
        // Firefox returns the used value. So we do this crazy thing instead: check
        // the inline style and then go through CSS rules.
        if (dialog.style.top !== "auto" && dialog.style.top !== "" || dialog.style.bottom !== "auto" && dialog.style.bottom !== "") return false;
        return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);
    };
    /**
   * @param {!Element} element to force upgrade
   */ dialogPolyfill.forceRegisterDialog = function(element) {
        if (window.HTMLDialogElement || element.showModal) console.warn("This browser already supports <dialog>, the polyfill may not work correctly", element);
        if (element.localName !== "dialog") throw new Error("Failed to register dialog: The element is not a dialog.");
        new dialogPolyfillInfo(element);
    };
    /**
   * @param {!Element} element to upgrade, if necessary
   */ dialogPolyfill.registerDialog = function(element) {
        if (!element.showModal) dialogPolyfill.forceRegisterDialog(element);
    };
    /**
   * @constructor
   */ dialogPolyfill.DialogManager = function() {
        /** @type {!Array<!dialogPolyfillInfo>} */ this.pendingDialogStack = [];
        var checkDOM = this.checkDOM_.bind(this);
        // The overlay is used to simulate how a modal dialog blocks the document.
        // The blocking dialog is positioned on top of the overlay, and the rest of
        // the dialogs on the pending dialog stack are positioned below it. In the
        // actual implementation, the modal dialog stacking is controlled by the
        // top layer, where z-index has no effect.
        this.overlay = document.createElement("div");
        this.overlay.className = "_dialog_overlay";
        this.overlay.addEventListener("click", (function(e) {
            this.forwardTab_ = undefined;
            e.stopPropagation();
            checkDOM([]); // sanity-check DOM
        }).bind(this));
        this.handleKey_ = this.handleKey_.bind(this);
        this.handleFocus_ = this.handleFocus_.bind(this);
        this.zIndexLow_ = 100000;
        this.zIndexHigh_ = 100150;
        this.forwardTab_ = undefined;
        if ("MutationObserver" in window) this.mo_ = new MutationObserver(function(records) {
            var removed = [];
            records.forEach(function(rec) {
                for(var i = 0, c; c = rec.removedNodes[i]; ++i){
                    if (!(c instanceof Element)) continue;
                    else if (c.localName === "dialog") removed.push(c);
                    removed = removed.concat(c.querySelectorAll("dialog"));
                }
            });
            removed.length && checkDOM(removed);
        });
    };
    /**
   * Called on the first modal dialog being shown. Adds the overlay and related
   * handlers.
   */ dialogPolyfill.DialogManager.prototype.blockDocument = function() {
        document.documentElement.addEventListener("focus", this.handleFocus_, true);
        document.addEventListener("keydown", this.handleKey_);
        this.mo_ && this.mo_.observe(document, {
            childList: true,
            subtree: true
        });
    };
    /**
   * Called on the first modal dialog being removed, i.e., when no more modal
   * dialogs are visible.
   */ dialogPolyfill.DialogManager.prototype.unblockDocument = function() {
        document.documentElement.removeEventListener("focus", this.handleFocus_, true);
        document.removeEventListener("keydown", this.handleKey_);
        this.mo_ && this.mo_.disconnect();
    };
    /**
   * Updates the stacking of all known dialogs.
   */ dialogPolyfill.DialogManager.prototype.updateStacking = function() {
        var zIndex = this.zIndexHigh_;
        for(var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i){
            dpi.updateZIndex(--zIndex, --zIndex);
            if (i === 0) this.overlay.style.zIndex = --zIndex;
        }
        // Make the overlay a sibling of the dialog itself.
        var last = this.pendingDialogStack[0];
        if (last) {
            var p = last.dialog.parentNode || document.body;
            p.appendChild(this.overlay);
        } else if (this.overlay.parentNode) this.overlay.parentNode.removeChild(this.overlay);
    };
    /**
   * @param {Element} candidate to check if contained or is the top-most modal dialog
   * @return {boolean} whether candidate is contained in top dialog
   */ dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {
        while(candidate = findNearestDialog(candidate)){
            for(var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i){
                if (dpi.dialog === candidate) return i === 0; // only valid if top-most
            }
            candidate = candidate.parentElement;
        }
        return false;
    };
    dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {
        if (this.containedByTopDialog_(event.target)) return;
        event.preventDefault();
        event.stopPropagation();
        safeBlur(event.target);
        if (this.forwardTab_ === undefined) return;
         // move focus only from a tab key
        var dpi = this.pendingDialogStack[0];
        var dialog = dpi.dialog;
        var position = dialog.compareDocumentPosition(event.target);
        if (position & Node.DOCUMENT_POSITION_PRECEDING) {
            if (this.forwardTab_) dpi.focus_();
            else document.documentElement.focus();
        } else ;
        return false;
    };
    dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {
        this.forwardTab_ = undefined;
        if (event.keyCode === 27) {
            event.preventDefault();
            event.stopPropagation();
            var cancelEvent = new supportCustomEvent("cancel", {
                bubbles: false,
                cancelable: true
            });
            var dpi = this.pendingDialogStack[0];
            if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) dpi.dialog.close();
        } else if (event.keyCode === 9) this.forwardTab_ = !event.shiftKey;
    };
    /**
   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are
   * removed and immediately readded don't stay modal, they become normal.
   *
   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed
   */ dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {
        // This operates on a clone because it may cause it to change. Each change also calls
        // updateStacking, which only actually needs to happen once. But who removes many modal dialogs
        // at a time?!
        var clone = this.pendingDialogStack.slice();
        clone.forEach(function(dpi) {
            if (removed.indexOf(dpi.dialog) !== -1) dpi.downgradeModal();
            else dpi.maybeHideModal();
        });
    };
    /**
   * @param {!dialogPolyfillInfo} dpi
   * @return {boolean} whether the dialog was allowed
   */ dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {
        var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;
        if (this.pendingDialogStack.length >= allowed) return false;
        if (this.pendingDialogStack.unshift(dpi) === 1) this.blockDocument();
        this.updateStacking();
        return true;
    };
    /**
   * @param {!dialogPolyfillInfo} dpi
   */ dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {
        var index = this.pendingDialogStack.indexOf(dpi);
        if (index === -1) return;
        this.pendingDialogStack.splice(index, 1);
        if (this.pendingDialogStack.length === 0) this.unblockDocument();
        this.updateStacking();
    };
    dialogPolyfill.dm = new dialogPolyfill.DialogManager();
    dialogPolyfill.formSubmitter = null;
    dialogPolyfill.useValue = null;
    /**
   * Installs global handlers, such as click listers and native method overrides. These are needed
   * even if a no dialog is registered, as they deal with <form method="dialog">.
   */ if (window.HTMLDialogElement === undefined) {
        /**
     * If HTMLFormElement translates method="DIALOG" into 'get', then replace the descriptor with
     * one that returns the correct value.
     */ var testForm = document.createElement("form");
        testForm.setAttribute("method", "dialog");
        if (testForm.method !== "dialog") {
            var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, "method");
            if (methodDescriptor) {
                // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything
                // and don't bother to update the element.
                var realGet = methodDescriptor.get;
                methodDescriptor.get = function() {
                    if (isFormMethodDialog(this)) return "dialog";
                    return realGet.call(this);
                };
                var realSet = methodDescriptor.set;
                methodDescriptor.set = function(v) {
                    if (typeof v === "string" && v.toLowerCase() === "dialog") return this.setAttribute("method", v);
                    return realSet.call(this, v);
                };
                Object.defineProperty(HTMLFormElement.prototype, "method", methodDescriptor);
            }
        }
        /**
     * Global 'click' handler, to capture the <input type="submit"> or <button> element which has
     * submitted a <form method="dialog">. Needed as Safari and others don't report this inside
     * document.activeElement.
     */ document.addEventListener("click", function(ev) {
            dialogPolyfill.formSubmitter = null;
            dialogPolyfill.useValue = null;
            if (ev.defaultPrevented) return;
             // e.g. a submit which prevents default submission
            var target = ev.target;
            if (!target || !isFormMethodDialog(target.form)) return;
            var valid = target.type === "submit" && [
                "button",
                "input"
            ].indexOf(target.localName) > -1;
            if (!valid) {
                if (!(target.localName === "input" && target.type === "image")) return;
                // this is a <input type="image">, which can submit forms
                dialogPolyfill.useValue = ev.offsetX + "," + ev.offsetY;
            }
            var dialog = findNearestDialog(target);
            if (!dialog) return;
            dialogPolyfill.formSubmitter = target;
        }, false);
        /**
     * Replace the native HTMLFormElement.submit() method, as it won't fire the
     * submit event and give us a chance to respond.
     */ var nativeFormSubmit = HTMLFormElement.prototype.submit;
        var replacementFormSubmit = function() {
            if (!isFormMethodDialog(this)) return nativeFormSubmit.call(this);
            var dialog = findNearestDialog(this);
            dialog && dialog.close();
        };
        HTMLFormElement.prototype.submit = replacementFormSubmit;
        /**
     * Global form 'dialog' method handler. Closes a dialog correctly on submit
     * and possibly sets its return value.
     */ document.addEventListener("submit", function(ev) {
            var form = ev.target;
            if (!isFormMethodDialog(form)) return;
            ev.preventDefault();
            var dialog = findNearestDialog(form);
            if (!dialog) return;
            // Forms can only be submitted via .submit() or a click (?), but anyway: sanity-check that
            // the submitter is correct before using its value as .returnValue.
            var s = dialogPolyfill.formSubmitter;
            if (s && s.form === form) dialog.close(dialogPolyfill.useValue || s.value);
            else dialog.close();
            dialogPolyfill.formSubmitter = null;
        }, true);
    }
    dialogPolyfill["forceRegisterDialog"] = dialogPolyfill.forceRegisterDialog;
    dialogPolyfill["registerDialog"] = dialogPolyfill.registerDialog;
    if (typeof define === "function" && "amd" in define) // AMD support
    define(function() {
        return dialogPolyfill;
    });
    else if (typeof module["exports"] === "object") // CommonJS support
    module["exports"] = dialogPolyfill;
    else // all others
    window["dialogPolyfill"] = dialogPolyfill;
})();

},{}],"bs1FL":[function(require,module,exports) {
/**
 * @license
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A component handler interface using the revealing module design pattern.
 * More details on this design pattern here:
 * https://github.com/jasonmayes/mdl-component-design-pattern
 *
 * @author Jason Mayes.
 */ /* exported componentHandler */ // Pre-defining the componentHandler interface, for closure documentation and
// static verification.
var componentHandler = {
    /**
   * Searches existing DOM for elements of our component type and upgrades them
   * if they have not already been upgraded.
   *
   * @param {string=} optJsClass the programatic name of the element class we
   * need to create a new instance of.
   * @param {string=} optCssClass the name of the CSS class elements of this
   * type will have.
   */ upgradeDom: function(optJsClass, optCssClass) {},
    /**
   * Upgrades a specific element rather than all in the DOM.
   *
   * @param {!Element} element The element we wish to upgrade.
   * @param {string=} optJsClass Optional name of the class we want to upgrade
   * the element to.
   */ upgradeElement: function(element, optJsClass) {},
    /**
   * Upgrades a specific list of elements rather than all in the DOM.
   *
   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements
   * The elements we wish to upgrade.
   */ upgradeElements: function(elements) {},
    /**
   * Upgrades all registered components found in the current DOM. This is
   * automatically called on window load.
   */ upgradeAllRegistered: function() {},
    /**
   * Allows user to be alerted to any upgrades that are performed for a given
   * component type
   *
   * @param {string} jsClass The class name of the MDL component we wish
   * to hook into for any upgrades performed.
   * @param {function(!HTMLElement)} callback The function to call upon an
   * upgrade. This function should expect 1 parameter - the HTMLElement which
   * got upgraded.
   */ registerUpgradedCallback: function(jsClass, callback) {},
    /**
   * Registers a class for future use and attempts to upgrade existing DOM.
   *
   * @param {componentHandler.ComponentConfigPublic} config the registration configuration
   */ register: function(config) {},
    /**
   * Downgrade either a given node, an array of nodes, or a NodeList.
   *
   * @param {!Node|!Array<!Node>|!NodeList} nodes
   */ downgradeElements: function(nodes) {}
};
componentHandler = function() {
    "use strict";
    /** @type {!Array<componentHandler.ComponentConfig>} */ var registeredComponents_ = [];
    /** @type {!Array<componentHandler.Component>} */ var createdComponents_ = [];
    var componentConfigProperty_ = "mdlComponentConfigInternal_";
    /**
   * Searches registered components for a class we are interested in using.
   * Optionally replaces a match with passed object if specified.
   *
   * @param {string} name The name of a class we want to use.
   * @param {componentHandler.ComponentConfig=} optReplace Optional object to replace match with.
   * @return {!Object|boolean}
   * @private
   */ function findRegisteredClass_(name, optReplace) {
        for(var i = 0; i < registeredComponents_.length; i++)if (registeredComponents_[i].className === name) {
            if (typeof optReplace !== "undefined") registeredComponents_[i] = optReplace;
            return registeredComponents_[i];
        }
        return false;
    }
    /**
   * Returns an array of the classNames of the upgraded classes on the element.
   *
   * @param {!Element} element The element to fetch data from.
   * @return {!Array<string>}
   * @private
   */ function getUpgradedListOfElement_(element) {
        var dataUpgraded = element.getAttribute("data-upgraded");
        // Use `['']` as default value to conform the `,name,name...` style.
        return dataUpgraded === null ? [
            ""
        ] : dataUpgraded.split(",");
    }
    /**
   * Returns true if the given element has already been upgraded for the given
   * class.
   *
   * @param {!Element} element The element we want to check.
   * @param {string} jsClass The class to check for.
   * @returns {boolean}
   * @private
   */ function isElementUpgraded_(element, jsClass) {
        var upgradedList = getUpgradedListOfElement_(element);
        return upgradedList.indexOf(jsClass) !== -1;
    }
    /**
   * Create an event object.
   *
   * @param {string} eventType The type name of the event.
   * @param {boolean} bubbles Whether the event should bubble up the DOM.
   * @param {boolean} cancelable Whether the event can be canceled.
   * @returns {!Event}
   */ function createEvent_(eventType, bubbles, cancelable) {
        if ("CustomEvent" in window && typeof window.CustomEvent === "function") return new CustomEvent(eventType, {
            bubbles: bubbles,
            cancelable: cancelable
        });
        else {
            var ev = document.createEvent("Events");
            ev.initEvent(eventType, bubbles, cancelable);
            return ev;
        }
    }
    /**
   * Searches existing DOM for elements of our component type and upgrades them
   * if they have not already been upgraded.
   *
   * @param {string=} optJsClass the programatic name of the element class we
   * need to create a new instance of.
   * @param {string=} optCssClass the name of the CSS class elements of this
   * type will have.
   */ function upgradeDomInternal(optJsClass, optCssClass) {
        if (typeof optJsClass === "undefined" && typeof optCssClass === "undefined") for(var i = 0; i < registeredComponents_.length; i++)upgradeDomInternal(registeredComponents_[i].className, registeredComponents_[i].cssClass);
        else {
            var jsClass = optJsClass;
            if (typeof optCssClass === "undefined") {
                var registeredClass = findRegisteredClass_(jsClass);
                if (registeredClass) optCssClass = registeredClass.cssClass;
            }
            var elements = document.querySelectorAll("." + optCssClass);
            for(var n = 0; n < elements.length; n++)upgradeElementInternal(elements[n], jsClass);
        }
    }
    /**
   * Upgrades a specific element rather than all in the DOM.
   *
   * @param {!Element} element The element we wish to upgrade.
   * @param {string=} optJsClass Optional name of the class we want to upgrade
   * the element to.
   */ function upgradeElementInternal(element, optJsClass) {
        // Verify argument type.
        if (!(typeof element === "object" && element instanceof Element)) throw new Error("Invalid argument provided to upgrade MDL element.");
        // Allow upgrade to be canceled by canceling emitted event.
        var upgradingEv = createEvent_("mdl-componentupgrading", true, true);
        element.dispatchEvent(upgradingEv);
        if (upgradingEv.defaultPrevented) return;
        var upgradedList = getUpgradedListOfElement_(element);
        var classesToUpgrade = [];
        // If jsClass is not provided scan the registered components to find the
        // ones matching the element's CSS classList.
        if (!optJsClass) {
            var classList = element.classList;
            registeredComponents_.forEach(function(component) {
                // Match CSS & Not to be upgraded & Not upgraded.
                if (classList.contains(component.cssClass) && classesToUpgrade.indexOf(component) === -1 && !isElementUpgraded_(element, component.className)) classesToUpgrade.push(component);
            });
        } else if (!isElementUpgraded_(element, optJsClass)) classesToUpgrade.push(findRegisteredClass_(optJsClass));
        // Upgrade the element for each classes.
        for(var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++){
            registeredClass = classesToUpgrade[i];
            if (registeredClass) {
                // Mark element as upgraded.
                upgradedList.push(registeredClass.className);
                element.setAttribute("data-upgraded", upgradedList.join(","));
                var instance = new registeredClass.classConstructor(element);
                instance[componentConfigProperty_] = registeredClass;
                createdComponents_.push(instance);
                // Call any callbacks the user has registered with this component type.
                for(var j = 0, m = registeredClass.callbacks.length; j < m; j++)registeredClass.callbacks[j](element);
                if (registeredClass.widget) // Assign per element instance for control over API
                element[registeredClass.className] = instance;
            } else throw new Error("Unable to find a registered component for the given class.");
            var upgradedEv = createEvent_("mdl-componentupgraded", true, false);
            element.dispatchEvent(upgradedEv);
        }
    }
    /**
   * Upgrades a specific list of elements rather than all in the DOM.
   *
   * @param {!Element|!Array<!Element>|!NodeList|!HTMLCollection} elements
   * The elements we wish to upgrade.
   */ function upgradeElementsInternal(elements) {
        if (!Array.isArray(elements)) {
            if (elements instanceof Element) elements = [
                elements
            ];
            else elements = Array.prototype.slice.call(elements);
        }
        for(var i = 0, n = elements.length, element; i < n; i++){
            element = elements[i];
            if (element instanceof HTMLElement) {
                upgradeElementInternal(element);
                if (element.children.length > 0) upgradeElementsInternal(element.children);
            }
        }
    }
    /**
   * Registers a class for future use and attempts to upgrade existing DOM.
   *
   * @param {componentHandler.ComponentConfigPublic} config
   */ function registerInternal(config) {
        // In order to support both Closure-compiled and uncompiled code accessing
        // this method, we need to allow for both the dot and array syntax for
        // property access. You'll therefore see the `foo.bar || foo['bar']`
        // pattern repeated across this method.
        var widgetMissing = typeof config.widget === "undefined" && typeof config["widget"] === "undefined";
        var widget = true;
        if (!widgetMissing) widget = config.widget || config["widget"];
        var newConfig = {
            classConstructor: config.constructor || config["constructor"],
            className: config.classAsString || config["classAsString"],
            cssClass: config.cssClass || config["cssClass"],
            widget: widget,
            callbacks: []
        };
        registeredComponents_.forEach(function(item) {
            if (item.cssClass === newConfig.cssClass) throw new Error("The provided cssClass has already been registered: " + item.cssClass);
            if (item.className === newConfig.className) throw new Error("The provided className has already been registered");
        });
        if (config.constructor.prototype.hasOwnProperty(componentConfigProperty_)) throw new Error("MDL component classes must not have " + componentConfigProperty_ + " defined as a property.");
        var found = findRegisteredClass_(config.classAsString, newConfig);
        if (!found) registeredComponents_.push(newConfig);
    }
    /**
   * Allows user to be alerted to any upgrades that are performed for a given
   * component type
   *
   * @param {string} jsClass The class name of the MDL component we wish
   * to hook into for any upgrades performed.
   * @param {function(!HTMLElement)} callback The function to call upon an
   * upgrade. This function should expect 1 parameter - the HTMLElement which
   * got upgraded.
   */ function registerUpgradedCallbackInternal(jsClass, callback) {
        var regClass = findRegisteredClass_(jsClass);
        if (regClass) regClass.callbacks.push(callback);
    }
    /**
   * Upgrades all registered components found in the current DOM. This is
   * automatically called on window load.
   */ function upgradeAllRegisteredInternal() {
        for(var n = 0; n < registeredComponents_.length; n++)upgradeDomInternal(registeredComponents_[n].className);
    }
    /**
   * Check the component for the downgrade method.
   * Execute if found.
   * Remove component from createdComponents list.
   *
   * @param {?componentHandler.Component} component
   */ function deconstructComponentInternal(component) {
        if (component) {
            var componentIndex = createdComponents_.indexOf(component);
            createdComponents_.splice(componentIndex, 1);
            var upgrades = component.element_.getAttribute("data-upgraded").split(",");
            var componentPlace = upgrades.indexOf(component[componentConfigProperty_].classAsString);
            upgrades.splice(componentPlace, 1);
            component.element_.setAttribute("data-upgraded", upgrades.join(","));
            var ev = createEvent_("mdl-componentdowngraded", true, false);
            component.element_.dispatchEvent(ev);
        }
    }
    /**
   * Downgrade either a given node, an array of nodes, or a NodeList.
   *
   * @param {!Node|!Array<!Node>|!NodeList} nodes
   */ function downgradeNodesInternal(nodes) {
        /**
     * Auxiliary function to downgrade a single node.
     * @param  {!Node} node the node to be downgraded
     */ var downgradeNode = function(node) {
            createdComponents_.filter(function(item) {
                return item.element_ === node;
            }).forEach(deconstructComponentInternal);
        };
        if (nodes instanceof Array || nodes instanceof NodeList) for(var n = 0; n < nodes.length; n++)downgradeNode(nodes[n]);
        else if (nodes instanceof Node) downgradeNode(nodes);
        else throw new Error("Invalid argument provided to downgrade MDL nodes.");
    }
    // Now return the functions that should be made public with their publicly
    // facing names...
    return {
        upgradeDom: upgradeDomInternal,
        upgradeElement: upgradeElementInternal,
        upgradeElements: upgradeElementsInternal,
        upgradeAllRegistered: upgradeAllRegisteredInternal,
        registerUpgradedCallback: registerUpgradedCallbackInternal,
        register: registerInternal,
        downgradeElements: downgradeNodesInternal
    };
}();
/**
 * Describes the type of a registered component type managed by
 * componentHandler. Provided for benefit of the Closure compiler.
 *
 * @typedef {{
 *   constructor: Function,
 *   classAsString: string,
 *   cssClass: string,
 *   widget: (string|boolean|undefined)
 * }}
 */ componentHandler.ComponentConfigPublic; // jshint ignore:line
/**
 * Describes the type of a registered component type managed by
 * componentHandler. Provided for benefit of the Closure compiler.
 *
 * @typedef {{
 *   constructor: !Function,
 *   className: string,
 *   cssClass: string,
 *   widget: (string|boolean),
 *   callbacks: !Array<function(!HTMLElement)>
 * }}
 */ componentHandler.ComponentConfig; // jshint ignore:line
/**
 * Created component (i.e., upgraded element) type as managed by
 * componentHandler. Provided for benefit of the Closure compiler.
 *
 * @typedef {{
 *   element_: !HTMLElement,
 *   className: string,
 *   classAsString: string,
 *   cssClass: string,
 *   widget: string
 * }}
 */ componentHandler.Component; // jshint ignore:line
// Export all symbols, for the benefit of Closure compiler.
// No effect on uncompiled code.
componentHandler["upgradeDom"] = componentHandler.upgradeDom;
componentHandler["upgradeElement"] = componentHandler.upgradeElement;
componentHandler["upgradeElements"] = componentHandler.upgradeElements;
componentHandler["upgradeAllRegistered"] = componentHandler.upgradeAllRegistered;
componentHandler["registerUpgradedCallback"] = componentHandler.registerUpgradedCallback;
componentHandler["register"] = componentHandler.register;
componentHandler["downgradeElements"] = componentHandler.downgradeElements;
window.componentHandler = componentHandler;
window["componentHandler"] = componentHandler;
window.addEventListener("load", function() {
    "use strict";
    /**
   * Performs a "Cutting the mustard" test. If the browser supports the features
   * tested, adds a mdl-js class to the <html> element. It then upgrades all MDL
   * components requiring JavaScript.
   */ if ("classList" in document.createElement("div") && "querySelector" in document && "addEventListener" in window && Array.prototype.forEach) {
        document.documentElement.classList.add("mdl-js");
        componentHandler.upgradeAllRegistered();
    } else {
        /**
     * Dummy function to avoid JS errors.
     */ componentHandler.upgradeElement = function() {};
        /**
     * Dummy function to avoid JS errors.
     */ componentHandler.register = function() {};
    }
});

},{}],"lGZ2m":[function(require,module,exports) {
/**
 * @license
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ (function() {
    "use strict";
    /**
   * Class constructor for Button MDL component.
   * Implements MDL component design pattern defined at:
   * https://github.com/jasonmayes/mdl-component-design-pattern
   *
   * @param {HTMLElement} element The element that will be upgraded.
   */ var MaterialButton = function MaterialButton(element) {
        this.element_ = element;
        // Initialize instance.
        this.init();
    };
    window["MaterialButton"] = MaterialButton;
    /**
   * Store constants in one place so they can be updated easily.
   *
   * @enum {string | number}
   * @private
   */ MaterialButton.prototype.Constant_ = {
    };
    /**
   * Store strings for class names defined by this component that are used in
   * JavaScript. This allows us to simply change it in one place should we
   * decide to modify at a later date.
   *
   * @enum {string}
   * @private
   */ MaterialButton.prototype.CssClasses_ = {
        RIPPLE_EFFECT: "mdl-js-ripple-effect",
        RIPPLE_CONTAINER: "mdl-button__ripple-container",
        RIPPLE: "mdl-ripple"
    };
    /**
   * Handle blur of element.
   *
   * @param {Event} event The event that fired.
   * @private
   */ MaterialButton.prototype.blurHandler_ = function(event) {
        if (event) this.element_.blur();
    };
    // Public methods.
    /**
   * Disable button.
   *
   * @public
   */ MaterialButton.prototype.disable = function() {
        this.element_.disabled = true;
    };
    MaterialButton.prototype["disable"] = MaterialButton.prototype.disable;
    /**
   * Enable button.
   *
   * @public
   */ MaterialButton.prototype.enable = function() {
        this.element_.disabled = false;
    };
    MaterialButton.prototype["enable"] = MaterialButton.prototype.enable;
    /**
   * Initialize element.
   */ MaterialButton.prototype.init = function() {
        if (this.element_) {
            if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {
                var rippleContainer = document.createElement("span");
                rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);
                this.rippleElement_ = document.createElement("span");
                this.rippleElement_.classList.add(this.CssClasses_.RIPPLE);
                rippleContainer.appendChild(this.rippleElement_);
                this.boundRippleBlurHandler = this.blurHandler_.bind(this);
                this.rippleElement_.addEventListener("mouseup", this.boundRippleBlurHandler);
                this.element_.appendChild(rippleContainer);
            }
            this.boundButtonBlurHandler = this.blurHandler_.bind(this);
            this.element_.addEventListener("mouseup", this.boundButtonBlurHandler);
            this.element_.addEventListener("mouseleave", this.boundButtonBlurHandler);
        }
    };
    // The component registers itself. It can assume componentHandler is available
    // in the global scope.
    componentHandler.register({
        constructor: MaterialButton,
        classAsString: "MaterialButton",
        cssClass: "mdl-js-button",
        widget: true
    });
})();

},{}],"fNjTf":[function(require,module,exports) {
/**
 * @license
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ (function() {
    "use strict";
    /**
   * Class constructor for Progress MDL component.
   * Implements MDL component design pattern defined at:
   * https://github.com/jasonmayes/mdl-component-design-pattern
   *
   * @constructor
   * @param {HTMLElement} element The element that will be upgraded.
   */ var MaterialProgress = function MaterialProgress(element) {
        this.element_ = element;
        // Initialize instance.
        this.init();
    };
    window["MaterialProgress"] = MaterialProgress;
    /**
   * Store constants in one place so they can be updated easily.
   *
   * @enum {string | number}
   * @private
   */ MaterialProgress.prototype.Constant_ = {};
    /**
   * Store strings for class names defined by this component that are used in
   * JavaScript. This allows us to simply change it in one place should we
   * decide to modify at a later date.
   *
   * @enum {string}
   * @private
   */ MaterialProgress.prototype.CssClasses_ = {
        INDETERMINATE_CLASS: "mdl-progress__indeterminate"
    };
    /**
   * Set the current progress of the progressbar.
   *
   * @param {number} p Percentage of the progress (0-100)
   * @public
   */ MaterialProgress.prototype.setProgress = function(p) {
        if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) return;
        this.progressbar_.style.width = p + "%";
    };
    MaterialProgress.prototype["setProgress"] = MaterialProgress.prototype.setProgress;
    /**
   * Set the current progress of the buffer.
   *
   * @param {number} p Percentage of the buffer (0-100)
   * @public
   */ MaterialProgress.prototype.setBuffer = function(p) {
        this.bufferbar_.style.width = p + "%";
        this.auxbar_.style.width = 100 - p + "%";
    };
    MaterialProgress.prototype["setBuffer"] = MaterialProgress.prototype.setBuffer;
    /**
   * Initialize element.
   */ MaterialProgress.prototype.init = function() {
        if (this.element_) {
            var el = document.createElement("div");
            el.className = "progressbar bar bar1";
            this.element_.appendChild(el);
            this.progressbar_ = el;
            el = document.createElement("div");
            el.className = "bufferbar bar bar2";
            this.element_.appendChild(el);
            this.bufferbar_ = el;
            el = document.createElement("div");
            el.className = "auxbar bar bar3";
            this.element_.appendChild(el);
            this.auxbar_ = el;
            this.progressbar_.style.width = "0%";
            this.bufferbar_.style.width = "100%";
            this.auxbar_.style.width = "0%";
            this.element_.classList.add("is-upgraded");
        }
    };
    // The component registers itself. It can assume componentHandler is available
    // in the global scope.
    componentHandler.register({
        constructor: MaterialProgress,
        classAsString: "MaterialProgress",
        cssClass: "mdl-js-progress",
        widget: true
    });
})();

},{}],"b3IsY":[function(require,module,exports) {
/**
 * @license
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ (function() {
    "use strict";
    /**
   * Class constructor for Spinner MDL component.
   * Implements MDL component design pattern defined at:
   * https://github.com/jasonmayes/mdl-component-design-pattern
   *
   * @param {HTMLElement} element The element that will be upgraded.
   * @constructor
   */ var MaterialSpinner = function MaterialSpinner(element) {
        this.element_ = element;
        // Initialize instance.
        this.init();
    };
    window["MaterialSpinner"] = MaterialSpinner;
    /**
   * Store constants in one place so they can be updated easily.
   *
   * @enum {string | number}
   * @private
   */ MaterialSpinner.prototype.Constant_ = {
        MDL_SPINNER_LAYER_COUNT: 4
    };
    /**
   * Store strings for class names defined by this component that are used in
   * JavaScript. This allows us to simply change it in one place should we
   * decide to modify at a later date.
   *
   * @enum {string}
   * @private
   */ MaterialSpinner.prototype.CssClasses_ = {
        MDL_SPINNER_LAYER: "mdl-spinner__layer",
        MDL_SPINNER_CIRCLE_CLIPPER: "mdl-spinner__circle-clipper",
        MDL_SPINNER_CIRCLE: "mdl-spinner__circle",
        MDL_SPINNER_GAP_PATCH: "mdl-spinner__gap-patch",
        MDL_SPINNER_LEFT: "mdl-spinner__left",
        MDL_SPINNER_RIGHT: "mdl-spinner__right"
    };
    /**
   * Auxiliary method to create a spinner layer.
   *
   * @param {number} index Index of the layer to be created.
   * @public
   */ MaterialSpinner.prototype.createLayer = function(index) {
        var layer = document.createElement("div");
        layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);
        layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + "-" + index);
        var leftClipper = document.createElement("div");
        leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);
        leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);
        var gapPatch = document.createElement("div");
        gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);
        var rightClipper = document.createElement("div");
        rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);
        rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);
        var circleOwners = [
            leftClipper,
            gapPatch,
            rightClipper
        ];
        for(var i = 0; i < circleOwners.length; i++){
            var circle = document.createElement("div");
            circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);
            circleOwners[i].appendChild(circle);
        }
        layer.appendChild(leftClipper);
        layer.appendChild(gapPatch);
        layer.appendChild(rightClipper);
        this.element_.appendChild(layer);
    };
    MaterialSpinner.prototype["createLayer"] = MaterialSpinner.prototype.createLayer;
    /**
   * Stops the spinner animation.
   * Public method for users who need to stop the spinner for any reason.
   *
   * @public
   */ MaterialSpinner.prototype.stop = function() {
        this.element_.classList.remove("is-active");
    };
    MaterialSpinner.prototype["stop"] = MaterialSpinner.prototype.stop;
    /**
   * Starts the spinner animation.
   * Public method for users who need to manually start the spinner for any reason
   * (instead of just adding the 'is-active' class to their markup).
   *
   * @public
   */ MaterialSpinner.prototype.start = function() {
        this.element_.classList.add("is-active");
    };
    MaterialSpinner.prototype["start"] = MaterialSpinner.prototype.start;
    /**
   * Initialize element.
   */ MaterialSpinner.prototype.init = function() {
        if (this.element_) {
            for(var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++)this.createLayer(i);
            this.element_.classList.add("is-upgraded");
        }
    };
    // The component registers itself. It can assume componentHandler is available
    // in the global scope.
    componentHandler.register({
        constructor: MaterialSpinner,
        classAsString: "MaterialSpinner",
        cssClass: "mdl-js-spinner",
        widget: true
    });
})();

},{}],"4CPyy":[function(require,module,exports) {
/**
 * @license
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ (function() {
    "use strict";
    /**
   * Class constructor for Textfield MDL component.
   * Implements MDL component design pattern defined at:
   * https://github.com/jasonmayes/mdl-component-design-pattern
   *
   * @constructor
   * @param {HTMLElement} element The element that will be upgraded.
   */ var MaterialTextfield = function MaterialTextfield(element) {
        this.element_ = element;
        this.maxRows = this.Constant_.NO_MAX_ROWS;
        // Initialize instance.
        this.init();
    };
    window["MaterialTextfield"] = MaterialTextfield;
    /**
   * Store constants in one place so they can be updated easily.
   *
   * @enum {string | number}
   * @private
   */ MaterialTextfield.prototype.Constant_ = {
        NO_MAX_ROWS: -1,
        MAX_ROWS_ATTRIBUTE: "maxrows"
    };
    /**
   * Store strings for class names defined by this component that are used in
   * JavaScript. This allows us to simply change it in one place should we
   * decide to modify at a later date.
   *
   * @enum {string}
   * @private
   */ MaterialTextfield.prototype.CssClasses_ = {
        LABEL: "mdl-textfield__label",
        INPUT: "mdl-textfield__input",
        IS_DIRTY: "is-dirty",
        IS_FOCUSED: "is-focused",
        IS_DISABLED: "is-disabled",
        IS_INVALID: "is-invalid",
        IS_UPGRADED: "is-upgraded",
        HAS_PLACEHOLDER: "has-placeholder"
    };
    /**
   * Handle input being entered.
   *
   * @param {Event} event The event that fired.
   * @private
   */ MaterialTextfield.prototype.onKeyDown_ = function(event) {
        var currentRowCount = event.target.value.split("\n").length;
        if (event.keyCode === 13) {
            if (currentRowCount >= this.maxRows) event.preventDefault();
        }
    };
    /**
   * Handle focus.
   *
   * @param {Event} event The event that fired.
   * @private
   */ MaterialTextfield.prototype.onFocus_ = function(event) {
        this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
    };
    /**
   * Handle lost focus.
   *
   * @param {Event} event The event that fired.
   * @private
   */ MaterialTextfield.prototype.onBlur_ = function(event) {
        this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
    };
    /**
   * Handle reset event from out side.
   *
   * @param {Event} event The event that fired.
   * @private
   */ MaterialTextfield.prototype.onReset_ = function(event) {
        this.updateClasses_();
    };
    /**
   * Handle class updates.
   *
   * @private
   */ MaterialTextfield.prototype.updateClasses_ = function() {
        this.checkDisabled();
        this.checkValidity();
        this.checkDirty();
        this.checkFocus();
    };
    // Public methods.
    /**
   * Check the disabled state and update field accordingly.
   *
   * @public
   */ MaterialTextfield.prototype.checkDisabled = function() {
        if (this.input_.disabled) this.element_.classList.add(this.CssClasses_.IS_DISABLED);
        else this.element_.classList.remove(this.CssClasses_.IS_DISABLED);
    };
    MaterialTextfield.prototype["checkDisabled"] = MaterialTextfield.prototype.checkDisabled;
    /**
  * Check the focus state and update field accordingly.
  *
  * @public
  */ MaterialTextfield.prototype.checkFocus = function() {
        if (Boolean(this.element_.querySelector(":focus"))) this.element_.classList.add(this.CssClasses_.IS_FOCUSED);
        else this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);
    };
    MaterialTextfield.prototype["checkFocus"] = MaterialTextfield.prototype.checkFocus;
    /**
   * Check the validity state and update field accordingly.
   *
   * @public
   */ MaterialTextfield.prototype.checkValidity = function() {
        if (this.input_.validity) {
            if (this.input_.validity.valid) this.element_.classList.remove(this.CssClasses_.IS_INVALID);
            else this.element_.classList.add(this.CssClasses_.IS_INVALID);
        }
    };
    MaterialTextfield.prototype["checkValidity"] = MaterialTextfield.prototype.checkValidity;
    /**
   * Check the dirty state and update field accordingly.
   *
   * @public
   */ MaterialTextfield.prototype.checkDirty = function() {
        if (this.input_.value && this.input_.value.length > 0) this.element_.classList.add(this.CssClasses_.IS_DIRTY);
        else this.element_.classList.remove(this.CssClasses_.IS_DIRTY);
    };
    MaterialTextfield.prototype["checkDirty"] = MaterialTextfield.prototype.checkDirty;
    /**
   * Disable text field.
   *
   * @public
   */ MaterialTextfield.prototype.disable = function() {
        this.input_.disabled = true;
        this.updateClasses_();
    };
    MaterialTextfield.prototype["disable"] = MaterialTextfield.prototype.disable;
    /**
   * Enable text field.
   *
   * @public
   */ MaterialTextfield.prototype.enable = function() {
        this.input_.disabled = false;
        this.updateClasses_();
    };
    MaterialTextfield.prototype["enable"] = MaterialTextfield.prototype.enable;
    /**
   * Update text field value.
   *
   * @param {string} value The value to which to set the control (optional).
   * @public
   */ MaterialTextfield.prototype.change = function(value) {
        this.input_.value = value || "";
        this.updateClasses_();
    };
    MaterialTextfield.prototype["change"] = MaterialTextfield.prototype.change;
    /**
   * Initialize element.
   */ MaterialTextfield.prototype.init = function() {
        if (this.element_) {
            this.label_ = this.element_.querySelector("." + this.CssClasses_.LABEL);
            this.input_ = this.element_.querySelector("." + this.CssClasses_.INPUT);
            if (this.input_) {
                if (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE)) {
                    this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10);
                    if (isNaN(this.maxRows)) this.maxRows = this.Constant_.NO_MAX_ROWS;
                }
                if (this.input_.hasAttribute("placeholder")) this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER);
                this.boundUpdateClassesHandler = this.updateClasses_.bind(this);
                this.boundFocusHandler = this.onFocus_.bind(this);
                this.boundBlurHandler = this.onBlur_.bind(this);
                this.boundResetHandler = this.onReset_.bind(this);
                this.input_.addEventListener("input", this.boundUpdateClassesHandler);
                this.input_.addEventListener("focus", this.boundFocusHandler);
                this.input_.addEventListener("blur", this.boundBlurHandler);
                this.input_.addEventListener("reset", this.boundResetHandler);
                if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {
                    // TODO: This should handle pasting multi line text.
                    // Currently doesn't.
                    this.boundKeyDownHandler = this.onKeyDown_.bind(this);
                    this.input_.addEventListener("keydown", this.boundKeyDownHandler);
                }
                var invalid = this.element_.classList.contains(this.CssClasses_.IS_INVALID);
                this.updateClasses_();
                this.element_.classList.add(this.CssClasses_.IS_UPGRADED);
                if (invalid) this.element_.classList.add(this.CssClasses_.IS_INVALID);
                if (this.input_.hasAttribute("autofocus")) {
                    this.element_.focus();
                    this.checkFocus();
                }
            }
        }
    };
    // The component registers itself. It can assume componentHandler is available
    // in the global scope.
    componentHandler.register({
        constructor: MaterialTextfield,
        classAsString: "MaterialTextfield",
        cssClass: "mdl-js-textfield",
        widget: true
    });
})();

},{}],"8C05G":[function() {},{}],"NJZFB":[function(require,module,exports) {
!function(t, e) {
    module.exports = e();
}(this, function() {
    "use strict";
    var t1 = 1e3, e1 = 6e4, n1 = 36e5, r1 = "millisecond", i1 = "second", s1 = "minute", u1 = "hour", a1 = "day", o1 = "week", f1 = "month", h1 = "quarter", c1 = "year", d1 = "date", $1 = "Invalid Date", l1 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y1 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M1 = {
        name: "en",
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
    }, m1 = function(t, e, n) {
        var r = String(t);
        return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
    }, g1 = {
        s: m1,
        z: function(t) {
            var e = -t.utcOffset(), n = Math.abs(e), r = Math.floor(n / 60), i = n % 60;
            return (e <= 0 ? "+" : "-") + m1(r, 2, "0") + ":" + m1(i, 2, "0");
        },
        m: function t(e, n) {
            if (e.date() < n.date()) return -t(n, e);
            var r = 12 * (n.year() - e.year()) + (n.month() - e.month()), i = e.clone().add(r, f1), s = n - i < 0, u = e.clone().add(r + (s ? -1 : 1), f1);
            return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
        },
        a: function(t) {
            return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
        },
        p: function(t) {
            return ({
                M: f1,
                y: c1,
                w: o1,
                d: a1,
                D: d1,
                h: u1,
                m: s1,
                s: i1,
                ms: r1,
                Q: h1
            })[t] || String(t || "").toLowerCase().replace(/s$/, "");
        },
        u: function(t) {
            return void 0 === t;
        }
    }, v1 = "en", D1 = {};
    D1[v1] = M1;
    var p = function(t) {
        return t instanceof _;
    }, S = function t(e, n, r) {
        var i;
        if (!e) return v1;
        if ("string" == typeof e) {
            var s = e.toLowerCase();
            D1[s] && (i = s), n && (D1[s] = n, i = s);
            var u = e.split("-");
            if (!i && u.length > 1) return t(u[0]);
        } else {
            var a = e.name;
            D1[a] = e, i = a;
        }
        return !r && i && (v1 = i), i || !r && v1;
    }, w = function(t, e) {
        if (p(t)) return t.clone();
        var n = "object" == typeof e ? e : {};
        return n.date = t, n.args = arguments, new _(n);
    }, O = g1;
    O.l = S, O.i = p, O.w = function(t, e) {
        return w(t, {
            locale: e.$L,
            utc: e.$u,
            x: e.$x,
            $offset: e.$offset
        });
    };
    var _ = function() {
        function M2(t) {
            this.$L = S(t.locale, null, !0), this.parse(t);
        }
        var m2 = M2.prototype;
        return m2.parse = function(t2) {
            this.$d = function(t) {
                var e = t.date, n = t.utc;
                if (null === e) return new Date(NaN);
                if (O.u(e)) return new Date;
                if (e instanceof Date) return new Date(e);
                if ("string" == typeof e && !/Z$/i.test(e)) {
                    var r = e.match(l1);
                    if (r) {
                        var i = r[2] - 1 || 0, s = (r[7] || "0").substring(0, 3);
                        return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
                    }
                }
                return new Date(e);
            }(t2), this.$x = t2.x || {}, this.init();
        }, m2.init = function() {
            var t = this.$d;
            this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
        }, m2.$utils = function() {
            return O;
        }, m2.isValid = function() {
            return !(this.$d.toString() === $1);
        }, m2.isSame = function(t, e) {
            var n = w(t);
            return this.startOf(e) <= n && n <= this.endOf(e);
        }, m2.isAfter = function(t, e) {
            return w(t) < this.startOf(e);
        }, m2.isBefore = function(t, e) {
            return this.endOf(e) < w(t);
        }, m2.$g = function(t, e, n) {
            return O.u(t) ? this[e] : this.set(n, t);
        }, m2.unix = function() {
            return Math.floor(this.valueOf() / 1e3);
        }, m2.valueOf = function() {
            return this.$d.getTime();
        }, m2.startOf = function(t3, e2) {
            var n = this, r = !!O.u(e2) || e2, h = O.p(t3), $ = function(t, e) {
                var i = O.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
                return r ? i : i.endOf(a1);
            }, l = function(t, e) {
                return O.w(n.toDate()[t].apply(n.toDate("s"), (r ? [
                    0,
                    0,
                    0,
                    0
                ] : [
                    23,
                    59,
                    59,
                    999
                ]).slice(e)), n);
            }, y = this.$W, M = this.$M, m = this.$D, g = "set" + (this.$u ? "UTC" : "");
            switch(h){
                case c1:
                    return r ? $(1, 0) : $(31, 11);
                case f1:
                    return r ? $(1, M) : $(0, M + 1);
                case o1:
                    var v = this.$locale().weekStart || 0, D = (y < v ? y + 7 : y) - v;
                    return $(r ? m - D : m + (6 - D), M);
                case a1:
                case d1:
                    return l(g + "Hours", 0);
                case u1:
                    return l(g + "Minutes", 1);
                case s1:
                    return l(g + "Seconds", 2);
                case i1:
                    return l(g + "Milliseconds", 3);
                default:
                    return this.clone();
            }
        }, m2.endOf = function(t) {
            return this.startOf(t, !1);
        }, m2.$set = function(t, e) {
            var n, o = O.p(t), h = "set" + (this.$u ? "UTC" : ""), $ = (n = {}, n[a1] = h + "Date", n[d1] = h + "Date", n[f1] = h + "Month", n[c1] = h + "FullYear", n[u1] = h + "Hours", n[s1] = h + "Minutes", n[i1] = h + "Seconds", n[r1] = h + "Milliseconds", n)[o], l = o === a1 ? this.$D + (e - this.$W) : e;
            if (o === f1 || o === c1) {
                var y = this.clone().set(d1, 1);
                y.$d[$](l), y.init(), this.$d = y.set(d1, Math.min(this.$D, y.daysInMonth())).$d;
            } else $ && this.$d[$](l);
            return this.init(), this;
        }, m2.set = function(t, e) {
            return this.clone().$set(t, e);
        }, m2.get = function(t) {
            return this[O.p(t)]();
        }, m2.add = function(r, h) {
            var d, $ = this;
            r = Number(r);
            var l = O.p(h), y = function(t) {
                var e = w($);
                return O.w(e.date(e.date() + Math.round(t * r)), $);
            };
            if (l === f1) return this.set(f1, this.$M + r);
            if (l === c1) return this.set(c1, this.$y + r);
            if (l === a1) return y(1);
            if (l === o1) return y(7);
            var M = (d = {}, d[s1] = e1, d[u1] = n1, d[i1] = t1, d)[l] || 1, m = this.$d.getTime() + r * M;
            return O.w(m, this);
        }, m2.subtract = function(t, e) {
            return this.add(-1 * t, e);
        }, m2.format = function(t4) {
            var e3 = this, n2 = this.$locale();
            if (!this.isValid()) return n2.invalidDate || $1;
            var r2 = t4 || "YYYY-MM-DDTHH:mm:ssZ", i2 = O.z(this), s2 = this.$H, u = this.$m, a = this.$M, o = n2.weekdays, f = n2.months, h = function(t, n, i, s) {
                return t && (t[n] || t(e3, r2)) || i[n].slice(0, s);
            }, c = function(t) {
                return O.s(s2 % 12 || 12, t, "0");
            }, d = n2.meridiem || function(t, e, n) {
                var r = t < 12 ? "AM" : "PM";
                return n ? r.toLowerCase() : r;
            }, l = {
                YY: String(this.$y).slice(-2),
                YYYY: this.$y,
                M: a + 1,
                MM: O.s(a + 1, 2, "0"),
                MMM: h(n2.monthsShort, a, f, 3),
                MMMM: h(f, a),
                D: this.$D,
                DD: O.s(this.$D, 2, "0"),
                d: String(this.$W),
                dd: h(n2.weekdaysMin, this.$W, o, 2),
                ddd: h(n2.weekdaysShort, this.$W, o, 3),
                dddd: o[this.$W],
                H: String(s2),
                HH: O.s(s2, 2, "0"),
                h: c(1),
                hh: c(2),
                a: d(s2, u, !0),
                A: d(s2, u, !1),
                m: String(u),
                mm: O.s(u, 2, "0"),
                s: String(this.$s),
                ss: O.s(this.$s, 2, "0"),
                SSS: O.s(this.$ms, 3, "0"),
                Z: i2
            };
            return r2.replace(y1, function(t, e) {
                return e || l[t] || i2.replace(":", "");
            });
        }, m2.utcOffset = function() {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m2.diff = function(r, d, $) {
            var l, y = O.p(d), M = w(r), m = (M.utcOffset() - this.utcOffset()) * e1, g = this - M, v = O.m(this, M);
            return v = (l = {}, l[c1] = v / 12, l[f1] = v, l[h1] = v / 3, l[o1] = (g - m) / 6048e5, l[a1] = (g - m) / 864e5, l[u1] = g / n1, l[s1] = g / e1, l[i1] = g / t1, l)[y] || g, $ ? v : O.a(v);
        }, m2.daysInMonth = function() {
            return this.endOf(f1).$D;
        }, m2.$locale = function() {
            return D1[this.$L];
        }, m2.locale = function(t, e) {
            if (!t) return this.$L;
            var n = this.clone(), r = S(t, e, !0);
            return r && (n.$L = r), n;
        }, m2.clone = function() {
            return O.w(this.$d, this);
        }, m2.toDate = function() {
            return new Date(this.valueOf());
        }, m2.toJSON = function() {
            return this.isValid() ? this.toISOString() : null;
        }, m2.toISOString = function() {
            return this.$d.toISOString();
        }, m2.toString = function() {
            return this.$d.toUTCString();
        }, M2;
    }(), T = _.prototype;
    return w.prototype = T, [
        [
            "$ms",
            r1
        ],
        [
            "$s",
            i1
        ],
        [
            "$m",
            s1
        ],
        [
            "$H",
            u1
        ],
        [
            "$W",
            a1
        ],
        [
            "$M",
            f1
        ],
        [
            "$y",
            c1
        ],
        [
            "$D",
            d1
        ]
    ].forEach(function(t) {
        T[t[1]] = function(e) {
            return this.$g(e, t[0], t[1]);
        };
    }), w.extend = function(t, e) {
        return t.$i || (t(e, _, w), t.$i = !0), w;
    }, w.locale = S, w.isDayjs = p, w.unix = function(t) {
        return w(1e3 * t);
    }, w.en = D1[v1], w.Ls = D1, w.p = {}, w;
});

},{}],"cJafS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _firestore = require("@firebase/firestore");
parcelHelpers.exportAll(_firestore, exports);

},{"@firebase/firestore":"fkIBe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fkIBe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractUserDataWriter", ()=>ol);
parcelHelpers.export(exports, "Bytes", ()=>eh);
parcelHelpers.export(exports, "CACHE_SIZE_UNLIMITED", ()=>Ma);
parcelHelpers.export(exports, "CollectionReference", ()=>va);
parcelHelpers.export(exports, "DocumentReference", ()=>ba);
parcelHelpers.export(exports, "DocumentSnapshot", ()=>kh);
parcelHelpers.export(exports, "FieldPath", ()=>Za);
parcelHelpers.export(exports, "FieldValue", ()=>nh);
parcelHelpers.export(exports, "Firestore", ()=>Fa);
parcelHelpers.export(exports, "FirestoreError", ()=>Q);
parcelHelpers.export(exports, "GeoPoint", ()=>sh);
parcelHelpers.export(exports, "LoadBundleTask", ()=>Oa);
parcelHelpers.export(exports, "Query", ()=>Pa);
parcelHelpers.export(exports, "QueryConstraint", ()=>Lh);
parcelHelpers.export(exports, "QueryDocumentSnapshot", ()=>Oh);
parcelHelpers.export(exports, "QuerySnapshot", ()=>Mh);
parcelHelpers.export(exports, "SnapshotMetadata", ()=>Nh);
parcelHelpers.export(exports, "Timestamp", ()=>ut);
parcelHelpers.export(exports, "Transaction", ()=>Pl);
parcelHelpers.export(exports, "WriteBatch", ()=>al);
parcelHelpers.export(exports, "_DatabaseId", ()=>re);
parcelHelpers.export(exports, "_DocumentKey", ()=>dt);
parcelHelpers.export(exports, "_EmptyAppCheckTokenProvider", ()=>et);
parcelHelpers.export(exports, "_EmptyAuthCredentialsProvider", ()=>z);
parcelHelpers.export(exports, "_FieldPath", ()=>ft);
parcelHelpers.export(exports, "_cast", ()=>Ia);
parcelHelpers.export(exports, "_debugAssert", ()=>q);
parcelHelpers.export(exports, "_isBase64Available", ()=>Ht);
parcelHelpers.export(exports, "_logWarn", ()=>$);
parcelHelpers.export(exports, "_setIndexConfiguration", ()=>kl);
parcelHelpers.export(exports, "_validateIsNotUsedTogether", ()=>ma);
parcelHelpers.export(exports, "addDoc", ()=>Tl);
parcelHelpers.export(exports, "arrayRemove", ()=>Cl);
parcelHelpers.export(exports, "arrayUnion", ()=>Dl);
parcelHelpers.export(exports, "clearIndexedDbPersistence", ()=>Qa);
parcelHelpers.export(exports, "collection", ()=>Va);
parcelHelpers.export(exports, "collectionGroup", ()=>Sa);
parcelHelpers.export(exports, "connectFirestoreEmulator", ()=>Ra);
parcelHelpers.export(exports, "deleteDoc", ()=>Il);
parcelHelpers.export(exports, "deleteField", ()=>Vl);
parcelHelpers.export(exports, "disableNetwork", ()=>za);
parcelHelpers.export(exports, "doc", ()=>Da);
parcelHelpers.export(exports, "documentId", ()=>th);
parcelHelpers.export(exports, "enableIndexedDbPersistence", ()=>qa);
parcelHelpers.export(exports, "enableMultiTabIndexedDbPersistence", ()=>Ka);
parcelHelpers.export(exports, "enableNetwork", ()=>Wa);
parcelHelpers.export(exports, "endAt", ()=>tl);
parcelHelpers.export(exports, "endBefore", ()=>Zh);
parcelHelpers.export(exports, "ensureFirestoreConfigured", ()=>La);
parcelHelpers.export(exports, "executeWrite", ()=>Rl);
parcelHelpers.export(exports, "getDoc", ()=>ll);
parcelHelpers.export(exports, "getDocFromCache", ()=>dl);
parcelHelpers.export(exports, "getDocFromServer", ()=>_l);
parcelHelpers.export(exports, "getDocs", ()=>wl);
parcelHelpers.export(exports, "getDocsFromCache", ()=>ml);
parcelHelpers.export(exports, "getDocsFromServer", ()=>gl);
parcelHelpers.export(exports, "getFirestore", ()=>Ba);
parcelHelpers.export(exports, "increment", ()=>xl);
parcelHelpers.export(exports, "initializeFirestore", ()=>$a);
parcelHelpers.export(exports, "limit", ()=>Wh);
parcelHelpers.export(exports, "limitToLast", ()=>zh);
parcelHelpers.export(exports, "loadBundle", ()=>Ja);
parcelHelpers.export(exports, "namedQuery", ()=>Ya);
parcelHelpers.export(exports, "onSnapshot", ()=>El);
parcelHelpers.export(exports, "onSnapshotsInSync", ()=>Al);
parcelHelpers.export(exports, "orderBy", ()=>Qh);
parcelHelpers.export(exports, "query", ()=>Uh);
parcelHelpers.export(exports, "queryEqual", ()=>xa);
parcelHelpers.export(exports, "refEqual", ()=>Ca);
parcelHelpers.export(exports, "runTransaction", ()=>vl);
parcelHelpers.export(exports, "serverTimestamp", ()=>Sl);
parcelHelpers.export(exports, "setDoc", ()=>yl);
parcelHelpers.export(exports, "setLogLevel", ()=>O);
parcelHelpers.export(exports, "snapshotEqual", ()=>$h);
parcelHelpers.export(exports, "startAfter", ()=>Yh);
parcelHelpers.export(exports, "startAt", ()=>Jh);
parcelHelpers.export(exports, "terminate", ()=>Ha);
parcelHelpers.export(exports, "updateDoc", ()=>pl);
parcelHelpers.export(exports, "waitForPendingWrites", ()=>ja);
parcelHelpers.export(exports, "where", ()=>Kh);
parcelHelpers.export(exports, "writeBatch", ()=>Nl);
var _app = require("@firebase/app");
var _component = require("@firebase/component");
var _logger = require("@firebase/logger");
var _util = require("@firebase/util");
var _webchannelWrapper = require("@firebase/webchannel-wrapper");
var process = require("process");
const D = "@firebase/firestore";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Simple wrapper around a nullable UID. Mostly exists to make code more
 * readable.
 */ class C {
    constructor(t){
        this.uid = t;
    }
    isAuthenticated() {
        return null != this.uid;
    }
    /**
     * Returns a key representing this user, suitable for inclusion in a
     * dictionary.
     */ toKey() {
        return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
    }
    isEqual(t) {
        return t.uid === this.uid;
    }
}
/** A user with a null UID. */ C.UNAUTHENTICATED = new C(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
C.GOOGLE_CREDENTIALS = new C("google-credentials-uid"), C.FIRST_PARTY = new C("first-party-uid"), C.MOCK_USER = new C("mock-user");
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ let x = "9.8.4";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const N = new (0, _logger.Logger)("@firebase/firestore");
// Helper methods are needed because variables can't be exported as read/write
function k() {
    return N.logLevel;
}
/**
 * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
 *
 * @param logLevel - The verbosity you set for activity and error logging. Can
 *   be any of the following values:
 *
 *   <ul>
 *     <li>`debug` for the most verbose logging level, primarily for
 *     debugging.</li>
 *     <li>`error` to log errors only.</li>
 *     <li><code>`silent` to turn off logging.</li>
 *   </ul>
 */ function O(t) {
    N.setLogLevel(t);
}
function M(t, ...e) {
    if (N.logLevel <= (0, _logger.LogLevel).DEBUG) {
        const n = e.map(B);
        N.debug(`Firestore (${x}): ${t}`, ...n);
    }
}
function F(t, ...e) {
    if (N.logLevel <= (0, _logger.LogLevel).ERROR) {
        const n = e.map(B);
        N.error(`Firestore (${x}): ${t}`, ...n);
    }
}
/**
 * @internal
 */ function $(t, ...e) {
    if (N.logLevel <= (0, _logger.LogLevel).WARN) {
        const n = e.map(B);
        N.warn(`Firestore (${x}): ${t}`, ...n);
    }
}
/**
 * Converts an additional log parameter to a string representation.
 */ function B(t) {
    if ("string" == typeof t) return t;
    try {
        return e = t, JSON.stringify(e);
    } catch (e1) {
        // Converting to JSON failed, just log the object directly
        return t;
    }
    /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Formats an object as a JSON string, suitable for logging. */ var e;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Unconditionally fails, throwing an Error with the given message.
 * Messages are stripped in production builds.
 *
 * Returns `never` and can be used in expressions:
 * @example
 * let futureVar = fail('not implemented yet');
 */ function L(t = "Unexpected state") {
    // Log the failure in addition to throw an exception, just in case the
    // exception is swallowed.
    const e = `FIRESTORE (${x}) INTERNAL ASSERTION FAILED: ` + t;
    // NOTE: We don't use FirestoreError here because these are internal failures
    // that cannot be handled by the user. (Also it would create a circular
    // dependency between the error and assert modules which doesn't work.)
    throw F(e), new Error(e);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * Messages are stripped in production builds.
 */ function U(t, e) {
    t || L();
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 *
 * The code of callsites invoking this function are stripped out in production
 * builds. Any side-effects of code within the debugAssert() invocation will not
 * happen in this case.
 *
 * @internal
 */ function q(t, e) {
    t || L();
}
/**
 * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
 * instance of `T` before casting.
 */ function K(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
    return t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const G = {
    // Causes are copied from:
    // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
    /** Not an error; returned on success. */ OK: "ok",
    /** The operation was cancelled (typically by the caller). */ CANCELLED: "cancelled",
    /** Unknown error or an error from a different error domain. */ UNKNOWN: "unknown",
    /**
     * Client specified an invalid argument. Note that this differs from
     * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
     * problematic regardless of the state of the system (e.g., a malformed file
     * name).
     */ INVALID_ARGUMENT: "invalid-argument",
    /**
     * Deadline expired before operation could complete. For operations that
     * change the state of the system, this error may be returned even if the
     * operation has completed successfully. For example, a successful response
     * from a server could have been delayed long enough for the deadline to
     * expire.
     */ DEADLINE_EXCEEDED: "deadline-exceeded",
    /** Some requested entity (e.g., file or directory) was not found. */ NOT_FOUND: "not-found",
    /**
     * Some entity that we attempted to create (e.g., file or directory) already
     * exists.
     */ ALREADY_EXISTS: "already-exists",
    /**
     * The caller does not have permission to execute the specified operation.
     * PERMISSION_DENIED must not be used for rejections caused by exhausting
     * some resource (use RESOURCE_EXHAUSTED instead for those errors).
     * PERMISSION_DENIED must not be used if the caller can not be identified
     * (use UNAUTHENTICATED instead for those errors).
     */ PERMISSION_DENIED: "permission-denied",
    /**
     * The request does not have valid authentication credentials for the
     * operation.
     */ UNAUTHENTICATED: "unauthenticated",
    /**
     * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
     * entire file system is out of space.
     */ RESOURCE_EXHAUSTED: "resource-exhausted",
    /**
     * Operation was rejected because the system is not in a state required for
     * the operation's execution. For example, directory to be deleted may be
     * non-empty, an rmdir operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
     *  (a) Use UNAVAILABLE if the client can retry just the failing call.
     *  (b) Use ABORTED if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FAILED_PRECONDITION if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FAILED_PRECONDITION
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FAILED_PRECONDITION if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     */ FAILED_PRECONDITION: "failed-precondition",
    /**
     * The operation was aborted, typically due to a concurrency issue like
     * sequencer check failures, transaction aborts, etc.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
     * and UNAVAILABLE.
     */ ABORTED: "aborted",
    /**
     * Operation was attempted past the valid range. E.g., seeking or reading
     * past end of file.
     *
     * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
     * if the system state changes. For example, a 32-bit file system will
     * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
     * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
     * an offset past the current file size.
     *
     * There is a fair bit of overlap between FAILED_PRECONDITION and
     * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
     * when it applies so that callers who are iterating through a space can
     * easily look for an OUT_OF_RANGE error to detect when they are done.
     */ OUT_OF_RANGE: "out-of-range",
    /** Operation is not implemented or not supported/enabled in this service. */ UNIMPLEMENTED: "unimplemented",
    /**
     * Internal errors. Means some invariants expected by underlying System has
     * been broken. If you see one of these errors, Something is very broken.
     */ INTERNAL: "internal",
    /**
     * The service is currently unavailable. This is a most likely a transient
     * condition and may be corrected by retrying with a backoff.
     *
     * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
     * and UNAVAILABLE.
     */ UNAVAILABLE: "unavailable",
    /** Unrecoverable data loss or corruption. */ DATA_LOSS: "data-loss"
};
/** An error returned by a Firestore operation. */ class Q extends (0, _util.FirebaseError) {
    /** @hideconstructor */ constructor(/**
     * The backend error code associated with this error.
     */ t, /**
     * A custom error description.
     */ e){
        super(t, e), this.code = t, this.message = e, // HACK: We write a toString property directly because Error is not a real
        // class and so inheritance does not work correctly. We could alternatively
        // do the same "back-door inheritance" trick that FirebaseError does.
        this.toString = ()=>`${this.name}: [code=${this.code}]: ${this.message}`;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class j {
    constructor(){
        this.promise = new Promise((t, e)=>{
            this.resolve = t, this.reject = e;
        });
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class W {
    constructor(t, e){
        this.user = e, this.type = "OAuth", this.headers = new Map, this.headers.set("Authorization", `Bearer ${t}`);
    }
}
/**
 * A CredentialsProvider that always yields an empty token.
 * @internal
 */ class z {
    getToken() {
        return Promise.resolve(null);
    }
    invalidateToken() {}
    start(t, e) {
        // Fire with initial user.
        t.enqueueRetryable(()=>e(C.UNAUTHENTICATED));
    }
    shutdown() {}
}
/**
 * A CredentialsProvider that always returns a constant token. Used for
 * emulator token mocking.
 */ class H {
    constructor(t){
        this.token = t, /**
         * Stores the listener registered with setChangeListener()
         * This isn't actually necessary since the UID never changes, but we use this
         * to verify the listen contract is adhered to in tests.
         */ this.changeListener = null;
    }
    getToken() {
        return Promise.resolve(this.token);
    }
    invalidateToken() {}
    start(t, e) {
        this.changeListener = e, // Fire with initial user.
        t.enqueueRetryable(()=>e(this.token.user));
    }
    shutdown() {
        this.changeListener = null;
    }
}
class J {
    constructor(t){
        this.t = t, /** Tracks the current User. */ this.currentUser = C.UNAUTHENTICATED, /**
         * Counter used to detect if the token changed while a getToken request was
         * outstanding.
         */ this.i = 0, this.forceRefresh = !1, this.auth = null;
    }
    start(t1, e2) {
        let n = this.i;
        // A change listener that prevents double-firing for the same token change.
        const s = (t)=>this.i !== n ? (n = this.i, e2(t)) : Promise.resolve();
        // A promise that can be waited on to block on the next token change.
        // This promise is re-created after each change.
        let i = new j;
        this.o = ()=>{
            this.i++, this.currentUser = this.u(), i.resolve(), i = new j, t1.enqueueRetryable(()=>s(this.currentUser));
        };
        const r = ()=>{
            const e = i;
            t1.enqueueRetryable(async ()=>{
                await e.promise, await s(this.currentUser);
            });
        }, o = (t)=>{
            M("FirebaseAuthCredentialsProvider", "Auth detected"), this.auth = t, this.auth.addAuthTokenListener(this.o), r();
        };
        this.t.onInit((t)=>o(t)), // Our users can initialize Auth right after Firestore, so we give it
        // a chance to register itself with the component framework before we
        // determine whether to start up in unauthenticated mode.
        setTimeout(()=>{
            if (!this.auth) {
                const t = this.t.getImmediate({
                    optional: !0
                });
                t ? o(t) : // If auth is still not available, proceed with `null` user
                (M("FirebaseAuthCredentialsProvider", "Auth not yet detected"), i.resolve(), i = new j);
            }
        }, 0), r();
    }
    getToken() {
        // Take note of the current value of the tokenCounter so that this method
        // can fail (with an ABORTED error) if there is a token change while the
        // request is outstanding.
        const t = this.i, e3 = this.forceRefresh;
        return this.forceRefresh = !1, this.auth ? this.auth.getToken(e3).then((e)=>// Cancel the request since the token changed while the request was
            // outstanding so the response is potentially for a previous user (which
            // user, we can't be sure).
            this.i !== t ? (M("FirebaseAuthCredentialsProvider", "getToken aborted due to token change."), this.getToken()) : e ? (U("string" == typeof e.accessToken), new W(e.accessToken, this.currentUser)) : null) : Promise.resolve(null);
    }
    invalidateToken() {
        this.forceRefresh = !0;
    }
    shutdown() {
        this.auth && this.auth.removeAuthTokenListener(this.o);
    }
    // Auth.getUid() can return null even with a user logged in. It is because
    // getUid() is synchronous, but the auth code populating Uid is asynchronous.
    // This method should only be called in the AuthTokenListener callback
    // to guarantee to get the actual user.
    u() {
        const t = this.auth && this.auth.getUid();
        return U(null === t || "string" == typeof t), new C(t);
    }
}
/*
 * FirstPartyToken provides a fresh token each time its value
 * is requested, because if the token is too old, requests will be rejected.
 * Technically this may no longer be necessary since the SDK should gracefully
 * recover from unauthenticated errors (see b/33147818 for context), but it's
 * safer to keep the implementation as-is.
 */ class Y {
    constructor(t, e, n){
        this.type = "FirstParty", this.user = C.FIRST_PARTY, this.headers = new Map, this.headers.set("X-Goog-AuthUser", e);
        const s = t.auth.getAuthHeaderValueForFirstParty([]);
        s && this.headers.set("Authorization", s), n && this.headers.set("X-Goog-Iam-Authorization-Token", n);
    }
}
/*
 * Provides user credentials required for the Firestore JavaScript SDK
 * to authenticate the user, using technique that is only available
 * to applications hosted by Google.
 */ class X {
    constructor(t, e, n){
        this.h = t, this.l = e, this.m = n;
    }
    getToken() {
        return Promise.resolve(new Y(this.h, this.l, this.m));
    }
    start(t, e) {
        // Fire with initial uid.
        t.enqueueRetryable(()=>e(C.FIRST_PARTY));
    }
    shutdown() {}
    invalidateToken() {}
}
class Z {
    constructor(t){
        this.value = t, this.type = "AppCheck", this.headers = new Map, t && t.length > 0 && this.headers.set("x-firebase-appcheck", this.value);
    }
}
class tt {
    constructor(t){
        this.g = t, this.forceRefresh = !1, this.appCheck = null, this.p = null;
    }
    start(t2, e4) {
        const n1 = (t)=>{
            null != t.error && M("FirebaseAppCheckTokenProvider", `Error getting App Check token; using placeholder token instead. Error: ${t.error.message}`);
            const n = t.token !== this.p;
            return this.p = t.token, M("FirebaseAppCheckTokenProvider", `Received ${n ? "new" : "existing"} token.`), n ? e4(t.token) : Promise.resolve();
        };
        this.o = (e)=>{
            t2.enqueueRetryable(()=>n1(e));
        };
        const s = (t)=>{
            M("FirebaseAppCheckTokenProvider", "AppCheck detected"), this.appCheck = t, this.appCheck.addTokenListener(this.o);
        };
        this.g.onInit((t)=>s(t)), // Our users can initialize AppCheck after Firestore, so we give it
        // a chance to register itself with the component framework.
        setTimeout(()=>{
            if (!this.appCheck) {
                const t = this.g.getImmediate({
                    optional: !0
                });
                t ? s(t) : // If AppCheck is still not available, proceed without it.
                M("FirebaseAppCheckTokenProvider", "AppCheck not yet detected");
            }
        }, 0);
    }
    getToken() {
        const t3 = this.forceRefresh;
        return this.forceRefresh = !1, this.appCheck ? this.appCheck.getToken(t3).then((t)=>t ? (U("string" == typeof t.token), this.p = t.token, new Z(t.token)) : null) : Promise.resolve(null);
    }
    invalidateToken() {
        this.forceRefresh = !0;
    }
    shutdown() {
        this.appCheck && this.appCheck.removeTokenListener(this.o);
    }
}
/**
 * An AppCheck token provider that always yields an empty token.
 * @internal
 */ class et {
    getToken() {
        return Promise.resolve(new Z(""));
    }
    invalidateToken() {}
    start(t, e) {}
    shutdown() {}
}
/**
 * Builds a CredentialsProvider depending on the type of
 * the credentials passed in.
 */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Generates `nBytes` of random bytes.
 *
 * If `nBytes < 0` , an error will be thrown.
 */ function nt(t) {
    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
    const e = // eslint-disable-next-line @typescript-eslint/no-explicit-any
    "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
    if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n);
    else // Falls back to Math.random
    for(let e5 = 0; e5 < t; e5++)n[e5] = Math.floor(256 * Math.random());
    return n;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class st {
    static I() {
        // Alphanumeric characters
        const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length;
        // The largest byte value that is a multiple of `char.length`.
        let n = "";
        for(; n.length < 20;){
            const s = nt(40);
            for(let i = 0; i < s.length; ++i)// Only accept values that are [0, maxMultiple), this ensures they can
            // be evenly mapped to indices of `chars` via a modulo operation.
            n.length < 20 && s[i] < e && (n += t.charAt(s[i] % t.length));
        }
        return n;
    }
}
function it(t, e) {
    return t < e ? -1 : t > e ? 1 : 0;
}
/** Helper to compare arrays using isEqual(). */ function rt(t4, e, n) {
    return t4.length === e.length && t4.every((t, s)=>n(t, e[s]));
}
/**
 * Returns the immediate lexicographically-following string. This is useful to
 * construct an inclusive range for indexeddb iterators.
 */ function ot(t) {
    // Return the input string, with an additional NUL byte appended.
    return t + "\0";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).
/**
 * A `Timestamp` represents a point in time independent of any time zone or
 * calendar, represented as seconds and fractions of seconds at nanosecond
 * resolution in UTC Epoch time.
 *
 * It is encoded using the Proleptic Gregorian Calendar which extends the
 * Gregorian calendar backwards to year one. It is encoded assuming all minutes
 * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
 * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
 * 9999-12-31T23:59:59.999999999Z.
 *
 * For examples and further specifications, refer to the
 * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.
 */ class ut {
    /**
     * Creates a new timestamp.
     *
     * @param seconds - The number of seconds of UTC time since Unix epoch
     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
     *     9999-12-31T23:59:59Z inclusive.
     * @param nanoseconds - The non-negative fractions of a second at nanosecond
     *     resolution. Negative second values with fractions must still have
     *     non-negative nanoseconds values that count forward in time. Must be
     *     from 0 to 999,999,999 inclusive.
     */ constructor(/**
     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.
     */ t, /**
     * The fractions of a second at nanosecond resolution.*
     */ e){
        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new Q(G.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
        if (e >= 1e9) throw new Q(G.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
        if (t < -62135596800) throw new Q(G.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        // This will break in the year 10,000.
        if (t >= 253402300800) throw new Q(G.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
    }
    /**
     * Creates a new timestamp with the current date, with millisecond precision.
     *
     * @returns a new timestamp representing the current date.
     */ static now() {
        return ut.fromMillis(Date.now());
    }
    /**
     * Creates a new timestamp from the given date.
     *
     * @param date - The date to initialize the `Timestamp` from.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     date.
     */ static fromDate(t) {
        return ut.fromMillis(t.getTime());
    }
    /**
     * Creates a new timestamp from the given number of milliseconds.
     *
     * @param milliseconds - Number of milliseconds since Unix epoch
     *     1970-01-01T00:00:00Z.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     number of milliseconds.
     */ static fromMillis(t) {
        const e = Math.floor(t / 1e3), n = Math.floor(1e6 * (t - 1e3 * e));
        return new ut(e, n);
    }
    /**
     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion
     * causes a loss of precision since `Date` objects only support millisecond
     * precision.
     *
     * @returns JavaScript `Date` object representing the same point in time as
     *     this `Timestamp`, with millisecond precision.
     */ toDate() {
        return new Date(this.toMillis());
    }
    /**
     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
     * epoch). This operation causes a loss of precision.
     *
     * @returns The point in time corresponding to this timestamp, represented as
     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
     */ toMillis() {
        return 1e3 * this.seconds + this.nanoseconds / 1e6;
    }
    _compareTo(t) {
        return this.seconds === t.seconds ? it(this.nanoseconds, t.nanoseconds) : it(this.seconds, t.seconds);
    }
    /**
     * Returns true if this `Timestamp` is equal to the provided one.
     *
     * @param other - The `Timestamp` to compare against.
     * @returns true if this `Timestamp` is equal to the provided one.
     */ isEqual(t) {
        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
    }
    /** Returns a textual representation of this `Timestamp`. */ toString() {
        return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
    }
    /** Returns a JSON-serializable representation of this `Timestamp`. */ toJSON() {
        return {
            seconds: this.seconds,
            nanoseconds: this.nanoseconds
        };
    }
    /**
     * Converts this object to a primitive string, which allows `Timestamp` objects
     * to be compared using the `>`, `<=`, `>=` and `>` operators.
     */ valueOf() {
        // This method returns a string of the form <seconds>.<nanoseconds> where
        // <seconds> is translated to have a non-negative value and both <seconds>
        // and <nanoseconds> are left-padded with zeroes to be a consistent length.
        // Strings with this format then have a lexiographical ordering that matches
        // the expected ordering. The <seconds> translation is done to avoid having
        // a leading negative sign (i.e. a leading '-' character) in its string
        // representation, which would affect its lexiographical ordering.
        const t = this.seconds - -62135596800;
        // Note: Up to 12 decimal digits are required to represent all valid
        // 'seconds' values.
        return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A version of a document in Firestore. This corresponds to the version
 * timestamp, such as update_time or read_time.
 */ class ct {
    constructor(t){
        this.timestamp = t;
    }
    static fromTimestamp(t) {
        return new ct(t);
    }
    static min() {
        return new ct(new ut(0, 0));
    }
    static max() {
        return new ct(new ut(253402300799, 999999999));
    }
    compareTo(t) {
        return this.timestamp._compareTo(t.timestamp);
    }
    isEqual(t) {
        return this.timestamp.isEqual(t.timestamp);
    }
    /** Returns a number representation of the version for use in spec tests. */ toMicroseconds() {
        // Convert to microseconds.
        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
    }
    toString() {
        return "SnapshotVersion(" + this.timestamp.toString() + ")";
    }
    toTimestamp() {
        return this.timestamp;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Path represents an ordered sequence of string segments.
 */ class at {
    constructor(t, e, n){
        void 0 === e ? e = 0 : e > t.length && L(), void 0 === n ? n = t.length - e : n > t.length - e && L(), this.segments = t, this.offset = e, this.len = n;
    }
    get length() {
        return this.len;
    }
    isEqual(t) {
        return 0 === at.comparator(this, t);
    }
    child(t5) {
        const e = this.segments.slice(this.offset, this.limit());
        return t5 instanceof at ? t5.forEach((t)=>{
            e.push(t);
        }) : e.push(t5), this.construct(e);
    }
    /** The index of one past the last segment of the path. */ limit() {
        return this.offset + this.length;
    }
    popFirst(t) {
        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);
    }
    popLast() {
        return this.construct(this.segments, this.offset, this.length - 1);
    }
    firstSegment() {
        return this.segments[this.offset];
    }
    lastSegment() {
        return this.get(this.length - 1);
    }
    get(t) {
        return this.segments[this.offset + t];
    }
    isEmpty() {
        return 0 === this.length;
    }
    isPrefixOf(t) {
        if (t.length < this.length) return !1;
        for(let e = 0; e < this.length; e++)if (this.get(e) !== t.get(e)) return !1;
        return !0;
    }
    isImmediateParentOf(t) {
        if (this.length + 1 !== t.length) return !1;
        for(let e = 0; e < this.length; e++)if (this.get(e) !== t.get(e)) return !1;
        return !0;
    }
    forEach(t) {
        for(let e = this.offset, n = this.limit(); e < n; e++)t(this.segments[e]);
    }
    toArray() {
        return this.segments.slice(this.offset, this.limit());
    }
    static comparator(t, e) {
        const n = Math.min(t.length, e.length);
        for(let s = 0; s < n; s++){
            const n = t.get(s), i = e.get(s);
            if (n < i) return -1;
            if (n > i) return 1;
        }
        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
    }
}
/**
 * A slash-separated path for navigating resources (documents and collections)
 * within Firestore.
 *
 * @internal
 */ class ht extends at {
    construct(t, e, n) {
        return new ht(t, e, n);
    }
    canonicalString() {
        // NOTE: The client is ignorant of any path segments containing escape
        // sequences (e.g. __id123__) and just passes them through raw (they exist
        // for legacy reasons and should not be used frequently).
        return this.toArray().join("/");
    }
    toString() {
        return this.canonicalString();
    }
    /**
     * Creates a resource path from the given slash-delimited string. If multiple
     * arguments are provided, all components are combined. Leading and trailing
     * slashes from all components are ignored.
     */ static fromString(...t6) {
        // NOTE: The client is ignorant of any path segments containing escape
        // sequences (e.g. __id123__) and just passes them through raw (they exist
        // for legacy reasons and should not be used frequently).
        const e = [];
        for (const n of t6){
            if (n.indexOf("//") >= 0) throw new Q(G.INVALID_ARGUMENT, `Invalid segment (${n}). Paths must not contain // in them.`);
            // Strip leading and traling slashed.
            e.push(...n.split("/").filter((t)=>t.length > 0));
        }
        return new ht(e);
    }
    static emptyPath() {
        return new ht([]);
    }
}
const lt = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
/**
 * A dot-separated path for navigating sub-objects within a document.
 * @internal
 */ class ft extends at {
    construct(t, e, n) {
        return new ft(t, e, n);
    }
    /**
     * Returns true if the string could be used as a segment in a field path
     * without escaping.
     */ static isValidIdentifier(t) {
        return lt.test(t);
    }
    canonicalString() {
        return this.toArray().map((t)=>(t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), ft.isValidIdentifier(t) || (t = "`" + t + "`"), t)).join(".");
    }
    toString() {
        return this.canonicalString();
    }
    /**
     * Returns true if this field references the key of a document.
     */ isKeyField() {
        return 1 === this.length && "__name__" === this.get(0);
    }
    /**
     * The field designating the key of a document.
     */ static keyField() {
        return new ft([
            "__name__"
        ]);
    }
    /**
     * Parses a field string from the given server-formatted string.
     *
     * - Splitting the empty string is not allowed (for now at least).
     * - Empty segments within the string (e.g. if there are two consecutive
     *   separators) are not allowed.
     *
     * TODO(b/37244157): we should make this more strict. Right now, it allows
     * non-identifier path components, even if they aren't escaped.
     */ static fromServerFormat(t) {
        const e = [];
        let n = "", s = 0;
        const i = ()=>{
            if (0 === n.length) throw new Q(G.INVALID_ARGUMENT, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
            e.push(n), n = "";
        };
        let r = !1;
        for(; s < t.length;){
            const e = t[s];
            if ("\\" === e) {
                if (s + 1 === t.length) throw new Q(G.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                const e = t[s + 1];
                if ("\\" !== e && "." !== e && "`" !== e) throw new Q(G.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                n += e, s += 2;
            } else "`" === e ? (r = !r, s++) : "." !== e || r ? (n += e, s++) : (i(), s++);
        }
        if (i(), r) throw new Q(G.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
        return new ft(e);
    }
    static emptyPath() {
        return new ft([]);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @internal
 */ class dt {
    constructor(t){
        this.path = t;
    }
    static fromPath(t) {
        return new dt(ht.fromString(t));
    }
    static fromName(t) {
        return new dt(ht.fromString(t).popFirst(5));
    }
    static empty() {
        return new dt(ht.emptyPath());
    }
    get collectionGroup() {
        return this.path.popLast().lastSegment();
    }
    /** Returns true if the document is in the specified collectionId. */ hasCollectionId(t) {
        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
    }
    /** Returns the collection group (i.e. the name of the parent collection) for this key. */ getCollectionGroup() {
        return this.path.get(this.path.length - 2);
    }
    /** Returns the fully qualified path to the parent collection. */ getCollectionPath() {
        return this.path.popLast();
    }
    isEqual(t) {
        return null !== t && 0 === ht.comparator(this.path, t.path);
    }
    toString() {
        return this.path.toString();
    }
    static comparator(t, e) {
        return ht.comparator(t.path, e.path);
    }
    static isDocumentKey(t) {
        return t.length % 2 == 0;
    }
    /**
     * Creates and returns a new document key with the given segments.
     *
     * @param segments - The segments of the path to the document
     * @returns A new instance of DocumentKey
     */ static fromSegments(t) {
        return new dt(new ht(t.slice()));
    }
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The initial mutation batch id for each index. Gets updated during index
 * backfill.
 */ /**
 * An index definition for field indexes in Firestore.
 *
 * Every index is associated with a collection. The definition contains a list
 * of fields and their index kind (which can be `ASCENDING`, `DESCENDING` or
 * `CONTAINS` for ArrayContains/ArrayContainsAny queries).
 *
 * Unlike the backend, the SDK does not differentiate between collection or
 * collection group-scoped indices. Every index can be used for both single
 * collection and collection group queries.
 */ class _t {
    constructor(/**
     * The index ID. Returns -1 if the index ID is not available (e.g. the index
     * has not yet been persisted).
     */ t, /** The collection ID this index applies to. */ e, /** The field segments for this index. */ n, /** Shows how up-to-date the index is for the current user. */ s){
        this.indexId = t, this.collectionGroup = e, this.fields = n, this.indexState = s;
    }
}
/** An ID for an index that has not yet been added to persistence.  */ /** Returns the ArrayContains/ArrayContainsAny segment for this index. */ function wt(t7) {
    return t7.fields.find((t)=>2 /* CONTAINS */  === t.kind);
}
/** Returns all directional (ascending/descending) segments for this index. */ function mt(t8) {
    return t8.fields.filter((t)=>2 /* CONTAINS */  !== t.kind);
}
/**
 * Returns the order of the document key component for the given index.
 *
 * PORTING NOTE: This is only used in the Web IndexedDb implementation.
 */ _t.UNKNOWN_ID = -1;
/** An index component consisting of field path and index type.  */ class gt {
    constructor(/** The field path of the component. */ t, /** The fields sorting order. */ e){
        this.fieldPath = t, this.kind = e;
    }
}
/**
 * Stores the "high water mark" that indicates how updated the Index is for the
 * current user.
 */ class yt {
    constructor(/**
     * Indicates when the index was last updated (relative to other indexes).
     */ t, /** The the latest indexed read time, document and batch id. */ e){
        this.sequenceNumber = t, this.offset = e;
    }
    /** The state of an index that has not yet been backfilled. */ static empty() {
        return new yt(0, Tt.min());
    }
}
/**
 * Creates an offset that matches all documents with a read time higher than
 * `readTime`.
 */ function pt(t, e) {
    // We want to create an offset that matches all documents with a read time
    // greater than the provided read time. To do so, we technically need to
    // create an offset for `(readTime, MAX_DOCUMENT_KEY)`. While we could use
    // Unicode codepoints to generate MAX_DOCUMENT_KEY, it is much easier to use
    // `(readTime + 1, DocumentKey.empty())` since `> DocumentKey.empty()` matches
    // all valid document IDs.
    const n = t.toTimestamp().seconds, s = t.toTimestamp().nanoseconds + 1, i = ct.fromTimestamp(1e9 === s ? new ut(n + 1, 0) : new ut(n, s));
    return new Tt(i, dt.empty(), e);
}
/** Creates a new offset based on the provided document. */ function It(t) {
    return new Tt(t.readTime, t.key, -1);
}
/**
 * Stores the latest read time, document and batch ID that were processed for an
 * index.
 */ class Tt {
    constructor(/**
     * The latest read time version that has been indexed by Firestore for this
     * field index.
     */ t, /**
     * The key of the last document that was indexed for this query. Use
     * `DocumentKey.empty()` if no document has been indexed.
     */ e, /*
     * The largest mutation batch id that's been processed by Firestore.
     */ n){
        this.readTime = t, this.documentKey = e, this.largestBatchId = n;
    }
    /** Returns an offset that sorts before all regular offsets. */ static min() {
        return new Tt(ct.min(), dt.empty(), -1);
    }
    /** Returns an offset that sorts after all regular offsets. */ static max() {
        return new Tt(ct.max(), dt.empty(), -1);
    }
}
function Et(t, e) {
    let n = t.readTime.compareTo(e.readTime);
    return 0 !== n ? n : (n = dt.comparator(t.documentKey, e.documentKey), 0 !== n ? n : it(t.largestBatchId, e.largestBatchId));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // TODO(indexing): Remove this constant
const At = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
/**
 * A base class representing a persistence transaction, encapsulating both the
 * transaction's sequence numbers as well as a list of onCommitted listeners.
 *
 * When you call Persistence.runTransaction(), it will create a transaction and
 * pass it to your callback. You then pass it to any method that operates
 * on persistence.
 */ class Rt {
    constructor(){
        this.onCommittedListeners = [];
    }
    addOnCommittedListener(t) {
        this.onCommittedListeners.push(t);
    }
    raiseOnCommittedEvent() {
        this.onCommittedListeners.forEach((t)=>t());
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Verifies the error thrown by a LocalStore operation. If a LocalStore
 * operation fails because the primary lease has been taken by another client,
 * we ignore the error (the persistence layer will immediately call
 * `applyPrimaryLease` to propagate the primary state change). All other errors
 * are re-thrown.
 *
 * @param err - An error returned by a LocalStore operation.
 * @returns A Promise that resolves after we recovered, or the original error.
 */ async function bt(t) {
    if (t.code !== G.FAILED_PRECONDITION || t.message !== At) throw t;
    M("LocalStore", "Unexpectedly lost primary lease");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * PersistencePromise is essentially a re-implementation of Promise except
 * it has a .next() method instead of .then() and .next() and .catch() callbacks
 * are executed synchronously when a PersistencePromise resolves rather than
 * asynchronously (Promise implementations use setImmediate() or similar).
 *
 * This is necessary to interoperate with IndexedDB which will automatically
 * commit transactions if control is returned to the event loop without
 * synchronously initiating another operation on the transaction.
 *
 * NOTE: .then() and .catch() only allow a single consumer, unlike normal
 * Promises.
 */ class Pt {
    constructor(t9){
        // NOTE: next/catchCallback will always point to our own wrapper functions,
        // not the user's raw next() or catch() callbacks.
        this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
        this.result = void 0, this.error = void 0, this.isDone = !1, // Set to true when .then() or .catch() are called and prevents additional
        // chaining.
        this.callbackAttached = !1, t9((t)=>{
            this.isDone = !0, this.result = t, this.nextCallback && // value should be defined unless T is Void, but we can't express
            // that in the type system.
            this.nextCallback(t);
        }, (t)=>{
            this.isDone = !0, this.error = t, this.catchCallback && this.catchCallback(t);
        });
    }
    catch(t) {
        return this.next(void 0, t);
    }
    next(t10, e6) {
        return this.callbackAttached && L(), this.callbackAttached = !0, this.isDone ? this.error ? this.wrapFailure(e6, this.error) : this.wrapSuccess(t10, this.result) : new Pt((n, s)=>{
            this.nextCallback = (e)=>{
                this.wrapSuccess(t10, e).next(n, s);
            }, this.catchCallback = (t)=>{
                this.wrapFailure(e6, t).next(n, s);
            };
        });
    }
    toPromise() {
        return new Promise((t, e)=>{
            this.next(t, e);
        });
    }
    wrapUserFunction(t) {
        try {
            const e = t();
            return e instanceof Pt ? e : Pt.resolve(e);
        } catch (t11) {
            return Pt.reject(t11);
        }
    }
    wrapSuccess(t, e) {
        return t ? this.wrapUserFunction(()=>t(e)) : Pt.resolve(e);
    }
    wrapFailure(t, e) {
        return t ? this.wrapUserFunction(()=>t(e)) : Pt.reject(e);
    }
    static resolve(t) {
        return new Pt((e, n)=>{
            e(t);
        });
    }
    static reject(t) {
        return new Pt((e, n)=>{
            n(t);
        });
    }
    static waitFor(// Accept all Promise types in waitFor().
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    t12) {
        return new Pt((e, n)=>{
            let s = 0, i = 0, r = !1;
            t12.forEach((t13)=>{
                ++s, t13.next(()=>{
                    ++i, r && i === s && e();
                }, (t)=>n(t));
            }), r = !0, i === s && e();
        });
    }
    /**
     * Given an array of predicate functions that asynchronously evaluate to a
     * boolean, implements a short-circuiting `or` between the results. Predicates
     * will be evaluated until one of them returns `true`, then stop. The final
     * result will be whether any of them returned `true`.
     */ static or(t14) {
        let e = Pt.resolve(!1);
        for (const n of t14)e = e.next((t)=>t ? Pt.resolve(t) : n());
        return e;
    }
    static forEach(t15, e) {
        const n = [];
        return t15.forEach((t, s)=>{
            n.push(e.call(this, t, s));
        }), this.waitFor(n);
    }
    /**
     * Concurrently map all array elements through asynchronous function.
     */ static mapArray(t16, e) {
        return new Pt((n, s)=>{
            const i = t16.length, r = new Array(i);
            let o = 0;
            for(let u = 0; u < i; u++){
                const c = u;
                e(t16[c]).next((t)=>{
                    r[c] = t, ++o, o === i && n(r);
                }, (t)=>s(t));
            }
        });
    }
    /**
     * An alternative to recursive PersistencePromise calls, that avoids
     * potential memory problems from unbounded chains of promises.
     *
     * The `action` will be called repeatedly while `condition` is true.
     */ static doWhile(t, e) {
        return new Pt((n, s)=>{
            const i = ()=>{
                !0 === t() ? e().next(()=>{
                    i();
                }, s) : n();
            };
            i();
        });
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // References to `window` are guarded by SimpleDb.isAvailable()
/* eslint-disable no-restricted-globals */ /**
 * Wraps an IDBTransaction and exposes a store() method to get a handle to a
 * specific object store.
 */ class vt {
    constructor(t, e7){
        this.action = t, this.transaction = e7, this.aborted = !1, /**
         * A `Promise` that resolves with the result of the IndexedDb transaction.
         */ this.T = new j, this.transaction.oncomplete = ()=>{
            this.T.resolve();
        }, this.transaction.onabort = ()=>{
            e7.error ? this.T.reject(new Dt(t, e7.error)) : this.T.resolve();
        }, this.transaction.onerror = (e)=>{
            const n = Ot(e.target.error);
            this.T.reject(new Dt(t, n));
        };
    }
    static open(t, e, n, s) {
        try {
            return new vt(e, t.transaction(s, n));
        } catch (t17) {
            throw new Dt(e, t17);
        }
    }
    get A() {
        return this.T.promise;
    }
    abort(t) {
        t && this.T.reject(t), this.aborted || (M("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), this.aborted = !0, this.transaction.abort());
    }
    R() {
        // If the browser supports V3 IndexedDB, we invoke commit() explicitly to
        // speed up index DB processing if the event loop remains blocks.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const t = this.transaction;
        this.aborted || "function" != typeof t.commit || t.commit();
    }
    /**
     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
     * operations performed on the SimpleDbStore happen within the context of this
     * transaction and it cannot be used anymore once the transaction is
     * completed.
     *
     * Note that we can't actually enforce that the KeyType and ValueType are
     * correct, but they allow type safety through the rest of the consuming code.
     */ store(t) {
        const e = this.transaction.objectStore(t);
        return new xt(e);
    }
}
/**
 * Provides a wrapper around IndexedDb with a simplified interface that uses
 * Promise-like return values to chain operations. Real promises cannot be used
 * since .then() continuations are executed asynchronously (e.g. via
 * .setImmediate), which would cause IndexedDB to end the transaction.
 * See PersistencePromise for more details.
 */ class Vt {
    /*
     * Creates a new SimpleDb wrapper for IndexedDb database `name`.
     *
     * Note that `version` must not be a downgrade. IndexedDB does not support
     * downgrading the schema version. We currently do not support any way to do
     * versioning outside of IndexedDB's versioning mechanism, as only
     * version-upgrade transactions are allowed to do things like create
     * objectstores.
     */ constructor(t, e, n){
        this.name = t, this.version = e, this.P = n;
        // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
        // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
        // whatever reason it's much harder to hit after 12.2 so we only proactively
        // log on 12.2.
        12.2 === Vt.v((0, _util.getUA)()) && F("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
    }
    /** Deletes the specified database. */ static delete(t) {
        return M("SimpleDb", "Removing database:", t), Nt(window.indexedDB.deleteDatabase(t)).toPromise();
    }
    /** Returns true if IndexedDB is available in the current environment. */ static V() {
        if (!(0, _util.isIndexedDBAvailable)()) return !1;
        if (Vt.S()) return !0;
        // We extensively use indexed array values and compound keys,
        // which IE and Edge do not support. However, they still have indexedDB
        // defined on the window, so we need to check for them here and make sure
        // to return that persistence is not enabled for those browsers.
        // For tracking support of this feature, see here:
        // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
        // Check the UA string to find out the browser.
        const t = (0, _util.getUA)(), e = Vt.v(t), n = 0 < e && e < 10, s = Vt.D(t), i = 0 < s && s < 4.5;
        // IE 10
        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
        // IE 11
        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
        // Edge
        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
        // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
        // iOS Safari: Disable for users running iOS version < 10.
        return !(t.indexOf("MSIE ") > 0 || t.indexOf("Trident/") > 0 || t.indexOf("Edge/") > 0 || n || i);
    }
    /**
     * Returns true if the backing IndexedDB store is the Node IndexedDBShim
     * (see https://github.com/axemclion/IndexedDBShim).
     */ static S() {
        var t;
        return "undefined" != typeof process && "YES" === ((t = {}, void 0 === t) ? void 0 : t.C);
    }
    /** Helper to get a typed SimpleDbStore from a transaction. */ static N(t, e) {
        return t.store(e);
    }
    // visible for testing
    /** Parse User Agent to determine iOS version. Returns -1 if not found. */ static v(t) {
        const e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
        return Number(n);
    }
    // visible for testing
    /** Parse User Agent to determine Android version. Returns -1 if not found. */ static D(t) {
        const e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
        return Number(n);
    }
    /**
     * Opens the specified database, creating or upgrading it if necessary.
     */ async k(t18) {
        return this.db || (M("SimpleDb", "Opening database:", this.name), this.db = await new Promise((e8, n2)=>{
            // TODO(mikelehen): Investigate browser compatibility.
            // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
            // suggests IE9 and older WebKit browsers handle upgrade
            // differently. They expect setVersion, as described here:
            // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
            const s1 = indexedDB.open(this.name, this.version);
            s1.onsuccess = (t)=>{
                const n = t.target.result;
                e8(n);
            }, s1.onblocked = ()=>{
                n2(new Dt(t18, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
            }, s1.onerror = (e)=>{
                const s = e.target.error;
                "VersionError" === s.name ? n2(new Q(G.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : "InvalidStateError" === s.name ? n2(new Q(G.FAILED_PRECONDITION, "Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: " + s)) : n2(new Dt(t18, s));
            }, s1.onupgradeneeded = (t)=>{
                M("SimpleDb", 'Database "' + this.name + '" requires upgrade from version:', t.oldVersion);
                const e = t.target.result;
                this.P.O(e, s1.transaction, t.oldVersion, this.version).next(()=>{
                    M("SimpleDb", "Database upgrade to version " + this.version + " complete");
                });
            };
        })), this.M && (this.db.onversionchange = (t)=>this.M(t)), this.db;
    }
    F(t) {
        this.M = t, this.db && (this.db.onversionchange = (e)=>t(e));
    }
    async runTransaction(t19, e, n, s) {
        const i = "readonly" === e;
        let r = 0;
        for(;;){
            ++r;
            try {
                this.db = await this.k(t19);
                const e = vt.open(this.db, t19, i ? "readonly" : "readwrite", n), r = s(e).next((t)=>(e.R(), t)).catch((t)=>// Abort the transaction if there was an error.
                    (e.abort(t), Pt.reject(t))).toPromise();
                // As noted above, errors are propagated by aborting the transaction. So
                // we swallow any error here to avoid the browser logging it as unhandled.
                return r.catch(()=>{}), // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                // fire), but still return the original transactionFnResult back to the
                // caller.
                await e.A, r;
            } catch (t) {
                const e = t, n = "FirebaseError" !== e.name && r < 3;
                // TODO(schmidt-sebastian): We could probably be smarter about this and
                // not retry exceptions that are likely unrecoverable (such as quota
                // exceeded errors).
                // Note: We cannot use an instanceof check for FirestoreException, since the
                // exception is wrapped in a generic error by our async/await handling.
                if (M("SimpleDb", "Transaction failed with error:", e.message, "Retrying:", n), this.close(), !n) return Promise.reject(e);
            }
        }
    }
    close() {
        this.db && this.db.close(), this.db = void 0;
    }
}
/**
 * A controller for iterating over a key range or index. It allows an iterate
 * callback to delete the currently-referenced object, or jump to a new key
 * within the key range or index.
 */ class St {
    constructor(t){
        this.$ = t, this.B = !1, this.L = null;
    }
    get isDone() {
        return this.B;
    }
    get U() {
        return this.L;
    }
    set cursor(t) {
        this.$ = t;
    }
    /**
     * This function can be called to stop iteration at any point.
     */ done() {
        this.B = !0;
    }
    /**
     * This function can be called to skip to that next key, which could be
     * an index or a primary key.
     */ q(t) {
        this.L = t;
    }
    /**
     * Delete the current cursor value from the object store.
     *
     * NOTE: You CANNOT do this with a keysOnly query.
     */ delete() {
        return Nt(this.$.delete());
    }
}
/** An error that wraps exceptions that thrown during IndexedDB execution. */ class Dt extends Q {
    constructor(t, e){
        super(G.UNAVAILABLE, `IndexedDB transaction '${t}' failed: ${e}`), this.name = "IndexedDbTransactionError";
    }
}
/** Verifies whether `e` is an IndexedDbTransactionError. */ function Ct(t) {
    // Use name equality, as instanceof checks on errors don't work with errors
    // that wrap other errors.
    return "IndexedDbTransactionError" === t.name;
}
/**
 * A wrapper around an IDBObjectStore providing an API that:
 *
 * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
 * methods for acting against the object store.
 * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
 * method return a PersistencePromise instead.
 * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
 * intermediate IndexedDB types (IDBCursorWithValue, etc.)
 */ class xt {
    constructor(t){
        this.store = t;
    }
    put(t, e) {
        let n;
        return void 0 !== e ? (M("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (M("SimpleDb", "PUT", this.store.name, "<auto-key>", t), n = this.store.put(t)), Nt(n);
    }
    /**
     * Adds a new value into an Object Store and returns the new key. Similar to
     * IndexedDb's `add()`, this method will fail on primary key collisions.
     *
     * @param value - The object to write.
     * @returns The key of the value to add.
     */ add(t) {
        M("SimpleDb", "ADD", this.store.name, t, t);
        return Nt(this.store.add(t));
    }
    /**
     * Gets the object with the specified key from the specified store, or null
     * if no object exists with the specified key.
     *
     * @key The key of the object to get.
     * @returns The object with the specified key or null if no object exists.
     */ get(t) {
        // We're doing an unsafe cast to ValueType.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return Nt(this.store.get(t)).next((e)=>// Normalize nonexistence to null.
            (void 0 === e && (e = null), M("SimpleDb", "GET", this.store.name, t, e), e));
    }
    delete(t) {
        M("SimpleDb", "DELETE", this.store.name, t);
        return Nt(this.store.delete(t));
    }
    /**
     * If we ever need more of the count variants, we can add overloads. For now,
     * all we need is to count everything in a store.
     *
     * Returns the number of rows in the store.
     */ count() {
        M("SimpleDb", "COUNT", this.store.name);
        return Nt(this.store.count());
    }
    K(t21, e9) {
        const n3 = this.options(t21, e9);
        // Use `getAll()` if the browser supports IndexedDB v3, as it is roughly
        // 20% faster. Unfortunately, getAll() does not support custom indices.
        if (n3.index || "function" != typeof this.store.getAll) {
            const t = this.cursor(n3), e = [];
            return this.G(t, (t, n)=>{
                e.push(n);
            }).next(()=>e);
        }
        {
            const t20 = this.store.getAll(n3.range);
            return new Pt((e, n)=>{
                t20.onerror = (t)=>{
                    n(t.target.error);
                }, t20.onsuccess = (t)=>{
                    e(t.target.result);
                };
            });
        }
    }
    /**
     * Loads the first `count` elements from the provided index range. Loads all
     * elements if no limit is provided.
     */ j(t22, e10) {
        const n = this.store.getAll(t22, null === e10 ? void 0 : e10);
        return new Pt((t23, e11)=>{
            n.onerror = (t)=>{
                e11(t.target.error);
            }, n.onsuccess = (e)=>{
                t23(e.target.result);
            };
        });
    }
    W(t, e) {
        M("SimpleDb", "DELETE ALL", this.store.name);
        const n4 = this.options(t, e);
        n4.H = !1;
        const s = this.cursor(n4);
        return this.G(s, (t, e, n)=>n.delete());
    }
    J(t, e) {
        let n;
        e ? n = t : (n = {}, e = t);
        const s = this.cursor(n);
        return this.G(s, e);
    }
    /**
     * Iterates over a store, but waits for the given callback to complete for
     * each entry before iterating the next entry. This allows the callback to do
     * asynchronous work to determine if this iteration should continue.
     *
     * The provided callback should return `true` to continue iteration, and
     * `false` otherwise.
     */ Y(t24) {
        const e12 = this.cursor({});
        return new Pt((n, s2)=>{
            e12.onerror = (t)=>{
                const e = Ot(t.target.error);
                s2(e);
            }, e12.onsuccess = (e)=>{
                const s = e.target.result;
                s ? t24(s.primaryKey, s.value).next((t)=>{
                    t ? s.continue() : n();
                }) : n();
            };
        });
    }
    G(t25, e) {
        const n = [];
        return new Pt((s, i1)=>{
            t25.onerror = (t)=>{
                i1(t.target.error);
            }, t25.onsuccess = (t)=>{
                const i = t.target.result;
                if (!i) return void s();
                const r = new St(i), o = e(i.primaryKey, i.value, r);
                if (o instanceof Pt) {
                    const t26 = o.catch((t)=>(r.done(), Pt.reject(t)));
                    n.push(t26);
                }
                r.isDone ? s() : null === r.U ? i.continue() : i.continue(r.U);
            };
        }).next(()=>Pt.waitFor(n));
    }
    options(t, e) {
        let n;
        return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
            index: n,
            range: e
        };
    }
    cursor(t) {
        let e = "next";
        if (t.reverse && (e = "prev"), t.index) {
            const n = this.store.index(t.index);
            return t.H ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
        }
        return this.store.openCursor(t.range, e);
    }
}
/**
 * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
 * handlers to resolve / reject the PersistencePromise as appropriate.
 */ function Nt(t27) {
    return new Pt((e13, n5)=>{
        t27.onsuccess = (t)=>{
            const n = t.target.result;
            e13(n);
        }, t27.onerror = (t)=>{
            const e = Ot(t.target.error);
            n5(e);
        };
    });
}
// Guard so we only report the error once.
let kt = !1;
function Ot(t) {
    const e = Vt.v((0, _util.getUA)());
    if (e >= 12.2 && e < 13) {
        const e = "An internal error was encountered in the Indexed Database server";
        if (t.message.indexOf(e) >= 0) {
            // Wrap error in a more descriptive one.
            const t = new Q("internal", `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${e}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`);
            return kt || (kt = !0, // Throw a global exception outside of this promise chain, for the user to
            // potentially catch.
            setTimeout(()=>{
                throw t;
            }, 0)), t;
        }
    }
    return t;
}
/** This class is responsible for the scheduling of Index Backfiller. */ class Mt {
    constructor(t, e){
        this.asyncQueue = t, this.X = e, this.task = null;
    }
    start() {}
    stop() {
        this.task && (this.task.cancel(), this.task = null);
    }
    get started() {
        return null !== this.task;
    }
    Z(t28) {
        M("IndexBackiller", `Scheduled in ${t28}ms`), this.task = this.asyncQueue.enqueueAfterDelay("index_backfill" /* IndexBackfill */ , t28, async ()=>{
            this.task = null;
            try {
                M("IndexBackiller", `Documents written: ${await this.X.tt()}`);
            } catch (t) {
                Ct(t) ? M("IndexBackiller", "Ignoring IndexedDB error during index backfill: ", t) : await bt(t);
            }
            await this.Z(1);
        });
    }
}
/** Implements the steps for backfilling indexes. */ class Ft {
    constructor(/**
     * LocalStore provides access to IndexManager and LocalDocumentView.
     * These properties will update when the user changes. Consequently,
     * making a local copy of IndexManager and LocalDocumentView will require
     * updates over time. The simpler solution is to rely on LocalStore to have
     * an up-to-date references to IndexManager and LocalDocumentStore.
     */ t, e){
        this.localStore = t, this.persistence = e;
    }
    async tt(t = 50) {
        return this.persistence.runTransaction("Backfill Indexes", "readwrite-primary", (e)=>this.et(e, t));
    }
    /** Writes index entries until the cap is reached. Returns the number of documents processed. */ et(t29, e14) {
        const n = new Set;
        let s = e14, i = !0;
        return Pt.doWhile(()=>!0 === i && s > 0, ()=>this.localStore.indexManager.getNextCollectionGroupToUpdate(t29).next((e)=>{
                if (null !== e && !n.has(e)) return M("IndexBackiller", `Processing collection: ${e}`), this.nt(t29, e, s).next((t)=>{
                    s -= t, n.add(e);
                });
                i = !1;
            })).next(()=>e14 - s);
    }
    /**
     * Writes entries for the provided collection group. Returns the number of documents processed.
     */ nt(t, e, n6) {
        // Use the earliest offset of all field indexes to query the local cache.
        return this.localStore.indexManager.getMinOffsetFromCollectionGroup(t, e).next((s)=>this.localStore.localDocuments.getNextDocuments(t, e, s, n6).next((n7)=>{
                const i = n7.changes;
                return this.localStore.indexManager.updateIndexEntries(t, i).next(()=>this.st(s, n7)).next((n)=>(M("IndexBackiller", `Updating offset: ${n}`), this.localStore.indexManager.updateCollectionGroup(t, e, n))).next(()=>i.size);
            }));
    }
    /** Returns the next offset based on the provided documents. */ st(t, e15) {
        let n = t;
        return e15.changes.forEach((t, e)=>{
            const s = It(e);
            Et(s, n) > 0 && (n = s);
        }), new Tt(n.readTime, n.documentKey, Math.max(e15.batchId, t.largestBatchId));
    }
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
 * exceed. All subsequent calls to next will return increasing values. If provided with a
 * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
 * well as write out sequence numbers that it produces via `next()`.
 */ class $t {
    constructor(t30, e){
        this.previousValue = t30, e && (e.sequenceNumberHandler = (t)=>this.it(t), this.rt = (t)=>e.writeSequenceNumber(t));
    }
    it(t) {
        return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
    }
    next() {
        const t = ++this.previousValue;
        return this.rt && this.rt(t), t;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function Bt(t) {
    let e = 0;
    for(const n in t)Object.prototype.hasOwnProperty.call(t, n) && e++;
    return e;
}
function Lt(t, e) {
    for(const n in t)Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
}
function Ut(t) {
    for(const e in t)if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
    return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // An immutable sorted map implementation, based on a Left-leaning Red-Black
// tree.
$t.ot = -1;
class qt {
    constructor(t, e){
        this.comparator = t, this.root = e || Gt.EMPTY;
    }
    // Returns a copy of the map, with the specified key/value added or replaced.
    insert(t, e) {
        return new qt(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, Gt.BLACK, null, null));
    }
    // Returns a copy of the map, with the specified key removed.
    remove(t) {
        return new qt(this.comparator, this.root.remove(t, this.comparator).copy(null, null, Gt.BLACK, null, null));
    }
    // Returns the value of the node with the given key, or null.
    get(t) {
        let e = this.root;
        for(; !e.isEmpty();){
            const n = this.comparator(t, e.key);
            if (0 === n) return e.value;
            n < 0 ? e = e.left : n > 0 && (e = e.right);
        }
        return null;
    }
    // Returns the index of the element in this sorted map, or -1 if it doesn't
    // exist.
    indexOf(t) {
        // Number of nodes that were pruned when descending right
        let e = 0, n = this.root;
        for(; !n.isEmpty();){
            const s = this.comparator(t, n.key);
            if (0 === s) return e + n.left.size;
            s < 0 ? n = n.left : // Count all nodes left of the node plus the node itself
            (e += n.left.size + 1, n = n.right);
        }
        // Node not found
        return -1;
    }
    isEmpty() {
        return this.root.isEmpty();
    }
    // Returns the total number of nodes in the map.
    get size() {
        return this.root.size;
    }
    // Returns the minimum key in the map.
    minKey() {
        return this.root.minKey();
    }
    // Returns the maximum key in the map.
    maxKey() {
        return this.root.maxKey();
    }
    // Traverses the map in key order and calls the specified action function
    // for each key/value pair. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    inorderTraversal(t) {
        return this.root.inorderTraversal(t);
    }
    forEach(t) {
        this.inorderTraversal((e, n)=>(t(e, n), !1));
    }
    toString() {
        const t = [];
        return this.inorderTraversal((e, n)=>(t.push(`${e}:${n}`), !1)), `{${t.join(", ")}}`;
    }
    // Traverses the map in reverse key order and calls the specified action
    // function for each key/value pair. If action returns true, traversal is
    // aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    reverseTraversal(t) {
        return this.root.reverseTraversal(t);
    }
    // Returns an iterator over the SortedMap.
    getIterator() {
        return new Kt(this.root, null, this.comparator, !1);
    }
    getIteratorFrom(t) {
        return new Kt(this.root, t, this.comparator, !1);
    }
    getReverseIterator() {
        return new Kt(this.root, null, this.comparator, !0);
    }
    getReverseIteratorFrom(t) {
        return new Kt(this.root, t, this.comparator, !0);
    }
}
// end SortedMap
// An iterator over an LLRBNode.
class Kt {
    constructor(t, e, n, s){
        this.isReverse = s, this.nodeStack = [];
        let i = 1;
        for(; !t.isEmpty();)if (i = e ? n(t.key, e) : 1, // flip the comparison if we're going in reverse
        e && s && (i *= -1), i < 0) // This node is less than our start key. ignore it
        t = this.isReverse ? t.left : t.right;
        else {
            if (0 === i) {
                // This node is exactly equal to our start key. Push it on the stack,
                // but stop iterating;
                this.nodeStack.push(t);
                break;
            }
            // This node is greater than our start key, add it to the stack and move
            // to the next one
            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;
        }
    }
    getNext() {
        let t = this.nodeStack.pop();
        const e = {
            key: t.key,
            value: t.value
        };
        if (this.isReverse) for(t = t.left; !t.isEmpty();)this.nodeStack.push(t), t = t.right;
        else for(t = t.right; !t.isEmpty();)this.nodeStack.push(t), t = t.left;
        return e;
    }
    hasNext() {
        return this.nodeStack.length > 0;
    }
    peek() {
        if (0 === this.nodeStack.length) return null;
        const t = this.nodeStack[this.nodeStack.length - 1];
        return {
            key: t.key,
            value: t.value
        };
    }
}
// end SortedMapIterator
// Represents a node in a Left-leaning Red-Black tree.
class Gt {
    constructor(t, e, n, s, i){
        this.key = t, this.value = e, this.color = null != n ? n : Gt.RED, this.left = null != s ? s : Gt.EMPTY, this.right = null != i ? i : Gt.EMPTY, this.size = this.left.size + 1 + this.right.size;
    }
    // Returns a copy of the current node, optionally replacing pieces of it.
    copy(t, e, n, s, i) {
        return new Gt(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != s ? s : this.left, null != i ? i : this.right);
    }
    isEmpty() {
        return !1;
    }
    // Traverses the tree in key order and calls the specified action function
    // for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    inorderTraversal(t) {
        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);
    }
    // Traverses the tree in reverse key order and calls the specified action
    // function for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    reverseTraversal(t) {
        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);
    }
    // Returns the minimum node in the tree.
    min() {
        return this.left.isEmpty() ? this : this.left.min();
    }
    // Returns the maximum key in the tree.
    minKey() {
        return this.min().key;
    }
    // Returns the maximum key in the tree.
    maxKey() {
        return this.right.isEmpty() ? this.key : this.right.maxKey();
    }
    // Returns new tree, with the key/value added.
    insert(t, e, n) {
        let s = this;
        const i = n(t, s.key);
        return s = i < 0 ? s.copy(null, null, null, s.left.insert(t, e, n), null) : 0 === i ? s.copy(null, e, null, null, null) : s.copy(null, null, null, null, s.right.insert(t, e, n)), s.fixUp();
    }
    removeMin() {
        if (this.left.isEmpty()) return Gt.EMPTY;
        let t = this;
        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), t.fixUp();
    }
    // Returns new tree, with the specified item removed.
    remove(t, e) {
        let n, s = this;
        if (e(t, s.key) < 0) s.left.isEmpty() || s.left.isRed() || s.left.left.isRed() || (s = s.moveRedLeft()), s = s.copy(null, null, null, s.left.remove(t, e), null);
        else {
            if (s.left.isRed() && (s = s.rotateRight()), s.right.isEmpty() || s.right.isRed() || s.right.left.isRed() || (s = s.moveRedRight()), 0 === e(t, s.key)) {
                if (s.right.isEmpty()) return Gt.EMPTY;
                n = s.right.min(), s = s.copy(n.key, n.value, null, null, s.right.removeMin());
            }
            s = s.copy(null, null, null, null, s.right.remove(t, e));
        }
        return s.fixUp();
    }
    isRed() {
        return this.color;
    }
    // Returns new tree after performing any needed rotations.
    fixUp() {
        let t = this;
        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;
    }
    moveRedLeft() {
        let t = this.colorFlip();
        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), t = t.rotateLeft(), t = t.colorFlip()), t;
    }
    moveRedRight() {
        let t = this.colorFlip();
        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;
    }
    rotateLeft() {
        const t = this.copy(null, null, Gt.RED, null, this.right.left);
        return this.right.copy(null, null, this.color, t, null);
    }
    rotateRight() {
        const t = this.copy(null, null, Gt.RED, this.left.right, null);
        return this.left.copy(null, null, this.color, null, t);
    }
    colorFlip() {
        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
        return this.copy(null, null, !this.color, t, e);
    }
    // For testing.
    checkMaxDepth() {
        const t = this.check();
        return Math.pow(2, t) <= this.size + 1;
    }
    // In a balanced RB tree, the black-depth (number of black nodes) from root to
    // leaves is equal on both sides.  This function verifies that or asserts.
    check() {
        if (this.isRed() && this.left.isRed()) throw L();
        if (this.right.isRed()) throw L();
        const t = this.left.check();
        if (t !== this.right.check()) throw L();
        return t + (this.isRed() ? 0 : 1);
    }
}
// end LLRBNode
// Empty node is shared between all LLRB trees.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
Gt.EMPTY = null, Gt.RED = !0, Gt.BLACK = !1;
// end LLRBEmptyNode
Gt.EMPTY = new // Represents an empty node (a leaf node in the Red-Black Tree).
class {
    constructor(){
        this.size = 0;
    }
    get key() {
        throw L();
    }
    get value() {
        throw L();
    }
    get color() {
        throw L();
    }
    get left() {
        throw L();
    }
    get right() {
        throw L();
    }
    // Returns a copy of the current node.
    copy(t, e, n, s, i) {
        return this;
    }
    // Returns a copy of the tree, with the specified key/value added.
    insert(t, e, n) {
        return new Gt(t, e);
    }
    // Returns a copy of the tree, with the specified key removed.
    remove(t, e) {
        return this;
    }
    isEmpty() {
        return !0;
    }
    inorderTraversal(t) {
        return !1;
    }
    reverseTraversal(t) {
        return !1;
    }
    minKey() {
        return null;
    }
    maxKey() {
        return null;
    }
    isRed() {
        return !1;
    }
    // For testing.
    checkMaxDepth() {
        return !0;
    }
    check() {
        return 0;
    }
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * SortedSet is an immutable (copy-on-write) collection that holds elements
 * in order specified by the provided comparator.
 *
 * NOTE: if provided comparator returns 0 for two elements, we consider them to
 * be equal!
 */ class Qt {
    constructor(t){
        this.comparator = t, this.data = new qt(this.comparator);
    }
    has(t) {
        return null !== this.data.get(t);
    }
    first() {
        return this.data.minKey();
    }
    last() {
        return this.data.maxKey();
    }
    get size() {
        return this.data.size;
    }
    indexOf(t) {
        return this.data.indexOf(t);
    }
    /** Iterates elements in order defined by "comparator" */ forEach(t) {
        this.data.inorderTraversal((e, n)=>(t(e), !1));
    }
    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */ forEachInRange(t, e) {
        const n = this.data.getIteratorFrom(t[0]);
        for(; n.hasNext();){
            const s = n.getNext();
            if (this.comparator(s.key, t[1]) >= 0) return;
            e(s.key);
        }
    }
    /**
     * Iterates over `elem`s such that: start &lt;= elem until false is returned.
     */ forEachWhile(t, e) {
        let n;
        for(n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext();){
            if (!t(n.getNext().key)) return;
        }
    }
    /** Finds the least element greater than or equal to `elem`. */ firstAfterOrEqual(t) {
        const e = this.data.getIteratorFrom(t);
        return e.hasNext() ? e.getNext().key : null;
    }
    getIterator() {
        return new jt(this.data.getIterator());
    }
    getIteratorFrom(t) {
        return new jt(this.data.getIteratorFrom(t));
    }
    /** Inserts or updates an element */ add(t) {
        return this.copy(this.data.remove(t).insert(t, !0));
    }
    /** Deletes an element */ delete(t) {
        return this.has(t) ? this.copy(this.data.remove(t)) : this;
    }
    isEmpty() {
        return this.data.isEmpty();
    }
    unionWith(t31) {
        let e = this;
        // Make sure `result` always refers to the larger one of the two sets.
        return e.size < t31.size && (e = t31, t31 = this), t31.forEach((t)=>{
            e = e.add(t);
        }), e;
    }
    isEqual(t) {
        if (!(t instanceof Qt)) return !1;
        if (this.size !== t.size) return !1;
        const e = this.data.getIterator(), n = t.data.getIterator();
        for(; e.hasNext();){
            const t = e.getNext().key, s = n.getNext().key;
            if (0 !== this.comparator(t, s)) return !1;
        }
        return !0;
    }
    toArray() {
        const t = [];
        return this.forEach((e)=>{
            t.push(e);
        }), t;
    }
    toString() {
        const t = [];
        return this.forEach((e)=>t.push(e)), "SortedSet(" + t.toString() + ")";
    }
    copy(t) {
        const e = new Qt(this.comparator);
        return e.data = t, e;
    }
}
class jt {
    constructor(t){
        this.iter = t;
    }
    getNext() {
        return this.iter.getNext().key;
    }
    hasNext() {
        return this.iter.hasNext();
    }
}
/**
 * Compares two sorted sets for equality using their natural ordering. The
 * method computes the intersection and invokes `onAdd` for every element that
 * is in `after` but not `before`. `onRemove` is invoked for every element in
 * `before` but missing from `after`.
 *
 * The method creates a copy of both `before` and `after` and runs in O(n log
 * n), where n is the size of the two lists.
 *
 * @param before - The elements that exist in the original set.
 * @param after - The elements to diff against the original set.
 * @param comparator - The comparator for the elements in before and after.
 * @param onAdd - A function to invoke for every element that is part of `
 * after` but not `before`.
 * @param onRemove - A function to invoke for every element that is part of
 * `before` but not `after`.
 */ /**
 * Returns the next element from the iterator or `undefined` if none available.
 */ function Wt(t) {
    return t.hasNext() ? t.getNext() : void 0;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provides a set of fields that can be used to partially patch a document.
 * FieldMask is used in conjunction with ObjectValue.
 * Examples:
 *   foo - Overwrites foo entirely with the provided value. If foo is not
 *         present in the companion ObjectValue, the field is deleted.
 *   foo.bar - Overwrites only the field bar of the object foo.
 *             If foo is not an object, foo is replaced with an object
 *             containing foo
 */ class zt {
    constructor(t){
        this.fields = t, // TODO(dimond): validation of FieldMask
        // Sort the field mask to support `FieldMask.isEqual()` and assert below.
        t.sort(ft.comparator);
    }
    static empty() {
        return new zt([]);
    }
    /**
     * Returns a new FieldMask object that is the result of adding all the given
     * fields paths to this field mask.
     */ unionWith(t) {
        let e = new Qt(ft.comparator);
        for (const t32 of this.fields)e = e.add(t32);
        for (const n of t)e = e.add(n);
        return new zt(e.toArray());
    }
    /**
     * Verifies that `fieldPath` is included by at least one field in this field
     * mask.
     *
     * This is an O(n) operation, where `n` is the size of the field mask.
     */ covers(t) {
        for (const e of this.fields)if (e.isPrefixOf(t)) return !0;
        return !1;
    }
    isEqual(t33) {
        return rt(this.fields, t33.fields, (t, e)=>t.isEqual(e));
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Converts a Base64 encoded string to a binary string. */ /** True if and only if the Base64 conversion functions are available. */ function Ht() {
    return "undefined" != typeof atob;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Immutable class that represents a "proto" byte string.
 *
 * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
 * sent on the wire. This class abstracts away this differentiation by holding
 * the proto byte string in a common class that must be converted into a string
 * before being sent as a proto.
 * @internal
 */ class Jt {
    constructor(t){
        this.binaryString = t;
    }
    static fromBase64String(t) {
        const e = atob(t);
        return new Jt(e);
    }
    static fromUint8Array(t34) {
        // TODO(indexing); Remove the copy of the byte string here as this method
        // is frequently called during indexing.
        const e16 = /**
 * Helper function to convert an Uint8array to a binary string.
 */ function(t) {
            let e = "";
            for(let n = 0; n < t.length; ++n)e += String.fromCharCode(t[n]);
            return e;
        }(t34);
        return new Jt(e16);
    }
    [Symbol.iterator]() {
        let t = 0;
        return {
            next: ()=>t < this.binaryString.length ? {
                    value: this.binaryString.charCodeAt(t++),
                    done: !1
                } : {
                    value: void 0,
                    done: !0
                }
        };
    }
    toBase64() {
        var t;
        return t = this.binaryString, btoa(t);
    }
    toUint8Array() {
        return function(t) {
            const e = new Uint8Array(t.length);
            for(let n = 0; n < t.length; n++)e[n] = t.charCodeAt(n);
            return e;
        }(this.binaryString);
    }
    approximateByteSize() {
        return 2 * this.binaryString.length;
    }
    compareTo(t) {
        return it(this.binaryString, t.binaryString);
    }
    isEqual(t) {
        return this.binaryString === t.binaryString;
    }
}
Jt.EMPTY_BYTE_STRING = new Jt("");
const Yt = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
/**
 * Converts the possible Proto values for a timestamp value into a "seconds and
 * nanos" representation.
 */ function Xt(t) {
    // The json interface (for the browser) will return an iso timestamp string,
    // while the proto js library (for node) will return a
    // google.protobuf.Timestamp instance.
    if (U(!!t), "string" == typeof t) {
        // The date string can have higher precision (nanos) than the Date class
        // (millis), so we do some custom parsing here.
        // Parse the nanos right out of the string.
        let e = 0;
        const n = Yt.exec(t);
        if (U(!!n), n[1]) {
            // Pad the fraction out to 9 digits (nanos).
            let t = n[1];
            t = (t + "000000000").substr(0, 9), e = Number(t);
        }
        // Parse the date to get the seconds.
        const s = new Date(t);
        return {
            seconds: Math.floor(s.getTime() / 1e3),
            nanos: e
        };
    }
    return {
        seconds: Zt(t.seconds),
        nanos: Zt(t.nanos)
    };
}
/**
 * Converts the possible Proto types for numbers into a JavaScript number.
 * Returns 0 if the value is not numeric.
 */ function Zt(t) {
    // TODO(bjornick): Handle int64 greater than 53 bits.
    return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
}
/** Converts the possible Proto types for Blobs into a ByteString. */ function te(t) {
    return "string" == typeof t ? Jt.fromBase64String(t) : Jt.fromUint8Array(t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a locally-applied ServerTimestamp.
 *
 * Server Timestamps are backed by MapValues that contain an internal field
 * `__type__` with a value of `server_timestamp`. The previous value and local
 * write time are stored in its `__previous_value__` and `__local_write_time__`
 * fields respectively.
 *
 * Notes:
 * - ServerTimestampValue instances are created as the result of applying a
 *   transform. They can only exist in the local view of a document. Therefore
 *   they do not need to be parsed or serialized.
 * - When evaluated locally (e.g. for snapshot.data()), they by default
 *   evaluate to `null`. This behavior can be configured by passing custom
 *   FieldValueOptions to value().
 * - With respect to other ServerTimestampValues, they sort by their
 *   localWriteTime.
 */ function ee(t) {
    var e, n;
    return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
}
/**
 * Creates a new ServerTimestamp proto value (using the internal format).
 */ /**
 * Returns the value of the field before this ServerTimestamp was set.
 *
 * Preserving the previous values allows the user to display the last resoled
 * value until the backend responds with the timestamp.
 */ function ne(t) {
    const e = t.mapValue.fields.__previous_value__;
    return ee(e) ? ne(e) : e;
}
/**
 * Returns the local time at which this timestamp was first set.
 */ function se(t) {
    const e = Xt(t.mapValue.fields.__local_write_time__.timestampValue);
    return new ut(e.seconds, e.nanos);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class ie {
    /**
     * Constructs a DatabaseInfo using the provided host, databaseId and
     * persistenceKey.
     *
     * @param databaseId - The database to use.
     * @param appId - The Firebase App Id.
     * @param persistenceKey - A unique identifier for this Firestore's local
     * storage (used in conjunction with the databaseId).
     * @param host - The Firestore backend host to connect to.
     * @param ssl - Whether to use SSL when connecting.
     * @param forceLongPolling - Whether to use the forceLongPolling option
     * when using WebChannel as the network transport.
     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
     * option when using WebChannel as the network transport.
     * @param useFetchStreams Whether to use the Fetch API instead of
     * XMLHTTPRequest
     */ constructor(t, e, n, s, i, r, o, u){
        this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = s, this.ssl = i, this.forceLongPolling = r, this.autoDetectLongPolling = o, this.useFetchStreams = u;
    }
}
/** The default database name for a project. */ /**
 * Represents the database ID a Firestore client is associated with.
 * @internal
 */ class re {
    constructor(t, e){
        this.projectId = t, this.database = e || "(default)";
    }
    static empty() {
        return new re("", "");
    }
    get isDefaultDatabase() {
        return "(default)" === this.database;
    }
    isEqual(t) {
        return t instanceof re && t.projectId === this.projectId && t.database === this.database;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Sentinel value that sorts before any Mutation Batch ID. */ /**
 * Returns whether a variable is either undefined or null.
 */ function oe(t) {
    return null == t;
}
/** Returns whether the value represents -0. */ function ue(t) {
    // Detect if the value is -0.0. Based on polyfill from
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
    return 0 === t && 1 / t == -1 / 0;
}
/**
 * Returns whether a value is an integer and in the safe integer range
 * @param value - The value to test for being an integer and in the safe range
 */ function ce(t) {
    return "number" == typeof t && Number.isInteger(t) && !ue(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const ae = {
    mapValue: {
        fields: {
            __type__: {
                stringValue: "__max__"
            }
        }
    }
}, he = {
    nullValue: "NULL_VALUE"
};
/** Extracts the backend's type order for the provided value. */ function le(t) {
    return "nullValue" in t ? 0 /* NullValue */  : "booleanValue" in t ? 1 /* BooleanValue */  : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */  : "timestampValue" in t ? 3 /* TimestampValue */  : "stringValue" in t ? 5 /* StringValue */  : "bytesValue" in t ? 6 /* BlobValue */  : "referenceValue" in t ? 7 /* RefValue */  : "geoPointValue" in t ? 8 /* GeoPointValue */  : "arrayValue" in t ? 9 /* ArrayValue */  : "mapValue" in t ? ee(t) ? 4 /* ServerTimestampValue */  : be(t) ? 9007199254740991 /* MaxValue */  : 10 /* ObjectValue */  : L();
}
/** Tests `left` and `right` for equality based on the backend semantics. */ function fe(t35, e17) {
    if (t35 === e17) return !0;
    const n8 = le(t35);
    if (n8 !== le(e17)) return !1;
    switch(n8){
        case 0 /* NullValue */ :
        case 9007199254740991 /* MaxValue */ :
            return !0;
        case 1 /* BooleanValue */ :
            return t35.booleanValue === e17.booleanValue;
        case 4 /* ServerTimestampValue */ :
            return se(t35).isEqual(se(e17));
        case 3 /* TimestampValue */ :
            return function(t, e) {
                if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) // Use string equality for ISO 8601 timestamps
                return t.timestampValue === e.timestampValue;
                const n = Xt(t.timestampValue), s = Xt(e.timestampValue);
                return n.seconds === s.seconds && n.nanos === s.nanos;
            }(t35, e17);
        case 5 /* StringValue */ :
            return t35.stringValue === e17.stringValue;
        case 6 /* BlobValue */ :
            return function(t, e) {
                return te(t.bytesValue).isEqual(te(e.bytesValue));
            }(t35, e17);
        case 7 /* RefValue */ :
            return t35.referenceValue === e17.referenceValue;
        case 8 /* GeoPointValue */ :
            return function(t, e) {
                return Zt(t.geoPointValue.latitude) === Zt(e.geoPointValue.latitude) && Zt(t.geoPointValue.longitude) === Zt(e.geoPointValue.longitude);
            }(t35, e17);
        case 2 /* NumberValue */ :
            return function(t, e) {
                if ("integerValue" in t && "integerValue" in e) return Zt(t.integerValue) === Zt(e.integerValue);
                if ("doubleValue" in t && "doubleValue" in e) {
                    const n = Zt(t.doubleValue), s = Zt(e.doubleValue);
                    return n === s ? ue(n) === ue(s) : isNaN(n) && isNaN(s);
                }
                return !1;
            }(t35, e17);
        case 9 /* ArrayValue */ :
            return rt(t35.arrayValue.values || [], e17.arrayValue.values || [], fe);
        case 10 /* ObjectValue */ :
            return function(t, e) {
                const n = t.mapValue.fields || {}, s = e.mapValue.fields || {};
                if (Bt(n) !== Bt(s)) return !1;
                for(const t36 in n)if (n.hasOwnProperty(t36) && (void 0 === s[t36] || !fe(n[t36], s[t36]))) return !1;
                return !0;
            }(t35, e17);
        default:
            return L();
    }
}
function de(t37, e) {
    return void 0 !== (t37.values || []).find((t)=>fe(t, e));
}
function _e(t38, e18) {
    if (t38 === e18) return 0;
    const n9 = le(t38), s3 = le(e18);
    if (n9 !== s3) return it(n9, s3);
    switch(n9){
        case 0 /* NullValue */ :
        case 9007199254740991 /* MaxValue */ :
            return 0;
        case 1 /* BooleanValue */ :
            return it(t38.booleanValue, e18.booleanValue);
        case 2 /* NumberValue */ :
            return function(t, e) {
                const n = Zt(t.integerValue || t.doubleValue), s = Zt(e.integerValue || e.doubleValue);
                return n < s ? -1 : n > s ? 1 : n === s ? 0 : // one or both are NaN.
                isNaN(n) ? isNaN(s) ? 0 : -1 : 1;
            }(t38, e18);
        case 3 /* TimestampValue */ :
            return we(t38.timestampValue, e18.timestampValue);
        case 4 /* ServerTimestampValue */ :
            return we(se(t38), se(e18));
        case 5 /* StringValue */ :
            return it(t38.stringValue, e18.stringValue);
        case 6 /* BlobValue */ :
            return function(t, e) {
                const n = te(t), s = te(e);
                return n.compareTo(s);
            }(t38.bytesValue, e18.bytesValue);
        case 7 /* RefValue */ :
            return function(t, e) {
                const n = t.split("/"), s = e.split("/");
                for(let t39 = 0; t39 < n.length && t39 < s.length; t39++){
                    const e = it(n[t39], s[t39]);
                    if (0 !== e) return e;
                }
                return it(n.length, s.length);
            }(t38.referenceValue, e18.referenceValue);
        case 8 /* GeoPointValue */ :
            return function(t, e) {
                const n = it(Zt(t.latitude), Zt(e.latitude));
                if (0 !== n) return n;
                return it(Zt(t.longitude), Zt(e.longitude));
            }(t38.geoPointValue, e18.geoPointValue);
        case 9 /* ArrayValue */ :
            return function(t, e) {
                const n = t.values || [], s = e.values || [];
                for(let t40 = 0; t40 < n.length && t40 < s.length; ++t40){
                    const e = _e(n[t40], s[t40]);
                    if (e) return e;
                }
                return it(n.length, s.length);
            }(t38.arrayValue, e18.arrayValue);
        case 10 /* ObjectValue */ :
            return function(t, e) {
                if (t === ae.mapValue && e === ae.mapValue) return 0;
                if (t === ae.mapValue) return 1;
                if (e === ae.mapValue) return -1;
                const n = t.fields || {}, s = Object.keys(n), i = e.fields || {}, r = Object.keys(i);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                s.sort(), r.sort();
                for(let t41 = 0; t41 < s.length && t41 < r.length; ++t41){
                    const e = it(s[t41], r[t41]);
                    if (0 !== e) return e;
                    const o = _e(n[s[t41]], i[r[t41]]);
                    if (0 !== o) return o;
                }
                return it(s.length, r.length);
            }(t38.mapValue, e18.mapValue);
        default:
            throw L();
    }
}
function we(t, e) {
    if ("string" == typeof t && "string" == typeof e && t.length === e.length) return it(t, e);
    const n = Xt(t), s = Xt(e), i = it(n.seconds, s.seconds);
    return 0 !== i ? i : it(n.nanos, s.nanos);
}
function me(t) {
    return ge(t);
}
function ge(t42) {
    var e19, n10;
    return "nullValue" in t42 ? "null" : "booleanValue" in t42 ? "" + t42.booleanValue : "integerValue" in t42 ? "" + t42.integerValue : "doubleValue" in t42 ? "" + t42.doubleValue : "timestampValue" in t42 ? function(t) {
        const e = Xt(t);
        return `time(${e.seconds},${e.nanos})`;
    }(t42.timestampValue) : "stringValue" in t42 ? t42.stringValue : "bytesValue" in t42 ? te(t42.bytesValue).toBase64() : "referenceValue" in t42 ? (n10 = t42.referenceValue, dt.fromName(n10).toString()) : "geoPointValue" in t42 ? `geo(${(e19 = t42.geoPointValue).latitude},${e19.longitude})` : "arrayValue" in t42 ? function(t) {
        let e = "[", n = !0;
        for (const s of t.values || [])n ? n = !1 : e += ",", e += ge(s);
        return e + "]";
    }(t42.arrayValue) : "mapValue" in t42 ? function(t) {
        // Iteration order in JavaScript is not guaranteed. To ensure that we generate
        // matching canonical IDs for identical maps, we need to sort the keys.
        const e = Object.keys(t.fields || {}).sort();
        let n = "{", s = !0;
        for (const i of e)s ? s = !1 : n += ",", n += `${i}:${ge(t.fields[i])}`;
        return n + "}";
    }(t42.mapValue) : L();
}
function ye(t, e) {
    return {
        referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`
    };
}
/** Returns true if `value` is an IntegerValue . */ function pe(t) {
    return !!t && "integerValue" in t;
}
/** Returns true if `value` is a DoubleValue. */ /** Returns true if `value` is an ArrayValue. */ function Ie(t) {
    return !!t && "arrayValue" in t;
}
/** Returns true if `value` is a NullValue. */ function Te(t) {
    return !!t && "nullValue" in t;
}
/** Returns true if `value` is NaN. */ function Ee(t) {
    return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
}
/** Returns true if `value` is a MapValue. */ function Ae(t) {
    return !!t && "mapValue" in t;
}
/** Creates a deep copy of `source`. */ function Re(t43) {
    if (t43.geoPointValue) return {
        geoPointValue: Object.assign({}, t43.geoPointValue)
    };
    if (t43.timestampValue && "object" == typeof t43.timestampValue) return {
        timestampValue: Object.assign({}, t43.timestampValue)
    };
    if (t43.mapValue) {
        const e = {
            mapValue: {
                fields: {}
            }
        };
        return Lt(t43.mapValue.fields, (t, n)=>e.mapValue.fields[t] = Re(n)), e;
    }
    if (t43.arrayValue) {
        const e = {
            arrayValue: {
                values: []
            }
        };
        for(let n = 0; n < (t43.arrayValue.values || []).length; ++n)e.arrayValue.values[n] = Re(t43.arrayValue.values[n]);
        return e;
    }
    return Object.assign({}, t43);
}
/** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */ function be(t) {
    return "__max__" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;
}
/** Returns the lowest value for the given value type (inclusive). */ function Pe(t) {
    return "nullValue" in t ? he : "booleanValue" in t ? {
        booleanValue: !1
    } : "integerValue" in t || "doubleValue" in t ? {
        doubleValue: NaN
    } : "timestampValue" in t ? {
        timestampValue: {
            seconds: Number.MIN_SAFE_INTEGER
        }
    } : "stringValue" in t ? {
        stringValue: ""
    } : "bytesValue" in t ? {
        bytesValue: ""
    } : "referenceValue" in t ? ye(re.empty(), dt.empty()) : "geoPointValue" in t ? {
        geoPointValue: {
            latitude: -90,
            longitude: -180
        }
    } : "arrayValue" in t ? {
        arrayValue: {}
    } : "mapValue" in t ? {
        mapValue: {}
    } : L();
}
/** Returns the largest value for the given value type (exclusive). */ function ve(t) {
    return "nullValue" in t ? {
        booleanValue: !1
    } : "booleanValue" in t ? {
        doubleValue: NaN
    } : "integerValue" in t || "doubleValue" in t ? {
        timestampValue: {
            seconds: Number.MIN_SAFE_INTEGER
        }
    } : "timestampValue" in t ? {
        stringValue: ""
    } : "stringValue" in t ? {
        bytesValue: ""
    } : "bytesValue" in t ? ye(re.empty(), dt.empty()) : "referenceValue" in t ? {
        geoPointValue: {
            latitude: -90,
            longitude: -180
        }
    } : "geoPointValue" in t ? {
        arrayValue: {}
    } : "arrayValue" in t ? {
        mapValue: {}
    } : "mapValue" in t ? ae : L();
}
function Ve(t, e) {
    const n = _e(t.value, e.value);
    return 0 !== n ? n : t.inclusive && !e.inclusive ? -1 : !t.inclusive && e.inclusive ? 1 : 0;
}
function Se(t, e) {
    const n = _e(t.value, e.value);
    return 0 !== n ? n : t.inclusive && !e.inclusive ? 1 : !t.inclusive && e.inclusive ? -1 : 0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An ObjectValue represents a MapValue in the Firestore Proto and offers the
 * ability to add and remove fields (via the ObjectValueBuilder).
 */ class De {
    constructor(t){
        this.value = t;
    }
    static empty() {
        return new De({
            mapValue: {}
        });
    }
    /**
     * Returns the value at the given path or null.
     *
     * @param path - the path to search
     * @returns The value at the path or null if the path is not set.
     */ field(t) {
        if (t.isEmpty()) return this.value;
        {
            let e = this.value;
            for(let n = 0; n < t.length - 1; ++n)if (e = (e.mapValue.fields || {})[t.get(n)], !Ae(e)) return null;
            return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;
        }
    }
    /**
     * Sets the field to the provided value.
     *
     * @param path - The field path to set.
     * @param value - The value to set.
     */ set(t, e) {
        this.getFieldsMap(t.popLast())[t.lastSegment()] = Re(e);
    }
    /**
     * Sets the provided fields to the provided values.
     *
     * @param data - A map of fields to values (or null for deletes).
     */ setAll(t44) {
        let e = ft.emptyPath(), n = {}, s = [];
        t44.forEach((t, i)=>{
            if (!e.isImmediateParentOf(i)) {
                // Insert the accumulated changes at this parent location
                const t = this.getFieldsMap(e);
                this.applyChanges(t, n, s), n = {}, s = [], e = i.popLast();
            }
            t ? n[i.lastSegment()] = Re(t) : s.push(i.lastSegment());
        });
        const i2 = this.getFieldsMap(e);
        this.applyChanges(i2, n, s);
    }
    /**
     * Removes the field at the specified path. If there is no field at the
     * specified path, nothing is changed.
     *
     * @param path - The field path to remove.
     */ delete(t) {
        const e = this.field(t.popLast());
        Ae(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];
    }
    isEqual(t) {
        return fe(this.value, t.value);
    }
    /**
     * Returns the map that contains the leaf element of `path`. If the parent
     * entry does not yet exist, or if it is not a map, a new map will be created.
     */ getFieldsMap(t) {
        let e = this.value;
        e.mapValue.fields || (e.mapValue = {
            fields: {}
        });
        for(let n = 0; n < t.length; ++n){
            let s = e.mapValue.fields[t.get(n)];
            Ae(s) && s.mapValue.fields || (s = {
                mapValue: {
                    fields: {}
                }
            }, e.mapValue.fields[t.get(n)] = s), e = s;
        }
        return e.mapValue.fields;
    }
    /**
     * Modifies `fieldsMap` by adding, replacing or deleting the specified
     * entries.
     */ applyChanges(t, e21, n11) {
        Lt(e21, (e, n)=>t[e] = n);
        for (const e20 of n11)delete t[e20];
    }
    clone() {
        return new De(Re(this.value));
    }
}
/**
 * Returns a FieldMask built from all fields in a MapValue.
 */ function Ce(t45) {
    const e = [];
    return Lt(t45.fields, (t, n)=>{
        const s = new ft([
            t
        ]);
        if (Ae(n)) {
            const t = Ce(n.mapValue).fields;
            if (0 === t.length) // Preserve the empty map by adding it to the FieldMask.
            e.push(s);
            else // For nested and non-empty ObjectValues, add the FieldPath of the
            // leaf nodes.
            for (const n12 of t)e.push(s.child(n12));
        } else // For nested and non-empty ObjectValues, add the FieldPath of the leaf
        // nodes.
        e.push(s);
    }), new zt(e);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a document in Firestore with a key, version, data and whether it
 * has local mutations applied to it.
 *
 * Documents can transition between states via `convertToFoundDocument()`,
 * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does
 * not transition to one of these states even after all mutations have been
 * applied, `isValidDocument()` returns false and the document should be removed
 * from all views.
 */ class xe {
    constructor(t, e, n, s, i, r){
        this.key = t, this.documentType = e, this.version = n, this.readTime = s, this.data = i, this.documentState = r;
    }
    /**
     * Creates a document with no known version or data, but which can serve as
     * base document for mutations.
     */ static newInvalidDocument(t) {
        return new xe(t, 0 /* INVALID */ , ct.min(), ct.min(), De.empty(), 0 /* SYNCED */ );
    }
    /**
     * Creates a new document that is known to exist with the given data at the
     * given version.
     */ static newFoundDocument(t, e, n) {
        return new xe(t, 1 /* FOUND_DOCUMENT */ , e, ct.min(), n, 0 /* SYNCED */ );
    }
    /** Creates a new document that is known to not exist at the given version. */ static newNoDocument(t, e) {
        return new xe(t, 2 /* NO_DOCUMENT */ , e, ct.min(), De.empty(), 0 /* SYNCED */ );
    }
    /**
     * Creates a new document that is known to exist at the given version but
     * whose data is not known (e.g. a document that was updated without a known
     * base document).
     */ static newUnknownDocument(t, e) {
        return new xe(t, 3 /* UNKNOWN_DOCUMENT */ , e, ct.min(), De.empty(), 2 /* HAS_COMMITTED_MUTATIONS */ );
    }
    /**
     * Changes the document type to indicate that it exists and that its version
     * and data are known.
     */ convertToFoundDocument(t, e) {
        return this.version = t, this.documentType = 1 /* FOUND_DOCUMENT */ , this.data = e, this.documentState = 0 /* SYNCED */ , this;
    }
    /**
     * Changes the document type to indicate that it doesn't exist at the given
     * version.
     */ convertToNoDocument(t) {
        return this.version = t, this.documentType = 2 /* NO_DOCUMENT */ , this.data = De.empty(), this.documentState = 0 /* SYNCED */ , this;
    }
    /**
     * Changes the document type to indicate that it exists at a given version but
     * that its data is not known (e.g. a document that was updated without a known
     * base document).
     */ convertToUnknownDocument(t) {
        return this.version = t, this.documentType = 3 /* UNKNOWN_DOCUMENT */ , this.data = De.empty(), this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
    }
    setHasCommittedMutations() {
        return this.documentState = 2 /* HAS_COMMITTED_MUTATIONS */ , this;
    }
    setHasLocalMutations() {
        return this.documentState = 1 /* HAS_LOCAL_MUTATIONS */ , this.version = ct.min(), this;
    }
    setReadTime(t) {
        return this.readTime = t, this;
    }
    get hasLocalMutations() {
        return 1 /* HAS_LOCAL_MUTATIONS */  === this.documentState;
    }
    get hasCommittedMutations() {
        return 2 /* HAS_COMMITTED_MUTATIONS */  === this.documentState;
    }
    get hasPendingWrites() {
        return this.hasLocalMutations || this.hasCommittedMutations;
    }
    isValidDocument() {
        return 0 /* INVALID */  !== this.documentType;
    }
    isFoundDocument() {
        return 1 /* FOUND_DOCUMENT */  === this.documentType;
    }
    isNoDocument() {
        return 2 /* NO_DOCUMENT */  === this.documentType;
    }
    isUnknownDocument() {
        return 3 /* UNKNOWN_DOCUMENT */  === this.documentType;
    }
    isEqual(t) {
        return t instanceof xe && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);
    }
    mutableCopy() {
        return new xe(this.key, this.documentType, this.version, this.readTime, this.data.clone(), this.documentState);
    }
    toString() {
        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;
    }
}
/**
 * Compares the value for field `field` in the provided documents. Throws if
 * the field does not exist in both documents.
 */ /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Visible for testing
class Ne {
    constructor(t, e = null, n = [], s = [], i = null, r = null, o = null){
        this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = s, this.limit = i, this.startAt = r, this.endAt = o, this.ut = null;
    }
}
/**
 * Initializes a Target with a path and optional additional query constraints.
 * Path must currently be empty if this is a collection group query.
 *
 * NOTE: you should always construct `Target` from `Query.toTarget` instead of
 * using this factory method, because `Query` provides an implicit `orderBy`
 * property.
 */ function ke(t, e = null, n = [], s = [], i = null, r = null, o = null) {
    return new Ne(t, e, n, s, i, r, o);
}
function Oe(t47) {
    const e22 = K(t47);
    if (null === e22.ut) {
        let t46 = e22.path.canonicalString();
        null !== e22.collectionGroup && (t46 += "|cg:" + e22.collectionGroup), t46 += "|f:", t46 += e22.filters.map((t)=>{
            var e;
            return (e = t).field.canonicalString() + e.op.toString() + me(e.value);
        }).join(","), t46 += "|ob:", t46 += e22.orderBy.map((t48)=>(function(t) {
                // TODO(b/29183165): Make this collision robust.
                return t.field.canonicalString() + t.dir;
            })(t48)).join(","), oe(e22.limit) || (t46 += "|l:", t46 += e22.limit), e22.startAt && (t46 += "|lb:", t46 += e22.startAt.inclusive ? "b:" : "a:", t46 += e22.startAt.position.map((t)=>me(t)).join(",")), e22.endAt && (t46 += "|ub:", t46 += e22.endAt.inclusive ? "a:" : "b:", t46 += e22.endAt.position.map((t)=>me(t)).join(",")), e22.ut = t46;
    }
    return e22.ut;
}
function Me(t49) {
    let e23 = t49.path.canonicalString();
    return null !== t49.collectionGroup && (e23 += " collectionGroup=" + t49.collectionGroup), t49.filters.length > 0 && (e23 += `, filters: [${t49.filters.map((t)=>{
        var e;
        return `${(e = t).field.canonicalString()} ${e.op} ${me(e.value)}`;
    /** Filter that matches on key fields (i.e. '__name__'). */ }).join(", ")}]`), oe(t49.limit) || (e23 += ", limit: " + t49.limit), t49.orderBy.length > 0 && (e23 += `, orderBy: [${t49.orderBy.map((t50)=>(function(t) {
            return `${t.field.canonicalString()} (${t.dir})`;
        })(t50)).join(", ")}]`), t49.startAt && (e23 += ", startAt: ", e23 += t49.startAt.inclusive ? "b:" : "a:", e23 += t49.startAt.position.map((t)=>me(t)).join(",")), t49.endAt && (e23 += ", endAt: ", e23 += t49.endAt.inclusive ? "a:" : "b:", e23 += t49.endAt.position.map((t)=>me(t)).join(",")), `Target(${e23})`;
}
function Fe(t, e) {
    if (t.limit !== e.limit) return !1;
    if (t.orderBy.length !== e.orderBy.length) return !1;
    for(let n = 0; n < t.orderBy.length; n++)if (!Ze(t.orderBy[n], e.orderBy[n])) return !1;
    if (t.filters.length !== e.filters.length) return !1;
    for(let i = 0; i < t.filters.length; i++)if (n13 = t.filters[i], s = e.filters[i], n13.op !== s.op || !n13.field.isEqual(s.field) || !fe(n13.value, s.value)) return !1;
    var n13, s;
    return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!en(t.startAt, e.startAt) && en(t.endAt, e.endAt);
}
function $e(t) {
    return dt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
}
/** Returns the field filters that target the given field path. */ function Be(t51, e) {
    return t51.filters.filter((t)=>t instanceof qe && t.field.isEqual(e));
}
/**
 * Returns the values that are used in ARRAY_CONTAINS or ARRAY_CONTAINS_ANY
 * filters. Returns `null` if there are no such filters.
 */ /**
 * Returns the value to use as the lower bound for ascending index segment at
 * the provided `fieldPath` (or the upper bound for an descending segment).
 */ function Le(t, e, n) {
    let s = he, i = !0;
    // Process all filters to find a value for the current field segment
    for (const n14 of Be(t, e)){
        let t = he, e = !0;
        switch(n14.op){
            case "<" /* LESS_THAN */ :
            case "<=" /* LESS_THAN_OR_EQUAL */ :
                t = Pe(n14.value);
                break;
            case "==" /* EQUAL */ :
            case "in" /* IN */ :
            case ">=" /* GREATER_THAN_OR_EQUAL */ :
                t = n14.value;
                break;
            case ">" /* GREATER_THAN */ :
                t = n14.value, e = !1;
                break;
            case "!=" /* NOT_EQUAL */ :
            case "not-in" /* NOT_IN */ :
                t = he;
        }
        Ve({
            value: s,
            inclusive: i
        }, {
            value: t,
            inclusive: e
        }) < 0 && (s = t, i = e);
    }
    // If there is an additional bound, compare the values against the existing
    // range to see if we can narrow the scope.
    if (null !== n) {
        for(let r = 0; r < t.orderBy.length; ++r)if (t.orderBy[r].field.isEqual(e)) {
            const t = n.position[r];
            Ve({
                value: s,
                inclusive: i
            }, {
                value: t,
                inclusive: n.inclusive
            }) < 0 && (s = t, i = n.inclusive);
            break;
        }
    }
    return {
        value: s,
        inclusive: i
    };
}
/**
 * Returns the value to use as the upper bound for ascending index segment at
 * the provided `fieldPath` (or the lower bound for a descending segment).
 */ function Ue(t, e, n) {
    let s = ae, i = !0;
    // Process all filters to find a value for the current field segment
    for (const n15 of Be(t, e)){
        let t = ae, e = !0;
        switch(n15.op){
            case ">=" /* GREATER_THAN_OR_EQUAL */ :
            case ">" /* GREATER_THAN */ :
                t = ve(n15.value), e = !1;
                break;
            case "==" /* EQUAL */ :
            case "in" /* IN */ :
            case "<=" /* LESS_THAN_OR_EQUAL */ :
                t = n15.value;
                break;
            case "<" /* LESS_THAN */ :
                t = n15.value, e = !1;
                break;
            case "!=" /* NOT_EQUAL */ :
            case "not-in" /* NOT_IN */ :
                t = ae;
        }
        Se({
            value: s,
            inclusive: i
        }, {
            value: t,
            inclusive: e
        }) > 0 && (s = t, i = e);
    }
    // If there is an additional bound, compare the values against the existing
    // range to see if we can narrow the scope.
    if (null !== n) {
        for(let r = 0; r < t.orderBy.length; ++r)if (t.orderBy[r].field.isEqual(e)) {
            const t = n.position[r];
            Se({
                value: s,
                inclusive: i
            }, {
                value: t,
                inclusive: n.inclusive
            }) > 0 && (s = t, i = n.inclusive);
            break;
        }
    }
    return {
        value: s,
        inclusive: i
    };
}
/** Returns the number of segments of a perfect index for this target. */ class qe extends class {
} {
    constructor(t, e, n){
        super(), this.field = t, this.op = e, this.value = n;
    }
    /**
     * Creates a filter based on the provided arguments.
     */ static create(t, e, n) {
        return t.isKeyField() ? "in" /* IN */  === e || "not-in" /* NOT_IN */  === e ? this.ct(t, e, n) : new Ke(t, e, n) : "array-contains" /* ARRAY_CONTAINS */  === e ? new We(t, n) : "in" /* IN */  === e ? new ze(t, n) : "not-in" /* NOT_IN */  === e ? new He(t, n) : "array-contains-any" /* ARRAY_CONTAINS_ANY */  === e ? new Je(t, n) : new qe(t, e, n);
    }
    static ct(t, e, n) {
        return "in" /* IN */  === e ? new Ge(t, n) : new Qe(t, n);
    }
    matches(t) {
        const e = t.data.field(this.field);
        // Types do not have to match in NOT_EQUAL filters.
        return "!=" /* NOT_EQUAL */  === this.op ? null !== e && this.at(_e(e, this.value)) : null !== e && le(this.value) === le(e) && this.at(_e(e, this.value));
    // Only compare types with matching backend order (such as double and int).
    }
    at(t) {
        switch(this.op){
            case "<" /* LESS_THAN */ :
                return t < 0;
            case "<=" /* LESS_THAN_OR_EQUAL */ :
                return t <= 0;
            case "==" /* EQUAL */ :
                return 0 === t;
            case "!=" /* NOT_EQUAL */ :
                return 0 !== t;
            case ">" /* GREATER_THAN */ :
                return t > 0;
            case ">=" /* GREATER_THAN_OR_EQUAL */ :
                return t >= 0;
            default:
                return L();
        }
    }
    ht() {
        return [
            "<" /* LESS_THAN */ ,
            "<=" /* LESS_THAN_OR_EQUAL */ ,
            ">" /* GREATER_THAN */ ,
            ">=" /* GREATER_THAN_OR_EQUAL */ ,
            "!=" /* NOT_EQUAL */ ,
            "not-in" /* NOT_IN */ 
        ].indexOf(this.op) >= 0;
    }
}
class Ke extends qe {
    constructor(t, e, n){
        super(t, e, n), this.key = dt.fromName(n.referenceValue);
    }
    matches(t) {
        const e = dt.comparator(t.key, this.key);
        return this.at(e);
    }
}
/** Filter that matches on key fields within an array. */ class Ge extends qe {
    constructor(t, e){
        super(t, "in" /* IN */ , e), this.keys = je("in" /* IN */ , e);
    }
    matches(t) {
        return this.keys.some((e)=>e.isEqual(t.key));
    }
}
/** Filter that matches on key fields not present within an array. */ class Qe extends qe {
    constructor(t, e){
        super(t, "not-in" /* NOT_IN */ , e), this.keys = je("not-in" /* NOT_IN */ , e);
    }
    matches(t) {
        return !this.keys.some((e)=>e.isEqual(t.key));
    }
}
function je(t52, e) {
    var n;
    return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t)=>dt.fromName(t.referenceValue));
}
/** A Filter that implements the array-contains operator. */ class We extends qe {
    constructor(t, e){
        super(t, "array-contains" /* ARRAY_CONTAINS */ , e);
    }
    matches(t) {
        const e = t.data.field(this.field);
        return Ie(e) && de(e.arrayValue, this.value);
    }
}
/** A Filter that implements the IN operator. */ class ze extends qe {
    constructor(t, e){
        super(t, "in" /* IN */ , e);
    }
    matches(t) {
        const e = t.data.field(this.field);
        return null !== e && de(this.value.arrayValue, e);
    }
}
/** A Filter that implements the not-in operator. */ class He extends qe {
    constructor(t, e){
        super(t, "not-in" /* NOT_IN */ , e);
    }
    matches(t) {
        if (de(this.value.arrayValue, {
            nullValue: "NULL_VALUE"
        })) return !1;
        const e = t.data.field(this.field);
        return null !== e && !de(this.value.arrayValue, e);
    }
}
/** A Filter that implements the array-contains-any operator. */ class Je extends qe {
    constructor(t, e){
        super(t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , e);
    }
    matches(t53) {
        const e = t53.data.field(this.field);
        return !(!Ie(e) || !e.arrayValue.values) && e.arrayValue.values.some((t)=>de(this.value.arrayValue, t));
    }
}
/**
 * Represents a bound of a query.
 *
 * The bound is specified with the given components representing a position and
 * whether it's just before or just after the position (relative to whatever the
 * query order is).
 *
 * The position represents a logical index position for a query. It's a prefix
 * of values for the (potentially implicit) order by clauses of a query.
 *
 * Bound provides a function to determine whether a document comes before or
 * after a bound. This is influenced by whether the position is just before or
 * just after the provided values.
 */ class Ye {
    constructor(t, e){
        this.position = t, this.inclusive = e;
    }
}
/**
 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
 */ class Xe {
    constructor(t, e = "asc" /* ASCENDING */ ){
        this.field = t, this.dir = e;
    }
}
function Ze(t, e) {
    return t.dir === e.dir && t.field.isEqual(e.field);
}
function tn(t, e, n) {
    let s = 0;
    for(let i = 0; i < t.position.length; i++){
        const r = e[i], o = t.position[i];
        if (r.field.isKeyField()) s = dt.comparator(dt.fromName(o.referenceValue), n.key);
        else s = _e(o, n.data.field(r.field));
        if ("desc" /* DESCENDING */  === r.dir && (s *= -1), 0 !== s) break;
    }
    return s;
}
/**
 * Returns true if a document sorts after a bound using the provided sort
 * order.
 */ function en(t, e) {
    if (null === t) return null === e;
    if (null === e) return !1;
    if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;
    for(let n = 0; n < t.position.length; n++){
        if (!fe(t.position[n], e.position[n])) return !1;
    }
    return !0;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Query encapsulates all the query attributes we support in the SDK. It can
 * be run against the LocalStore, as well as be converted to a `Target` to
 * query the RemoteStore results.
 *
 * Visible for testing.
 */ class nn {
    /**
     * Initializes a Query with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     */ constructor(t, e = null, n = [], s = [], i = null, r = "F" /* First */ , o = null, u = null){
        this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = s, this.limit = i, this.limitType = r, this.startAt = o, this.endAt = u, this.lt = null, // The corresponding `Target` of this `Query` instance.
        this.ft = null, this.startAt, this.endAt;
    }
}
/** Creates a new Query instance with the options provided. */ function sn(t, e, n, s, i, r, o, u) {
    return new nn(t, e, n, s, i, r, o, u);
}
/** Creates a new Query for a query that matches all documents at `path` */ function rn(t) {
    return new nn(t);
}
/**
 * Helper to convert a collection group query into a collection query at a
 * specific path. This is used when executing collection group queries, since
 * we have to split the query into a set of collection queries at multiple
 * paths.
 */ /**
 * Returns true if this query does not specify any query constraints that
 * could remove results.
 */ function on(t) {
    return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.explicitOrderBy.length || 1 === t.explicitOrderBy.length && t.explicitOrderBy[0].field.isKeyField());
}
function un(t) {
    return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;
}
function cn(t) {
    for (const e of t.filters)if (e.ht()) return e.field;
    return null;
}
/**
 * Checks if any of the provided Operators are included in the query and
 * returns the first one that is, or null if none are.
 */ /**
 * Returns whether the query matches a collection group rather than a specific
 * collection.
 */ function an(t) {
    return null !== t.collectionGroup;
}
/**
 * Returns the implicit order by constraint that is used to execute the Query,
 * which can be different from the order by constraints the user provided (e.g.
 * the SDK and backend always orders by `__name__`).
 */ function hn(t) {
    const e = K(t);
    if (null === e.lt) {
        e.lt = [];
        const t = cn(e), n = un(e);
        if (null !== t && null === n) // In order to implicitly add key ordering, we must also add the
        // inequality filter field for it to be a valid query.
        // Note that the default inequality field and key ordering is ascending.
        t.isKeyField() || e.lt.push(new Xe(t)), e.lt.push(new Xe(ft.keyField(), "asc" /* ASCENDING */ ));
        else {
            let t = !1;
            for (const n of e.explicitOrderBy)e.lt.push(n), n.field.isKeyField() && (t = !0);
            if (!t) {
                // The order of the implicit key ordering always matches the last
                // explicit order by
                const t = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc" /* ASCENDING */ ;
                e.lt.push(new Xe(ft.keyField(), t));
            }
        }
    }
    return e.lt;
}
/**
 * Converts this `Query` instance to it's corresponding `Target` representation.
 */ function ln(t) {
    const e = K(t);
    if (!e.ft) {
        if ("F" /* First */  === e.limitType) e.ft = ke(e.path, e.collectionGroup, hn(e), e.filters, e.limit, e.startAt, e.endAt);
        else {
            // Flip the orderBy directions since we want the last results
            const t = [];
            for (const n of hn(e)){
                const e = "desc" /* DESCENDING */  === n.dir ? "asc" /* ASCENDING */  : "desc" /* DESCENDING */ ;
                t.push(new Xe(n.field, e));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
            const n16 = e.endAt ? new Ye(e.endAt.position, e.endAt.inclusive) : null, s = e.startAt ? new Ye(e.startAt.position, e.startAt.inclusive) : null;
            // Now return as a LimitType.First query.
            e.ft = ke(e.path, e.collectionGroup, t, e.filters, e.limit, n16, s);
        }
    }
    return e.ft;
}
function fn(t, e, n) {
    return new nn(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
}
function dn(t, e) {
    return Fe(ln(t), ln(e)) && t.limitType === e.limitType;
}
// TODO(b/29183165): This is used to get a unique string from a query to, for
// example, use as a dictionary key, but the implementation is subject to
// collisions. Make it collision-free.
function _n(t) {
    return `${Oe(ln(t))}|lt:${t.limitType}`;
}
function wn(t) {
    return `Query(target=${Me(ln(t))}; limitType=${t.limitType})`;
}
/** Returns whether `doc` matches the constraints of `query`. */ function mn(t54, e24) {
    return e24.isFoundDocument() && function(t, e) {
        const n = e.key.path;
        return null !== t.collectionGroup ? e.key.hasCollectionId(t.collectionGroup) && t.path.isPrefixOf(n) : dt.isDocumentKey(t.path) ? t.path.isEqual(n) : t.path.isImmediateParentOf(n);
    }(t54, e24) && function(t, e) {
        for (const n of t.explicitOrderBy)// order by key always matches
        if (!n.field.isKeyField() && null === e.data.field(n.field)) return !1;
        return !0;
    }(t54, e24) && function(t, e) {
        for (const n of t.filters)if (!n.matches(e)) return !1;
        return !0;
    }(t54, e24) && function(t55, e25) {
        if (t55.startAt && !/**
 * Returns true if a document sorts before a bound using the provided sort
 * order.
 */ function(t, e, n) {
            const s = tn(t, e, n);
            return t.inclusive ? s <= 0 : s < 0;
        }(t55.startAt, hn(t55), e25)) return !1;
        if (t55.endAt && !function(t, e, n) {
            const s = tn(t, e, n);
            return t.inclusive ? s >= 0 : s > 0;
        }(t55.endAt, hn(t55), e25)) return !1;
        return !0;
    }(t54, e24);
}
function gn(t) {
    return t.collectionGroup || (t.path.length % 2 == 1 ? t.path.lastSegment() : t.path.get(t.path.length - 2));
}
/**
 * Returns a new comparator function that can be used to compare two documents
 * based on the Query's ordering constraint.
 */ function yn(t56) {
    return (e, n)=>{
        let s = !1;
        for (const i of hn(t56)){
            const t = pn(i, e, n);
            if (0 !== t) return t;
            s = s || i.field.isKeyField();
        }
        return 0;
    };
}
function pn(t57, e26, n17) {
    const s4 = t57.field.isKeyField() ? dt.comparator(e26.key, n17.key) : function(t, e, n) {
        const s = e.data.field(t), i = n.data.field(t);
        return null !== s && null !== i ? _e(s, i) : L();
    }(t57.field, e26, n17);
    switch(t57.dir){
        case "asc" /* ASCENDING */ :
            return s4;
        case "desc" /* DESCENDING */ :
            return -1 * s4;
        default:
            return L();
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns an DoubleValue for `value` that is encoded based the serializer's
 * `useProto3Json` setting.
 */ function In(t, e) {
    if (t.dt) {
        if (isNaN(e)) return {
            doubleValue: "NaN"
        };
        if (e === 1 / 0) return {
            doubleValue: "Infinity"
        };
        if (e === -1 / 0) return {
            doubleValue: "-Infinity"
        };
    }
    return {
        doubleValue: ue(e) ? "-0" : e
    };
}
/**
 * Returns an IntegerValue for `value`.
 */ function Tn(t) {
    return {
        integerValue: "" + t
    };
}
/**
 * Returns a value for a number that's appropriate to put into a proto.
 * The return value is an IntegerValue if it can safely represent the value,
 * otherwise a DoubleValue is returned.
 */ function En(t, e) {
    return ce(e) ? Tn(e) : In(t, e);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Used to represent a field transform on a mutation. */ class An {
    constructor(){
        // Make sure that the structural type of `TransformOperation` is unique.
        // See https://github.com/microsoft/TypeScript/issues/5451
        this._ = void 0;
    }
}
/**
 * Computes the local transform result against the provided `previousValue`,
 * optionally using the provided localWriteTime.
 */ function Rn(t58, e27, n18) {
    return t58 instanceof vn ? function(t, e) {
        const n = {
            fields: {
                __type__: {
                    stringValue: "server_timestamp"
                },
                __local_write_time__: {
                    timestampValue: {
                        seconds: t.seconds,
                        nanos: t.nanoseconds
                    }
                }
            }
        };
        return e && (n.fields.__previous_value__ = e), {
            mapValue: n
        };
    }(n18, e27) : t58 instanceof Vn ? Sn(t58, e27) : t58 instanceof Dn ? Cn(t58, e27) : function(t, e) {
        // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
        // precision and resolves overflows by reducing precision, we do not
        // manually cap overflows at 2^63.
        const n = Pn(t, e), s = Nn(n) + Nn(t._t);
        return pe(n) && pe(t._t) ? Tn(s) : In(t.wt, s);
    }(t58, e27);
}
/**
 * Computes a final transform result after the transform has been acknowledged
 * by the server, potentially using the server-provided transformResult.
 */ function bn(t, e, n) {
    // The server just sends null as the transform result for array operations,
    // so we have to calculate a result the same as we do for local
    // applications.
    return t instanceof Vn ? Sn(t, e) : t instanceof Dn ? Cn(t, e) : n;
}
/**
 * If this transform operation is not idempotent, returns the base value to
 * persist for this transform. If a base value is returned, the transform
 * operation is always applied to this base value, even if document has
 * already been updated.
 *
 * Base values provide consistent behavior for non-idempotent transforms and
 * allow us to return the same latency-compensated value even if the backend
 * has already applied the transform operation. The base value is null for
 * idempotent transforms, as they can be re-played even if the backend has
 * already applied them.
 *
 * @returns a base value to store along with the mutation, or null for
 * idempotent transforms.
 */ function Pn(t59, e) {
    var n;
    return t59 instanceof xn ? pe(n = e) || function(t) {
        return !!t && "doubleValue" in t;
    }(n) ? e : {
        integerValue: 0
    } : null;
}
/** Transforms a value into a server-generated timestamp. */ class vn extends An {
}
/** Transforms an array value via a union operation. */ class Vn extends An {
    constructor(t){
        super(), this.elements = t;
    }
}
function Sn(t60, e) {
    const n = kn(e);
    for (const e28 of t60.elements)n.some((t)=>fe(t, e28)) || n.push(e28);
    return {
        arrayValue: {
            values: n
        }
    };
}
/** Transforms an array value via a remove operation. */ class Dn extends An {
    constructor(t){
        super(), this.elements = t;
    }
}
function Cn(t61, e) {
    let n = kn(e);
    for (const e29 of t61.elements)n = n.filter((t)=>!fe(t, e29));
    return {
        arrayValue: {
            values: n
        }
    };
}
/**
 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
 * transforms. Converts all field values to integers or doubles, but unlike the
 * backend does not cap integer values at 2^63. Instead, JavaScript number
 * arithmetic is used and precision loss can occur for values greater than 2^53.
 */ class xn extends An {
    constructor(t, e){
        super(), this.wt = t, this._t = e;
    }
}
function Nn(t) {
    return Zt(t.integerValue || t.doubleValue);
}
function kn(t) {
    return Ie(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** A field path and the TransformOperation to perform upon it. */ class On {
    constructor(t, e){
        this.field = t, this.transform = e;
    }
}
function Mn(t62, e30) {
    return t62.field.isEqual(e30.field) && function(t, e) {
        return t instanceof Vn && e instanceof Vn || t instanceof Dn && e instanceof Dn ? rt(t.elements, e.elements, fe) : t instanceof xn && e instanceof xn ? fe(t._t, e._t) : t instanceof vn && e instanceof vn;
    }(t62.transform, e30.transform);
}
/** The result of successfully applying a mutation to the backend. */ class Fn {
    constructor(/**
     * The version at which the mutation was committed:
     *
     * - For most operations, this is the updateTime in the WriteResult.
     * - For deletes, the commitTime of the WriteResponse (because deletes are
     *   not stored and have no updateTime).
     *
     * Note that these versions can be different: No-op writes will not change
     * the updateTime even though the commitTime advances.
     */ t, /**
     * The resulting fields returned from the backend after a mutation
     * containing field transforms has been committed. Contains one FieldValue
     * for each FieldTransform that was in the mutation.
     *
     * Will be empty if the mutation did not contain any field transforms.
     */ e){
        this.version = t, this.transformResults = e;
    }
}
/**
 * Encodes a precondition for a mutation. This follows the model that the
 * backend accepts with the special case of an explicit "empty" precondition
 * (meaning no precondition).
 */ class $n {
    constructor(t, e){
        this.updateTime = t, this.exists = e;
    }
    /** Creates a new empty Precondition. */ static none() {
        return new $n;
    }
    /** Creates a new Precondition with an exists flag. */ static exists(t) {
        return new $n(void 0, t);
    }
    /** Creates a new Precondition based on a version a document exists at. */ static updateTime(t) {
        return new $n(t);
    }
    /** Returns whether this Precondition is empty. */ get isNone() {
        return void 0 === this.updateTime && void 0 === this.exists;
    }
    isEqual(t) {
        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
    }
}
/** Returns true if the preconditions is valid for the given document. */ function Bn(t, e) {
    return void 0 !== t.updateTime ? e.isFoundDocument() && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e.isFoundDocument();
}
/**
 * A mutation describes a self-contained change to a document. Mutations can
 * create, replace, delete, and update subsets of documents.
 *
 * Mutations not only act on the value of the document but also its version.
 *
 * For local mutations (mutations that haven't been committed yet), we preserve
 * the existing version for Set and Patch mutations. For Delete mutations, we
 * reset the version to 0.
 *
 * Here's the expected transition table.
 *
 * MUTATION           APPLIED TO            RESULTS IN
 *
 * SetMutation        Document(v3)          Document(v3)
 * SetMutation        NoDocument(v3)        Document(v0)
 * SetMutation        InvalidDocument(v0)   Document(v0)
 * PatchMutation      Document(v3)          Document(v3)
 * PatchMutation      NoDocument(v3)        NoDocument(v3)
 * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)
 * DeleteMutation     Document(v3)          NoDocument(v0)
 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
 * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)
 *
 * For acknowledged mutations, we use the updateTime of the WriteResponse as
 * the resulting version for Set and Patch mutations. As deletes have no
 * explicit update time, we use the commitTime of the WriteResponse for
 * Delete mutations.
 *
 * If a mutation is acknowledged by the backend but fails the precondition check
 * locally, we transition to an `UnknownDocument` and rely on Watch to send us
 * the updated version.
 *
 * Field transforms are used only with Patch and Set Mutations. We use the
 * `updateTransforms` message to store transforms, rather than the `transforms`s
 * messages.
 *
 * ## Subclassing Notes
 *
 * Every type of mutation needs to implement its own applyToRemoteDocument() and
 * applyToLocalView() to implement the actual behavior of applying the mutation
 * to some source document (see `setMutationApplyToRemoteDocument()` for an
 * example).
 */ class Ln {
}
/**
 * A utility method to calculate a `Mutation` representing the overlay from the
 * final state of the document, and a `FieldMask` representing the fields that
 * are mutated by the local mutations.
 */ function Un(t, e) {
    if (!t.hasLocalMutations || e && 0 === e.fields.length) return null;
    // mask is null when sets or deletes are applied to the current document.
    if (null === e) return t.isNoDocument() ? new Yn(t.key, $n.none()) : new jn(t.key, t.data, $n.none());
    {
        const n = t.data, s = De.empty();
        let i = new Qt(ft.comparator);
        for (let t63 of e.fields)if (!i.has(t63)) {
            let e = n.field(t63);
            // If we are deleting a nested field, we take the immediate parent as
            // the mask used to construct the resulting mutation.
            // Justification: Nested fields can create parent fields implicitly. If
            // only a leaf entry is deleted in later mutations, the parent field
            // should still remain, but we may have lost this information.
            // Consider mutation (foo.bar 1), then mutation (foo.bar delete()).
            // This leaves the final result (foo, {}). Despite the fact that `doc`
            // has the correct result, `foo` is not in `mask`, and the resulting
            // mutation would miss `foo`.
            null === e && t63.length > 1 && (t63 = t63.popLast(), e = n.field(t63)), null === e ? s.delete(t63) : s.set(t63, e), i = i.add(t63);
        }
        return new Wn(t.key, s, new zt(i.toArray()), $n.none());
    }
}
/**
 * Applies this mutation to the given document for the purposes of computing a
 * new remote document. If the input document doesn't match the expected state
 * (e.g. it is invalid or outdated), the document type may transition to
 * unknown.
 *
 * @param mutation - The mutation to apply.
 * @param document - The document to mutate. The input document can be an
 *     invalid document if the client has no knowledge of the pre-mutation state
 *     of the document.
 * @param mutationResult - The result of applying the mutation from the backend.
 */ function qn(t64, e31, n19) {
    t64 instanceof jn ? function(t, e, n) {
        // Unlike setMutationApplyToLocalView, if we're applying a mutation to a
        // remote document the server has accepted the mutation so the precondition
        // must have held.
        const s = t.value.clone(), i = Hn(t.fieldTransforms, e, n.transformResults);
        s.setAll(i), e.convertToFoundDocument(n.version, s).setHasCommittedMutations();
    }(t64, e31, n19) : t64 instanceof Wn ? function(t, e, n) {
        if (!Bn(t.precondition, e)) // Since the mutation was not rejected, we know that the precondition
        // matched on the backend. We therefore must not have the expected version
        // of the document in our cache and convert to an UnknownDocument with a
        // known updateTime.
        return void e.convertToUnknownDocument(n.version);
        const s = Hn(t.fieldTransforms, e, n.transformResults), i = e.data;
        i.setAll(zn(t)), i.setAll(s), e.convertToFoundDocument(n.version, i).setHasCommittedMutations();
    }(t64, e31, n19) : function(t, e, n) {
        // Unlike applyToLocalView, if we're applying a mutation to a remote
        // document the server has accepted the mutation so the precondition must
        // have held.
        e.convertToNoDocument(n.version).setHasCommittedMutations();
    }(0, e31, n19);
}
/**
 * Applies this mutation to the given document for the purposes of computing
 * the new local view of a document. If the input document doesn't match the
 * expected state, the document is not modified.
 *
 * @param mutation - The mutation to apply.
 * @param document - The document to mutate. The input document can be an
 *     invalid document if the client has no knowledge of the pre-mutation state
 *     of the document.
 * @param previousMask - The fields that have been updated before applying this mutation.
 * @param localWriteTime - A timestamp indicating the local write time of the
 *     batch this mutation is a part of.
 * @returns A `FieldMask` representing the fields that are changed by applying this mutation.
 */ function Kn(t65, e32, n20, s5) {
    return t65 instanceof jn ? function(t, e, n, s) {
        if (!Bn(t.precondition, e)) // The mutation failed to apply (e.g. a document ID created with add()
        // caused a name collision).
        return n;
        const i = t.value.clone(), r = Jn(t.fieldTransforms, s, e);
        return i.setAll(r), e.convertToFoundDocument(e.version, i).setHasLocalMutations(), null;
    // SetMutation overwrites all fields.
    }(t65, e32, n20, s5) : t65 instanceof Wn ? function(t66, e, n, s) {
        if (!Bn(t66.precondition, e)) return n;
        const i = Jn(t66.fieldTransforms, s, e), r = e.data;
        if (r.setAll(zn(t66)), r.setAll(i), e.convertToFoundDocument(e.version, r).setHasLocalMutations(), null === n) return null;
        return n.unionWith(t66.fieldMask.fields).unionWith(t66.fieldTransforms.map((t)=>t.field));
    }(t65, e32, n20, s5) : function(t, e, n) {
        if (Bn(t.precondition, e)) return e.convertToNoDocument(e.version).setHasLocalMutations(), null;
        return n;
    }(t65, e32, n20);
}
/**
 * If this mutation is not idempotent, returns the base value to persist with
 * this mutation. If a base value is returned, the mutation is always applied
 * to this base value, even if document has already been updated.
 *
 * The base value is a sparse object that consists of only the document
 * fields for which this mutation contains a non-idempotent transformation
 * (e.g. a numeric increment). The provided value guarantees consistent
 * behavior for non-idempotent transforms and allow us to return the same
 * latency-compensated value even if the backend has already applied the
 * mutation. The base value is null for idempotent mutations, as they can be
 * re-played even if the backend has already applied them.
 *
 * @returns a base value to store along with the mutation, or null for
 * idempotent mutations.
 */ function Gn(t, e) {
    let n = null;
    for (const s of t.fieldTransforms){
        const t = e.data.field(s.field), i = Pn(s.transform, t || null);
        null != i && (null === n && (n = De.empty()), n.set(s.field, i));
    }
    return n || null;
}
function Qn(t67, e33) {
    return t67.type === e33.type && !!t67.key.isEqual(e33.key) && !!t67.precondition.isEqual(e33.precondition) && !!function(t68, e34) {
        return void 0 === t68 && void 0 === e34 || !(!t68 || !e34) && rt(t68, e34, (t, e)=>Mn(t, e));
    }(t67.fieldTransforms, e33.fieldTransforms) && (0 /* Set */  === t67.type ? t67.value.isEqual(e33.value) : 1 /* Patch */  !== t67.type || t67.data.isEqual(e33.data) && t67.fieldMask.isEqual(e33.fieldMask));
}
/**
 * A mutation that creates or replaces the document at the given key with the
 * object value contents.
 */ class jn extends Ln {
    constructor(t, e, n, s = []){
        super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = s, this.type = 0 /* Set */ ;
    }
    getFieldMask() {
        return null;
    }
}
class Wn extends Ln {
    constructor(t, e, n, s, i = []){
        super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = s, this.fieldTransforms = i, this.type = 1 /* Patch */ ;
    }
    getFieldMask() {
        return this.fieldMask;
    }
}
function zn(t) {
    const e = new Map;
    return t.fieldMask.fields.forEach((n)=>{
        if (!n.isEmpty()) {
            const s = t.data.field(n);
            e.set(n, s);
        }
    }), e;
}
/**
 * Creates a list of "transform results" (a transform result is a field value
 * representing the result of applying a transform) for use after a mutation
 * containing transforms has been acknowledged by the server.
 *
 * @param fieldTransforms - The field transforms to apply the result to.
 * @param mutableDocument - The current state of the document after applying all
 * previous mutations.
 * @param serverTransformResults - The transform results received by the server.
 * @returns The transform results list.
 */ function Hn(t, e, n) {
    const s = new Map;
    U(t.length === n.length);
    for(let i = 0; i < n.length; i++){
        const r = t[i], o = r.transform, u = e.data.field(r.field);
        s.set(r.field, bn(o, u, n[i]));
    }
    return s;
}
/**
 * Creates a list of "transform results" (a transform result is a field value
 * representing the result of applying a transform) for use when applying a
 * transform locally.
 *
 * @param fieldTransforms - The field transforms to apply the result to.
 * @param localWriteTime - The local time of the mutation (used to
 *     generate ServerTimestampValues).
 * @param mutableDocument - The document to apply transforms on.
 * @returns The transform results list.
 */ function Jn(t, e, n) {
    const s = new Map;
    for (const i of t){
        const t = i.transform, r = n.data.field(i.field);
        s.set(i.field, Rn(t, r, e));
    }
    return s;
}
/** A mutation that deletes the document at the given key. */ class Yn extends Ln {
    constructor(t, e){
        super(), this.key = t, this.precondition = e, this.type = 2 /* Delete */ , this.fieldTransforms = [];
    }
    getFieldMask() {
        return null;
    }
}
class Xn extends Ln {
    constructor(t, e){
        super(), this.key = t, this.precondition = e, this.type = 3 /* Verify */ , this.fieldTransforms = [];
    }
    getFieldMask() {
        return null;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Zn {
    // TODO(b/33078163): just use simplest form of existence filter for now
    constructor(t){
        this.count = t;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Error Codes describing the different ways GRPC can fail. These are copied
 * directly from GRPC's sources here:
 *
 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
 *
 * Important! The names of these identifiers matter because the string forms
 * are used for reverse lookups from the webchannel stream. Do NOT change the
 * names of these identifiers or change this into a const enum.
 */ var ts, es;
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a non-write operation.
 *
 * See isPermanentWriteError for classifying write errors.
 */ function ns(t) {
    switch(t){
        default:
            return L();
        case G.CANCELLED:
        case G.UNKNOWN:
        case G.DEADLINE_EXCEEDED:
        case G.RESOURCE_EXHAUSTED:
        case G.INTERNAL:
        case G.UNAVAILABLE:
        // Unauthenticated means something went wrong with our token and we need
        // to retry with new credentials which will happen automatically.
        case G.UNAUTHENTICATED:
            return !1;
        case G.INVALID_ARGUMENT:
        case G.NOT_FOUND:
        case G.ALREADY_EXISTS:
        case G.PERMISSION_DENIED:
        case G.FAILED_PRECONDITION:
        // Aborted might be retried in some scenarios, but that is dependant on
        // the context and should handled individually by the calling code.
        // See https://cloud.google.com/apis/design/errors.
        case G.ABORTED:
        case G.OUT_OF_RANGE:
        case G.UNIMPLEMENTED:
        case G.DATA_LOSS:
            return !0;
    }
}
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a write operation.
 *
 * Write operations must be handled specially because as of b/119437764, ABORTED
 * errors on the write stream should be retried too (even though ABORTED errors
 * are not generally retryable).
 *
 * Note that during the initial handshake on the write stream an ABORTED error
 * signals that we should discard our stream token (i.e. it is permanent). This
 * means a handshake error should be classified with isPermanentError, above.
 */ /**
 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
 * are not the same as HTTP status codes.
 *
 * @returns The Code equivalent to the given GRPC status code. Fails if there
 *     is no match.
 */ function ss(t) {
    if (void 0 === t) // This shouldn't normally happen, but in certain error cases (like trying
    // to send invalid proto messages) we may get an error with no GRPC code.
    return F("GRPC error has no .code"), G.UNKNOWN;
    switch(t){
        case ts.OK:
            return G.OK;
        case ts.CANCELLED:
            return G.CANCELLED;
        case ts.UNKNOWN:
            return G.UNKNOWN;
        case ts.DEADLINE_EXCEEDED:
            return G.DEADLINE_EXCEEDED;
        case ts.RESOURCE_EXHAUSTED:
            return G.RESOURCE_EXHAUSTED;
        case ts.INTERNAL:
            return G.INTERNAL;
        case ts.UNAVAILABLE:
            return G.UNAVAILABLE;
        case ts.UNAUTHENTICATED:
            return G.UNAUTHENTICATED;
        case ts.INVALID_ARGUMENT:
            return G.INVALID_ARGUMENT;
        case ts.NOT_FOUND:
            return G.NOT_FOUND;
        case ts.ALREADY_EXISTS:
            return G.ALREADY_EXISTS;
        case ts.PERMISSION_DENIED:
            return G.PERMISSION_DENIED;
        case ts.FAILED_PRECONDITION:
            return G.FAILED_PRECONDITION;
        case ts.ABORTED:
            return G.ABORTED;
        case ts.OUT_OF_RANGE:
            return G.OUT_OF_RANGE;
        case ts.UNIMPLEMENTED:
            return G.UNIMPLEMENTED;
        case ts.DATA_LOSS:
            return G.DATA_LOSS;
        default:
            return L();
    }
}
/**
 * Converts an HTTP response's error status to the equivalent error code.
 *
 * @param status - An HTTP error response status ("FAILED_PRECONDITION",
 * "UNKNOWN", etc.)
 * @returns The equivalent Code. Non-matching responses are mapped to
 *     Code.UNKNOWN.
 */ (es = ts || (ts = {}))[es.OK = 0] = "OK", es[es.CANCELLED = 1] = "CANCELLED", es[es.UNKNOWN = 2] = "UNKNOWN", es[es.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", es[es.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", es[es.NOT_FOUND = 5] = "NOT_FOUND", es[es.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", es[es.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", es[es.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", es[es.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", es[es.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", es[es.ABORTED = 10] = "ABORTED", es[es.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", es[es.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", es[es.INTERNAL = 13] = "INTERNAL", es[es.UNAVAILABLE = 14] = "UNAVAILABLE", es[es.DATA_LOSS = 15] = "DATA_LOSS";
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A map implementation that uses objects as keys. Objects must have an
 * associated equals function and must be immutable. Entries in the map are
 * stored together with the key being produced from the mapKeyFn. This map
 * automatically handles collisions of keys.
 */ class is {
    constructor(t, e){
        this.mapKeyFn = t, this.equalsFn = e, /**
         * The inner map for a key/value pair. Due to the possibility of collisions we
         * keep a list of entries that we do a linear search through to find an actual
         * match. Note that collisions should be rare, so we still expect near
         * constant time lookups in practice.
         */ this.inner = {}, /** The number of entries stored in the map */ this.innerSize = 0;
    }
    /** Get a value for this key, or undefined if it does not exist. */ get(t) {
        const e = this.mapKeyFn(t), n = this.inner[e];
        if (void 0 !== n) {
            for (const [e, s] of n)if (this.equalsFn(e, t)) return s;
        }
    }
    has(t) {
        return void 0 !== this.get(t);
    }
    /** Put this key and value in the map. */ set(t, e) {
        const n = this.mapKeyFn(t), s = this.inner[n];
        if (void 0 === s) return this.inner[n] = [
            [
                t,
                e
            ]
        ], void this.innerSize++;
        for(let n21 = 0; n21 < s.length; n21++)if (this.equalsFn(s[n21][0], t)) // This is updating an existing entry and does not increase `innerSize`.
        return void (s[n21] = [
            t,
            e
        ]);
        s.push([
            t,
            e
        ]), this.innerSize++;
    }
    /**
     * Remove this key from the map. Returns a boolean if anything was deleted.
     */ delete(t) {
        const e = this.mapKeyFn(t), n = this.inner[e];
        if (void 0 === n) return !1;
        for(let s = 0; s < n.length; s++)if (this.equalsFn(n[s][0], t)) return 1 === n.length ? delete this.inner[e] : n.splice(s, 1), this.innerSize--, !0;
        return !1;
    }
    forEach(t) {
        Lt(this.inner, (e, n)=>{
            for (const [e35, s] of n)t(e35, s);
        });
    }
    isEmpty() {
        return Ut(this.inner);
    }
    size() {
        return this.innerSize;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const rs = new qt(dt.comparator);
function os() {
    return rs;
}
const us = new qt(dt.comparator);
function cs(...t) {
    let e = us;
    for (const n of t)e = e.insert(n.key, n);
    return e;
}
function as(t69) {
    let e = us;
    return t69.forEach((t, n)=>e = e.insert(t, n.overlayedDocument)), e;
}
function hs() {
    return fs();
}
function ls() {
    return fs();
}
function fs() {
    return new is((t)=>t.toString(), (t, e)=>t.isEqual(e));
}
const ds = new qt(dt.comparator);
const _s = new Qt(dt.comparator);
function ws(...t) {
    let e = _s;
    for (const n of t)e = e.add(n);
    return e;
}
const ms = new Qt(it);
function gs() {
    return ms;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An event from the RemoteStore. It is split into targetChanges (changes to the
 * state or the set of documents in our watched targets) and documentUpdates
 * (changes to the actual documents).
 */ class ys {
    constructor(/**
     * The snapshot version this event brings us up to, or MIN if not set.
     */ t, /**
     * A map from target to changes to the target. See TargetChange.
     */ e, /**
     * A set of targets that is known to be inconsistent. Listens for these
     * targets should be re-established without resume tokens.
     */ n, /**
     * A set of which documents have changed or been deleted, along with the
     * doc's new values (if not deleted).
     */ s, /**
     * A set of which document updates are due only to limbo resolution targets.
     */ i){
        this.snapshotVersion = t, this.targetChanges = e, this.targetMismatches = n, this.documentUpdates = s, this.resolvedLimboDocuments = i;
    }
    /**
     * HACK: Views require RemoteEvents in order to determine whether the view is
     * CURRENT, but secondary tabs don't receive remote events. So this method is
     * used to create a synthesized RemoteEvent that can be used to apply a
     * CURRENT status change to a View, for queries executed in a different tab.
     */ // PORTING NOTE: Multi-tab only
    static createSynthesizedRemoteEventForCurrentChange(t, e) {
        const n = new Map;
        return n.set(t, ps.createSynthesizedTargetChangeForCurrentChange(t, e)), new ys(ct.min(), n, gs(), os(), ws());
    }
}
/**
 * A TargetChange specifies the set of changes for a specific target as part of
 * a RemoteEvent. These changes track which documents are added, modified or
 * removed, as well as the target's resume token and whether the target is
 * marked CURRENT.
 * The actual changes *to* documents are not part of the TargetChange since
 * documents may be part of multiple targets.
 */ class ps {
    constructor(/**
     * An opaque, server-assigned token that allows watching a query to be resumed
     * after disconnecting without retransmitting all the data that matches the
     * query. The resume token essentially identifies a point in time from which
     * the server should resume sending results.
     */ t, /**
     * The "current" (synced) status of this target. Note that "current"
     * has special meaning in the RPC protocol that implies that a target is
     * both up-to-date and consistent with the rest of the watch stream.
     */ e, /**
     * The set of documents that were newly assigned to this target as part of
     * this remote event.
     */ n, /**
     * The set of documents that were already assigned to this target but received
     * an update during this remote event.
     */ s, /**
     * The set of documents that were removed from this target as part of this
     * remote event.
     */ i){
        this.resumeToken = t, this.current = e, this.addedDocuments = n, this.modifiedDocuments = s, this.removedDocuments = i;
    }
    /**
     * This method is used to create a synthesized TargetChanges that can be used to
     * apply a CURRENT status change to a View (for queries executed in a different
     * tab) or for new queries (to raise snapshots with correct CURRENT status).
     */ static createSynthesizedTargetChangeForCurrentChange(t, e) {
        return new ps(Jt.EMPTY_BYTE_STRING, e, ws(), ws(), ws());
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a changed document and a list of target ids to which this change
 * applies.
 *
 * If document has been deleted NoDocument will be provided.
 */ class Is {
    constructor(/** The new document applies to all of these targets. */ t, /** The new document is removed from all of these targets. */ e, /** The key of the document for this change. */ n, /**
     * The new document or NoDocument if it was deleted. Is null if the
     * document went out of view without the server sending a new document.
     */ s){
        this.gt = t, this.removedTargetIds = e, this.key = n, this.yt = s;
    }
}
class Ts {
    constructor(t, e){
        this.targetId = t, this.It = e;
    }
}
class Es {
    constructor(/** What kind of change occurred to the watch target. */ t, /** The target IDs that were added/removed/set. */ e, /**
     * An opaque, server-assigned token that allows watching a target to be
     * resumed after disconnecting without retransmitting all the data that
     * matches the target. The resume token essentially identifies a point in
     * time from which the server should resume sending results.
     */ n = Jt.EMPTY_BYTE_STRING, s = null){
        this.state = t, this.targetIds = e, this.resumeToken = n, this.cause = s;
    }
}
/** Tracks the internal state of a Watch target. */ class As {
    constructor(){
        /**
         * The number of pending responses (adds or removes) that we are waiting on.
         * We only consider targets active that have no pending responses.
         */ this.Tt = 0, /**
         * Keeps track of the document changes since the last raised snapshot.
         *
         * These changes are continuously updated as we receive document updates and
         * always reflect the current set of changes against the last issued snapshot.
         */ this.Et = Ps(), /** See public getters for explanations of these fields. */ this.At = Jt.EMPTY_BYTE_STRING, this.Rt = !1, /**
         * Whether this target state should be included in the next snapshot. We
         * initialize to true so that newly-added targets are included in the next
         * RemoteEvent.
         */ this.bt = !0;
    }
    /**
     * Whether this target has been marked 'current'.
     *
     * 'Current' has special meaning in the RPC protocol: It implies that the
     * Watch backend has sent us all changes up to the point at which the target
     * was added and that the target is consistent with the rest of the watch
     * stream.
     */ get current() {
        return this.Rt;
    }
    /** The last resume token sent to us for this target. */ get resumeToken() {
        return this.At;
    }
    /** Whether this target has pending target adds or target removes. */ get Pt() {
        return 0 !== this.Tt;
    }
    /** Whether we have modified any state that should trigger a snapshot. */ get vt() {
        return this.bt;
    }
    /**
     * Applies the resume token to the TargetChange, but only when it has a new
     * value. Empty resumeTokens are discarded.
     */ Vt(t) {
        t.approximateByteSize() > 0 && (this.bt = !0, this.At = t);
    }
    /**
     * Creates a target change from the current set of changes.
     *
     * To reset the document changes after raising this snapshot, call
     * `clearPendingChanges()`.
     */ St() {
        let t = ws(), e = ws(), n = ws();
        return this.Et.forEach((s, i)=>{
            switch(i){
                case 0 /* Added */ :
                    t = t.add(s);
                    break;
                case 2 /* Modified */ :
                    e = e.add(s);
                    break;
                case 1 /* Removed */ :
                    n = n.add(s);
                    break;
                default:
                    L();
            }
        }), new ps(this.At, this.Rt, t, e, n);
    }
    /**
     * Resets the document changes and sets `hasPendingChanges` to false.
     */ Dt() {
        this.bt = !1, this.Et = Ps();
    }
    Ct(t, e) {
        this.bt = !0, this.Et = this.Et.insert(t, e);
    }
    xt(t) {
        this.bt = !0, this.Et = this.Et.remove(t);
    }
    Nt() {
        this.Tt += 1;
    }
    kt() {
        this.Tt -= 1;
    }
    Ot() {
        this.bt = !0, this.Rt = !0;
    }
}
/**
 * A helper class to accumulate watch changes into a RemoteEvent.
 */ class Rs {
    constructor(t){
        this.Mt = t, /** The internal state of all tracked targets. */ this.Ft = new Map, /** Keeps track of the documents to update since the last raised snapshot. */ this.$t = os(), /** A mapping of document keys to their set of target IDs. */ this.Bt = bs(), /**
         * A list of targets with existence filter mismatches. These targets are
         * known to be inconsistent and their listens needs to be re-established by
         * RemoteStore.
         */ this.Lt = new Qt(it);
    }
    /**
     * Processes and adds the DocumentWatchChange to the current set of changes.
     */ Ut(t) {
        for (const e of t.gt)t.yt && t.yt.isFoundDocument() ? this.qt(e, t.yt) : this.Kt(e, t.key, t.yt);
        for (const e36 of t.removedTargetIds)this.Kt(e36, t.key, t.yt);
    }
    /** Processes and adds the WatchTargetChange to the current set of changes. */ Gt(t) {
        this.forEachTarget(t, (e)=>{
            const n = this.Qt(e);
            switch(t.state){
                case 0 /* NoChange */ :
                    this.jt(e) && n.Vt(t.resumeToken);
                    break;
                case 1 /* Added */ :
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    n.kt(), n.Pt || // We have a freshly added target, so we need to reset any state
                    // that we had previously. This can happen e.g. when remove and add
                    // back a target for existence filter mismatches.
                    n.Dt(), n.Vt(t.resumeToken);
                    break;
                case 2 /* Removed */ :
                    // We need to keep track of removed targets to we can post-filter and
                    // remove any target changes.
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    n.kt(), n.Pt || this.removeTarget(e);
                    break;
                case 3 /* Current */ :
                    this.jt(e) && (n.Ot(), n.Vt(t.resumeToken));
                    break;
                case 4 /* Reset */ :
                    this.jt(e) && // Reset the target and synthesizes removes for all existing
                    // documents. The backend will re-add any documents that still
                    // match the target before it sends the next global snapshot.
                    (this.Wt(e), n.Vt(t.resumeToken));
                    break;
                default:
                    L();
            }
        });
    }
    /**
     * Iterates over all targetIds that the watch change applies to: either the
     * targetIds explicitly listed in the change or the targetIds of all currently
     * active targets.
     */ forEachTarget(t, e) {
        t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.Ft.forEach((t, n)=>{
            this.jt(n) && e(n);
        });
    }
    /**
     * Handles existence filters and synthesizes deletes for filter mismatches.
     * Targets that are invalidated by filter mismatches are added to
     * `pendingTargetResets`.
     */ zt(t) {
        const e = t.targetId, n = t.It.count, s = this.Ht(e);
        if (s) {
            const t = s.target;
            if ($e(t)) {
                if (0 === n) {
                    // The existence filter told us the document does not exist. We deduce
                    // that this document does not exist and apply a deleted document to
                    // our updates. Without applying this deleted document there might be
                    // another query that will raise this document as part of a snapshot
                    // until it is resolved, essentially exposing inconsistency between
                    // queries.
                    const n = new dt(t.path);
                    this.Kt(e, n, xe.newNoDocument(n, ct.min()));
                } else U(1 === n);
            } else this.Jt(e) !== n && // Existence filter mismatch: We reset the mapping and raise a new
            // snapshot with `isFromCache:true`.
            (this.Wt(e), this.Lt = this.Lt.add(e));
        }
    }
    /**
     * Converts the currently accumulated state into a remote event at the
     * provided snapshot version. Resets the accumulated changes before returning.
     */ Yt(t70) {
        const e37 = new Map;
        this.Ft.forEach((n, s)=>{
            const i = this.Ht(s);
            if (i) {
                if (n.current && $e(i.target)) {
                    // Document queries for document that don't exist can produce an empty
                    // result set. To update our local cache, we synthesize a document
                    // delete if we have not previously received the document. This
                    // resolves the limbo state of the document, removing it from
                    // limboDocumentRefs.
                    // TODO(dimond): Ideally we would have an explicit lookup target
                    // instead resulting in an explicit delete message and we could
                    // remove this special logic.
                    const e = new dt(i.target.path);
                    null !== this.$t.get(e) || this.Xt(s, e) || this.Kt(s, e, xe.newNoDocument(e, t70));
                }
                n.vt && (e37.set(s, n.St()), n.Dt());
            }
        });
        let n22 = ws();
        // We extract the set of limbo-only document updates as the GC logic
        // special-cases documents that do not appear in the target cache.
        // TODO(gsoltis): Expand on this comment once GC is available in the JS
        // client.
        this.Bt.forEach((t71, e38)=>{
            let s = !0;
            e38.forEachWhile((t)=>{
                const e = this.Ht(t);
                return !e || 2 /* LimboResolution */  === e.purpose || (s = !1, !1);
            }), s && (n22 = n22.add(t71));
        }), this.$t.forEach((e, n)=>n.setReadTime(t70));
        const s6 = new ys(t70, e37, this.Lt, this.$t, n22);
        return this.$t = os(), this.Bt = bs(), this.Lt = new Qt(it), s6;
    }
    /**
     * Adds the provided document to the internal list of document updates and
     * its document key to the given target's mapping.
     */ // Visible for testing.
    qt(t, e) {
        if (!this.jt(t)) return;
        const n = this.Xt(t, e.key) ? 2 /* Modified */  : 0 /* Added */ ;
        this.Qt(t).Ct(e.key, n), this.$t = this.$t.insert(e.key, e), this.Bt = this.Bt.insert(e.key, this.Zt(e.key).add(t));
    }
    /**
     * Removes the provided document from the target mapping. If the
     * document no longer matches the target, but the document's state is still
     * known (e.g. we know that the document was deleted or we received the change
     * that caused the filter mismatch), the new document can be provided
     * to update the remote document cache.
     */ // Visible for testing.
    Kt(t, e, n) {
        if (!this.jt(t)) return;
        const s = this.Qt(t);
        this.Xt(t, e) ? s.Ct(e, 1 /* Removed */ ) : // The document may have entered and left the target before we raised a
        // snapshot, so we can just ignore the change.
        s.xt(e), this.Bt = this.Bt.insert(e, this.Zt(e).delete(t)), n && (this.$t = this.$t.insert(e, n));
    }
    removeTarget(t) {
        this.Ft.delete(t);
    }
    /**
     * Returns the current count of documents in the target. This includes both
     * the number of documents that the LocalStore considers to be part of the
     * target as well as any accumulated changes.
     */ Jt(t) {
        const e = this.Qt(t).St();
        return this.Mt.getRemoteKeysForTarget(t).size + e.addedDocuments.size - e.removedDocuments.size;
    }
    /**
     * Increment the number of acks needed from watch before we can consider the
     * server to be 'in-sync' with the client's active targets.
     */ Nt(t) {
        this.Qt(t).Nt();
    }
    Qt(t) {
        let e = this.Ft.get(t);
        return e || (e = new As, this.Ft.set(t, e)), e;
    }
    Zt(t) {
        let e = this.Bt.get(t);
        return e || (e = new Qt(it), this.Bt = this.Bt.insert(t, e)), e;
    }
    /**
     * Verifies that the user is still interested in this target (by calling
     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
     * from watch.
     */ jt(t) {
        const e = null !== this.Ht(t);
        return e || M("WatchChangeAggregator", "Detected inactive target", t), e;
    }
    /**
     * Returns the TargetData for an active target (i.e. a target that the user
     * is still interested in that has no outstanding target change requests).
     */ Ht(t) {
        const e = this.Ft.get(t);
        return e && e.Pt ? null : this.Mt.te(t);
    }
    /**
     * Resets the state of a Watch target to its initial state (e.g. sets
     * 'current' to false, clears the resume token and removes its target mapping
     * from all documents).
     */ Wt(t) {
        this.Ft.set(t, new As);
        this.Mt.getRemoteKeysForTarget(t).forEach((e)=>{
            this.Kt(t, e, /*updatedDocument=*/ null);
        });
    }
    /**
     * Returns whether the LocalStore considers the document to be part of the
     * specified target.
     */ Xt(t, e) {
        return this.Mt.getRemoteKeysForTarget(t).has(e);
    }
}
function bs() {
    return new qt(dt.comparator);
}
function Ps() {
    return new qt(dt.comparator);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const vs = (()=>{
    const t = {
        asc: "ASCENDING",
        desc: "DESCENDING"
    };
    return t;
})(), Vs = (()=>{
    const t = {
        "<": "LESS_THAN",
        "<=": "LESS_THAN_OR_EQUAL",
        ">": "GREATER_THAN",
        ">=": "GREATER_THAN_OR_EQUAL",
        "==": "EQUAL",
        "!=": "NOT_EQUAL",
        "array-contains": "ARRAY_CONTAINS",
        in: "IN",
        "not-in": "NOT_IN",
        "array-contains-any": "ARRAY_CONTAINS_ANY"
    };
    return t;
})();
/**
 * This class generates JsonObject values for the Datastore API suitable for
 * sending to either GRPC stub methods or via the JSON/HTTP REST API.
 *
 * The serializer supports both Protobuf.js and Proto3 JSON formats. By
 * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
 * format.
 *
 * For a description of the Proto3 JSON format check
 * https://developers.google.com/protocol-buffers/docs/proto3#json
 *
 * TODO(klimt): We can remove the databaseId argument if we keep the full
 * resource name in documents.
 */ class Ss {
    constructor(t, e){
        this.databaseId = t, this.dt = e;
    }
}
/**
 * Returns a value for a Date that's appropriate to put into a proto.
 */ function Ds(t, e) {
    if (t.dt) return `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z`;
    return {
        seconds: "" + e.seconds,
        nanos: e.nanoseconds
    };
}
/**
 * Returns a value for bytes that's appropriate to put in a proto.
 *
 * Visible for testing.
 */ function Cs(t, e) {
    return t.dt ? e.toBase64() : e.toUint8Array();
}
/**
 * Returns a ByteString based on the proto string value.
 */ function xs(t, e) {
    return Ds(t, e.toTimestamp());
}
function Ns(t72) {
    return U(!!t72), ct.fromTimestamp(function(t) {
        const e = Xt(t);
        return new ut(e.seconds, e.nanos);
    }(t72));
}
function ks(t73, e) {
    return (function(t) {
        return new ht([
            "projects",
            t.projectId,
            "databases",
            t.database
        ]);
    })(t73).child("documents").child(e).canonicalString();
}
function Os(t) {
    const e = ht.fromString(t);
    return U(ui(e)), e;
}
function Ms(t, e) {
    return ks(t.databaseId, e.path);
}
function Fs(t, e) {
    const n = Os(e);
    if (n.get(1) !== t.databaseId.projectId) throw new Q(G.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.databaseId.projectId);
    if (n.get(3) !== t.databaseId.database) throw new Q(G.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.databaseId.database);
    return new dt(Us(n));
}
function $s(t, e) {
    return ks(t.databaseId, e);
}
function Bs(t) {
    const e = Os(t);
    // In v1beta1 queries for collections at the root did not have a trailing
    // "/documents". In v1 all resource paths contain "/documents". Preserve the
    // ability to read the v1beta1 form for compatibility with queries persisted
    // in the local target cache.
    return 4 === e.length ? ht.emptyPath() : Us(e);
}
function Ls(t) {
    return new ht([
        "projects",
        t.databaseId.projectId,
        "databases",
        t.databaseId.database
    ]).canonicalString();
}
function Us(t) {
    return U(t.length > 4 && "documents" === t.get(4)), t.popFirst(5);
}
/** Creates a Document proto from key and fields (but no create/update time) */ function qs(t, e, n) {
    return {
        name: Ms(t, e),
        fields: n.value.mapValue.fields
    };
}
function Ks(t, e, n) {
    const s = Fs(t, e.name), i = Ns(e.updateTime), r = new De({
        mapValue: {
            fields: e.fields
        }
    }), o = xe.newFoundDocument(s, i, r);
    return n && o.setHasCommittedMutations(), n ? o.setHasCommittedMutations() : o;
}
function Gs(t74, e39) {
    return "found" in e39 ? function(t, e) {
        U(!!e.found), e.found.name, e.found.updateTime;
        const n = Fs(t, e.found.name), s = Ns(e.found.updateTime), i = new De({
            mapValue: {
                fields: e.found.fields
            }
        });
        return xe.newFoundDocument(n, s, i);
    }(t74, e39) : "missing" in e39 ? function(t, e) {
        U(!!e.missing), U(!!e.readTime);
        const n = Fs(t, e.missing), s = Ns(e.readTime);
        return xe.newNoDocument(n, s);
    }(t74, e39) : L();
}
function Qs(t75, e40) {
    let n;
    if ("targetChange" in e40) {
        e40.targetChange;
        // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
        // if unset
        const s = function(t) {
            return "NO_CHANGE" === t ? 0 /* NoChange */  : "ADD" === t ? 1 /* Added */  : "REMOVE" === t ? 2 /* Removed */  : "CURRENT" === t ? 3 /* Current */  : "RESET" === t ? 4 /* Reset */  : L();
        }(e40.targetChange.targetChangeType || "NO_CHANGE"), i = e40.targetChange.targetIds || [], r = function(t, e) {
            return t.dt ? (U(void 0 === e || "string" == typeof e), Jt.fromBase64String(e || "")) : (U(void 0 === e || e instanceof Uint8Array), Jt.fromUint8Array(e || new Uint8Array));
        }(t75, e40.targetChange.resumeToken), o = e40.targetChange.cause, u = o && function(t) {
            const e = void 0 === t.code ? G.UNKNOWN : ss(t.code);
            return new Q(e, t.message || "");
        }(o);
        n = new Es(s, i, r, u || null);
    } else if ("documentChange" in e40) {
        e40.documentChange;
        const s = e40.documentChange;
        s.document, s.document.name, s.document.updateTime;
        const i = Fs(t75, s.document.name), r = Ns(s.document.updateTime), o = new De({
            mapValue: {
                fields: s.document.fields
            }
        }), u = xe.newFoundDocument(i, r, o), c = s.targetIds || [], a = s.removedTargetIds || [];
        n = new Is(c, a, u.key, u);
    } else if ("documentDelete" in e40) {
        e40.documentDelete;
        const s = e40.documentDelete;
        s.document;
        const i = Fs(t75, s.document), r = s.readTime ? Ns(s.readTime) : ct.min(), o = xe.newNoDocument(i, r), u = s.removedTargetIds || [];
        n = new Is([], u, o.key, o);
    } else if ("documentRemove" in e40) {
        e40.documentRemove;
        const s = e40.documentRemove;
        s.document;
        const i = Fs(t75, s.document), r = s.removedTargetIds || [];
        n = new Is([], r, i, null);
    } else {
        if (!("filter" in e40)) return L();
        {
            e40.filter;
            const t = e40.filter;
            t.targetId;
            const s = t.count || 0, i = new Zn(s), r = t.targetId;
            n = new Ts(r, i);
        }
    }
    return n;
}
function js(t76, e41) {
    let n23;
    if (e41 instanceof jn) n23 = {
        update: qs(t76, e41.key, e41.value)
    };
    else if (e41 instanceof Yn) n23 = {
        delete: Ms(t76, e41.key)
    };
    else if (e41 instanceof Wn) n23 = {
        update: qs(t76, e41.key, e41.data),
        updateMask: oi(e41.fieldMask)
    };
    else {
        if (!(e41 instanceof Xn)) return L();
        n23 = {
            verify: Ms(t76, e41.key)
        };
    }
    return e41.fieldTransforms.length > 0 && (n23.updateTransforms = e41.fieldTransforms.map((t)=>(function(t, e) {
            const n = e.transform;
            if (n instanceof vn) return {
                fieldPath: e.field.canonicalString(),
                setToServerValue: "REQUEST_TIME"
            };
            if (n instanceof Vn) return {
                fieldPath: e.field.canonicalString(),
                appendMissingElements: {
                    values: n.elements
                }
            };
            if (n instanceof Dn) return {
                fieldPath: e.field.canonicalString(),
                removeAllFromArray: {
                    values: n.elements
                }
            };
            if (n instanceof xn) return {
                fieldPath: e.field.canonicalString(),
                increment: n._t
            };
            throw L();
        })(0, t))), e41.precondition.isNone || (n23.currentDocument = function(t, e) {
        return void 0 !== e.updateTime ? {
            updateTime: xs(t, e.updateTime)
        } : void 0 !== e.exists ? {
            exists: e.exists
        } : L();
    }(t76, e41.precondition)), n23;
}
function Ws(t77, e42) {
    const n24 = e42.currentDocument ? function(t) {
        return void 0 !== t.updateTime ? $n.updateTime(Ns(t.updateTime)) : void 0 !== t.exists ? $n.exists(t.exists) : $n.none();
    }(e42.currentDocument) : $n.none(), s7 = e42.updateTransforms ? e42.updateTransforms.map((e43)=>(function(t, e) {
            let n = null;
            if ("setToServerValue" in e) U("REQUEST_TIME" === e.setToServerValue), n = new vn;
            else if ("appendMissingElements" in e) {
                const t = e.appendMissingElements.values || [];
                n = new Vn(t);
            } else if ("removeAllFromArray" in e) {
                const t = e.removeAllFromArray.values || [];
                n = new Dn(t);
            } else "increment" in e ? n = new xn(t, e.increment) : L();
            const s = ft.fromServerFormat(e.fieldPath);
            return new On(s, n);
        })(t77, e43)) : [];
    if (e42.update) {
        e42.update.name;
        const i = Fs(t77, e42.update.name), r = new De({
            mapValue: {
                fields: e42.update.fields
            }
        });
        if (e42.updateMask) {
            const t78 = function(t81) {
                const e = t81.fieldPaths || [];
                return new zt(e.map((t)=>ft.fromServerFormat(t)));
            }(e42.updateMask);
            return new Wn(i, r, t78, n24, s7);
        }
        return new jn(i, r, n24, s7);
    }
    if (e42.delete) {
        const s = Fs(t77, e42.delete);
        return new Yn(s, n24);
    }
    if (e42.verify) {
        const s = Fs(t77, e42.verify);
        return new Xn(s, n24);
    }
    return L();
}
function zs(t82, e44) {
    return t82 && t82.length > 0 ? (U(void 0 !== e44), t82.map((t83)=>(function(t, e) {
            // NOTE: Deletes don't have an updateTime.
            let n = t.updateTime ? Ns(t.updateTime) : Ns(e);
            return n.isEqual(ct.min()) && // The Firestore Emulator currently returns an update time of 0 for
            // deletes of non-existing documents (rather than null). This breaks the
            // test "get deleted doc while offline with source=cache" as NoDocuments
            // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
            // TODO(#2149): Remove this when Emulator is fixed
            (n = Ns(e)), new Fn(n, t.transformResults || []);
        })(t83, e44))) : [];
}
function Hs(t, e) {
    return {
        documents: [
            $s(t, e.path)
        ]
    };
}
function Js(t84, e45) {
    // Dissect the path into parent, collectionId, and optional key filter.
    const n = {
        structuredQuery: {}
    }, s = e45.path;
    null !== e45.collectionGroup ? (n.parent = $s(t84, s), n.structuredQuery.from = [
        {
            collectionId: e45.collectionGroup,
            allDescendants: !0
        }
    ]) : (n.parent = $s(t84, s.popLast()), n.structuredQuery.from = [
        {
            collectionId: s.lastSegment()
        }
    ]);
    const i = function(t85) {
        if (0 === t85.length) return;
        const e = t85.map((t86)=>// visible for testing
            (function(t) {
                if ("==" /* EQUAL */  === t.op) {
                    if (Ee(t.value)) return {
                        unaryFilter: {
                            field: ni(t.field),
                            op: "IS_NAN"
                        }
                    };
                    if (Te(t.value)) return {
                        unaryFilter: {
                            field: ni(t.field),
                            op: "IS_NULL"
                        }
                    };
                } else if ("!=" /* NOT_EQUAL */  === t.op) {
                    if (Ee(t.value)) return {
                        unaryFilter: {
                            field: ni(t.field),
                            op: "IS_NOT_NAN"
                        }
                    };
                    if (Te(t.value)) return {
                        unaryFilter: {
                            field: ni(t.field),
                            op: "IS_NOT_NULL"
                        }
                    };
                }
                return {
                    fieldFilter: {
                        field: ni(t.field),
                        op: ei(t.op),
                        value: t.value
                    }
                };
            })(t86));
        if (1 === e.length) return e[0];
        return {
            compositeFilter: {
                op: "AND",
                filters: e
            }
        };
    }(e45.filters);
    i && (n.structuredQuery.where = i);
    const r = function(t87) {
        if (0 === t87.length) return;
        return t87.map((t88)=>// visible for testing
            (function(t) {
                return {
                    field: ni(t.field),
                    direction: ti(t.dir)
                };
            })(t88));
    }(e45.orderBy);
    r && (n.structuredQuery.orderBy = r);
    const o = function(t, e) {
        return t.dt || oe(e) ? e : {
            value: e
        };
    }(t84, e45.limit);
    var u;
    return null !== o && (n.structuredQuery.limit = o), e45.startAt && (n.structuredQuery.startAt = {
        before: (u = e45.startAt).inclusive,
        values: u.position
    }), e45.endAt && (n.structuredQuery.endAt = function(t) {
        return {
            before: !t.inclusive,
            values: t.position
        };
    }(e45.endAt)), n;
}
function Ys(t89) {
    let e46 = Bs(t89.parent);
    const n25 = t89.structuredQuery, s = n25.from ? n25.from.length : 0;
    let i = null;
    if (s > 0) {
        U(1 === s);
        const t = n25.from[0];
        t.allDescendants ? i = t.collectionId : e46 = e46.child(t.collectionId);
    }
    let r = [];
    n25.where && (r = Zs(n25.where));
    let o = [];
    n25.orderBy && (o = n25.orderBy.map((t90)=>(function(t91) {
            return new Xe(si(t91.field), // visible for testing
            function(t) {
                switch(t){
                    case "ASCENDING":
                        return "asc" /* ASCENDING */ ;
                    case "DESCENDING":
                        return "desc" /* DESCENDING */ ;
                    default:
                        return;
                }
            }(t91.direction));
        })(t90)));
    let u = null;
    n25.limit && (u = function(t) {
        let e;
        return e = "object" == typeof t ? t.value : t, oe(e) ? null : e;
    }(n25.limit));
    let c = null;
    n25.startAt && (c = function(t) {
        const e = !!t.before, n = t.values || [];
        return new Ye(n, e);
    }(n25.startAt));
    let a = null;
    return n25.endAt && (a = function(t) {
        const e = !t.before, n = t.values || [];
        return new Ye(n, e);
    }(n25.endAt)), sn(e46, i, o, r, u, "F" /* First */ , c, a);
}
function Xs(t, e47) {
    const n = function(t, e) {
        switch(e){
            case 0 /* Listen */ :
                return null;
            case 1 /* ExistenceFilterMismatch */ :
                return "existence-filter-mismatch";
            case 2 /* LimboResolution */ :
                return "limbo-document";
            default:
                return L();
        }
    }(0, e47.purpose);
    return null == n ? null : {
        "goog-listen-tags": n
    };
}
function Zs(t92) {
    return t92 ? void 0 !== t92.unaryFilter ? [
        ri(t92)
    ] : void 0 !== t92.fieldFilter ? [
        ii(t92)
    ] : void 0 !== t92.compositeFilter ? t92.compositeFilter.filters.map((t)=>Zs(t)).reduce((t, e)=>t.concat(e)) : L() : [];
}
function ti(t) {
    return vs[t];
}
function ei(t) {
    return Vs[t];
}
function ni(t) {
    return {
        fieldPath: t.canonicalString()
    };
}
function si(t) {
    return ft.fromServerFormat(t.fieldPath);
}
function ii(t93) {
    return qe.create(si(t93.fieldFilter.field), function(t) {
        switch(t){
            case "EQUAL":
                return "==" /* EQUAL */ ;
            case "NOT_EQUAL":
                return "!=" /* NOT_EQUAL */ ;
            case "GREATER_THAN":
                return ">" /* GREATER_THAN */ ;
            case "GREATER_THAN_OR_EQUAL":
                return ">=" /* GREATER_THAN_OR_EQUAL */ ;
            case "LESS_THAN":
                return "<" /* LESS_THAN */ ;
            case "LESS_THAN_OR_EQUAL":
                return "<=" /* LESS_THAN_OR_EQUAL */ ;
            case "ARRAY_CONTAINS":
                return "array-contains" /* ARRAY_CONTAINS */ ;
            case "IN":
                return "in" /* IN */ ;
            case "NOT_IN":
                return "not-in" /* NOT_IN */ ;
            case "ARRAY_CONTAINS_ANY":
                return "array-contains-any" /* ARRAY_CONTAINS_ANY */ ;
            default:
                return L();
        }
    }(t93.fieldFilter.op), t93.fieldFilter.value);
}
function ri(t) {
    switch(t.unaryFilter.op){
        case "IS_NAN":
            const e = si(t.unaryFilter.field);
            return qe.create(e, "==" /* EQUAL */ , {
                doubleValue: NaN
            });
        case "IS_NULL":
            const n = si(t.unaryFilter.field);
            return qe.create(n, "==" /* EQUAL */ , {
                nullValue: "NULL_VALUE"
            });
        case "IS_NOT_NAN":
            const s = si(t.unaryFilter.field);
            return qe.create(s, "!=" /* NOT_EQUAL */ , {
                doubleValue: NaN
            });
        case "IS_NOT_NULL":
            const i = si(t.unaryFilter.field);
            return qe.create(i, "!=" /* NOT_EQUAL */ , {
                nullValue: "NULL_VALUE"
            });
        default:
            return L();
    }
}
function oi(t94) {
    const e = [];
    return t94.fields.forEach((t)=>e.push(t.canonicalString())), {
        fieldPaths: e
    };
}
function ui(t) {
    // Resource names have at least 4 components (project ID, database ID)
    return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Encodes a resource path into a IndexedDb-compatible string form.
 */ function ci(t) {
    let e = "";
    for(let n = 0; n < t.length; n++)e.length > 0 && (e = hi(e)), e = ai(t.get(n), e);
    return hi(e);
}
/** Encodes a single segment of a resource path into the given result */ function ai(t, e) {
    let n = e;
    const s = t.length;
    for(let e48 = 0; e48 < s; e48++){
        const s = t.charAt(e48);
        switch(s){
            case "\0":
                n += "\x01\x10";
                break;
            case "\x01":
                n += "\x01\x11";
                break;
            default:
                n += s;
        }
    }
    return n;
}
/** Encodes a path separator into the given result */ function hi(t) {
    return t + "\x01\x01";
}
/**
 * Decodes the given IndexedDb-compatible string form of a resource path into
 * a ResourcePath instance. Note that this method is not suitable for use with
 * decoding resource names from the server; those are One Platform format
 * strings.
 */ function li(t) {
    // Event the empty path must encode as a path of at least length 2. A path
    // with exactly 2 must be the empty path.
    const e = t.length;
    if (U(e >= 2), 2 === e) return U("\x01" === t.charAt(0) && "\x01" === t.charAt(1)), ht.emptyPath();
    // Escape characters cannot exist past the second-to-last position in the
    // source value.
    const n = e - 2, s = [];
    let i = "";
    for(let r = 0; r < e;){
        // The last two characters of a valid encoded path must be a separator, so
        // there must be an end to this segment.
        const e = t.indexOf("\x01", r);
        (e < 0 || e > n) && L();
        switch(t.charAt(e + 1)){
            case "\x01":
                const n26 = t.substring(r, e);
                let o;
                0 === i.length ? // Avoid copying for the common case of a segment that excludes \0
                // and \001
                o = n26 : (i += n26, o = i, i = ""), s.push(o);
                break;
            case "\x10":
                i += t.substring(r, e), i += "\0";
                break;
            case "\x11":
                // The escape character can be used in the output to encode itself.
                i += t.substring(r, e + 1);
                break;
            default:
                L();
        }
        r = e + 2;
    }
    return new ht(s);
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const fi = [
    "userId",
    "batchId"
];
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Name of the IndexedDb object store.
 *
 * Note that the name 'owner' is chosen to ensure backwards compatibility with
 * older clients that only supported single locked access to the persistence
 * layer.
 */ /**
 * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
 * index to iterate over all at document mutations for a given path or lower.
 */ function di(t, e) {
    return [
        t,
        ci(e)
    ];
}
/**
 * Creates a full index key of [userId, encodedPath, batchId] for inserting
 * and deleting into the DbDocumentMutations index.
 */ function _i(t, e, n) {
    return [
        t,
        ci(e),
        n
    ];
}
/**
 * Because we store all the useful information for this store in the key,
 * there is no useful information to store as the value. The raw (unencoded)
 * path cannot be stored because IndexedDb doesn't store prototype
 * information.
 */ const wi = {}, mi = [
    "prefixPath",
    "collectionGroup",
    "readTime",
    "documentId"
], gi = [
    "prefixPath",
    "collectionGroup",
    "documentId"
], yi = [
    "collectionGroup",
    "readTime",
    "prefixPath",
    "documentId"
], pi = [
    "canonicalId",
    "targetId"
], Ii = [
    "targetId",
    "path"
], Ti = [
    "path",
    "targetId"
], Ei = [
    "collectionId",
    "parent"
], Ai = [
    "indexId",
    "uid"
], Ri = [
    "uid",
    "sequenceNumber"
], bi = [
    "indexId",
    "uid",
    "arrayValue",
    "directionalValue",
    "orderedDocumentKey",
    "documentKey"
], Pi = [
    "indexId",
    "uid",
    "orderedDocumentKey"
], vi = [
    "userId",
    "collectionPath",
    "documentId"
], Vi = [
    "userId",
    "collectionPath",
    "largestBatchId"
], Si = [
    "userId",
    "collectionGroup",
    "largestBatchId"
], Di = [
    "mutationQueues",
    "mutations",
    "documentMutations",
    "remoteDocuments",
    "targets",
    "owner",
    "targetGlobal",
    "targetDocuments",
    "clientMetadata",
    "remoteDocumentGlobal",
    "collectionParents",
    "bundles",
    "namedQueries"
], Ci = [
    ...Di,
    "documentOverlays"
], xi = [
    "mutationQueues",
    "mutations",
    "documentMutations",
    "remoteDocumentsV14",
    "targets",
    "owner",
    "targetGlobal",
    "targetDocuments",
    "clientMetadata",
    "remoteDocumentGlobal",
    "collectionParents",
    "bundles",
    "namedQueries",
    "documentOverlays"
], Ni = xi, ki = [
    ...Ni,
    "indexConfiguration",
    "indexState",
    "indexEntries"
];
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Oi extends Rt {
    constructor(t, e){
        super(), this.ee = t, this.currentSequenceNumber = e;
    }
}
function Mi(t, e) {
    const n = K(t);
    return Vt.N(n.ee, e);
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A batch of mutations that will be sent as one unit to the backend.
 */ class Fi {
    /**
     * @param batchId - The unique ID of this mutation batch.
     * @param localWriteTime - The original write time of this mutation.
     * @param baseMutations - Mutations that are used to populate the base
     * values when this mutation is applied locally. This can be used to locally
     * overwrite values that are persisted in the remote document cache. Base
     * mutations are never sent to the backend.
     * @param mutations - The user-provided mutations in this mutation batch.
     * User-provided mutations are applied both locally and remotely on the
     * backend.
     */ constructor(t, e, n, s){
        this.batchId = t, this.localWriteTime = e, this.baseMutations = n, this.mutations = s;
    }
    /**
     * Applies all the mutations in this MutationBatch to the specified document
     * to compute the state of the remote document
     *
     * @param document - The document to apply mutations to.
     * @param batchResult - The result of applying the MutationBatch to the
     * backend.
     */ applyToRemoteDocument(t, e) {
        const n = e.mutationResults;
        for(let e49 = 0; e49 < this.mutations.length; e49++){
            const s = this.mutations[e49];
            if (s.key.isEqual(t.key)) qn(s, t, n[e49]);
        }
    }
    /**
     * Computes the local view of a document given all the mutations in this
     * batch.
     *
     * @param document - The document to apply mutations to.
     * @param mutatedFields - Fields that have been updated before applying this mutation batch.
     * @returns A `FieldMask` representing all the fields that are mutated.
     */ applyToLocalView(t, e) {
        // First, apply the base state. This allows us to apply non-idempotent
        // transform against a consistent set of values.
        for (const n of this.baseMutations)n.key.isEqual(t.key) && (e = Kn(n, t, e, this.localWriteTime));
        // Second, apply all user-provided mutations.
        for (const n27 of this.mutations)n27.key.isEqual(t.key) && (e = Kn(n27, t, e, this.localWriteTime));
        return e;
    }
    /**
     * Computes the local view for all provided documents given the mutations in
     * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to
     * replace all the mutation applications.
     */ applyToLocalDocumentSet(t, e) {
        // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
        // directly (as done in `applyToLocalView()`), we can reduce the complexity
        // to O(n).
        const n = ls();
        return this.mutations.forEach((s)=>{
            const i = t.get(s.key), r = i.overlayedDocument;
            // TODO(mutabledocuments): This method should take a MutableDocumentMap
            // and we should remove this cast.
            let o = this.applyToLocalView(r, i.mutatedFields);
            // Set mutatedFields to null if the document is only from local mutations.
            // This creates a Set or Delete mutation, instead of trying to create a
            // patch mutation as the overlay.
            o = e.has(s.key) ? null : o;
            const u = Un(r, o);
            null !== u && n.set(s.key, u), r.isValidDocument() || r.convertToNoDocument(ct.min());
        }), n;
    }
    keys() {
        return this.mutations.reduce((t, e)=>t.add(e.key), ws());
    }
    isEqual(t95) {
        return this.batchId === t95.batchId && rt(this.mutations, t95.mutations, (t, e)=>Qn(t, e)) && rt(this.baseMutations, t95.baseMutations, (t, e)=>Qn(t, e));
    }
}
/** The result of applying a mutation batch to the backend. */ class $i {
    constructor(t, e, n, /**
     * A pre-computed mapping from each mutated document to the resulting
     * version.
     */ s){
        this.batch = t, this.commitVersion = e, this.mutationResults = n, this.docVersions = s;
    }
    /**
     * Creates a new MutationBatchResult for the given batch and results. There
     * must be one result for each mutation in the batch. This static factory
     * caches a document=&gt;version mapping (docVersions).
     */ static from(t, e, n) {
        U(t.mutations.length === n.length);
        let s = ds;
        const i = t.mutations;
        for(let t96 = 0; t96 < i.length; t96++)s = s.insert(i[t96].key, n[t96].version);
        return new $i(t, e, n, s);
    }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Representation of an overlay computed by Firestore.
 *
 * Holds information about a mutation and the largest batch id in Firestore when
 * the mutation was created.
 */ class Bi {
    constructor(t, e){
        this.largestBatchId = t, this.mutation = e;
    }
    getKey() {
        return this.mutation.key;
    }
    isEqual(t) {
        return null !== t && this.mutation === t.mutation;
    }
    toString() {
        return `Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable set of metadata that the local store tracks for each target.
 */ class Li {
    constructor(/** The target being listened to. */ t, /**
     * The target ID to which the target corresponds; Assigned by the
     * LocalStore for user listens and by the SyncEngine for limbo watches.
     */ e, /** The purpose of the target. */ n, /**
     * The sequence number of the last transaction during which this target data
     * was modified.
     */ s, /** The latest snapshot version seen for this target. */ i = ct.min(), r = ct.min(), o = Jt.EMPTY_BYTE_STRING){
        this.target = t, this.targetId = e, this.purpose = n, this.sequenceNumber = s, this.snapshotVersion = i, this.lastLimboFreeSnapshotVersion = r, this.resumeToken = o;
    }
    /** Creates a new target data instance with an updated sequence number. */ withSequenceNumber(t) {
        return new Li(this.target, this.targetId, this.purpose, t, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
    }
    /**
     * Creates a new target data instance with an updated resume token and
     * snapshot version.
     */ withResumeToken(t, e) {
        return new Li(this.target, this.targetId, this.purpose, this.sequenceNumber, e, this.lastLimboFreeSnapshotVersion, t);
    }
    /**
     * Creates a new target data instance with an updated last limbo free
     * snapshot version number.
     */ withLastLimboFreeSnapshotVersion(t) {
        return new Li(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, t, this.resumeToken);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Serializer for values stored in the LocalStore. */ class Ui {
    constructor(t){
        this.ne = t;
    }
}
/** Decodes a remote document from storage locally to a Document. */ function qi(t97, e50) {
    let n;
    if (e50.document) n = Ks(t97.ne, e50.document, !!e50.hasCommittedMutations);
    else if (e50.noDocument) {
        const t = dt.fromSegments(e50.noDocument.path), s = ji(e50.noDocument.readTime);
        n = xe.newNoDocument(t, s), e50.hasCommittedMutations && n.setHasCommittedMutations();
    } else {
        if (!e50.unknownDocument) return L();
        {
            const t = dt.fromSegments(e50.unknownDocument.path), s = ji(e50.unknownDocument.version);
            n = xe.newUnknownDocument(t, s);
        }
    }
    return e50.readTime && n.setReadTime(function(t) {
        const e = new ut(t[0], t[1]);
        return ct.fromTimestamp(e);
    }(e50.readTime)), n;
}
/** Encodes a document for storage locally. */ function Ki(t98, e51) {
    const n = e51.key, s = {
        prefixPath: n.getCollectionPath().popLast().toArray(),
        collectionGroup: n.collectionGroup,
        documentId: n.path.lastSegment(),
        readTime: Gi(e51.readTime),
        hasCommittedMutations: e51.hasCommittedMutations
    };
    if (e51.isFoundDocument()) s.document = function(t, e) {
        return {
            name: Ms(t, e.key),
            fields: e.data.value.mapValue.fields,
            updateTime: Ds(t, e.version.toTimestamp())
        };
    }(t98.ne, e51);
    else if (e51.isNoDocument()) s.noDocument = {
        path: n.path.toArray(),
        readTime: Qi(e51.version)
    };
    else {
        if (!e51.isUnknownDocument()) return L();
        s.unknownDocument = {
            path: n.path.toArray(),
            version: Qi(e51.version)
        };
    }
    return s;
}
function Gi(t) {
    const e = t.toTimestamp();
    return [
        e.seconds,
        e.nanoseconds
    ];
}
function Qi(t) {
    const e = t.toTimestamp();
    return {
        seconds: e.seconds,
        nanoseconds: e.nanoseconds
    };
}
function ji(t) {
    const e = new ut(t.seconds, t.nanoseconds);
    return ct.fromTimestamp(e);
}
/** Encodes a batch of mutations into a DbMutationBatch for local storage. */ /** Decodes a DbMutationBatch into a MutationBatch */ function Wi(t, e52) {
    const n = (e52.baseMutations || []).map((e)=>Ws(t.ne, e));
    // Squash old transform mutations into existing patch or set mutations.
    // The replacement of representing `transforms` with `update_transforms`
    // on the SDK means that old `transform` mutations stored in IndexedDB need
    // to be updated to `update_transforms`.
    // TODO(b/174608374): Remove this code once we perform a schema migration.
    for(let t99 = 0; t99 < e52.mutations.length - 1; ++t99){
        const n = e52.mutations[t99];
        if (t99 + 1 < e52.mutations.length && void 0 !== e52.mutations[t99 + 1].transform) {
            const s = e52.mutations[t99 + 1];
            n.updateTransforms = s.transform.fieldTransforms, e52.mutations.splice(t99 + 1, 1), ++t99;
        }
    }
    const s = e52.mutations.map((e)=>Ws(t.ne, e)), i = ut.fromMillis(e52.localWriteTimeMs);
    return new Fi(e52.batchId, i, n, s);
}
/** Decodes a DbTarget into TargetData */ function zi(t100) {
    const e = ji(t100.readTime), n = void 0 !== t100.lastLimboFreeSnapshotVersion ? ji(t100.lastLimboFreeSnapshotVersion) : ct.min();
    let s;
    var i;
    return void 0 !== t100.query.documents ? (U(1 === (i = t100.query).documents.length), s = ln(rn(Bs(i.documents[0])))) : s = function(t) {
        return ln(Ys(t));
    }(t100.query), new Li(s, t100.targetId, 0 /* Listen */ , t100.lastListenSequenceNumber, e, n, Jt.fromBase64String(t100.resumeToken));
}
/** Encodes TargetData into a DbTarget for storage locally. */ function Hi(t, e) {
    const n = Qi(e.snapshotVersion), s = Qi(e.lastLimboFreeSnapshotVersion);
    let i;
    i = $e(e.target) ? Hs(t.ne, e.target) : Js(t.ne, e.target);
    // We can't store the resumeToken as a ByteString in IndexedDb, so we
    // convert it to a base64 string for storage.
    const r = e.resumeToken.toBase64();
    // lastListenSequenceNumber is always 0 until we do real GC.
    return {
        targetId: e.targetId,
        canonicalId: Oe(e.target),
        readTime: n,
        resumeToken: r,
        lastListenSequenceNumber: e.sequenceNumber,
        lastLimboFreeSnapshotVersion: s,
        query: i
    };
}
/**
 * A helper function for figuring out what kind of query has been stored.
 */ /**
 * Encodes a `BundledQuery` from bundle proto to a Query object.
 *
 * This reconstructs the original query used to build the bundle being loaded,
 * including features exists only in SDKs (for example: limit-to-last).
 */ function Ji(t) {
    const e = Ys({
        parent: t.parent,
        structuredQuery: t.structuredQuery
    });
    return "LAST" === t.limitType ? fn(e, e.limit, "L" /* Last */ ) : e;
}
/** Encodes a NamedQuery proto object to a NamedQuery model object. */ /** Encodes a DbDocumentOverlay object to an Overlay model object. */ function Yi(t, e) {
    return new Bi(e.largestBatchId, Ws(t.ne, e.overlayMutation));
}
/** Decodes an Overlay model object into a DbDocumentOverlay object. */ /**
 * Returns the DbDocumentOverlayKey corresponding to the given user and
 * document key.
 */ function Xi(t, e) {
    const n = e.path.lastSegment();
    return [
        t,
        ci(e.path.popLast()),
        n
    ];
}
function Zi(t, e, n, s) {
    return {
        indexId: t,
        uid: e.uid || "",
        sequenceNumber: n,
        readTime: Qi(s.readTime),
        documentKey: ci(s.documentKey.path),
        largestBatchId: s.largestBatchId
    };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class tr {
    getBundleMetadata(t101, e53) {
        return er(t101).get(e53).next((t)=>{
            if (t) return {
                id: (e = t).bundleId,
                createTime: ji(e.createTime),
                version: e.version
            };
            /** Encodes a DbBundle to a BundleMetadata object. */ var e;
        /** Encodes a BundleMetadata to a DbBundle. */ });
    }
    saveBundleMetadata(t, e) {
        var n;
        return er(t).put({
            bundleId: (n = e).id,
            createTime: Qi(Ns(n.createTime)),
            version: n.version
        });
    /** Encodes a DbNamedQuery to a NamedQuery. */ }
    getNamedQuery(t102, e54) {
        return nr(t102).get(e54).next((t)=>{
            if (t) return {
                name: (e = t).name,
                query: Ji(e.bundledQuery),
                readTime: ji(e.readTime)
            };
            var e;
        /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */ });
    }
    saveNamedQuery(t103, e) {
        return nr(t103).put(function(t) {
            return {
                name: t.name,
                readTime: Qi(Ns(t.readTime)),
                bundledQuery: t.bundledQuery
            };
        }(e));
    }
}
/**
 * Helper to get a typed SimpleDbStore for the bundles object store.
 */ function er(t) {
    return Mi(t, "bundles");
}
/**
 * Helper to get a typed SimpleDbStore for the namedQueries object store.
 */ function nr(t) {
    return Mi(t, "namedQueries");
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Implementation of DocumentOverlayCache using IndexedDb.
 */ class sr {
    /**
     * @param serializer - The document serializer.
     * @param userId - The userId for which we are accessing overlays.
     */ constructor(t, e){
        this.wt = t, this.userId = e;
    }
    static se(t, e) {
        const n = e.uid || "";
        return new sr(t, n);
    }
    getOverlay(t104, e) {
        return ir(t104).get(Xi(this.userId, e)).next((t)=>t ? Yi(this.wt, t) : null);
    }
    getOverlays(t105, e55) {
        const n = hs();
        return Pt.forEach(e55, (e)=>this.getOverlay(t105, e).next((t)=>{
                null !== t && n.set(e, t);
            })).next(()=>n);
    }
    saveOverlays(t, e, n) {
        const s = [];
        return n.forEach((n, i)=>{
            const r = new Bi(e, i);
            s.push(this.ie(t, r));
        }), Pt.waitFor(s);
    }
    removeOverlaysForBatchId(t106, e56, n) {
        const s8 = new Set;
        // Get the set of unique collection paths.
        e56.forEach((t)=>s8.add(ci(t.getCollectionPath())));
        const i = [];
        return s8.forEach((e)=>{
            const s = IDBKeyRange.bound([
                this.userId,
                e,
                n
            ], [
                this.userId,
                e,
                n + 1
            ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0);
            i.push(ir(t106).W("collectionPathOverlayIndex", s));
        }), Pt.waitFor(i);
    }
    getOverlaysForCollection(t107, e57, n) {
        const s = hs(), i = ci(e57), r = IDBKeyRange.bound([
            this.userId,
            i,
            n
        ], [
            this.userId,
            i,
            Number.POSITIVE_INFINITY
        ], /*lowerOpen=*/ !0);
        return ir(t107).K("collectionPathOverlayIndex", r).next((t)=>{
            for (const e of t){
                const t = Yi(this.wt, e);
                s.set(t.getKey(), t);
            }
            return s;
        });
    }
    getOverlaysForCollectionGroup(t, e58, n28, s) {
        const i = hs();
        let r;
        // We want batch IDs larger than `sinceBatchId`, and so the lower bound
        // is not inclusive.
        const o1 = IDBKeyRange.bound([
            this.userId,
            e58,
            n28
        ], [
            this.userId,
            e58,
            Number.POSITIVE_INFINITY
        ], /*lowerOpen=*/ !0);
        return ir(t).J({
            index: "collectionGroupOverlayIndex",
            range: o1
        }, (t, e, n)=>{
            // We do not want to return partial batch overlays, even if the size
            // of the result set exceeds the given `count` argument. Therefore, we
            // continue to aggregate results even after the result size exceeds
            // `count` if there are more overlays from the `currentBatchId`.
            const o = Yi(this.wt, e);
            i.size() < s || o.largestBatchId === r ? (i.set(o.getKey(), o), r = o.largestBatchId) : n.done();
        }).next(()=>i);
    }
    ie(t108, e59) {
        return ir(t108).put(function(t, e, n) {
            const [s, i, r] = Xi(e, n.mutation.key);
            return {
                userId: e,
                collectionPath: i,
                documentId: r,
                collectionGroup: n.mutation.key.getCollectionGroup(),
                largestBatchId: n.largestBatchId,
                overlayMutation: js(t.ne, n.mutation)
            };
        }(this.wt, this.userId, e59));
    }
}
/**
 * Helper to get a typed SimpleDbStore for the document overlay object store.
 */ function ir(t) {
    return Mi(t, "documentOverlays");
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // Note: This code is copied from the backend. Code that is not used by
// Firestore was removed.
/** Firestore index value writer.  */ class rr {
    constructor(){}
    // The write methods below short-circuit writing terminators for values
    // containing a (terminating) truncated value.
    // As an example, consider the resulting encoding for:
    // ["bar", [2, "foo"]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TERM, TERM, TERM)
    // ["bar", [2, truncated("foo")]] -> (STRING, "bar", TERM, ARRAY, NUMBER, 2, STRING, "foo", TRUNC)
    // ["bar", truncated(["foo"])] -> (STRING, "bar", TERM, ARRAY. STRING, "foo", TERM, TRUNC)
    /** Writes an index value.  */ re(t, e) {
        this.oe(t, e), // Write separator to split index values
        // (see go/firestore-storage-format#encodings).
        e.ue();
    }
    oe(t, e) {
        if ("nullValue" in t) this.ce(e, 5);
        else if ("booleanValue" in t) this.ce(e, 10), e.ae(t.booleanValue ? 1 : 0);
        else if ("integerValue" in t) this.ce(e, 15), e.ae(Zt(t.integerValue));
        else if ("doubleValue" in t) {
            const n = Zt(t.doubleValue);
            isNaN(n) ? this.ce(e, 13) : (this.ce(e, 15), ue(n) ? // -0.0, 0 and 0.0 are all considered the same
            e.ae(0) : e.ae(n));
        } else if ("timestampValue" in t) {
            const n = t.timestampValue;
            this.ce(e, 20), "string" == typeof n ? e.he(n) : (e.he(`${n.seconds || ""}`), e.ae(n.nanos || 0));
        } else if ("stringValue" in t) this.le(t.stringValue, e), this.fe(e);
        else if ("bytesValue" in t) this.ce(e, 30), e.de(te(t.bytesValue)), this.fe(e);
        else if ("referenceValue" in t) this._e(t.referenceValue, e);
        else if ("geoPointValue" in t) {
            const n = t.geoPointValue;
            this.ce(e, 45), e.ae(n.latitude || 0), e.ae(n.longitude || 0);
        } else "mapValue" in t ? be(t) ? this.ce(e, Number.MAX_SAFE_INTEGER) : (this.we(t.mapValue, e), this.fe(e)) : "arrayValue" in t ? (this.me(t.arrayValue, e), this.fe(e)) : L();
    }
    le(t, e) {
        this.ce(e, 25), this.ge(t, e);
    }
    ge(t, e) {
        e.he(t);
    }
    we(t, e) {
        const n = t.fields || {};
        this.ce(e, 55);
        for (const t109 of Object.keys(n))this.le(t109, e), this.oe(n[t109], e);
    }
    me(t, e) {
        const n = t.values || [];
        this.ce(e, 50);
        for (const t110 of n)this.oe(t110, e);
    }
    _e(t111, e) {
        this.ce(e, 37);
        dt.fromName(t111).path.forEach((t)=>{
            this.ce(e, 60), this.ge(t, e);
        });
    }
    ce(t, e) {
        t.ae(e);
    }
    fe(t) {
        // While the SDK does not implement truncation, the truncation marker is
        // used to terminate all variable length values (which are strings, bytes,
        // references, arrays and maps).
        t.ae(2);
    }
}
rr.ye = new rr;
/**
 * Counts the number of zeros in a byte.
 *
 * Visible for testing.
 */ function or(t) {
    if (0 === t) return 8;
    let e = 0;
    return t >> 4 == 0 && // Test if the first four bits are zero.
    (e += 4, t <<= 4), t >> 6 == 0 && // Test if the first two (or next two) bits are zero.
    (e += 2, t <<= 2), t >> 7 == 0 && // Test if the remaining bit is zero.
    (e += 1), e;
}
/** Counts the number of leading zeros in the given byte array. */ /**
 * Returns the number of bytes required to store "value". Leading zero bytes
 * are skipped.
 */ function ur(t112) {
    // This is just the number of bytes for the unsigned representation of the number.
    const e60 = 64 - function(t) {
        let e = 0;
        for(let n = 0; n < 8; ++n){
            const s = or(255 & t[n]);
            if (e += s, 8 !== s) break;
        }
        return e;
    }(t112);
    return Math.ceil(e60 / 8);
}
/**
 * OrderedCodeWriter is a minimal-allocation implementation of the writing
 * behavior defined by the backend.
 *
 * The code is ported from its Java counterpart.
 */ class cr {
    constructor(){
        this.buffer = new Uint8Array(1024), this.position = 0;
    }
    pe(t) {
        const e = t[Symbol.iterator]();
        let n = e.next();
        for(; !n.done;)this.Ie(n.value), n = e.next();
        this.Te();
    }
    Ee(t) {
        const e = t[Symbol.iterator]();
        let n = e.next();
        for(; !n.done;)this.Ae(n.value), n = e.next();
        this.Re();
    }
    /** Writes utf8 bytes into this byte sequence, ascending. */ be(t) {
        for (const e of t){
            const t = e.charCodeAt(0);
            if (t < 128) this.Ie(t);
            else if (t < 2048) this.Ie(960 | t >>> 6), this.Ie(128 | 63 & t);
            else if (e < "\ud800" || "\udbff" < e) this.Ie(480 | t >>> 12), this.Ie(128 | 63 & t >>> 6), this.Ie(128 | 63 & t);
            else {
                const t = e.codePointAt(0);
                this.Ie(240 | t >>> 18), this.Ie(128 | 63 & t >>> 12), this.Ie(128 | 63 & t >>> 6), this.Ie(128 | 63 & t);
            }
        }
        this.Te();
    }
    /** Writes utf8 bytes into this byte sequence, descending */ Pe(t) {
        for (const e of t){
            const t = e.charCodeAt(0);
            if (t < 128) this.Ae(t);
            else if (t < 2048) this.Ae(960 | t >>> 6), this.Ae(128 | 63 & t);
            else if (e < "\ud800" || "\udbff" < e) this.Ae(480 | t >>> 12), this.Ae(128 | 63 & t >>> 6), this.Ae(128 | 63 & t);
            else {
                const t = e.codePointAt(0);
                this.Ae(240 | t >>> 18), this.Ae(128 | 63 & t >>> 12), this.Ae(128 | 63 & t >>> 6), this.Ae(128 | 63 & t);
            }
        }
        this.Re();
    }
    ve(t) {
        // Values are encoded with a single byte length prefix, followed by the
        // actual value in big-endian format with leading 0 bytes dropped.
        const e = this.Ve(t), n = ur(e);
        this.Se(1 + n), this.buffer[this.position++] = 255 & n;
        // Write the length
        for(let t113 = e.length - n; t113 < e.length; ++t113)this.buffer[this.position++] = 255 & e[t113];
    }
    De(t) {
        // Values are encoded with a single byte length prefix, followed by the
        // inverted value in big-endian format with leading 0 bytes dropped.
        const e = this.Ve(t), n = ur(e);
        this.Se(1 + n), this.buffer[this.position++] = ~(255 & n);
        // Write the length
        for(let t114 = e.length - n; t114 < e.length; ++t114)this.buffer[this.position++] = ~(255 & e[t114]);
    }
    /**
     * Writes the "infinity" byte sequence that sorts after all other byte
     * sequences written in ascending order.
     */ Ce() {
        this.xe(255), this.xe(255);
    }
    /**
     * Writes the "infinity" byte sequence that sorts before all other byte
     * sequences written in descending order.
     */ Ne() {
        this.ke(255), this.ke(255);
    }
    /**
     * Resets the buffer such that it is the same as when it was newly
     * constructed.
     */ reset() {
        this.position = 0;
    }
    seed(t) {
        this.Se(t.length), this.buffer.set(t, this.position), this.position += t.length;
    }
    /** Makes a copy of the encoded bytes in this buffer.  */ Oe() {
        return this.buffer.slice(0, this.position);
    }
    /**
     * Encodes `val` into an encoding so that the order matches the IEEE 754
     * floating-point comparison results with the following exceptions:
     *   -0.0 < 0.0
     *   all non-NaN < NaN
     *   NaN = NaN
     */ Ve(t116) {
        const e61 = /** Converts a JavaScript number to a byte array (using big endian encoding). */ function(t) {
            const e = new DataView(new ArrayBuffer(8));
            return e.setFloat64(0, t, /* littleEndian= */ !1), new Uint8Array(e.buffer);
        }(t116), n = 0 != (128 & e61[0]);
        // Check if the first bit is set. We use a bit mask since value[0] is
        // encoded as a number from 0 to 255.
        // Revert the two complement to get natural ordering
        e61[0] ^= n ? 255 : 128;
        for(let t115 = 1; t115 < e61.length; ++t115)e61[t115] ^= n ? 255 : 0;
        return e61;
    }
    /** Writes a single byte ascending to the buffer. */ Ie(t) {
        const e = 255 & t;
        0 === e ? (this.xe(0), this.xe(255)) : 255 === e ? (this.xe(255), this.xe(0)) : this.xe(e);
    }
    /** Writes a single byte descending to the buffer.  */ Ae(t) {
        const e = 255 & t;
        0 === e ? (this.ke(0), this.ke(255)) : 255 === e ? (this.ke(255), this.ke(0)) : this.ke(t);
    }
    Te() {
        this.xe(0), this.xe(1);
    }
    Re() {
        this.ke(0), this.ke(1);
    }
    xe(t) {
        this.Se(1), this.buffer[this.position++] = t;
    }
    ke(t) {
        this.Se(1), this.buffer[this.position++] = ~t;
    }
    Se(t) {
        const e = t + this.position;
        if (e <= this.buffer.length) return;
        // Try doubling.
        let n = 2 * this.buffer.length;
        // Still not big enough? Just allocate the right size.
        n < e && (n = e);
        // Create the new buffer.
        const s = new Uint8Array(n);
        s.set(this.buffer), this.buffer = s;
    }
}
class ar {
    constructor(t){
        this.Me = t;
    }
    de(t) {
        this.Me.pe(t);
    }
    he(t) {
        this.Me.be(t);
    }
    ae(t) {
        this.Me.ve(t);
    }
    ue() {
        this.Me.Ce();
    }
}
class hr {
    constructor(t){
        this.Me = t;
    }
    de(t) {
        this.Me.Ee(t);
    }
    he(t) {
        this.Me.Pe(t);
    }
    ae(t) {
        this.Me.De(t);
    }
    ue() {
        this.Me.Ne();
    }
}
/**
 * Implements `DirectionalIndexByteEncoder` using `OrderedCodeWriter` for the
 * actual encoding.
 */ class lr {
    constructor(){
        this.Me = new cr, this.Fe = new ar(this.Me), this.$e = new hr(this.Me);
    }
    seed(t) {
        this.Me.seed(t);
    }
    Be(t) {
        return 0 /* ASCENDING */  === t ? this.Fe : this.$e;
    }
    Oe() {
        return this.Me.Oe();
    }
    reset() {
        this.Me.reset();
    }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Represents an index entry saved by the SDK in persisted storage. */ class fr {
    constructor(t, e, n, s){
        this.indexId = t, this.documentKey = e, this.arrayValue = n, this.directionalValue = s;
    }
    /**
     * Returns an IndexEntry entry that sorts immediately after the current
     * directional value.
     */ Le() {
        const t = this.directionalValue.length, e = 0 === t || 255 === this.directionalValue[t - 1] ? t + 1 : t, n = new Uint8Array(e);
        return n.set(this.directionalValue, 0), e !== t ? n.set([
            0
        ], this.directionalValue.length) : ++n[n.length - 1], new fr(this.indexId, this.documentKey, this.arrayValue, n);
    }
}
function dr(t, e) {
    let n = t.indexId - e.indexId;
    return 0 !== n ? n : (n = _r(t.arrayValue, e.arrayValue), 0 !== n ? n : (n = _r(t.directionalValue, e.directionalValue), 0 !== n ? n : dt.comparator(t.documentKey, e.documentKey)));
}
function _r(t, e) {
    for(let n = 0; n < t.length && n < e.length; ++n){
        const s = t[n] - e[n];
        if (0 !== s) return s;
    }
    return t.length - e.length;
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A light query planner for Firestore.
 *
 * This class matches a `FieldIndex` against a Firestore Query `Target`. It
 * determines whether a given index can be used to serve the specified target.
 *
 * The following table showcases some possible index configurations:
 *
 * Query                                               | Index
 * -----------------------------------------------------------------------------
 * where('a', '==', 'a').where('b', '==', 'b')         | a ASC, b DESC
 * where('a', '==', 'a').where('b', '==', 'b')         | a ASC
 * where('a', '==', 'a').where('b', '==', 'b')         | b DESC
 * where('a', '>=', 'a').orderBy('a')                  | a ASC
 * where('a', '>=', 'a').orderBy('a', 'desc')          | a DESC
 * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC, b ASC
 * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC
 * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS, b ASCENDING
 * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS
 */ class wr {
    constructor(t){
        this.collectionId = null != t.collectionGroup ? t.collectionGroup : t.path.lastSegment(), this.Ue = t.orderBy, this.qe = [];
        for (const e of t.filters){
            const t = e;
            t.ht() ? this.Ke = t : this.qe.push(t);
        }
    }
    /**
     * Returns whether the index can be used to serve the TargetIndexMatcher's
     * target.
     *
     * An index is considered capable of serving the target when:
     * - The target uses all index segments for its filters and orderBy clauses.
     *   The target can have additional filter and orderBy clauses, but not
     *   fewer.
     * - If an ArrayContains/ArrayContainsAnyfilter is used, the index must also
     *   have a corresponding `CONTAINS` segment.
     * - All directional index segments can be mapped to the target as a series of
     *   equality filters, a single inequality filter and a series of orderBy
     *   clauses.
     * - The segments that represent the equality filters may appear out of order.
     * - The optional segment for the inequality filter must appear after all
     *   equality segments.
     * - The segments that represent that orderBy clause of the target must appear
     *   in order after all equality and inequality segments. Single orderBy
     *   clauses cannot be skipped, but a continuous orderBy suffix may be
     *   omitted.
     */ Ge(t) {
        // If there is an array element, find a matching filter.
        const e = wt(t);
        if (void 0 !== e && !this.Qe(e)) return !1;
        const n = mt(t);
        let s = 0, i = 0;
        // Process all equalities first. Equalities can appear out of order.
        for(; s < n.length && this.Qe(n[s]); ++s);
        // If we already have processed all segments, all segments are used to serve
        // the equality filters and we do not need to map any segments to the
        // target's inequality and orderBy clauses.
        if (s === n.length) return !0;
        // If there is an inequality filter, the next segment must match both the
        // filter and the first orderBy clause.
        if (void 0 !== this.Ke) {
            const t = n[s];
            if (!this.je(this.Ke, t) || !this.We(this.Ue[i++], t)) return !1;
            ++s;
        }
        // All remaining segments need to represent the prefix of the target's
        // orderBy.
        for(; s < n.length; ++s){
            const t = n[s];
            if (i >= this.Ue.length || !this.We(this.Ue[i++], t)) return !1;
        }
        return !0;
    }
    Qe(t) {
        for (const e of this.qe)if (this.je(e, t)) return !0;
        return !1;
    }
    je(t, e) {
        if (void 0 === t || !t.field.isEqual(e.fieldPath)) return !1;
        const n = "array-contains" /* ARRAY_CONTAINS */  === t.op || "array-contains-any" /* ARRAY_CONTAINS_ANY */  === t.op;
        return 2 /* CONTAINS */  === e.kind === n;
    }
    We(t, e) {
        return !!t.field.isEqual(e.fieldPath) && (0 /* ASCENDING */  === e.kind && "asc" /* ASCENDING */  === t.dir || 1 /* DESCENDING */  === e.kind && "desc" /* DESCENDING */  === t.dir);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory implementation of IndexManager.
 */ class mr {
    constructor(){
        this.ze = new gr;
    }
    addToCollectionParentIndex(t, e) {
        return this.ze.add(e), Pt.resolve();
    }
    getCollectionParents(t, e) {
        return Pt.resolve(this.ze.getEntries(e));
    }
    addFieldIndex(t, e) {
        // Field indices are not supported with memory persistence.
        return Pt.resolve();
    }
    deleteFieldIndex(t, e) {
        // Field indices are not supported with memory persistence.
        return Pt.resolve();
    }
    getDocumentsMatchingTarget(t, e) {
        // Field indices are not supported with memory persistence.
        return Pt.resolve(null);
    }
    getIndexType(t, e) {
        // Field indices are not supported with memory persistence.
        return Pt.resolve(0 /* NONE */ );
    }
    getFieldIndexes(t, e) {
        // Field indices are not supported with memory persistence.
        return Pt.resolve([]);
    }
    getNextCollectionGroupToUpdate(t) {
        // Field indices are not supported with memory persistence.
        return Pt.resolve(null);
    }
    getMinOffset(t, e) {
        return Pt.resolve(Tt.min());
    }
    getMinOffsetFromCollectionGroup(t, e) {
        return Pt.resolve(Tt.min());
    }
    updateCollectionGroup(t, e, n) {
        // Field indices are not supported with memory persistence.
        return Pt.resolve();
    }
    updateIndexEntries(t, e) {
        // Field indices are not supported with memory persistence.
        return Pt.resolve();
    }
}
/**
 * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
 * Also used for in-memory caching by IndexedDbIndexManager and initial index population
 * in indexeddb_schema.ts
 */ class gr {
    constructor(){
        this.index = {};
    }
    // Returns false if the entry already existed.
    add(t) {
        const e = t.lastSegment(), n = t.popLast(), s = this.index[e] || new Qt(ht.comparator), i = !s.has(n);
        return this.index[e] = s.add(n), i;
    }
    has(t) {
        const e = t.lastSegment(), n = t.popLast(), s = this.index[e];
        return s && s.has(n);
    }
    getEntries(t) {
        return (this.index[t] || new Qt(ht.comparator)).toArray();
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const yr = new Uint8Array(0);
/**
 * A persisted implementation of IndexManager.
 *
 * PORTING NOTE: Unlike iOS and Android, the Web SDK does not memoize index
 * data as it supports multi-tab access.
 */ class pr {
    constructor(t117, e62){
        this.user = t117, this.databaseId = e62, /**
         * An in-memory copy of the index entries we've already written since the SDK
         * launched. Used to avoid re-writing the same entry repeatedly.
         *
         * This is *NOT* a complete cache of what's in persistence and so can never be
         * used to satisfy reads.
         */ this.He = new gr, /**
         * Maps from a target to its equivalent list of sub-targets. Each sub-target
         * contains only one term from the target's disjunctive normal form (DNF).
         */ this.Je = new is((t)=>Oe(t), (t, e)=>Fe(t, e)), this.uid = t117.uid || "";
    }
    /**
     * Adds a new entry to the collection parent index.
     *
     * Repeated calls for the same collectionPath should be avoided within a
     * transaction as IndexedDbIndexManager only caches writes once a transaction
     * has been committed.
     */ addToCollectionParentIndex(t, e) {
        if (!this.He.has(e)) {
            const n = e.lastSegment(), s = e.popLast();
            t.addOnCommittedListener(()=>{
                // Add the collection to the in memory cache only if the transaction was
                // successfully committed.
                this.He.add(e);
            });
            const i = {
                collectionId: n,
                parent: ci(s)
            };
            return Ir(t).put(i);
        }
        return Pt.resolve();
    }
    getCollectionParents(t118, e) {
        const n = [], s9 = IDBKeyRange.bound([
            e,
            ""
        ], [
            ot(e),
            ""
        ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0);
        return Ir(t118).K(s9).next((t)=>{
            for (const s of t){
                // This collectionId guard shouldn't be necessary (and isn't as long
                // as we're running in a real browser), but there's a bug in
                // indexeddbshim that breaks our range in our tests running in node:
                // https://github.com/axemclion/IndexedDBShim/issues/334
                if (s.collectionId !== e) break;
                n.push(li(s.parent));
            }
            return n;
        });
    }
    addFieldIndex(t119, e) {
        // TODO(indexing): Verify that the auto-incrementing index ID works in
        // Safari & Firefox.
        const n = Er(t119), s = function(t120) {
            return {
                indexId: t120.indexId,
                collectionGroup: t120.collectionGroup,
                fields: t120.fields.map((t)=>[
                        t.fieldPath.canonicalString(),
                        t.kind
                    ])
            };
        }(e);
        delete s.indexId;
        // `indexId` is auto-populated by IndexedDb
        const i = n.add(s);
        if (e.indexState) {
            const n = Ar(t119);
            return i.next((t)=>{
                n.put(Zi(t, this.user, e.indexState.sequenceNumber, e.indexState.offset));
            });
        }
        return i.next();
    }
    deleteFieldIndex(t, e) {
        const n = Er(t), s = Ar(t), i = Tr(t);
        return n.delete(e.indexId).next(()=>s.delete(IDBKeyRange.bound([
                e.indexId
            ], [
                e.indexId + 1
            ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0))).next(()=>i.delete(IDBKeyRange.bound([
                e.indexId
            ], [
                e.indexId + 1
            ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0)));
    }
    getDocumentsMatchingTarget(t121, e63) {
        const n29 = Tr(t121);
        let s10 = !0;
        const i3 = new Map;
        return Pt.forEach(this.Ye(e63), (e)=>this.Xe(t121, e).next((t)=>{
                s10 && (s10 = !!t), i3.set(e, t);
            })).next(()=>{
            if (s10) {
                let t122 = ws();
                const s11 = [];
                return Pt.forEach(i3, (i4, r)=>{
                    /** Returns a debug representation of the field index */ var o;
                    M("IndexedDbIndexManager", `Using index ${(o = i4, `id=${o.indexId}|cg=${o.collectionGroup}|f=${o.fields.map((t)=>`${t.fieldPath}:${t.kind}`).join(",")}`)} to execute ${Oe(e63)}`);
                    const u = function(t, e) {
                        const n = wt(e);
                        if (void 0 === n) return null;
                        for (const e64 of Be(t, n.fieldPath))switch(e64.op){
                            case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                                return e64.value.arrayValue.values || [];
                            case "array-contains" /* ARRAY_CONTAINS */ :
                                return [
                                    e64.value
                                ];
                        }
                        return null;
                    }(r, i4), c = function(t, e) {
                        const n = new Map;
                        for (const s of mt(e))for (const e65 of Be(t, s.fieldPath))switch(e65.op){
                            case "==" /* EQUAL */ :
                            case "in" /* IN */ :
                                // Encode equality prefix, which is encoded in the index value before
                                // the inequality (e.g. `a == 'a' && b != 'b'` is encoded to
                                // `value != 'ab'`).
                                n.set(s.fieldPath.canonicalString(), e65.value);
                                break;
                            case "not-in" /* NOT_IN */ :
                            case "!=" /* NOT_EQUAL */ :
                                // NotIn/NotEqual is always a suffix. There cannot be any remaining
                                // segments and hence we can return early here.
                                return n.set(s.fieldPath.canonicalString(), e65.value), Array.from(n.values());
                        }
                        return null;
                    }(r, i4), a = function(t, e) {
                        const n = [];
                        let s = !0;
                        // For each segment, retrieve a lower bound if there is a suitable filter or
                        // startAt.
                        for (const i of mt(e)){
                            const e = 0 /* ASCENDING */  === i.kind ? Le(t, i.fieldPath, t.startAt) : Ue(t, i.fieldPath, t.startAt);
                            n.push(e.value), s && (s = e.inclusive);
                        }
                        return new Ye(n, s);
                    }(r, i4), h = function(t, e) {
                        const n = [];
                        let s = !0;
                        // For each segment, retrieve an upper bound if there is a suitable filter or
                        // endAt.
                        for (const i of mt(e)){
                            const e = 0 /* ASCENDING */  === i.kind ? Ue(t, i.fieldPath, t.endAt) : Le(t, i.fieldPath, t.endAt);
                            n.push(e.value), s && (s = e.inclusive);
                        }
                        return new Ye(n, s);
                    }(r, i4), l = this.Ze(i4, r, a), f = this.Ze(i4, r, h), d = this.tn(i4, r, c), _ = this.en(i4.indexId, u, l, a.inclusive, f, h.inclusive, d);
                    return Pt.forEach(_, (i)=>n29.j(i, e63.limit).next((e66)=>{
                            e66.forEach((e)=>{
                                const n = dt.fromSegments(e.documentKey);
                                t122.has(n) || (t122 = t122.add(n), s11.push(n));
                            });
                        }));
                }).next(()=>s11);
            }
            return Pt.resolve(null);
        });
    }
    Ye(t) {
        let e = this.Je.get(t);
        return e || // TODO(orquery): Implement DNF transform
        (e = [
            t
        ], this.Je.set(t, e), e);
    }
    /**
     * Constructs a key range query on `DbIndexEntryStore` that unions all
     * bounds.
     */ en(t, e67, n, s, i, r, o) {
        // The number of total index scans we union together. This is similar to a
        // distributed normal form, but adapted for array values. We create a single
        // index range per value in an ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filter
        // combined with the values from the query bounds.
        const u = (null != e67 ? e67.length : 1) * Math.max(n.length, i.length), c = u / (null != e67 ? e67.length : 1), a = [];
        for(let h = 0; h < u; ++h){
            const u = e67 ? this.nn(e67[h / c]) : yr, l = this.sn(t, u, n[h % c], s), f = this.rn(t, u, i[h % c], r), d = o.map((e)=>this.sn(t, u, e, /* inclusive= */ !0));
            a.push(...this.createRange(l, f, d));
        }
        return a;
    }
    /** Generates the lower bound for `arrayValue` and `directionalValue`. */ sn(t, e, n, s) {
        const i = new fr(t, dt.empty(), e, n);
        return s ? i : i.Le();
    }
    /** Generates the upper bound for `arrayValue` and `directionalValue`. */ rn(t, e, n, s) {
        const i = new fr(t, dt.empty(), e, n);
        return s ? i.Le() : i;
    }
    Xe(t124, e68) {
        const n = new wr(e68), s13 = null != e68.collectionGroup ? e68.collectionGroup : e68.path.lastSegment();
        return this.getFieldIndexes(t124, s13).next((t)=>{
            // Return the index with the most number of segments.
            let e = null;
            for (const s of t)n.Ge(s) && (!e || s.fields.length > e.fields.length) && (e = s);
            return e;
        });
    }
    getIndexType(t125, e69) {
        let n31 = 2 /* FULL */ ;
        return Pt.forEach(this.Ye(e69), (e70)=>this.Xe(t125, e70).next((t126)=>{
                t126 ? 0 /* NONE */  !== n31 && t126.fields.length < function(t) {
                    let e = new Qt(ft.comparator), n = !1;
                    for (const s of t.filters){
                        // TODO(orquery): Use the flattened filters here
                        const t = s;
                        // __name__ is not an explicit segment of any index, so we don't need to
                        // count it.
                        t.field.isKeyField() || // ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filters must be counted separately.
                        // For instance, it is possible to have an index for "a ARRAY a ASC". Even
                        // though these are on the same field, they should be counted as two
                        // separate segments in an index.
                        ("array-contains" /* ARRAY_CONTAINS */  === t.op || "array-contains-any" /* ARRAY_CONTAINS_ANY */  === t.op ? n = !0 : e = e.add(t.field));
                    }
                    for (const n30 of t.orderBy)// __name__ is not an explicit segment of any index, so we don't need to
                    // count it.
                    n30.field.isKeyField() || (e = e.add(n30.field));
                    return e.size + (n ? 1 : 0);
                }(e70) && (n31 = 1 /* PARTIAL */ ) : n31 = 0 /* NONE */ ;
            })).next(()=>n31);
    }
    /**
     * Returns the byte encoded form of the directional values in the field index.
     * Returns `null` if the document does not have all fields specified in the
     * index.
     */ on(t, e) {
        const n = new lr;
        for (const s of mt(t)){
            const t = e.data.field(s.fieldPath);
            if (null == t) return null;
            const i = n.Be(s.kind);
            rr.ye.re(t, i);
        }
        return n.Oe();
    }
    /** Encodes a single value to the ascending index format. */ nn(t) {
        const e = new lr;
        return rr.ye.re(t, e.Be(0 /* ASCENDING */ )), e.Oe();
    }
    /**
     * Returns an encoded form of the document key that sorts based on the key
     * ordering of the field index.
     */ un(t127, e71) {
        const n = new lr;
        return rr.ye.re(ye(this.databaseId, e71), n.Be(function(t) {
            const e = mt(t);
            return 0 === e.length ? 0 /* ASCENDING */  : e[e.length - 1].kind;
        }(t127))), n.Oe();
    }
    /**
     * Encodes the given field values according to the specification in `target`.
     * For IN queries, a list of possible values is returned.
     */ tn(t, e, n) {
        if (null === n) return [];
        let s = [];
        s.push(new lr);
        let i = 0;
        for (const r of mt(t)){
            const t = n[i++];
            for (const n32 of s)if (this.cn(e, r.fieldPath) && Ie(t)) s = this.an(s, r, t);
            else {
                const e = n32.Be(r.kind);
                rr.ye.re(t, e);
            }
        }
        return this.hn(s);
    }
    /**
     * Encodes the given bounds according to the specification in `target`. For IN
     * queries, a list of possible values is returned.
     */ Ze(t, e, n) {
        return this.tn(t, e, n.position);
    }
    /** Returns the byte representation for the provided encoders. */ hn(t) {
        const e = [];
        for(let n = 0; n < t.length; ++n)e[n] = t[n].Oe();
        return e;
    }
    /**
     * Creates a separate encoder for each element of an array.
     *
     * The method appends each value to all existing encoders (e.g. filter("a",
     * "==", "a1").filter("b", "in", ["b1", "b2"]) becomes ["a1,b1", "a1,b2"]). A
     * list of new encoders is returned.
     */ an(t, e, n) {
        const s = [
            ...t
        ], i = [];
        for (const t128 of n.arrayValue.values || [])for (const n33 of s){
            const s = new lr;
            s.seed(n33.Oe()), rr.ye.re(t128, s.Be(e.kind)), i.push(s);
        }
        return i;
    }
    cn(t129, e) {
        return !!t129.filters.find((t)=>t instanceof qe && t.field.isEqual(e) && ("in" /* IN */  === t.op || "not-in" /* NOT_IN */  === t.op));
    }
    getFieldIndexes(t130, e72) {
        const n34 = Er(t130), s14 = Ar(t130);
        return (e72 ? n34.K("collectionGroupIndex", IDBKeyRange.bound(e72, e72)) : n34.K()).next((t131)=>{
            const e73 = [];
            return Pt.forEach(t131, (t132)=>s14.get([
                    t132.indexId,
                    this.uid
                ]).next((n35)=>{
                    e73.push(function(t133, e74) {
                        const n = e74 ? new yt(e74.sequenceNumber, new Tt(ji(e74.readTime), new dt(li(e74.documentKey)), e74.largestBatchId)) : yt.empty(), s = t133.fields.map(([t, e])=>new gt(ft.fromServerFormat(t), e));
                        return new _t(t133.indexId, t133.collectionGroup, s, n);
                    }(t132, n35));
                })).next(()=>e73);
        });
    }
    getNextCollectionGroupToUpdate(t134) {
        return this.getFieldIndexes(t134).next((t135)=>0 === t135.length ? null : (t135.sort((t, e)=>{
                const n = t.indexState.sequenceNumber - e.indexState.sequenceNumber;
                return 0 !== n ? n : it(t.collectionGroup, e.collectionGroup);
            }), t135[0].collectionGroup));
    }
    updateCollectionGroup(t136, e75, n) {
        const s = Er(t136), i = Ar(t136);
        return this.ln(t136).next((t)=>s.K("collectionGroupIndex", IDBKeyRange.bound(e75, e75)).next((e76)=>Pt.forEach(e76, (e)=>i.put(Zi(e.indexId, this.user, t, n)))));
    }
    updateIndexEntries(t, e77) {
        // Porting Note: `getFieldIndexes()` on Web does not cache index lookups as
        // it could be used across different IndexedDB transactions. As any cached
        // data might be invalidated by other multi-tab clients, we can only trust
        // data within a single IndexedDB transaction. We therefore add a cache
        // here.
        const n36 = new Map;
        return Pt.forEach(e77, (e78, s)=>{
            const i5 = n36.get(e78.collectionGroup);
            return (i5 ? Pt.resolve(i5) : this.getFieldIndexes(t, e78.collectionGroup)).next((i6)=>(n36.set(e78.collectionGroup, i6), Pt.forEach(i6, (n)=>this.fn(t, e78, n).next((e)=>{
                        const i = this.dn(s, n);
                        return e.isEqual(i) ? Pt.resolve() : this._n(t, s, n, e, i);
                    }))));
        });
    }
    wn(t, e, n, s) {
        return Tr(t).put({
            indexId: s.indexId,
            uid: this.uid,
            arrayValue: s.arrayValue,
            directionalValue: s.directionalValue,
            orderedDocumentKey: this.un(n, e.key),
            documentKey: e.key.path.toArray()
        });
    }
    mn(t, e, n, s) {
        return Tr(t).delete([
            s.indexId,
            this.uid,
            s.arrayValue,
            s.directionalValue,
            this.un(n, e.key),
            e.key.path.toArray()
        ]);
    }
    fn(t, e, n) {
        const s15 = Tr(t);
        let i = new Qt(dr);
        return s15.J({
            index: "documentKeyIndex",
            range: IDBKeyRange.only([
                n.indexId,
                this.uid,
                this.un(n, e)
            ])
        }, (t, s)=>{
            i = i.add(new fr(n.indexId, e, s.arrayValue, s.directionalValue));
        }).next(()=>i);
    }
    /** Creates the index entries for the given document. */ dn(t, e) {
        let n = new Qt(dr);
        const s = this.on(e, t);
        if (null == s) return n;
        const i = wt(e);
        if (null != i) {
            const r = t.data.field(i.fieldPath);
            if (Ie(r)) for (const i7 of r.arrayValue.values || [])n = n.add(new fr(e.indexId, t.key, this.nn(i7), s));
        } else n = n.add(new fr(e.indexId, t.key, yr, s));
        return n;
    }
    /**
     * Updates the index entries for the provided document by deleting entries
     * that are no longer referenced in `newEntries` and adding all newly added
     * entries.
     */ _n(t137, e79, n37, s16, i8) {
        M("IndexedDbIndexManager", "Updating index entries for document '%s'", e79.key);
        const r1 = [];
        return function(t, e, n, s, i) {
            const r = t.getIterator(), o = e.getIterator();
            let u = Wt(r), c = Wt(o);
            // Walk through the two sets at the same time, using the ordering defined by
            // `comparator`.
            for(; u || c;){
                let t = !1, e = !1;
                if (u && c) {
                    const s = n(u, c);
                    s < 0 ? // The element was removed if the next element in our ordered
                    // walkthrough is only in `before`.
                    e = !0 : s > 0 && // The element was added if the next element in our ordered walkthrough
                    // is only in `after`.
                    (t = !0);
                } else null != u ? e = !0 : t = !0;
                t ? (s(c), c = Wt(o)) : e ? (i(u), u = Wt(r)) : (u = Wt(r), c = Wt(o));
            }
        }(s16, i8, dr, /* onAdd= */ (s)=>{
            r1.push(this.wn(t137, e79, n37, s));
        }, /* onRemove= */ (s)=>{
            r1.push(this.mn(t137, e79, n37, s));
        }), Pt.waitFor(r1);
    }
    ln(t) {
        let e = 1;
        return Ar(t).J({
            index: "sequenceNumberIndex",
            reverse: !0,
            range: IDBKeyRange.upperBound([
                this.uid,
                Number.MAX_SAFE_INTEGER
            ])
        }, (t, n, s)=>{
            s.done(), e = n.sequenceNumber + 1;
        }).next(()=>e);
    }
    /**
     * Returns a new set of IDB ranges that splits the existing range and excludes
     * any values that match the `notInValue` from these ranges. As an example,
     * '[foo > 2 && foo != 3]` becomes  `[foo > 2 && < 3, foo > 3]`.
     */ createRange(t139, e80, n38) {
        // The notIn values need to be sorted and unique so that we can return a
        // sorted set of non-overlapping ranges.
        n38 = n38.sort((t, e)=>dr(t, e)).filter((t, e, n)=>!e || 0 !== dr(t, n[e - 1]));
        const s = [];
        s.push(t139);
        for (const i of n38){
            const n = dr(i, t139), r = dr(i, e80);
            if (0 === n) // `notInValue` is the lower bound. We therefore need to raise the bound
            // to the next value.
            s[0] = t139.Le();
            else if (n > 0 && r < 0) // `notInValue` is in the middle of the range
            s.push(i), s.push(i.Le());
            else if (r > 0) break;
        }
        s.push(e80);
        const i9 = [];
        for(let t138 = 0; t138 < s.length; t138 += 2)i9.push(IDBKeyRange.bound([
            s[t138].indexId,
            this.uid,
            s[t138].arrayValue,
            s[t138].directionalValue,
            yr,
            []
        ], [
            s[t138 + 1].indexId,
            this.uid,
            s[t138 + 1].arrayValue,
            s[t138 + 1].directionalValue,
            yr,
            []
        ]));
        return i9;
    }
    getMinOffsetFromCollectionGroup(t, e) {
        return this.getFieldIndexes(t, e).next(Rr);
    }
    getMinOffset(t140, e81) {
        return Pt.mapArray(this.Ye(e81), (e)=>this.Xe(t140, e).next((t)=>t || L())).next(Rr);
    }
}
/**
 * Helper to get a typed SimpleDbStore for the collectionParents
 * document store.
 */ function Ir(t) {
    return Mi(t, "collectionParents");
}
/**
 * Helper to get a typed SimpleDbStore for the index entry object store.
 */ function Tr(t) {
    return Mi(t, "indexEntries");
}
/**
 * Helper to get a typed SimpleDbStore for the index configuration object store.
 */ function Er(t) {
    return Mi(t, "indexConfiguration");
}
/**
 * Helper to get a typed SimpleDbStore for the index state object store.
 */ function Ar(t) {
    return Mi(t, "indexState");
}
function Rr(t) {
    U(0 !== t.length);
    let e = t[0].indexState.offset, n = e.largestBatchId;
    for(let s = 1; s < t.length; s++){
        const i = t[s].indexState.offset;
        Et(i, e) < 0 && (e = i), n < i.largestBatchId && (n = i.largestBatchId);
    }
    return new Tt(e.readTime, e.documentKey, n);
}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const br = {
    didRun: !1,
    sequenceNumbersCollected: 0,
    targetsRemoved: 0,
    documentsRemoved: 0
};
class Pr {
    constructor(// When we attempt to collect, we will only do so if the cache size is greater than this
    // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
    t, // The percentage of sequence numbers that we will attempt to collect
    e, // A cap on the total number of sequence numbers that will be collected. This prevents
    // us from collecting a huge number of sequence numbers if the cache has grown very large.
    n){
        this.cacheSizeCollectionThreshold = t, this.percentileToCollect = e, this.maximumSequenceNumbersToCollect = n;
    }
    static withCacheSize(t) {
        return new Pr(t, Pr.DEFAULT_COLLECTION_PERCENTILE, Pr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Delete a mutation batch and the associated document mutations.
 * @returns A PersistencePromise of the document mutations that were removed.
 */ function vr(t, e, n39) {
    const s = t.store("mutations"), i = t.store("documentMutations"), r = [], o = IDBKeyRange.only(n39.batchId);
    let u = 0;
    const c = s.J({
        range: o
    }, (t, e, n)=>(u++, n.delete()));
    r.push(c.next(()=>{
        U(1 === u);
    }));
    const a = [];
    for (const t141 of n39.mutations){
        const s = _i(e, t141.key.path, n39.batchId);
        r.push(i.delete(s)), a.push(t141.key);
    }
    return Pt.waitFor(r).next(()=>a);
}
/**
 * Returns an approximate size for the given document.
 */ function Vr(t) {
    if (!t) return 0;
    let e;
    if (t.document) e = t.document;
    else if (t.unknownDocument) e = t.unknownDocument;
    else {
        if (!t.noDocument) throw L();
        e = t.noDocument;
    }
    return JSON.stringify(e).length;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** A mutation queue for a specific user, backed by IndexedDB. */ Pr.DEFAULT_COLLECTION_PERCENTILE = 10, Pr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, Pr.DEFAULT = new Pr(41943040, Pr.DEFAULT_COLLECTION_PERCENTILE, Pr.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), Pr.DISABLED = new Pr(-1, 0, 0);
class Sr {
    constructor(/**
     * The normalized userId (e.g. null UID => "" userId) used to store /
     * retrieve mutations.
     */ t, e, n, s){
        this.userId = t, this.wt = e, this.indexManager = n, this.referenceDelegate = s, /**
         * Caches the document keys for pending mutation batches. If the mutation
         * has been removed from IndexedDb, the cached value may continue to
         * be used to retrieve the batch's document keys. To remove a cached value
         * locally, `removeCachedMutationKeys()` should be invoked either directly
         * or through `removeMutationBatches()`.
         *
         * With multi-tab, when the primary client acknowledges or rejects a mutation,
         * this cache is used by secondary clients to invalidate the local
         * view of the documents that were previously affected by the mutation.
         */ // PORTING NOTE: Multi-tab only.
        this.gn = {};
    }
    /**
     * Creates a new mutation queue for the given user.
     * @param user - The user for which to create a mutation queue.
     * @param serializer - The serializer to use when persisting to IndexedDb.
     */ static se(t, e, n, s) {
        // TODO(mcg): Figure out what constraints there are on userIDs
        // In particular, are there any reserved characters? are empty ids allowed?
        // For the moment store these together in the same mutations table assuming
        // that empty userIDs aren't allowed.
        U("" !== t.uid);
        const i = t.isAuthenticated() ? t.uid : "";
        return new Sr(i, e, n, s);
    }
    checkEmpty(t) {
        let e = !0;
        const n = IDBKeyRange.bound([
            this.userId,
            Number.NEGATIVE_INFINITY
        ], [
            this.userId,
            Number.POSITIVE_INFINITY
        ]);
        return Cr(t).J({
            index: "userMutationsIndex",
            range: n
        }, (t, n, s)=>{
            e = !1, s.done();
        }).next(()=>e);
    }
    addMutationBatch(t142, e82, n40, s17) {
        const i10 = xr(t142), r = Cr(t142);
        // The IndexedDb implementation in Chrome (and Firefox) does not handle
        // compound indices that include auto-generated keys correctly. To ensure
        // that the index entry is added correctly in all browsers, we perform two
        // writes: The first write is used to retrieve the next auto-generated Batch
        // ID, and the second write populates the index and stores the actual
        // mutation batch.
        // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
        // We write an empty object to obtain key
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return r.add({}).next((o)=>{
            U("number" == typeof o);
            const u = new Fi(o, e82, n40, s17), c = function(t, e83, n) {
                const s = n.baseMutations.map((e)=>js(t.ne, e)), i = n.mutations.map((e)=>js(t.ne, e));
                return {
                    userId: e83,
                    batchId: n.batchId,
                    localWriteTimeMs: n.localWriteTime.toMillis(),
                    baseMutations: s,
                    mutations: i
                };
            }(this.wt, this.userId, u), a = [];
            let h = new Qt((t, e)=>it(t.canonicalString(), e.canonicalString()));
            for (const t143 of s17){
                const e = _i(this.userId, t143.key.path, o);
                h = h.add(t143.key.path.popLast()), a.push(r.put(c)), a.push(i10.put(e, wi));
            }
            return h.forEach((e)=>{
                a.push(this.indexManager.addToCollectionParentIndex(t142, e));
            }), t142.addOnCommittedListener(()=>{
                this.gn[o] = u.keys();
            }), Pt.waitFor(a).next(()=>u);
        });
    }
    lookupMutationBatch(t144, e) {
        return Cr(t144).get(e).next((t)=>t ? (U(t.userId === this.userId), Wi(this.wt, t)) : null);
    }
    /**
     * Returns the document keys for the mutation batch with the given batchId.
     * For primary clients, this method returns `null` after
     * `removeMutationBatches()` has been called. Secondary clients return a
     * cached result until `removeCachedMutationKeys()` is invoked.
     */ // PORTING NOTE: Multi-tab only.
    yn(t145, e) {
        return this.gn[e] ? Pt.resolve(this.gn[e]) : this.lookupMutationBatch(t145, e).next((t)=>{
            if (t) {
                const n = t.keys();
                return this.gn[e] = n, n;
            }
            return null;
        });
    }
    getNextMutationBatchAfterBatchId(t, e84) {
        const n = e84 + 1, s18 = IDBKeyRange.lowerBound([
            this.userId,
            n
        ]);
        let i = null;
        return Cr(t).J({
            index: "userMutationsIndex",
            range: s18
        }, (t, e, s)=>{
            e.userId === this.userId && (U(e.batchId >= n), i = Wi(this.wt, e)), s.done();
        }).next(()=>i);
    }
    getHighestUnacknowledgedBatchId(t) {
        const e85 = IDBKeyRange.upperBound([
            this.userId,
            Number.POSITIVE_INFINITY
        ]);
        let n = -1;
        return Cr(t).J({
            index: "userMutationsIndex",
            range: e85,
            reverse: !0
        }, (t, e, s)=>{
            n = e.batchId, s.done();
        }).next(()=>n);
    }
    getAllMutationBatches(t146) {
        const e = IDBKeyRange.bound([
            this.userId,
            -1
        ], [
            this.userId,
            Number.POSITIVE_INFINITY
        ]);
        return Cr(t146).K("userMutationsIndex", e).next((t147)=>t147.map((t)=>Wi(this.wt, t)));
    }
    getAllMutationBatchesAffectingDocumentKey(t148, e) {
        // Scan the document-mutation index starting with a prefix starting with
        // the given documentKey.
        const n41 = di(this.userId, e.path), s = IDBKeyRange.lowerBound(n41), i = [];
        return xr(t148).J({
            range: s
        }, (n, s, r)=>{
            const [o, u, c] = n, a = li(u);
            // Only consider rows matching exactly the specific key of
            // interest. Note that because we order by path first, and we
            // order terminators before path separators, we'll encounter all
            // the index rows for documentKey contiguously. In particular, all
            // the rows for documentKey will occur before any rows for
            // documents nested in a subcollection beneath documentKey so we
            // can stop as soon as we hit any such row.
            if (o === this.userId && e.path.isEqual(a)) // Look up the mutation batch in the store.
            return Cr(t148).get(c).next((t)=>{
                if (!t) throw L();
                U(t.userId === this.userId), i.push(Wi(this.wt, t));
            });
            r.done();
        }).next(()=>i);
    }
    getAllMutationBatchesAffectingDocumentKeys(t149, e86) {
        let n = new Qt(it);
        const s = [];
        return e86.forEach((e)=>{
            const i11 = di(this.userId, e.path), r2 = IDBKeyRange.lowerBound(i11), o2 = xr(t149).J({
                range: r2
            }, (t, s, i)=>{
                const [r, o, u] = t, c = li(o);
                // Only consider rows matching exactly the specific key of
                // interest. Note that because we order by path first, and we
                // order terminators before path separators, we'll encounter all
                // the index rows for documentKey contiguously. In particular, all
                // the rows for documentKey will occur before any rows for
                // documents nested in a subcollection beneath documentKey so we
                // can stop as soon as we hit any such row.
                r === this.userId && e.path.isEqual(c) ? n = n.add(u) : i.done();
            });
            s.push(o2);
        }), Pt.waitFor(s).next(()=>this.pn(t149, n));
    }
    getAllMutationBatchesAffectingQuery(t150, e) {
        const n = e.path, s = n.length + 1, i12 = di(this.userId, n), r3 = IDBKeyRange.lowerBound(i12);
        // Collect up unique batchIDs encountered during a scan of the index. Use a
        // SortedSet to accumulate batch IDs so they can be traversed in order in a
        // scan of the main table.
        let o = new Qt(it);
        return xr(t150).J({
            range: r3
        }, (t, e, i)=>{
            const [r, u, c] = t, a = li(u);
            r === this.userId && n.isPrefixOf(a) ? // Rows with document keys more than one segment longer than the
            // query path can't be matches. For example, a query on 'rooms'
            // can't match the document /rooms/abc/messages/xyx.
            // TODO(mcg): we'll need a different scanner when we implement
            // ancestor queries.
            a.length === s && (o = o.add(c)) : i.done();
        }).next(()=>this.pn(t150, o));
    }
    pn(t151, e87) {
        const n = [], s = [];
        // TODO(rockwood): Implement this using iterate.
        return e87.forEach((e)=>{
            s.push(Cr(t151).get(e).next((t)=>{
                if (null === t) throw L();
                U(t.userId === this.userId), n.push(Wi(this.wt, t));
            }));
        }), Pt.waitFor(s).next(()=>n);
    }
    removeMutationBatch(t, e88) {
        return vr(t.ee, this.userId, e88).next((n)=>(t.addOnCommittedListener(()=>{
                this.In(e88.batchId);
            }), Pt.forEach(n, (e)=>this.referenceDelegate.markPotentiallyOrphaned(t, e))));
    }
    /**
     * Clears the cached keys for a mutation batch. This method should be
     * called by secondary clients after they process mutation updates.
     *
     * Note that this method does not have to be called from primary clients as
     * the corresponding cache entries are cleared when an acknowledged or
     * rejected batch is removed from the mutation queue.
     */ // PORTING NOTE: Multi-tab only
    In(t) {
        delete this.gn[t];
    }
    performConsistencyCheck(t152) {
        return this.checkEmpty(t152).next((e89)=>{
            if (!e89) return Pt.resolve();
            // Verify that there are no entries in the documentMutations index if
            // the queue is empty.
            const n42 = IDBKeyRange.lowerBound([
                this.userId
            ]);
            const s = [];
            return xr(t152).J({
                range: n42
            }, (t, e, n)=>{
                if (t[0] === this.userId) {
                    const e = li(t[1]);
                    s.push(e);
                } else n.done();
            }).next(()=>{
                U(0 === s.length);
            });
        });
    }
    containsKey(t, e) {
        return Dr(t, this.userId, e);
    }
    // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
    /** Returns the mutation queue's metadata from IndexedDb. */ Tn(t153) {
        return Nr(t153).get(this.userId).next((t)=>t || {
                userId: this.userId,
                lastAcknowledgedBatchId: -1,
                lastStreamToken: ""
            });
    }
}
/**
 * @returns true if the mutation queue for the given user contains a pending
 *         mutation for the given key.
 */ function Dr(t154, e, n) {
    const s19 = di(e, n.path), i = s19[1], r4 = IDBKeyRange.lowerBound(s19);
    let o = !1;
    return xr(t154).J({
        range: r4,
        H: !0
    }, (t, n, s)=>{
        const [r, u, /*batchID*/ c] = t;
        r === e && u === i && (o = !0), s.done();
    }).next(()=>o);
}
/** Returns true if any mutation queue contains the given document. */ /**
 * Helper to get a typed SimpleDbStore for the mutations object store.
 */ function Cr(t) {
    return Mi(t, "mutations");
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */ function xr(t) {
    return Mi(t, "documentMutations");
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */ function Nr(t) {
    return Mi(t, "mutationQueues");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Offset to ensure non-overlapping target ids. */ /**
 * Generates monotonically increasing target IDs for sending targets to the
 * watch stream.
 *
 * The client constructs two generators, one for the target cache, and one for
 * for the sync engine (to generate limbo documents targets). These
 * generators produce non-overlapping IDs (by using even and odd IDs
 * respectively).
 *
 * By separating the target ID space, the query cache can generate target IDs
 * that persist across client restarts, while sync engine can independently
 * generate in-memory target IDs that are transient and can be reused after a
 * restart.
 */ class kr {
    constructor(t){
        this.En = t;
    }
    next() {
        return this.En += 2, this.En;
    }
    static An() {
        // The target cache generator must return '2' in its first call to `next()`
        // as there is no differentiation in the protocol layer between an unset
        // number and the number '0'. If we were to sent a target with target ID
        // '0', the backend would consider it unset and replace it with its own ID.
        return new kr(0);
    }
    static Rn() {
        // Sync engine assigns target IDs for limbo document detection.
        return new kr(-1);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Or {
    constructor(t, e){
        this.referenceDelegate = t, this.wt = e;
    }
    // PORTING NOTE: We don't cache global metadata for the target cache, since
    // some of it (in particular `highestTargetId`) can be modified by secondary
    // tabs. We could perhaps be more granular (and e.g. still cache
    // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
    // to IndexedDb whenever we need to read metadata. We can revisit if it turns
    // out to have a meaningful performance impact.
    allocateTargetId(t) {
        return this.bn(t).next((e)=>{
            const n = new kr(e.highestTargetId);
            return e.highestTargetId = n.next(), this.Pn(t, e).next(()=>e.highestTargetId);
        });
    }
    getLastRemoteSnapshotVersion(t155) {
        return this.bn(t155).next((t)=>ct.fromTimestamp(new ut(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds)));
    }
    getHighestSequenceNumber(t156) {
        return this.bn(t156).next((t)=>t.highestListenSequenceNumber);
    }
    setTargetsMetadata(t, e, n) {
        return this.bn(t).next((s)=>(s.highestListenSequenceNumber = e, n && (s.lastRemoteSnapshotVersion = n.toTimestamp()), e > s.highestListenSequenceNumber && (s.highestListenSequenceNumber = e), this.Pn(t, s)));
    }
    addTargetData(t, e) {
        return this.vn(t, e).next(()=>this.bn(t).next((n)=>(n.targetCount += 1, this.Vn(e, n), this.Pn(t, n))));
    }
    updateTargetData(t, e) {
        return this.vn(t, e);
    }
    removeTargetData(t, e90) {
        return this.removeMatchingKeysForTargetId(t, e90.targetId).next(()=>Mr(t).delete(e90.targetId)).next(()=>this.bn(t)).next((e)=>(U(e.targetCount > 0), e.targetCount -= 1, this.Pn(t, e)));
    }
    /**
     * Drops any targets with sequence number less than or equal to the upper bound, excepting those
     * present in `activeTargetIds`. Document associations for the removed targets are also removed.
     * Returns the number of targets removed.
     */ removeTargets(t, e, n) {
        let s = 0;
        const i = [];
        return Mr(t).J((r, o)=>{
            const u = zi(o);
            u.sequenceNumber <= e && null === n.get(u.targetId) && (s++, i.push(this.removeTargetData(t, u)));
        }).next(()=>Pt.waitFor(i)).next(()=>s);
    }
    /**
     * Call provided function with each `TargetData` that we have cached.
     */ forEachTarget(t, e) {
        return Mr(t).J((t, n)=>{
            const s = zi(n);
            e(s);
        });
    }
    bn(t157) {
        return Fr(t157).get("targetGlobalKey").next((t)=>(U(null !== t), t));
    }
    Pn(t, e) {
        return Fr(t).put("targetGlobalKey", e);
    }
    vn(t, e) {
        return Mr(t).put(Hi(this.wt, e));
    }
    /**
     * In-place updates the provided metadata to account for values in the given
     * TargetData. Saving is done separately. Returns true if there were any
     * changes to the metadata.
     */ Vn(t, e) {
        let n = !1;
        return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, n = !0), n;
    }
    getTargetCount(t158) {
        return this.bn(t158).next((t)=>t.targetCount);
    }
    getTargetData(t, e) {
        // Iterating by the canonicalId may yield more than one result because
        // canonicalId values are not required to be unique per target. This query
        // depends on the queryTargets index to be efficient.
        const n43 = Oe(e), s20 = IDBKeyRange.bound([
            n43,
            Number.NEGATIVE_INFINITY
        ], [
            n43,
            Number.POSITIVE_INFINITY
        ]);
        let i = null;
        return Mr(t).J({
            range: s20,
            index: "queryTargetsIndex"
        }, (t, n, s)=>{
            const r = zi(n);
            // After finding a potential match, check that the target is
            // actually equal to the requested target.
            Fe(e, r.target) && (i = r, s.done());
        }).next(()=>i);
    }
    addMatchingKeys(t, e91, n) {
        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
        // IndexedDb.
        const s = [], i = $r(t);
        return e91.forEach((e)=>{
            const r = ci(e.path);
            s.push(i.put({
                targetId: n,
                path: r
            })), s.push(this.referenceDelegate.addReference(t, n, e));
        }), Pt.waitFor(s);
    }
    removeMatchingKeys(t, e92, n) {
        // PORTING NOTE: The reverse index (documentsTargets) is maintained by
        // IndexedDb.
        const s = $r(t);
        return Pt.forEach(e92, (e)=>{
            const i = ci(e.path);
            return Pt.waitFor([
                s.delete([
                    n,
                    i
                ]),
                this.referenceDelegate.removeReference(t, n, e)
            ]);
        });
    }
    removeMatchingKeysForTargetId(t, e) {
        const n = $r(t), s = IDBKeyRange.bound([
            e
        ], [
            e + 1
        ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0);
        return n.delete(s);
    }
    getMatchingKeysForTargetId(t159, e) {
        const n = IDBKeyRange.bound([
            e
        ], [
            e + 1
        ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0), s21 = $r(t159);
        let i = ws();
        return s21.J({
            range: n,
            H: !0
        }, (t, e, n)=>{
            const s = li(t[1]), r = new dt(s);
            i = i.add(r);
        }).next(()=>i);
    }
    containsKey(t160, e) {
        const n = ci(e.path), s22 = IDBKeyRange.bound([
            n
        ], [
            ot(n)
        ], /*lowerOpen=*/ !1, /*upperOpen=*/ !0);
        let i = 0;
        return $r(t160).J({
            index: "documentTargetsIndex",
            H: !0,
            range: s22
        }, ([t, e], n, s)=>{
            // Having a sentinel row for a document does not count as containing that document;
            // For the target cache, containing the document means the document is part of some
            // target.
            0 !== t && (i++, s.done());
        }).next(()=>i > 0);
    }
    /**
     * Looks up a TargetData entry by target ID.
     *
     * @param targetId - The target ID of the TargetData entry to look up.
     * @returns The cached TargetData entry, or null if the cache has no entry for
     * the target.
     */ // PORTING NOTE: Multi-tab only.
    te(t161, e) {
        return Mr(t161).get(e).next((t)=>t ? zi(t) : null);
    }
}
/**
 * Helper to get a typed SimpleDbStore for the queries object store.
 */ function Mr(t) {
    return Mi(t, "targets");
}
/**
 * Helper to get a typed SimpleDbStore for the target globals object store.
 */ function Fr(t) {
    return Mi(t, "targetGlobal");
}
/**
 * Helper to get a typed SimpleDbStore for the document target object store.
 */ function $r(t) {
    return Mi(t, "targetDocuments");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function Br([t, e], [n, s]) {
    const i = it(t, n);
    return 0 === i ? it(e, s) : i;
}
/**
 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
 * lowest n values passed to `addElement`, and finally reports the largest of
 * them in `maxValue`.
 */ class Lr {
    constructor(t){
        this.Sn = t, this.buffer = new Qt(Br), this.Dn = 0;
    }
    Cn() {
        return ++this.Dn;
    }
    xn(t) {
        const e = [
            t,
            this.Cn()
        ];
        if (this.buffer.size < this.Sn) this.buffer = this.buffer.add(e);
        else {
            const t = this.buffer.last();
            Br(e, t) < 0 && (this.buffer = this.buffer.delete(t).add(e));
        }
    }
    get maxValue() {
        // Guaranteed to be non-empty. If we decide we are not collecting any
        // sequence numbers, nthSequenceNumber below short-circuits. If we have
        // decided that we are collecting n sequence numbers, it's because n is some
        // percentage of the existing sequence numbers. That means we should never
        // be in a situation where we are collecting sequence numbers but don't
        // actually have any.
        return this.buffer.last()[0];
    }
}
/**
 * This class is responsible for the scheduling of LRU garbage collection. It handles checking
 * whether or not GC is enabled, as well as which delay to use before the next run.
 */ class Ur {
    constructor(t, e, n){
        this.garbageCollector = t, this.asyncQueue = e, this.localStore = n, this.Nn = null;
    }
    start() {
        -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.kn(6e4);
    }
    stop() {
        this.Nn && (this.Nn.cancel(), this.Nn = null);
    }
    get started() {
        return null !== this.Nn;
    }
    kn(t162) {
        M("LruGarbageCollector", `Garbage collection scheduled in ${t162}ms`), this.Nn = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection" /* LruGarbageCollection */ , t162, async ()=>{
            this.Nn = null;
            try {
                await this.localStore.collectGarbage(this.garbageCollector);
            } catch (t) {
                Ct(t) ? M("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", t) : await bt(t);
            }
            await this.kn(3e5);
        });
    }
}
/** Implements the steps for LRU garbage collection. */ class qr {
    constructor(t, e){
        this.On = t, this.params = e;
    }
    calculateTargetCount(t163, e) {
        return this.On.Mn(t163).next((t)=>Math.floor(e / 100 * t));
    }
    nthSequenceNumber(t164, e) {
        if (0 === e) return Pt.resolve($t.ot);
        const n = new Lr(e);
        return this.On.forEachTarget(t164, (t)=>n.xn(t.sequenceNumber)).next(()=>this.On.Fn(t164, (t)=>n.xn(t))).next(()=>n.maxValue);
    }
    removeTargets(t, e, n) {
        return this.On.removeTargets(t, e, n);
    }
    removeOrphanedDocuments(t, e) {
        return this.On.removeOrphanedDocuments(t, e);
    }
    collect(t, e) {
        return -1 === this.params.cacheSizeCollectionThreshold ? (M("LruGarbageCollector", "Garbage collection skipped; disabled"), Pt.resolve(br)) : this.getCacheSize(t).next((n)=>n < this.params.cacheSizeCollectionThreshold ? (M("LruGarbageCollector", `Garbage collection skipped; Cache size ${n} is lower than threshold ${this.params.cacheSizeCollectionThreshold}`), br) : this.$n(t, e));
    }
    getCacheSize(t) {
        return this.On.getCacheSize(t);
    }
    $n(t165, e93) {
        let n, s23, i, r, o, c, a;
        const h = Date.now();
        return this.calculateTargetCount(t165, this.params.percentileToCollect).next((e)=>// Cap at the configured max
            (e > this.params.maximumSequenceNumbersToCollect ? (M("LruGarbageCollector", `Capping sequence numbers to collect down to the maximum of ${this.params.maximumSequenceNumbersToCollect} from ${e}`), s23 = this.params.maximumSequenceNumbersToCollect) : s23 = e, r = Date.now(), this.nthSequenceNumber(t165, s23))).next((s)=>(n = s, o = Date.now(), this.removeTargets(t165, n, e93))).next((e)=>(i = e, c = Date.now(), this.removeOrphanedDocuments(t165, n))).next((t)=>{
            if (a = Date.now(), k() <= (0, _logger.LogLevel).DEBUG) M("LruGarbageCollector", `LRU Garbage Collection\n\tCounted targets in ${r - h}ms\n\tDetermined least recently used ${s23} in ` + (o - r) + "ms\n" + `\tRemoved ${i} targets in ` + (c - o) + "ms\n" + `\tRemoved ${t} documents in ` + (a - c) + "ms\n" + `Total Duration: ${a - h}ms`);
            return Pt.resolve({
                didRun: !0,
                sequenceNumbersCollected: s23,
                targetsRemoved: i,
                documentsRemoved: t
            });
        });
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Provides LRU functionality for IndexedDB persistence. */ class Kr {
    constructor(t166, e94){
        this.db = t166, this.garbageCollector = function(t, e) {
            return new qr(t, e);
        }(this, e94);
    }
    Mn(t167) {
        const e95 = this.Bn(t167);
        return this.db.getTargetCache().getTargetCount(t167).next((t)=>e95.next((e)=>t + e));
    }
    Bn(t) {
        let e = 0;
        return this.Fn(t, (t)=>{
            e++;
        }).next(()=>e);
    }
    forEachTarget(t, e) {
        return this.db.getTargetCache().forEachTarget(t, e);
    }
    Fn(t, e) {
        return this.Ln(t, (t, n)=>e(n));
    }
    addReference(t, e, n) {
        return Gr(t, n);
    }
    removeReference(t, e, n) {
        return Gr(t, n);
    }
    removeTargets(t, e, n) {
        return this.db.getTargetCache().removeTargets(t, e, n);
    }
    markPotentiallyOrphaned(t, e) {
        return Gr(t, e);
    }
    /**
     * Returns true if anything would prevent this document from being garbage
     * collected, given that the document in question is not present in any
     * targets and has a sequence number less than or equal to the upper bound for
     * the collection run.
     */ Un(t168, e96) {
        return function(t169, e) {
            let n = !1;
            return Nr(t169).Y((s)=>Dr(t169, s, e).next((t)=>(t && (n = !0), Pt.resolve(!t)))).next(()=>n);
        }(t168, e96);
    }
    removeOrphanedDocuments(t, e97) {
        const n = this.db.getRemoteDocumentCache().newChangeBuffer(), s = [];
        let i = 0;
        return this.Ln(t, (r, o)=>{
            if (o <= e97) {
                const e98 = this.Un(t, r).next((e)=>{
                    if (!e) // Our size accounting requires us to read all documents before
                    // removing them.
                    return i++, n.getEntry(t, r).next(()=>(n.removeEntry(r, ct.min()), $r(t).delete([
                            0,
                            ci(r.path)
                        ])));
                });
                s.push(e98);
            }
        }).next(()=>Pt.waitFor(s)).next(()=>n.apply(t)).next(()=>i);
    }
    removeTarget(t, e) {
        const n = e.withSequenceNumber(t.currentSequenceNumber);
        return this.db.getTargetCache().updateTargetData(t, n);
    }
    updateLimboDocument(t, e) {
        return Gr(t, e);
    }
    /**
     * Call provided function for each document in the cache that is 'orphaned'. Orphaned
     * means not a part of any target, so the only entry in the target-document index for
     * that document will be the sentinel row (targetId 0), which will also have the sequence
     * number for the last time the document was accessed.
     */ Ln(t170, e) {
        const n = $r(t170);
        let s, i = $t.ot;
        return n.J({
            index: "documentTargetsIndex"
        }, ([t, n], { path: r , sequenceNumber: o  })=>{
            0 === t ? // if nextToReport is valid, report it, this is a new key so the
            // last one must not be a member of any targets.
            (i !== $t.ot && e(new dt(li(s)), i), // set nextToReport to be this sequence number. It's the next one we
            // might report, if we don't find any targets for this document.
            // Note that the sequence number must be defined when the targetId
            // is 0.
            i = o, s = r) : // set nextToReport to be invalid, we know we don't need to report
            // this one since we found a target for it.
            i = $t.ot;
        }).next(()=>{
            // Since we report sequence numbers after getting to the next key, we
            // need to check if the last key we iterated over was an orphaned
            // document and report it.
            i !== $t.ot && e(new dt(li(s)), i);
        });
    }
    getCacheSize(t) {
        return this.db.getRemoteDocumentCache().getSize(t);
    }
}
function Gr(t171, e100) {
    return $r(t171).put(/**
 * @returns A value suitable for writing a sentinel row in the target-document
 * store.
 */ function(t, e) {
        return {
            targetId: 0,
            path: ci(t.path),
            sequenceNumber: e
        };
    }(e100, t171.currentSequenceNumber));
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory buffer of entries to be written to a RemoteDocumentCache.
 * It can be used to batch up a set of changes to be written to the cache, but
 * additionally supports reading entries back with the `getEntry()` method,
 * falling back to the underlying RemoteDocumentCache if no entry is
 * buffered.
 *
 * Entries added to the cache *must* be read first. This is to facilitate
 * calculating the size delta of the pending changes.
 *
 * PORTING NOTE: This class was implemented then removed from other platforms.
 * If byte-counting ends up being needed on the other platforms, consider
 * porting this class as part of that implementation work.
 */ class Qr {
    constructor(){
        // A mapping of document key to the new cache entry that should be written.
        this.changes = new is((t)=>t.toString(), (t, e)=>t.isEqual(e)), this.changesApplied = !1;
    }
    /**
     * Buffers a `RemoteDocumentCache.addEntry()` call.
     *
     * You can only modify documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */ addEntry(t) {
        this.assertNotApplied(), this.changes.set(t.key, t);
    }
    /**
     * Buffers a `RemoteDocumentCache.removeEntry()` call.
     *
     * You can only remove documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */ removeEntry(t, e) {
        this.assertNotApplied(), this.changes.set(t, xe.newInvalidDocument(t).setReadTime(e));
    }
    /**
     * Looks up an entry in the cache. The buffered changes will first be checked,
     * and if no buffered change applies, this will forward to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction - The transaction in which to perform any persistence
     *     operations.
     * @param documentKey - The key of the entry to look up.
     * @returns The cached document or an invalid document if we have nothing
     * cached.
     */ getEntry(t, e) {
        this.assertNotApplied();
        const n = this.changes.get(e);
        return void 0 !== n ? Pt.resolve(n) : this.getFromCache(t, e);
    }
    /**
     * Looks up several entries in the cache, forwarding to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction - The transaction in which to perform any persistence
     *     operations.
     * @param documentKeys - The keys of the entries to look up.
     * @returns A map of cached documents, indexed by key. If an entry cannot be
     *     found, the corresponding key will be mapped to an invalid document.
     */ getEntries(t, e) {
        return this.getAllFromCache(t, e);
    }
    /**
     * Applies buffered changes to the underlying RemoteDocumentCache, using
     * the provided transaction.
     */ apply(t) {
        return this.assertNotApplied(), this.changesApplied = !0, this.applyChanges(t);
    }
    /** Helper to assert this.changes is not null  */ assertNotApplied() {}
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The RemoteDocumentCache for IndexedDb. To construct, invoke
 * `newIndexedDbRemoteDocumentCache()`.
 */ class jr {
    constructor(t){
        this.wt = t;
    }
    setIndexManager(t) {
        this.indexManager = t;
    }
    /**
     * Adds the supplied entries to the cache.
     *
     * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */ addEntry(t, e, n) {
        return Jr(t).put(n);
    }
    /**
     * Removes a document from the cache.
     *
     * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */ removeEntry(t172, e101, n44) {
        return Jr(t172).delete(/**
 * Returns a key that can be used for document lookups via the primary key of
 * the DbRemoteDocument object store.
 */ function(t, e) {
            const n = t.path.toArray();
            return [
                /* prefix path */ n.slice(0, n.length - 2),
                /* collection id */ n[n.length - 2],
                Gi(e),
                /* document id */ n[n.length - 1]
            ];
        }(e101, n44));
    }
    /**
     * Updates the current cache size.
     *
     * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
     * cache's metadata.
     */ updateMetadata(t, e) {
        return this.getMetadata(t).next((n)=>(n.byteSize += e, this.qn(t, n)));
    }
    getEntry(t, e) {
        let n = xe.newInvalidDocument(e);
        return Jr(t).J({
            index: "documentKeyIndex",
            range: IDBKeyRange.only(Yr(e))
        }, (t, s)=>{
            n = this.Kn(e, s);
        }).next(()=>n);
    }
    /**
     * Looks up an entry in the cache.
     *
     * @param documentKey - The key of the entry to look up.
     * @returns The cached document entry and its size.
     */ Gn(t, e) {
        let n = {
            size: 0,
            document: xe.newInvalidDocument(e)
        };
        return Jr(t).J({
            index: "documentKeyIndex",
            range: IDBKeyRange.only(Yr(e))
        }, (t, s)=>{
            n = {
                document: this.Kn(e, s),
                size: Vr(s)
            };
        }).next(()=>n);
    }
    getEntries(t173, e102) {
        let n = os();
        return this.Qn(t173, e102, (t, e)=>{
            const s = this.Kn(t, e);
            n = n.insert(t, s);
        }).next(()=>n);
    }
    /**
     * Looks up several entries in the cache.
     *
     * @param documentKeys - The set of keys entries to look up.
     * @returns A map of documents indexed by key and a map of sizes indexed by
     *     key (zero if the document does not exist).
     */ jn(t174, e103) {
        let n = os(), s = new qt(dt.comparator);
        return this.Qn(t174, e103, (t, e)=>{
            const i = this.Kn(t, e);
            n = n.insert(t, i), s = s.insert(t, Vr(e));
        }).next(()=>({
                documents: n,
                Wn: s
            }));
    }
    Qn(t175, e104, n) {
        if (e104.isEmpty()) return Pt.resolve();
        let s24 = new Qt(Zr);
        e104.forEach((t)=>s24 = s24.add(t));
        const i13 = IDBKeyRange.bound(Yr(s24.first()), Yr(s24.last())), r = s24.getIterator();
        let o = r.getNext();
        return Jr(t175).J({
            index: "documentKeyIndex",
            range: i13
        }, (t, e, s)=>{
            const i = dt.fromSegments([
                ...e.prefixPath,
                e.collectionGroup,
                e.documentId
            ]);
            // Go through keys not found in cache.
            for(; o && Zr(o, i) < 0;)n(o, null), o = r.getNext();
            o && o.isEqual(i) && // Key found in cache.
            (n(o, e), o = r.hasNext() ? r.getNext() : null), // Skip to the next key (if there is one).
            o ? s.q(Yr(o)) : s.done();
        }).next(()=>{
            // The rest of the keys are not in the cache. One case where `iterate`
            // above won't go through them is when the cache is empty.
            for(; o;)n(o, null), o = r.hasNext() ? r.getNext() : null;
        });
    }
    getAllFromCollection(t176, e105, n45) {
        const s = [
            e105.popLast().toArray(),
            e105.lastSegment(),
            Gi(n45.readTime),
            n45.documentKey.path.isEmpty() ? "" : n45.documentKey.path.lastSegment()
        ], i = [
            e105.popLast().toArray(),
            e105.lastSegment(),
            [
                Number.MAX_SAFE_INTEGER,
                Number.MAX_SAFE_INTEGER
            ],
            ""
        ];
        return Jr(t176).K(IDBKeyRange.bound(s, i, !0)).next((t)=>{
            let e = os();
            for (const n of t){
                const t = this.Kn(dt.fromSegments(n.prefixPath.concat(n.collectionGroup, n.documentId)), n);
                e = e.insert(t.key, t);
            }
            return e;
        });
    }
    getAllFromCollectionGroup(t, e106, n46, s) {
        let i = os();
        const r5 = Xr(e106, n46), o = Xr(e106, Tt.max());
        return Jr(t).J({
            index: "collectionGroupIndex",
            range: IDBKeyRange.bound(r5, o, !0)
        }, (t, e, n)=>{
            const r = this.Kn(dt.fromSegments(e.prefixPath.concat(e.collectionGroup, e.documentId)), e);
            i = i.insert(r.key, r), i.size === s && n.done();
        }).next(()=>i);
    }
    newChangeBuffer(t) {
        return new zr(this, !!t && t.trackRemovals);
    }
    getSize(t177) {
        return this.getMetadata(t177).next((t)=>t.byteSize);
    }
    getMetadata(t178) {
        return Hr(t178).get("remoteDocumentGlobalKey").next((t)=>(U(!!t), t));
    }
    qn(t, e) {
        return Hr(t).put("remoteDocumentGlobalKey", e);
    }
    /**
     * Decodes `dbRemoteDoc` and returns the document (or an invalid document if
     * the document corresponds to the format used for sentinel deletes).
     */ Kn(t, e) {
        if (e) {
            const t = qi(this.wt, e);
            // Whether the document is a sentinel removal and should only be used in the
            // `getNewDocumentChanges()`
            if (!(t.isNoDocument() && t.version.isEqual(ct.min()))) return t;
        }
        return xe.newInvalidDocument(t);
    }
}
/** Creates a new IndexedDbRemoteDocumentCache. */ function Wr(t) {
    return new jr(t);
}
/**
 * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
 *
 * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
 * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
 * when we apply the changes.
 */ class zr extends Qr {
    /**
     * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
     * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
     * `getNewDocumentChanges()`.
     */ constructor(t179, e107){
        super(), this.zn = t179, this.trackRemovals = e107, // A map of document sizes and read times prior to applying the changes in
        // this buffer.
        this.Hn = new is((t)=>t.toString(), (t, e)=>t.isEqual(e));
    }
    applyChanges(t180) {
        const e108 = [];
        let n47 = 0, s = new Qt((t, e)=>it(t.canonicalString(), e.canonicalString()));
        return this.changes.forEach((i, r)=>{
            const o = this.Hn.get(i);
            if (e108.push(this.zn.removeEntry(t180, i, o.readTime)), r.isValidDocument()) {
                const u = Ki(this.zn.wt, r);
                s = s.add(i.path.popLast());
                const c = Vr(u);
                n47 += c - o.size, e108.push(this.zn.addEntry(t180, i, u));
            } else if (n47 -= o.size, this.trackRemovals) {
                // In order to track removals, we store a "sentinel delete" in the
                // RemoteDocumentCache. This entry is represented by a NoDocument
                // with a version of 0 and ignored by `maybeDecodeDocument()` but
                // preserved in `getNewDocumentChanges()`.
                const n = Ki(this.zn.wt, r.convertToNoDocument(ct.min()));
                e108.push(this.zn.addEntry(t180, i, n));
            }
        }), s.forEach((n)=>{
            e108.push(this.zn.indexManager.addToCollectionParentIndex(t180, n));
        }), e108.push(this.zn.updateMetadata(t180, n47)), Pt.waitFor(e108);
    }
    getFromCache(t181, e) {
        // Record the size of everything we load from the cache so we can compute a delta later.
        return this.zn.Gn(t181, e).next((t)=>(this.Hn.set(e, {
                size: t.size,
                readTime: t.document.readTime
            }), t.document));
    }
    getAllFromCache(t182, e109) {
        // Record the size of everything we load from the cache so we can compute
        // a delta later.
        return this.zn.jn(t182, e109).next(({ documents: t , Wn: e110  })=>// Note: `getAllFromCache` returns two maps instead of a single map from
            // keys to `DocumentSizeEntry`s. This is to allow returning the
            // `MutableDocumentMap` directly, without a conversion.
            (e110.forEach((e, n)=>{
                this.Hn.set(e, {
                    size: n,
                    readTime: t.get(e).readTime
                });
            }), t));
    }
}
function Hr(t) {
    return Mi(t, "remoteDocumentGlobal");
}
/**
 * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
 */ function Jr(t) {
    return Mi(t, "remoteDocumentsV14");
}
/**
 * Returns a key that can be used for document lookups on the
 * `DbRemoteDocumentDocumentKeyIndex` index.
 */ function Yr(t) {
    const e = t.path.toArray();
    return [
        /* prefix path */ e.slice(0, e.length - 2),
        /* collection id */ e[e.length - 2],
        /* document id */ e[e.length - 1]
    ];
}
function Xr(t, e) {
    const n = e.documentKey.path.toArray();
    return [
        /* collection id */ t,
        Gi(e.readTime),
        /* prefix path */ n.slice(0, n.length - 2),
        /* document id */ n.length > 0 ? n[n.length - 1] : ""
    ];
}
/**
 * Comparator that compares document keys according to the primary key sorting
 * used by the `DbRemoteDocumentDocument` store (by prefix path, collection id
 * and then document ID).
 *
 * Visible for testing.
 */ function Zr(t, e) {
    const n = t.path.toArray(), s = e.path.toArray();
    // The ordering is based on https://chromium.googlesource.com/chromium/blink/+/fe5c21fef94dae71c1c3344775b8d8a7f7e6d9ec/Source/modules/indexeddb/IDBKey.cpp#74
    let i = 0;
    for(let t183 = 0; t183 < n.length - 2 && t183 < s.length - 2; ++t183)if (i = it(n[t183], s[t183]), i) return i;
    return i = it(n.length, s.length), i || (i = it(n[n.length - 2], s[s.length - 2]), i || it(n[n.length - 1], s[s.length - 1]));
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents a local view (overlay) of a document, and the fields that are
 * locally mutated.
 */ class to {
    constructor(t, /**
     * The fields that are locally mutated by patch mutations. If the overlayed
     * document is from set or delete mutations, this returns null.
     */ e){
        this.overlayedDocument = t, this.mutatedFields = e;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A readonly view of the local state of all documents we're tracking (i.e. we
 * have a cached version in remoteDocumentCache or local mutations for the
 * document). The view is computed by applying the mutations in the
 * MutationQueue to the RemoteDocumentCache.
 */ class eo {
    constructor(t, e, n, s){
        this.remoteDocumentCache = t, this.mutationQueue = e, this.documentOverlayCache = n, this.indexManager = s;
    }
    /**
     * Get the local view of the document identified by `key`.
     *
     * @returns Local view of the document or null if we don't have any cached
     * state for it.
     */ getDocument(t184, e) {
        let n = null;
        return this.documentOverlayCache.getOverlay(t184, e).next((s)=>(n = s, this.getBaseDocument(t184, e, n))).next((t)=>(null !== n && Kn(n.mutation, t, zt.empty(), ut.now()), t));
    }
    /**
     * Gets the local view of the documents identified by `keys`.
     *
     * If we don't have cached state for a document in `keys`, a NoDocument will
     * be stored for that key in the resulting set.
     */ getDocuments(t, e111) {
        return this.remoteDocumentCache.getEntries(t, e111).next((e)=>this.getLocalViewOfDocuments(t, e, ws()).next(()=>e));
    }
    /**
     * Similar to `getDocuments`, but creates the local view from the given
     * `baseDocs` without retrieving documents from the local store.
     *
     * @param transaction - The transaction this operation is scoped to.
     * @param docs - The documents to apply local mutations to get the local views.
     * @param existenceStateChanged - The set of document keys whose existence state
     *   is changed. This is useful to determine if some documents overlay needs
     *   to be recalculated.
     */ getLocalViewOfDocuments(t185, e112, n48 = ws()) {
        const s = hs();
        return this.populateOverlays(t185, s, e112).next(()=>this.computeViews(t185, e112, s, n48).next((t186)=>{
                let e = cs();
                return t186.forEach((t, n)=>{
                    e = e.insert(t, n.overlayedDocument);
                }), e;
            }));
    }
    /**
     * Gets the overlayed documents for the given document map, which will include
     * the local view of those documents and a `FieldMask` indicating which fields
     * are mutated locally, `null` if overlay is a Set or Delete mutation.
     */ getOverlayedDocuments(t, e) {
        const n = hs();
        return this.populateOverlays(t, n, e).next(()=>this.computeViews(t, e, n, ws()));
    }
    /**
     * Fetches the overlays for {@code docs} and adds them to provided overlay map
     * if the map does not already contain an entry for the given document key.
     */ populateOverlays(t187, e, n49) {
        const s = [];
        return n49.forEach((t)=>{
            e.has(t) || s.push(t);
        }), this.documentOverlayCache.getOverlays(t187, s).next((t188)=>{
            t188.forEach((t, n)=>{
                e.set(t, n);
            });
        });
    }
    /**
     * Computes the local view for the given documents.
     *
     * @param docs - The documents to compute views for. It also has the base
     *   version of the documents.
     * @param overlays - The overlays that need to be applied to the given base
     *   version of the documents.
     * @param existenceStateChanged - A set of documents whose existence states
     *   might have changed. This is used to determine if we need to re-calculate
     *   overlays from mutation queues.
     * @return A map represents the local documents view.
     */ computeViews(t189, e113, n50, s) {
        let i = os();
        const r = fs(), o3 = fs();
        return e113.forEach((t, e)=>{
            const o = n50.get(e.key);
            // Recalculate an overlay if the document's existence state changed due to
            // a remote event *and* the overlay is a PatchMutation. This is because
            // document existence state can change if some patch mutation's
            // preconditions are met.
            // NOTE: we recalculate when `overlay` is undefined as well, because there
            // might be a patch mutation whose precondition does not match before the
            // change (hence overlay is undefined), but would now match.
            s.has(e.key) && (void 0 === o || o.mutation instanceof Wn) ? i = i.insert(e.key, e) : void 0 !== o && (r.set(e.key, o.mutation.getFieldMask()), Kn(o.mutation, e, o.mutation.getFieldMask(), ut.now()));
        }), this.recalculateAndSaveOverlays(t189, i).next((t190)=>(t190.forEach((t, e)=>r.set(t, e)), e113.forEach((t, e)=>{
                var n;
                return o3.set(t, new to(e, null !== (n = r.get(t)) && void 0 !== n ? n : null));
            }), o3));
    }
    recalculateAndSaveOverlays(t191, e114) {
        const n = fs();
        // A reverse lookup map from batch id to the documents within that batch.
        let s25 = new qt((t, e)=>t - e), i14 = ws();
        return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(t191, e114).next((t192)=>{
            for (const i of t192)i.keys().forEach((t)=>{
                const r = e114.get(t);
                if (null === r) return;
                let o = n.get(t) || zt.empty();
                o = i.applyToLocalView(r, o), n.set(t, o);
                const u = (s25.get(i.batchId) || ws()).add(t);
                s25 = s25.insert(i.batchId, u);
            });
        }).next(()=>{
            const r = [], o = s25.getReverseIterator();
            // Iterate in descending order of batch IDs, and skip documents that are
            // already saved.
            for(; o.hasNext();){
                const s26 = o.getNext(), u = s26.key, c = s26.value, a = ls();
                c.forEach((t)=>{
                    if (!i14.has(t)) {
                        const s = Un(e114.get(t), n.get(t));
                        null !== s && a.set(t, s), i14 = i14.add(t);
                    }
                }), r.push(this.documentOverlayCache.saveOverlays(t191, u, a));
            }
            return Pt.waitFor(r);
        }).next(()=>n);
    }
    /**
     * Recalculates overlays by reading the documents from remote document cache
     * first, and saves them after they are calculated.
     */ recalculateAndSaveOverlaysForDocumentKeys(t, e115) {
        return this.remoteDocumentCache.getEntries(t, e115).next((e)=>this.recalculateAndSaveOverlays(t, e));
    }
    /**
     * Performs a query against the local view of all documents.
     *
     * @param transaction - The persistence transaction.
     * @param query - The query to match documents against.
     * @param offset - Read time and key to start scanning by (exclusive).
     */ getDocumentsMatchingQuery(t193, e, n) {
        /**
 * Returns whether the query matches a single document by path (rather than a
 * collection).
 */ return function(t) {
            return dt.isDocumentKey(t.path) && null === t.collectionGroup && 0 === t.filters.length;
        }(e) ? this.getDocumentsMatchingDocumentQuery(t193, e.path) : an(e) ? this.getDocumentsMatchingCollectionGroupQuery(t193, e, n) : this.getDocumentsMatchingCollectionQuery(t193, e, n);
    }
    /**
     * Given a collection group, returns the next documents that follow the provided offset, along
     * with an updated batch ID.
     *
     * <p>The documents returned by this method are ordered by remote version from the provided
     * offset. If there are no more remote documents after the provided offset, documents with
     * mutations in order of batch id from the offset are returned. Since all documents in a batch are
     * returned together, the total number of documents returned can exceed {@code count}.
     *
     * @param transaction
     * @param collectionGroup The collection group for the documents.
     * @param offset The offset to index into.
     * @param count The number of documents to return
     * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.
     */ getNextDocuments(t194, e116, n51, s) {
        return this.remoteDocumentCache.getAllFromCollectionGroup(t194, e116, n51, s).next((i)=>{
            const r = s - i.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(t194, e116, n51.largestBatchId, s - i.size) : Pt.resolve(hs());
            // The callsite will use the largest batch ID together with the latest read time to create
            // a new index offset. Since we only process batch IDs if all remote documents have been read,
            // no overlay will increase the overall read time. This is why we only need to special case
            // the batch id.
            let o = -1, u = i;
            return r.next((e117)=>Pt.forEach(e117, (e, n)=>(o < n.largestBatchId && (o = n.largestBatchId), i.get(e) ? Pt.resolve() : this.getBaseDocument(t194, e, n).next((t)=>{
                        u = u.insert(e, t);
                    }))).next(()=>this.populateOverlays(t194, e117, i)).next(()=>this.computeViews(t194, u, e117, ws())).next((t)=>({
                        batchId: o,
                        changes: as(t)
                    })));
        });
    }
    getDocumentsMatchingDocumentQuery(t195, e118) {
        // Just do a simple document lookup.
        return this.getDocument(t195, new dt(e118)).next((t)=>{
            let e = cs();
            return t.isFoundDocument() && (e = e.insert(t.key, t)), e;
        });
    }
    getDocumentsMatchingCollectionGroupQuery(t196, e119, n) {
        const s = e119.collectionGroup;
        let i = cs();
        return this.indexManager.getCollectionParents(t196, s).next((r6)=>Pt.forEach(r6, (r)=>{
                const o = function(t, e) {
                    return new nn(e, /*collectionGroup=*/ null, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
                }(e119, r.child(s));
                return this.getDocumentsMatchingCollectionQuery(t196, o, n).next((t197)=>{
                    t197.forEach((t, e)=>{
                        i = i.insert(t, e);
                    });
                });
            }).next(()=>i));
    }
    getDocumentsMatchingCollectionQuery(t198, e120, n52) {
        // Query the remote documents and overlay mutations.
        let s28;
        return this.remoteDocumentCache.getAllFromCollection(t198, e120.path, n52).next((i)=>(s28 = i, this.documentOverlayCache.getOverlaysForCollection(t198, e120.path, n52.largestBatchId))).next((t)=>{
            // As documents might match the query because of their overlay we need to
            // include documents for all overlays in the initial document set.
            t.forEach((t, e)=>{
                const n = e.getKey();
                null === s28.get(n) && (s28 = s28.insert(n, xe.newInvalidDocument(n)));
            });
            // Apply the overlays and match against the query.
            let n53 = cs();
            return s28.forEach((s, i)=>{
                const r = t.get(s);
                void 0 !== r && Kn(r.mutation, i, zt.empty(), ut.now()), // Finally, insert the documents that still match the query
                mn(e120, i) && (n53 = n53.insert(s, i));
            }), n53;
        });
    }
    /** Returns a base document that can be used to apply `overlay`. */ getBaseDocument(t, e, n) {
        return null === n || 1 /* Patch */  === n.mutation.type ? this.remoteDocumentCache.getEntry(t, e) : Pt.resolve(xe.newInvalidDocument(e));
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class no {
    constructor(t){
        this.wt = t, this.Jn = new Map, this.Yn = new Map;
    }
    getBundleMetadata(t, e) {
        return Pt.resolve(this.Jn.get(e));
    }
    saveBundleMetadata(t, e) {
        /** Decodes a BundleMetadata proto into a BundleMetadata object. */ var n;
        return this.Jn.set(e.id, {
            id: (n = e).id,
            version: n.version,
            createTime: Ns(n.createTime)
        }), Pt.resolve();
    }
    getNamedQuery(t, e) {
        return Pt.resolve(this.Yn.get(e));
    }
    saveNamedQuery(t199, e) {
        return this.Yn.set(e.name, function(t) {
            return {
                name: t.name,
                query: Ji(t.bundledQuery),
                readTime: Ns(t.readTime)
            };
        }(e)), Pt.resolve();
    }
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An in-memory implementation of DocumentOverlayCache.
 */ class so {
    constructor(){
        // A map sorted by DocumentKey, whose value is a pair of the largest batch id
        // for the overlay and the overlay itself.
        this.overlays = new qt(dt.comparator), this.Xn = new Map;
    }
    getOverlay(t, e) {
        return Pt.resolve(this.overlays.get(e));
    }
    getOverlays(t200, e121) {
        const n = hs();
        return Pt.forEach(e121, (e)=>this.getOverlay(t200, e).next((t)=>{
                null !== t && n.set(e, t);
            })).next(()=>n);
    }
    saveOverlays(t, e, n) {
        return n.forEach((n, s)=>{
            this.ie(t, e, s);
        }), Pt.resolve();
    }
    removeOverlaysForBatchId(t201, e, n) {
        const s = this.Xn.get(n);
        return void 0 !== s && (s.forEach((t)=>this.overlays = this.overlays.remove(t)), this.Xn.delete(n)), Pt.resolve();
    }
    getOverlaysForCollection(t, e, n) {
        const s = hs(), i = e.length + 1, r = new dt(e.child("")), o = this.overlays.getIteratorFrom(r);
        for(; o.hasNext();){
            const t = o.getNext().value, r = t.getKey();
            if (!e.isPrefixOf(r.path)) break;
            // Documents from sub-collections
            r.path.length === i && t.largestBatchId > n && s.set(t.getKey(), t);
        }
        return Pt.resolve(s);
    }
    getOverlaysForCollectionGroup(t202, e122, n, s) {
        let i = new qt((t, e)=>t - e);
        const r = this.overlays.getIterator();
        for(; r.hasNext();){
            const t = r.getNext().value;
            if (t.getKey().getCollectionGroup() === e122 && t.largestBatchId > n) {
                let e = i.get(t.largestBatchId);
                null === e && (e = hs(), i = i.insert(t.largestBatchId, e)), e.set(t.getKey(), t);
            }
        }
        const o = hs(), u = i.getIterator();
        for(; u.hasNext();){
            if (u.getNext().value.forEach((t, e)=>o.set(t, e)), o.size() >= s) break;
        }
        return Pt.resolve(o);
    }
    ie(t, e, n) {
        // Remove the association of the overlay to its batch id.
        const s = this.overlays.get(n.key);
        if (null !== s) {
            const t = this.Xn.get(s.largestBatchId).delete(n.key);
            this.Xn.set(s.largestBatchId, t);
        }
        this.overlays = this.overlays.insert(n.key, new Bi(e, n));
        // Create the association of this overlay to the given largestBatchId.
        let i = this.Xn.get(e);
        void 0 === i && (i = ws(), this.Xn.set(e, i)), this.Xn.set(e, i.add(n.key));
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A collection of references to a document from some kind of numbered entity
 * (either a target ID or batch ID). As references are added to or removed from
 * the set corresponding events are emitted to a registered garbage collector.
 *
 * Each reference is represented by a DocumentReference object. Each of them
 * contains enough information to uniquely identify the reference. They are all
 * stored primarily in a set sorted by key. A document is considered garbage if
 * there's no references in that set (this can be efficiently checked thanks to
 * sorting by key).
 *
 * ReferenceSet also keeps a secondary set that contains references sorted by
 * IDs. This one is used to efficiently implement removal of all references by
 * some target ID.
 */ class io {
    constructor(){
        // A set of outstanding references to a document sorted by key.
        this.Zn = new Qt(ro.ts), // A set of outstanding references to a document sorted by target id.
        this.es = new Qt(ro.ns);
    }
    /** Returns true if the reference set contains no references. */ isEmpty() {
        return this.Zn.isEmpty();
    }
    /** Adds a reference to the given document key for the given ID. */ addReference(t, e) {
        const n = new ro(t, e);
        this.Zn = this.Zn.add(n), this.es = this.es.add(n);
    }
    /** Add references to the given document keys for the given ID. */ ss(t203, e) {
        t203.forEach((t)=>this.addReference(t, e));
    }
    /**
     * Removes a reference to the given document key for the given
     * ID.
     */ removeReference(t, e) {
        this.rs(new ro(t, e));
    }
    os(t204, e) {
        t204.forEach((t)=>this.removeReference(t, e));
    }
    /**
     * Clears all references with a given ID. Calls removeRef() for each key
     * removed.
     */ us(t205) {
        const e = new dt(new ht([])), n = new ro(e, t205), s = new ro(e, t205 + 1), i = [];
        return this.es.forEachInRange([
            n,
            s
        ], (t)=>{
            this.rs(t), i.push(t.key);
        }), i;
    }
    cs() {
        this.Zn.forEach((t)=>this.rs(t));
    }
    rs(t) {
        this.Zn = this.Zn.delete(t), this.es = this.es.delete(t);
    }
    hs(t206) {
        const e = new dt(new ht([])), n = new ro(e, t206), s = new ro(e, t206 + 1);
        let i = ws();
        return this.es.forEachInRange([
            n,
            s
        ], (t)=>{
            i = i.add(t.key);
        }), i;
    }
    containsKey(t) {
        const e = new ro(t, 0), n = this.Zn.firstAfterOrEqual(e);
        return null !== n && t.isEqual(n.key);
    }
}
class ro {
    constructor(t, e){
        this.key = t, this.ls = e;
    }
    /** Compare by key then by ID */ static ts(t, e) {
        return dt.comparator(t.key, e.key) || it(t.ls, e.ls);
    }
    /** Compare by ID then by key */ static ns(t, e) {
        return it(t.ls, e.ls) || dt.comparator(t.key, e.key);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class oo {
    constructor(t, e){
        this.indexManager = t, this.referenceDelegate = e, /**
         * The set of all mutations that have been sent but not yet been applied to
         * the backend.
         */ this.mutationQueue = [], /** Next value to use when assigning sequential IDs to each mutation batch. */ this.fs = 1, /** An ordered mapping between documents and the mutations batch IDs. */ this.ds = new Qt(ro.ts);
    }
    checkEmpty(t) {
        return Pt.resolve(0 === this.mutationQueue.length);
    }
    addMutationBatch(t, e, n, s) {
        const i = this.fs;
        this.fs++, this.mutationQueue.length > 0 && this.mutationQueue[this.mutationQueue.length - 1];
        const r = new Fi(i, e, n, s);
        this.mutationQueue.push(r);
        // Track references by document key and index collection parents.
        for (const e123 of s)this.ds = this.ds.add(new ro(e123.key, i)), this.indexManager.addToCollectionParentIndex(t, e123.key.path.popLast());
        return Pt.resolve(r);
    }
    lookupMutationBatch(t, e) {
        return Pt.resolve(this._s(e));
    }
    getNextMutationBatchAfterBatchId(t, e) {
        const n = e + 1, s = this.ws(n), i = s < 0 ? 0 : s;
        // The requested batchId may still be out of range so normalize it to the
        // start of the queue.
        return Pt.resolve(this.mutationQueue.length > i ? this.mutationQueue[i] : null);
    }
    getHighestUnacknowledgedBatchId() {
        return Pt.resolve(0 === this.mutationQueue.length ? -1 : this.fs - 1);
    }
    getAllMutationBatches(t) {
        return Pt.resolve(this.mutationQueue.slice());
    }
    getAllMutationBatchesAffectingDocumentKey(t207, e124) {
        const n = new ro(e124, 0), s = new ro(e124, Number.POSITIVE_INFINITY), i = [];
        return this.ds.forEachInRange([
            n,
            s
        ], (t)=>{
            const e = this._s(t.ls);
            i.push(e);
        }), Pt.resolve(i);
    }
    getAllMutationBatchesAffectingDocumentKeys(t208, e125) {
        let n = new Qt(it);
        return e125.forEach((t209)=>{
            const e = new ro(t209, 0), s = new ro(t209, Number.POSITIVE_INFINITY);
            this.ds.forEachInRange([
                e,
                s
            ], (t)=>{
                n = n.add(t.ls);
            });
        }), Pt.resolve(this.gs(n));
    }
    getAllMutationBatchesAffectingQuery(t210, e126) {
        // Use the query path as a prefix for testing if a document matches the
        // query.
        const n = e126.path, s = n.length + 1;
        // Construct a document reference for actually scanning the index. Unlike
        // the prefix the document key in this reference must have an even number of
        // segments. The empty segment can be used a suffix of the query path
        // because it precedes all other segments in an ordered traversal.
        let i = n;
        dt.isDocumentKey(i) || (i = i.child(""));
        const r = new ro(new dt(i), 0);
        // Find unique batchIDs referenced by all documents potentially matching the
        // query.
        let o = new Qt(it);
        return this.ds.forEachWhile((t)=>{
            const e = t.key.path;
            return !!n.isPrefixOf(e) && // Rows with document keys more than one segment longer than the query
            // path can't be matches. For example, a query on 'rooms' can't match
            // the document /rooms/abc/messages/xyx.
            // TODO(mcg): we'll need a different scanner when we implement
            // ancestor queries.
            (e.length === s && (o = o.add(t.ls)), !0);
        }, r), Pt.resolve(this.gs(o));
    }
    gs(t211) {
        // Construct an array of matching batches, sorted by batchID to ensure that
        // multiple mutations affecting the same document key are applied in order.
        const e = [];
        return t211.forEach((t)=>{
            const n = this._s(t);
            null !== n && e.push(n);
        }), e;
    }
    removeMutationBatch(t, e) {
        U(0 === this.ys(e.batchId, "removed")), this.mutationQueue.shift();
        let n = this.ds;
        return Pt.forEach(e.mutations, (s)=>{
            const i = new ro(s.key, e.batchId);
            return n = n.delete(i), this.referenceDelegate.markPotentiallyOrphaned(t, s.key);
        }).next(()=>{
            this.ds = n;
        });
    }
    In(t) {
    // No-op since the memory mutation queue does not maintain a separate cache.
    }
    containsKey(t, e) {
        const n = new ro(e, 0), s = this.ds.firstAfterOrEqual(n);
        return Pt.resolve(e.isEqual(s && s.key));
    }
    performConsistencyCheck(t) {
        return this.mutationQueue.length, Pt.resolve();
    }
    /**
     * Finds the index of the given batchId in the mutation queue and asserts that
     * the resulting index is within the bounds of the queue.
     *
     * @param batchId - The batchId to search for
     * @param action - A description of what the caller is doing, phrased in passive
     * form (e.g. "acknowledged" in a routine that acknowledges batches).
     */ ys(t, e) {
        return this.ws(t);
    }
    /**
     * Finds the index of the given batchId in the mutation queue. This operation
     * is O(1).
     *
     * @returns The computed index of the batch with the given batchId, based on
     * the state of the queue. Note this index can be negative if the requested
     * batchId has already been remvoed from the queue or past the end of the
     * queue if the batchId is larger than the last added batch.
     */ ws(t) {
        if (0 === this.mutationQueue.length) // As an index this is past the end of the queue
        return 0;
        // Examine the front of the queue to figure out the difference between the
        // batchId and indexes in the array. Note that since the queue is ordered
        // by batchId, if the first batch has a larger batchId then the requested
        // batchId doesn't exist in the queue.
        return t - this.mutationQueue[0].batchId;
    }
    /**
     * A version of lookupMutationBatch that doesn't return a promise, this makes
     * other functions that uses this code easier to read and more efficent.
     */ _s(t) {
        const e = this.ws(t);
        if (e < 0 || e >= this.mutationQueue.length) return null;
        return this.mutationQueue[e];
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke
 * `newMemoryRemoteDocumentCache()`.
 */ class uo {
    /**
     * @param sizer - Used to assess the size of a document. For eager GC, this is
     * expected to just return 0 to avoid unnecessarily doing the work of
     * calculating the size.
     */ constructor(t){
        this.ps = t, /** Underlying cache of documents and their read times. */ this.docs = new qt(dt.comparator), /** Size of all cached documents. */ this.size = 0;
    }
    setIndexManager(t) {
        this.indexManager = t;
    }
    /**
     * Adds the supplied entry to the cache and updates the cache size as appropriate.
     *
     * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */ addEntry(t, e) {
        const n = e.key, s = this.docs.get(n), i = s ? s.size : 0, r = this.ps(e);
        return this.docs = this.docs.insert(n, {
            document: e.mutableCopy(),
            size: r
        }), this.size += r - i, this.indexManager.addToCollectionParentIndex(t, n.path.popLast());
    }
    /**
     * Removes the specified entry from the cache and updates the cache size as appropriate.
     *
     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */ removeEntry(t) {
        const e = this.docs.get(t);
        e && (this.docs = this.docs.remove(t), this.size -= e.size);
    }
    getEntry(t, e) {
        const n = this.docs.get(e);
        return Pt.resolve(n ? n.document.mutableCopy() : xe.newInvalidDocument(e));
    }
    getEntries(t212, e127) {
        let n = os();
        return e127.forEach((t)=>{
            const e = this.docs.get(t);
            n = n.insert(t, e ? e.document.mutableCopy() : xe.newInvalidDocument(t));
        }), Pt.resolve(n);
    }
    getAllFromCollection(t, e, n) {
        let s = os();
        // Documents are ordered by key, so we can use a prefix scan to narrow down
        // the documents we need to match the query against.
        const i = new dt(e.child("")), r = this.docs.getIteratorFrom(i);
        for(; r.hasNext();){
            const { key: t , value: { document: i  }  } = r.getNext();
            if (!e.isPrefixOf(t.path)) break;
            t.path.length > e.length + 1 || Et(It(i), n) <= 0 || (s = s.insert(i.key, i.mutableCopy()));
        }
        return Pt.resolve(s);
    }
    getAllFromCollectionGroup(t, e, n, s) {
        // This method should only be called from the IndexBackfiller if persistence
        // is enabled.
        L();
    }
    Is(t213, e) {
        return Pt.forEach(this.docs, (t)=>e(t));
    }
    newChangeBuffer(t) {
        // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
        // a separate changelog and does not need special handling for removals.
        return new co(this);
    }
    getSize(t) {
        return Pt.resolve(this.size);
    }
}
/**
 * Creates a new memory-only RemoteDocumentCache.
 *
 * @param sizer - Used to assess the size of a document. For eager GC, this is
 * expected to just return 0 to avoid unnecessarily doing the work of
 * calculating the size.
 */ /**
 * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
 */ class co extends Qr {
    constructor(t){
        super(), this.zn = t;
    }
    applyChanges(t) {
        const e = [];
        return this.changes.forEach((n, s)=>{
            s.isValidDocument() ? e.push(this.zn.addEntry(t, s)) : this.zn.removeEntry(n);
        }), Pt.waitFor(e);
    }
    getFromCache(t, e) {
        return this.zn.getEntry(t, e);
    }
    getAllFromCache(t, e) {
        return this.zn.getEntries(t, e);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class ao {
    constructor(t214){
        this.persistence = t214, /**
         * Maps a target to the data about that target
         */ this.Ts = new is((t)=>Oe(t), Fe), /** The last received snapshot version. */ this.lastRemoteSnapshotVersion = ct.min(), /** The highest numbered target ID encountered. */ this.highestTargetId = 0, /** The highest sequence number encountered. */ this.Es = 0, /**
         * A ordered bidirectional mapping between documents and the remote target
         * IDs.
         */ this.As = new io, this.targetCount = 0, this.Rs = kr.An();
    }
    forEachTarget(t, e) {
        return this.Ts.forEach((t, n)=>e(n)), Pt.resolve();
    }
    getLastRemoteSnapshotVersion(t) {
        return Pt.resolve(this.lastRemoteSnapshotVersion);
    }
    getHighestSequenceNumber(t) {
        return Pt.resolve(this.Es);
    }
    allocateTargetId(t) {
        return this.highestTargetId = this.Rs.next(), Pt.resolve(this.highestTargetId);
    }
    setTargetsMetadata(t, e, n) {
        return n && (this.lastRemoteSnapshotVersion = n), e > this.Es && (this.Es = e), Pt.resolve();
    }
    vn(t) {
        this.Ts.set(t.target, t);
        const e = t.targetId;
        e > this.highestTargetId && (this.Rs = new kr(e), this.highestTargetId = e), t.sequenceNumber > this.Es && (this.Es = t.sequenceNumber);
    }
    addTargetData(t, e) {
        return this.vn(e), this.targetCount += 1, Pt.resolve();
    }
    updateTargetData(t, e) {
        return this.vn(e), Pt.resolve();
    }
    removeTargetData(t, e) {
        return this.Ts.delete(e.target), this.As.us(e.targetId), this.targetCount -= 1, Pt.resolve();
    }
    removeTargets(t, e, n) {
        let s = 0;
        const i = [];
        return this.Ts.forEach((r, o)=>{
            o.sequenceNumber <= e && null === n.get(o.targetId) && (this.Ts.delete(r), i.push(this.removeMatchingKeysForTargetId(t, o.targetId)), s++);
        }), Pt.waitFor(i).next(()=>s);
    }
    getTargetCount(t) {
        return Pt.resolve(this.targetCount);
    }
    getTargetData(t, e) {
        const n = this.Ts.get(e) || null;
        return Pt.resolve(n);
    }
    addMatchingKeys(t, e, n) {
        return this.As.ss(e, n), Pt.resolve();
    }
    removeMatchingKeys(t, e128, n) {
        this.As.os(e128, n);
        const s = this.persistence.referenceDelegate, i = [];
        return s && e128.forEach((e)=>{
            i.push(s.markPotentiallyOrphaned(t, e));
        }), Pt.waitFor(i);
    }
    removeMatchingKeysForTargetId(t, e) {
        return this.As.us(e), Pt.resolve();
    }
    getMatchingKeysForTargetId(t, e) {
        const n = this.As.hs(e);
        return Pt.resolve(n);
    }
    containsKey(t, e) {
        return Pt.resolve(this.As.containsKey(e));
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A memory-backed instance of Persistence. Data is stored only in RAM and
 * not persisted across sessions.
 */ class ho {
    /**
     * The constructor accepts a factory for creating a reference delegate. This
     * allows both the delegate and this instance to have strong references to
     * each other without having nullable fields that would then need to be
     * checked or asserted on every access.
     */ constructor(t215, e){
        this.bs = {}, this.overlays = {}, this.Ps = new $t(0), this.vs = !1, this.vs = !0, this.referenceDelegate = t215(this), this.Vs = new ao(this);
        this.indexManager = new mr, this.remoteDocumentCache = function(t) {
            return new uo(t);
        }((t)=>this.referenceDelegate.Ss(t)), this.wt = new Ui(e), this.Ds = new no(this.wt);
    }
    start() {
        return Promise.resolve();
    }
    shutdown() {
        // No durable state to ensure is closed on shutdown.
        return this.vs = !1, Promise.resolve();
    }
    get started() {
        return this.vs;
    }
    setDatabaseDeletedListener() {
    // No op.
    }
    setNetworkEnabled() {
    // No op.
    }
    getIndexManager(t) {
        // We do not currently support indices for memory persistence, so we can
        // return the same shared instance of the memory index manager.
        return this.indexManager;
    }
    getDocumentOverlayCache(t) {
        let e = this.overlays[t.toKey()];
        return e || (e = new so, this.overlays[t.toKey()] = e), e;
    }
    getMutationQueue(t, e) {
        let n = this.bs[t.toKey()];
        return n || (n = new oo(e, this.referenceDelegate), this.bs[t.toKey()] = n), n;
    }
    getTargetCache() {
        return this.Vs;
    }
    getRemoteDocumentCache() {
        return this.remoteDocumentCache;
    }
    getBundleCache() {
        return this.Ds;
    }
    runTransaction(t216, e, n) {
        M("MemoryPersistence", "Starting transaction:", t216);
        const s = new lo(this.Ps.next());
        return this.referenceDelegate.Cs(), n(s).next((t)=>this.referenceDelegate.xs(s).next(()=>t)).toPromise().then((t)=>(s.raiseOnCommittedEvent(), t));
    }
    Ns(t, e) {
        return Pt.or(Object.values(this.bs).map((n)=>()=>n.containsKey(t, e)));
    }
}
/**
 * Memory persistence is not actually transactional, but future implementations
 * may have transaction-scoped state.
 */ class lo extends Rt {
    constructor(t){
        super(), this.currentSequenceNumber = t;
    }
}
class fo {
    constructor(t){
        this.persistence = t, /** Tracks all documents that are active in Query views. */ this.ks = new io, /** The list of documents that are potentially GCed after each transaction. */ this.Os = null;
    }
    static Ms(t) {
        return new fo(t);
    }
    get Fs() {
        if (this.Os) return this.Os;
        throw L();
    }
    addReference(t, e, n) {
        return this.ks.addReference(n, e), this.Fs.delete(n.toString()), Pt.resolve();
    }
    removeReference(t, e, n) {
        return this.ks.removeReference(n, e), this.Fs.add(n.toString()), Pt.resolve();
    }
    markPotentiallyOrphaned(t, e) {
        return this.Fs.add(e.toString()), Pt.resolve();
    }
    removeTarget(t217, e) {
        this.ks.us(e.targetId).forEach((t)=>this.Fs.add(t.toString()));
        const n = this.persistence.getTargetCache();
        return n.getMatchingKeysForTargetId(t217, e.targetId).next((t218)=>{
            t218.forEach((t)=>this.Fs.add(t.toString()));
        }).next(()=>n.removeTargetData(t217, e));
    }
    Cs() {
        this.Os = new Set;
    }
    xs(t219) {
        // Remove newly orphaned documents.
        const e = this.persistence.getRemoteDocumentCache().newChangeBuffer();
        return Pt.forEach(this.Fs, (n)=>{
            const s = dt.fromPath(n);
            return this.$s(t219, s).next((t)=>{
                t || e.removeEntry(s, ct.min());
            });
        }).next(()=>(this.Os = null, e.apply(t219)));
    }
    updateLimboDocument(t220, e) {
        return this.$s(t220, e).next((t)=>{
            t ? this.Fs.delete(e.toString()) : this.Fs.add(e.toString());
        });
    }
    Ss(t) {
        // For eager GC, we don't care about the document size, there are no size thresholds.
        return 0;
    }
    $s(t, e) {
        return Pt.or([
            ()=>Pt.resolve(this.ks.containsKey(e)),
            ()=>this.persistence.getTargetCache().containsKey(t, e),
            ()=>this.persistence.Ns(t, e)
        ]);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Performs database creation and schema upgrades. */ class _o {
    constructor(t){
        this.wt = t;
    }
    /**
     * Performs database creation and schema upgrades.
     *
     * Note that in production, this method is only ever used to upgrade the schema
     * to SCHEMA_VERSION. Different values of toVersion are only used for testing
     * and local feature development.
     */ O(t221, e129, n54, s29) {
        const i15 = new vt("createOrUpgrade", e129);
        n54 < 1 && s29 >= 1 && (function(t) {
            t.createObjectStore("owner");
        }(t221), function(t) {
            t.createObjectStore("mutationQueues", {
                keyPath: "userId"
            });
            t.createObjectStore("mutations", {
                keyPath: "batchId",
                autoIncrement: !0
            }).createIndex("userMutationsIndex", fi, {
                unique: !0
            }), t.createObjectStore("documentMutations");
        }(t221), wo(t221), function(t) {
            t.createObjectStore("remoteDocuments");
        }(t221));
        // Migration 2 to populate the targetGlobal object no longer needed since
        // migration 3 unconditionally clears it.
        let r = Pt.resolve();
        return n54 < 3 && s29 >= 3 && // Brand new clients don't need to drop and recreate--only clients that
        // potentially have corrupt data.
        (0 !== n54 && (!function(t) {
            t.deleteObjectStore("targetDocuments"), t.deleteObjectStore("targets"), t.deleteObjectStore("targetGlobal");
        }(t221), wo(t221)), r = r.next(()=>/**
 * Creates the target global singleton row.
 *
 * @param txn - The version upgrade transaction for indexeddb
 */ (function(t) {
                const e = t.store("targetGlobal"), n = {
                    highestTargetId: 0,
                    highestListenSequenceNumber: 0,
                    lastRemoteSnapshotVersion: ct.min().toTimestamp(),
                    targetCount: 0
                };
                return e.put("targetGlobalKey", n);
            })(i15))), n54 < 4 && s29 >= 4 && (0 !== n54 && // Schema version 3 uses auto-generated keys to generate globally unique
        // mutation batch IDs (this was previously ensured internally by the
        // client). To migrate to the new schema, we have to read all mutations
        // and write them back out. We preserve the existing batch IDs to guarantee
        // consistency with other object stores. Any further mutation batch IDs will
        // be auto-generated.
        (r = r.next(()=>(function(t222, e) {
                return e.store("mutations").K().next((n)=>{
                    t222.deleteObjectStore("mutations");
                    t222.createObjectStore("mutations", {
                        keyPath: "batchId",
                        autoIncrement: !0
                    }).createIndex("userMutationsIndex", fi, {
                        unique: !0
                    });
                    const s = e.store("mutations"), i = n.map((t)=>s.put(t));
                    return Pt.waitFor(i);
                });
            })(t221, i15))), r = r.next(()=>{
            !function(t) {
                t.createObjectStore("clientMetadata", {
                    keyPath: "clientId"
                });
            }(t221);
        })), n54 < 5 && s29 >= 5 && (r = r.next(()=>this.Bs(i15))), n54 < 6 && s29 >= 6 && (r = r.next(()=>((function(t) {
                t.createObjectStore("remoteDocumentGlobal");
            })(t221), this.Ls(i15)))), n54 < 7 && s29 >= 7 && (r = r.next(()=>this.Us(i15))), n54 < 8 && s29 >= 8 && (r = r.next(()=>this.qs(t221, i15))), n54 < 9 && s29 >= 9 && (r = r.next(()=>{
            // Multi-Tab used to manage its own changelog, but this has been moved
            // to the DbRemoteDocument object store itself. Since the previous change
            // log only contained transient data, we can drop its object store.
            !function(t) {
                t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
            }(t221);
        // Note: Schema version 9 used to create a read time index for the
        // RemoteDocumentCache. This is now done with schema version 13.
        })), n54 < 10 && s29 >= 10 && (r = r.next(()=>this.Ks(i15))), n54 < 11 && s29 >= 11 && (r = r.next(()=>{
            !function(t) {
                t.createObjectStore("bundles", {
                    keyPath: "bundleId"
                });
            }(t221), function(t) {
                t.createObjectStore("namedQueries", {
                    keyPath: "name"
                });
            }(t221);
        })), n54 < 12 && s29 >= 12 && (r = r.next(()=>{
            !function(t) {
                const e = t.createObjectStore("documentOverlays", {
                    keyPath: vi
                });
                e.createIndex("collectionPathOverlayIndex", Vi, {
                    unique: !1
                }), e.createIndex("collectionGroupOverlayIndex", Si, {
                    unique: !1
                });
            }(t221);
        })), n54 < 13 && s29 >= 13 && (r = r.next(()=>(function(t) {
                const e = t.createObjectStore("remoteDocumentsV14", {
                    keyPath: mi
                });
                e.createIndex("documentKeyIndex", gi), e.createIndex("collectionGroupIndex", yi);
            })(t221)).next(()=>this.Gs(t221, i15)).next(()=>t221.deleteObjectStore("remoteDocuments"))), n54 < 14 && s29 >= 14 && (r = r.next(()=>this.Qs(t221, i15))), n54 < 15 && s29 >= 15 && (r = r.next(()=>(function(t) {
                t.createObjectStore("indexConfiguration", {
                    keyPath: "indexId",
                    autoIncrement: !0
                }).createIndex("collectionGroupIndex", "collectionGroup", {
                    unique: !1
                });
                t.createObjectStore("indexState", {
                    keyPath: Ai
                }).createIndex("sequenceNumberIndex", Ri, {
                    unique: !1
                });
                t.createObjectStore("indexEntries", {
                    keyPath: bi
                }).createIndex("documentKeyIndex", Pi, {
                    unique: !1
                });
            })(t221))), r;
    }
    Ls(t) {
        let e = 0;
        return t.store("remoteDocuments").J((t, n)=>{
            e += Vr(n);
        }).next(()=>{
            const n = {
                byteSize: e
            };
            return t.store("remoteDocumentGlobal").put("remoteDocumentGlobalKey", n);
        });
    }
    Bs(t) {
        const e130 = t.store("mutationQueues"), n55 = t.store("mutations");
        return e130.K().next((e131)=>Pt.forEach(e131, (e)=>{
                const s30 = IDBKeyRange.bound([
                    e.userId,
                    -1
                ], [
                    e.userId,
                    e.lastAcknowledgedBatchId
                ]);
                return n55.K("userMutationsIndex", s30).next((n56)=>Pt.forEach(n56, (n)=>{
                        U(n.userId === e.userId);
                        const s = Wi(this.wt, n);
                        return vr(t, e.userId, s).next(()=>{});
                    }));
            }));
    }
    /**
     * Ensures that every document in the remote document cache has a corresponding sentinel row
     * with a sequence number. Missing rows are given the most recently used sequence number.
     */ Us(t223) {
        const e = t223.store("targetDocuments"), n57 = t223.store("remoteDocuments");
        return t223.store("targetGlobal").get("targetGlobalKey").next((t224)=>{
            const s = [];
            return n57.J((n58, i)=>{
                const r = new ht(n58), o = function(t) {
                    return [
                        0,
                        ci(t)
                    ];
                }(r);
                s.push(e.get(o).next((n59)=>n59 ? Pt.resolve() : ((n)=>e.put({
                            targetId: 0,
                            path: ci(n),
                            sequenceNumber: t224.highestListenSequenceNumber
                        }))(r)));
            }).next(()=>Pt.waitFor(s));
        });
    }
    qs(t225, e132) {
        // Create the index.
        t225.createObjectStore("collectionParents", {
            keyPath: Ei
        });
        const n60 = e132.store("collectionParents"), s31 = new gr, i = (t)=>{
            if (s31.add(t)) {
                const e = t.lastSegment(), s = t.popLast();
                return n60.put({
                    collectionId: e,
                    parent: ci(s)
                });
            }
        };
        // Helper to add an index entry iff we haven't already written it.
        // Index existing remote documents.
        return e132.store("remoteDocuments").J({
            H: !0
        }, (t, e)=>{
            const n = new ht(t);
            return i(n.popLast());
        }).next(()=>e132.store("documentMutations").J({
                H: !0
            }, ([t, e, n], s)=>{
                const r = li(e);
                return i(r.popLast());
            }));
    }
    Ks(t) {
        const e = t.store("targets");
        return e.J((t, n)=>{
            const s = zi(n), i = Hi(this.wt, s);
            return e.put(i);
        });
    }
    Gs(t, e) {
        const n61 = e.store("remoteDocuments"), s = [];
        return n61.J((t, n)=>{
            const i = e.store("remoteDocumentsV14"), r = (o = n, o.document ? new dt(ht.fromString(o.document.name).popFirst(5)) : o.noDocument ? dt.fromSegments(o.noDocument.path) : o.unknownDocument ? dt.fromSegments(o.unknownDocument.path) : L()).path.toArray();
            var o;
            /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const u = {
                prefixPath: r.slice(0, r.length - 2),
                collectionGroup: r[r.length - 2],
                documentId: r[r.length - 1],
                readTime: n.readTime || [
                    0,
                    0
                ],
                unknownDocument: n.unknownDocument,
                noDocument: n.noDocument,
                document: n.document,
                hasCommittedMutations: !!n.hasCommittedMutations
            };
            s.push(i.put(u));
        }).next(()=>Pt.waitFor(s));
    }
    Qs(t226, e133) {
        const n62 = e133.store("mutations"), s32 = Wr(this.wt), i = new ho(fo.Ms, this.wt.ne);
        return n62.K().next((t227)=>{
            const n63 = new Map;
            return t227.forEach((t228)=>{
                var e;
                let s = null !== (e = n63.get(t228.userId)) && void 0 !== e ? e : ws();
                Wi(this.wt, t228).keys().forEach((t)=>s = s.add(t)), n63.set(t228.userId, s);
            }), Pt.forEach(n63, (t, n)=>{
                const r = new C(n), o = sr.se(this.wt, r), u = i.getIndexManager(r), c = Sr.se(r, this.wt, u, i.referenceDelegate);
                return new eo(s32, c, o, u).recalculateAndSaveOverlaysForDocumentKeys(new Oi(e133, $t.ot), t).next();
            });
        });
    }
}
function wo(t) {
    t.createObjectStore("targetDocuments", {
        keyPath: Ii
    }).createIndex("documentTargetsIndex", Ti, {
        unique: !0
    });
    // NOTE: This is unique only because the TargetId is the suffix.
    t.createObjectStore("targets", {
        keyPath: "targetId"
    }).createIndex("queryTargetsIndex", pi, {
        unique: !0
    }), t.createObjectStore("targetGlobal");
}
const mo = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";
/**
 * Oldest acceptable age in milliseconds for client metadata before the client
 * is considered inactive and its associated data is garbage collected.
 */ /**
 * An IndexedDB-backed instance of Persistence. Data is stored persistently
 * across sessions.
 *
 * On Web only, the Firestore SDKs support shared access to its persistence
 * layer. This allows multiple browser tabs to read and write to IndexedDb and
 * to synchronize state even without network connectivity. Shared access is
 * currently optional and not enabled unless all clients invoke
 * `enablePersistence()` with `{synchronizeTabs:true}`.
 *
 * In multi-tab mode, if multiple clients are active at the same time, the SDK
 * will designate one client as the “primary client”. An effort is made to pick
 * a visible, network-connected and active client, and this client is
 * responsible for letting other clients know about its presence. The primary
 * client writes a unique client-generated identifier (the client ID) to
 * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
 * update this entry, another client can acquire the lease and take over as
 * primary.
 *
 * Some persistence operations in the SDK are designated as primary-client only
 * operations. This includes the acknowledgment of mutations and all updates of
 * remote documents. The effects of these operations are written to persistence
 * and then broadcast to other tabs via LocalStorage (see
 * `WebStorageSharedClientState`), which then refresh their state from
 * persistence.
 *
 * Similarly, the primary client listens to notifications sent by secondary
 * clients to discover persistence changes written by secondary clients, such as
 * the addition of new mutations and query targets.
 *
 * If multi-tab is not enabled and another tab already obtained the primary
 * lease, IndexedDbPersistence enters a failed state and all subsequent
 * operations will automatically fail.
 *
 * Additionally, there is an optimization so that when a tab is closed, the
 * primary lease is released immediately (this is especially important to make
 * sure that a refreshed tab is able to immediately re-acquire the primary
 * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
 * since it is an asynchronous API. So in addition to attempting to give up the
 * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
 * LocalStorage which acts as an indicator that another tab should go ahead and
 * take the primary lease immediately regardless of the current lease timestamp.
 *
 * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
 * longer optional.
 */ class go {
    constructor(/**
     * Whether to synchronize the in-memory state of multiple tabs and share
     * access to local persistence.
     */ t, e, n, s, i, r, o, u, c, /**
     * If set to true, forcefully obtains database access. Existing tabs will
     * no longer be able to access IndexedDB.
     */ a, h = 14){
        if (this.allowTabSynchronization = t, this.persistenceKey = e, this.clientId = n, this.js = i, this.window = r, this.document = o, this.Ws = c, this.zs = a, this.Hs = h, this.Ps = null, this.vs = !1, this.isPrimary = !1, this.networkEnabled = !0, /** Our window.unload handler, if registered. */ this.Js = null, this.inForeground = !1, /** Our 'visibilitychange' listener if registered. */ this.Ys = null, /** The client metadata refresh task. */ this.Xs = null, /** The last time we garbage collected the client metadata object store. */ this.Zs = Number.NEGATIVE_INFINITY, /** A listener to notify on primary state changes. */ this.ti = (t)=>Promise.resolve(), !go.V()) throw new Q(G.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
        this.referenceDelegate = new Kr(this, s), this.ei = e + "main", this.wt = new Ui(u), this.ni = new Vt(this.ei, this.Hs, new _o(this.wt)), this.Vs = new Or(this.referenceDelegate, this.wt), this.remoteDocumentCache = Wr(this.wt), this.Ds = new tr, this.window && this.window.localStorage ? this.si = this.window.localStorage : (this.si = null, !1 === a && F("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
    }
    /**
     * Attempt to start IndexedDb persistence.
     *
     * @returns Whether persistence was enabled.
     */ start() {
        // NOTE: This is expected to fail sometimes (in the case of another tab
        // already having the persistence lock), so it's the first thing we should
        // do.
        return this.ii().then(()=>{
            if (!this.isPrimary && !this.allowTabSynchronization) // Fail `start()` if `synchronizeTabs` is disabled and we cannot
            // obtain the primary lease.
            throw new Q(G.FAILED_PRECONDITION, mo);
            return this.ri(), this.oi(), this.ui(), this.runTransaction("getHighestListenSequenceNumber", "readonly", (t)=>this.Vs.getHighestSequenceNumber(t));
        }).then((t)=>{
            this.Ps = new $t(t, this.Ws);
        }).then(()=>{
            this.vs = !0;
        }).catch((t)=>(this.ni && this.ni.close(), Promise.reject(t)));
    }
    /**
     * Registers a listener that gets called when the primary state of the
     * instance changes. Upon registering, this listener is invoked immediately
     * with the current primary state.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */ ci(t) {
        return this.ti = async (e)=>{
            if (this.started) return t(e);
        }, t(this.isPrimary);
    }
    /**
     * Registers a listener that gets called when the database receives a
     * version change event indicating that it has deleted.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */ setDatabaseDeletedListener(t) {
        this.ni.F(async (e)=>{
            // Check if an attempt is made to delete IndexedDB.
            null === e.newVersion && await t();
        });
    }
    /**
     * Adjusts the current network state in the client's metadata, potentially
     * affecting the primary lease.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */ setNetworkEnabled(t) {
        this.networkEnabled !== t && (this.networkEnabled = t, // Schedule a primary lease refresh for immediate execution. The eventual
        // lease update will be propagated via `primaryStateListener`.
        this.js.enqueueAndForget(async ()=>{
            this.started && await this.ii();
        }));
    }
    /**
     * Updates the client metadata in IndexedDb and attempts to either obtain or
     * extend the primary lease for the local client. Asynchronously notifies the
     * primary state listener if the client either newly obtained or released its
     * primary lease.
     */ ii() {
        return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (t229)=>po(t229).put({
                clientId: this.clientId,
                updateTimeMs: Date.now(),
                networkEnabled: this.networkEnabled,
                inForeground: this.inForeground
            }).next(()=>{
                if (this.isPrimary) return this.ai(t229).next((t)=>{
                    t || (this.isPrimary = !1, this.js.enqueueRetryable(()=>this.ti(!1)));
                });
            }).next(()=>this.hi(t229)).next((e)=>this.isPrimary && !e ? this.li(t229).next(()=>!1) : !!e && this.fi(t229).next(()=>!0))).catch((t)=>{
            if (Ct(t)) // Proceed with the existing state. Any subsequent access to
            // IndexedDB will verify the lease.
            return M("IndexedDbPersistence", "Failed to extend owner lease: ", t), this.isPrimary;
            if (!this.allowTabSynchronization) throw t;
            return M("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", t), /* isPrimary= */ !1;
        }).then((t)=>{
            this.isPrimary !== t && this.js.enqueueRetryable(()=>this.ti(t)), this.isPrimary = t;
        });
    }
    ai(t230) {
        return yo(t230).get("owner").next((t)=>Pt.resolve(this.di(t)));
    }
    _i(t) {
        return po(t).delete(this.clientId);
    }
    /**
     * If the garbage collection threshold has passed, prunes the
     * RemoteDocumentChanges and the ClientMetadata store based on the last update
     * time of all clients.
     */ async wi() {
        if (this.isPrimary && !this.mi(this.Zs, 18e5)) {
            this.Zs = Date.now();
            const t231 = await this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (t233)=>{
                const e = Mi(t233, "clientMetadata");
                return e.K().next((t234)=>{
                    const n = this.gi(t234, 18e5), s = t234.filter((t)=>-1 === n.indexOf(t));
                    // Delete metadata for clients that are no longer considered active.
                    return Pt.forEach(s, (t)=>e.delete(t.clientId)).next(()=>s);
                });
            }).catch(()=>[]);
            // Delete potential leftover entries that may continue to mark the
            // inactive clients as zombied in LocalStorage.
            // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
            // the client atomically, but we can't. So we opt to delete the IndexedDb
            // entries first to avoid potentially reviving a zombied client.
            if (this.si) for (const e134 of t231)this.si.removeItem(this.yi(e134.clientId));
        }
    }
    /**
     * Schedules a recurring timer to update the client metadata and to either
     * extend or acquire the primary lease if the client is eligible.
     */ ui() {
        this.Xs = this.js.enqueueAfterDelay("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, ()=>this.ii().then(()=>this.wi()).then(()=>this.ui()));
    }
    /** Checks whether `client` is the local client. */ di(t) {
        return !!t && t.ownerId === this.clientId;
    }
    /**
     * Evaluate the state of all active clients and determine whether the local
     * client is or can act as the holder of the primary lease. Returns whether
     * the client is eligible for the lease, but does not actually acquire it.
     * May return 'false' even if there is no active leaseholder and another
     * (foreground) client should become leaseholder instead.
     */ hi(t235) {
        if (this.zs) return Pt.resolve(!0);
        return yo(t235).get("owner").next((e136)=>{
            // A client is eligible for the primary lease if:
            // - its network is enabled and the client's tab is in the foreground.
            // - its network is enabled and no other client's tab is in the
            //   foreground.
            // - every clients network is disabled and the client's tab is in the
            //   foreground.
            // - every clients network is disabled and no other client's tab is in
            //   the foreground.
            // - the `forceOwningTab` setting was passed in.
            if (null !== e136 && this.mi(e136.leaseTimestampMs, 5e3) && !this.pi(e136.ownerId)) {
                if (this.di(e136) && this.networkEnabled) return !0;
                if (!this.di(e136)) {
                    if (!e136.allowTabSynchronization) // Fail the `canActAsPrimary` check if the current leaseholder has
                    // not opted into multi-tab synchronization. If this happens at
                    // client startup, we reject the Promise returned by
                    // `enablePersistence()` and the user can continue to use Firestore
                    // with in-memory persistence.
                    // If this fails during a lease refresh, we will instead block the
                    // AsyncQueue from executing further operations. Note that this is
                    // acceptable since mixing & matching different `synchronizeTabs`
                    // settings is not supported.
                    // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                    // no longer be turned off.
                    throw new Q(G.FAILED_PRECONDITION, mo);
                    return !1;
                }
            }
            return !(!this.networkEnabled || !this.inForeground) || po(t235).K().next((t236)=>void 0 === this.gi(t236, 5e3).find((t)=>{
                    if (this.clientId !== t.clientId) {
                        const e = !this.networkEnabled && t.networkEnabled, n = !this.inForeground && t.inForeground, s = this.networkEnabled === t.networkEnabled;
                        if (e || n && s) return !0;
                    }
                    return !1;
                }));
        }).next((t)=>(this.isPrimary !== t && M("IndexedDbPersistence", `Client ${t ? "is" : "is not"} eligible for a primary lease.`), t));
    }
    async shutdown() {
        // The shutdown() operations are idempotent and can be called even when
        // start() aborted (e.g. because it couldn't acquire the persistence lease).
        this.vs = !1, this.Ii(), this.Xs && (this.Xs.cancel(), this.Xs = null), this.Ti(), this.Ei(), // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
        // has obtained the primary lease.
        await this.ni.runTransaction("shutdown", "readwrite", [
            "owner",
            "clientMetadata"
        ], (t)=>{
            const e = new Oi(t, $t.ot);
            return this.li(e).next(()=>this._i(e));
        }), this.ni.close(), // Remove the entry marking the client as zombied from LocalStorage since
        // we successfully deleted its metadata from IndexedDb.
        this.Ai();
    }
    /**
     * Returns clients that are not zombied and have an updateTime within the
     * provided threshold.
     */ gi(t237, e) {
        return t237.filter((t)=>this.mi(t.updateTimeMs, e) && !this.pi(t.clientId));
    }
    /**
     * Returns the IDs of the clients that are currently active. If multi-tab
     * is not supported, returns an array that only contains the local client's
     * ID.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */ Ri() {
        return this.runTransaction("getActiveClients", "readonly", (t238)=>po(t238).K().next((t239)=>this.gi(t239, 18e5).map((t)=>t.clientId)));
    }
    get started() {
        return this.vs;
    }
    getMutationQueue(t, e) {
        return Sr.se(t, this.wt, e, this.referenceDelegate);
    }
    getTargetCache() {
        return this.Vs;
    }
    getRemoteDocumentCache() {
        return this.remoteDocumentCache;
    }
    getIndexManager(t) {
        return new pr(t, this.wt.ne.databaseId);
    }
    getDocumentOverlayCache(t) {
        return sr.se(this.wt, t);
    }
    getBundleCache() {
        return this.Ds;
    }
    runTransaction(t240, e137, n) {
        M("IndexedDbPersistence", "Starting transaction:", t240);
        const s33 = "readonly" === e137 ? "readonly" : "readwrite", i = 15 === (r = this.Hs) ? ki : 14 === r ? Ni : 13 === r ? xi : 12 === r ? Ci : 11 === r ? Di : void L();
        /** Returns the object stores for the provided schema. */ var r;
        let o;
        // Do all transactions as readwrite against all object stores, since we
        // are the only reader/writer.
        return this.ni.runTransaction(t240, s33, i, (s)=>(o = new Oi(s, this.Ps ? this.Ps.next() : $t.ot), "readwrite-primary" === e137 ? this.ai(o).next((t)=>!!t || this.hi(o)).next((e)=>{
                if (!e) throw F(`Failed to obtain primary lease for action '${t240}'.`), this.isPrimary = !1, this.js.enqueueRetryable(()=>this.ti(!1)), new Q(G.FAILED_PRECONDITION, At);
                return n(o);
            }).next((t)=>this.fi(o).next(()=>t)) : this.bi(o).next(()=>n(o)))).then((t)=>(o.raiseOnCommittedEvent(), t));
    }
    /**
     * Verifies that the current tab is the primary leaseholder or alternatively
     * that the leaseholder has opted into multi-tab synchronization.
     */ // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
    // be turned off.
    bi(t241) {
        return yo(t241).get("owner").next((t)=>{
            if (null !== t && this.mi(t.leaseTimestampMs, 5e3) && !this.pi(t.ownerId) && !this.di(t) && !(this.zs || this.allowTabSynchronization && t.allowTabSynchronization)) throw new Q(G.FAILED_PRECONDITION, mo);
        });
    }
    /**
     * Obtains or extends the new primary lease for the local client. This
     * method does not verify that the client is eligible for this lease.
     */ fi(t) {
        const e = {
            ownerId: this.clientId,
            allowTabSynchronization: this.allowTabSynchronization,
            leaseTimestampMs: Date.now()
        };
        return yo(t).put("owner", e);
    }
    static V() {
        return Vt.V();
    }
    /** Checks the primary lease and removes it if we are the current primary. */ li(t242) {
        const e = yo(t242);
        return e.get("owner").next((t)=>this.di(t) ? (M("IndexedDbPersistence", "Releasing primary lease."), e.delete("owner")) : Pt.resolve());
    }
    /** Verifies that `updateTimeMs` is within `maxAgeMs`. */ mi(t, e) {
        const n = Date.now();
        return !(t < n - e) && (!(t > n) || (F(`Detected an update time that is in the future: ${t} > ${n}`), !1));
    }
    ri() {
        null !== this.document && "function" == typeof this.document.addEventListener && (this.Ys = ()=>{
            this.js.enqueueAndForget(()=>(this.inForeground = "visible" === this.document.visibilityState, this.ii()));
        }, this.document.addEventListener("visibilitychange", this.Ys), this.inForeground = "visible" === this.document.visibilityState);
    }
    Ti() {
        this.Ys && (this.document.removeEventListener("visibilitychange", this.Ys), this.Ys = null);
    }
    /**
     * Attaches a window.unload handler that will synchronously write our
     * clientId to a "zombie client id" location in LocalStorage. This can be used
     * by tabs trying to acquire the primary lease to determine that the lease
     * is no longer valid even if the timestamp is recent. This is particularly
     * important for the refresh case (so the tab correctly re-acquires the
     * primary lease). LocalStorage is used for this rather than IndexedDb because
     * it is a synchronous API and so can be used reliably from  an unload
     * handler.
     */ oi() {
        var t;
        "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.Js = ()=>{
            // Note: In theory, this should be scheduled on the AsyncQueue since it
            // accesses internal state. We execute this code directly during shutdown
            // to make sure it gets a chance to run.
            this.Ii(), (0, _util.isSafari)() && navigator.appVersion.match(/Version\/1[45]/) && // On Safari 14 and 15, we do not run any cleanup actions as it might
            // trigger a bug that prevents Safari from re-opening IndexedDB during
            // the next page load.
            // See https://bugs.webkit.org/show_bug.cgi?id=226547
            this.js.enterRestrictedMode(/* purgeExistingTasks= */ !0), this.js.enqueueAndForget(()=>this.shutdown());
        }, this.window.addEventListener("pagehide", this.Js));
    }
    Ei() {
        this.Js && (this.window.removeEventListener("pagehide", this.Js), this.Js = null);
    }
    /**
     * Returns whether a client is "zombied" based on its LocalStorage entry.
     * Clients become zombied when their tab closes without running all of the
     * cleanup logic in `shutdown()`.
     */ pi(t) {
        var e;
        try {
            const n = null !== (null === (e = this.si) || void 0 === e ? void 0 : e.getItem(this.yi(t)));
            return M("IndexedDbPersistence", `Client '${t}' ${n ? "is" : "is not"} zombied in LocalStorage`), n;
        } catch (t243) {
            // Gracefully handle if LocalStorage isn't working.
            return F("IndexedDbPersistence", "Failed to get zombied client id.", t243), !1;
        }
    }
    /**
     * Record client as zombied (a client that had its tab closed). Zombied
     * clients are ignored during primary tab selection.
     */ Ii() {
        if (this.si) try {
            this.si.setItem(this.yi(this.clientId), String(Date.now()));
        } catch (t) {
            // Gracefully handle if LocalStorage isn't available / working.
            F("Failed to set zombie client id.", t);
        }
    }
    /** Removes the zombied client entry if it exists. */ Ai() {
        if (this.si) try {
            this.si.removeItem(this.yi(this.clientId));
        } catch (t) {
        // Ignore
        }
    }
    yi(t) {
        return `firestore_zombie_${this.persistenceKey}_${t}`;
    }
}
/**
 * Helper to get a typed SimpleDbStore for the primary client object store.
 */ function yo(t) {
    return Mi(t, "owner");
}
/**
 * Helper to get a typed SimpleDbStore for the client metadata object store.
 */ function po(t) {
    return Mi(t, "clientMetadata");
}
/**
 * Generates a string used as a prefix when storing data in IndexedDB and
 * LocalStorage.
 */ function Io(t, e) {
    // Use two different prefix formats:
    //   * firestore / persistenceKey / projectID . databaseID / ...
    //   * firestore / persistenceKey / projectID / ...
    // projectIDs are DNS-compatible names and cannot contain dots
    // so there's no danger of collisions.
    let n = t.projectId;
    return t.isDefaultDatabase || (n += "." + t.database), "firestore/" + e + "/" + n + "/";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A set of changes to what documents are currently in view and out of view for
 * a given query. These changes are sent to the LocalStore by the View (via
 * the SyncEngine) and are used to pin / unpin documents as appropriate.
 */ class To {
    constructor(t, e, n, s){
        this.targetId = t, this.fromCache = e, this.Pi = n, this.vi = s;
    }
    static Vi(t, e) {
        let n = ws(), s = ws();
        for (const t244 of e.docChanges)switch(t244.type){
            case 0 /* Added */ :
                n = n.add(t244.doc.key);
                break;
            case 1 /* Removed */ :
                s = s.add(t244.doc.key);
        }
        return new To(t, e.fromCache, n, s);
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The Firestore query engine.
 *
 * Firestore queries can be executed in three modes. The Query Engine determines
 * what mode to use based on what data is persisted. The mode only determines
 * the runtime complexity of the query - the result set is equivalent across all
 * implementations.
 *
 * The Query engine will use indexed-based execution if a user has configured
 * any index that can be used to execute query (via `setIndexConfiguration()`).
 * Otherwise, the engine will try to optimize the query by re-using a previously
 * persisted query result. If that is not possible, the query will be executed
 * via a full collection scan.
 *
 * Index-based execution is the default when available. The query engine
 * supports partial indexed execution and merges the result from the index
 * lookup with documents that have not yet been indexed. The index evaluation
 * matches the backend's format and as such, the SDK can use indexing for all
 * queries that the backend supports.
 *
 * If no index exists, the query engine tries to take advantage of the target
 * document mapping in the TargetCache. These mappings exists for all queries
 * that have been synced with the backend at least once and allow the query
 * engine to only read documents that previously matched a query plus any
 * documents that were edited after the query was last listened to.
 *
 * There are some cases when this optimization is not guaranteed to produce
 * the same results as full collection scans. In these cases, query
 * processing falls back to full scans. These cases are:
 *
 * - Limit queries where a document that matched the query previously no longer
 *   matches the query.
 *
 * - Limit queries where a document edit may cause the document to sort below
 *   another document that is in the local cache.
 *
 * - Queries that have never been CURRENT or free of limbo documents.
 */ class Eo {
    constructor(){
        this.Si = !1;
    }
    /** Sets the document view to query against. */ initialize(t, e) {
        this.Di = t, this.indexManager = e, this.Si = !0;
    }
    /** Returns all local documents matching the specified query. */ getDocumentsMatchingQuery(t, e, n64, s) {
        return this.Ci(t, e).next((i)=>i || this.xi(t, e, s, n64)).next((n)=>n || this.Ni(t, e));
    }
    /**
     * Performs an indexed query that evaluates the query based on a collection's
     * persisted index values. Returns `null` if an index is not available.
     */ Ci(t, e) {
        return Pt.resolve(null);
    }
    /**
     * Performs a query based on the target's persisted query mapping. Returns
     * `null` if the mapping is not available or cannot be used.
     */ xi(t, e, n, s) {
        return on(e) || s.isEqual(ct.min()) ? this.Ni(t, e) : this.Di.getDocuments(t, n).next((i)=>{
            const r = this.ki(e, i);
            return this.Oi(e, r, n, s) ? this.Ni(t, e) : (k() <= (0, _logger.LogLevel).DEBUG && M("QueryEngine", "Re-using previous result from %s to execute query: %s", s.toString(), wn(e)), this.Mi(t, r, e, pt(s, -1)));
        });
    // Queries that have never seen a snapshot without limbo free documents
    // should also be run as a full collection scan.
    }
    /** Applies the query filter and sorting to the provided documents.  */ ki(t, e) {
        // Sort the documents and re-apply the query filter since previously
        // matching documents do not necessarily still match the query.
        let n = new Qt(yn(t));
        return e.forEach((e, s)=>{
            mn(t, s) && (n = n.add(s));
        }), n;
    }
    /**
     * Determines if a limit query needs to be refilled from cache, making it
     * ineligible for index-free execution.
     *
     * @param query - The query.
     * @param sortedPreviousResults - The documents that matched the query when it
     * was last synchronized, sorted by the query's comparator.
     * @param remoteKeys - The document keys that matched the query at the last
     * snapshot.
     * @param limboFreeSnapshotVersion - The version of the snapshot when the
     * query was last synchronized.
     */ Oi(t, e, n, s) {
        if (null === t.limit) // Queries without limits do not need to be refilled.
        return !1;
        if (n.size !== e.size) // The query needs to be refilled if a previously matching document no
        // longer matches.
        return !0;
        // Limit queries are not eligible for index-free query execution if there is
        // a potential that an older document from cache now sorts before a document
        // that was previously part of the limit. This, however, can only happen if
        // the document at the edge of the limit goes out of limit.
        // If a document that is not the limit boundary sorts differently,
        // the boundary of the limit itself did not change and documents from cache
        // will continue to be "rejected" by this boundary. Therefore, we can ignore
        // any modifications that don't affect the last document.
        const i = "F" /* First */  === t.limitType ? e.last() : e.first();
        return !!i && (i.hasPendingWrites || i.version.compareTo(s) > 0);
    }
    Ni(t, e) {
        return k() <= (0, _logger.LogLevel).DEBUG && M("QueryEngine", "Using full collection scan to execute query:", wn(e)), this.Di.getDocumentsMatchingQuery(t, e, Tt.min());
    }
    /**
     * Combines the results from an indexed execution with the remaining documents
     * that have not yet been indexed.
     */ Mi(t245, e138, n, s) {
        // Retrieve all results for documents that were updated since the offset.
        return this.Di.getDocumentsMatchingQuery(t245, n, s).next((t)=>// Merge with existing results
            (e138.forEach((e)=>{
                t = t.insert(e.key, e);
            }), t));
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Implements `LocalStore` interface.
 *
 * Note: some field defined in this class might have public access level, but
 * the class is not exported so they are only accessible from this module.
 * This is useful to implement optional features (like bundles) in free
 * functions, such that they are tree-shakeable.
 */ class Ao {
    constructor(/** Manages our in-memory or durable persistence. */ t246, e, n, s){
        this.persistence = t246, this.Fi = e, this.wt = s, /**
         * Maps a targetID to data about its target.
         *
         * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
         * of `applyRemoteEvent()` idempotent.
         */ this.$i = new qt(it), /** Maps a target to its targetID. */ // TODO(wuandy): Evaluate if TargetId can be part of Target.
        this.Bi = new is((t)=>Oe(t), Fe), /**
         * A per collection group index of the last read time processed by
         * `getNewDocumentChanges()`.
         *
         * PORTING NOTE: This is only used for multi-tab synchronization.
         */ this.Li = new Map, this.Ui = t246.getRemoteDocumentCache(), this.Vs = t246.getTargetCache(), this.Ds = t246.getBundleCache(), this.qi(n);
    }
    qi(t) {
        // TODO(indexing): Add spec tests that test these components change after a
        // user change
        this.documentOverlayCache = this.persistence.getDocumentOverlayCache(t), this.indexManager = this.persistence.getIndexManager(t), this.mutationQueue = this.persistence.getMutationQueue(t, this.indexManager), this.localDocuments = new eo(this.Ui, this.mutationQueue, this.documentOverlayCache, this.indexManager), this.Ui.setIndexManager(this.indexManager), this.Fi.initialize(this.localDocuments, this.indexManager);
    }
    collectGarbage(t) {
        return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (e)=>t.collect(e, this.$i));
    }
}
function Ro(/** Manages our in-memory or durable persistence. */ t, e, n, s) {
    return new Ao(t, e, n, s);
}
/**
 * Tells the LocalStore that the currently authenticated user has changed.
 *
 * In response the local store switches the mutation queue to the new user and
 * returns any resulting document changes.
 */ // PORTING NOTE: Android and iOS only return the documents affected by the
// change.
async function bo(t247, e139) {
    const n = K(t247);
    return await n.persistence.runTransaction("Handle user change", "readonly", (t249)=>{
        // Swap out the mutation queue, grabbing the pending mutation batches
        // before and after.
        let s;
        return n.mutationQueue.getAllMutationBatches(t249).next((i)=>(s = i, n.qi(e139), n.mutationQueue.getAllMutationBatches(t249))).next((e)=>{
            const i = [], r = [];
            // Union the old/new changed keys.
            let o = ws();
            for (const t250 of s){
                i.push(t250.batchId);
                for (const e of t250.mutations)o = o.add(e.key);
            }
            for (const t248 of e){
                r.push(t248.batchId);
                for (const e of t248.mutations)o = o.add(e.key);
            }
            // Return the set of all (potentially) changed documents and the list
            // of mutation batch IDs that were affected by change.
            return n.localDocuments.getDocuments(t249, o).next((t)=>({
                    Ki: t,
                    removedBatchIds: i,
                    addedBatchIds: r
                }));
        });
    });
}
/* Accepts locally generated Mutations and commit them to storage. */ /**
 * Acknowledges the given batch.
 *
 * On the happy path when a batch is acknowledged, the local store will
 *
 *  + remove the batch from the mutation queue;
 *  + apply the changes to the remote document cache;
 *  + recalculate the latency compensated view implied by those changes (there
 *    may be mutations in the queue that affect the documents but haven't been
 *    acknowledged yet); and
 *  + give the changed documents back the sync engine
 *
 * @returns The resulting (modified) documents.
 */ function Po(t251, e140) {
    const n65 = K(t251);
    return n65.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (t252)=>{
        const s34 = e140.batch.keys(), i16 = n65.Ui.newChangeBuffer({
            trackRemovals: !0
        });
        return (function(t253, e141, n, s) {
            const i = n.batch, r7 = i.keys();
            let o = Pt.resolve();
            return r7.forEach((t)=>{
                o = o.next(()=>s.getEntry(e141, t)).next((e)=>{
                    const r = n.docVersions.get(t);
                    U(null !== r), e.version.compareTo(r) < 0 && (i.applyToRemoteDocument(e, n), e.isValidDocument() && // We use the commitVersion as the readTime rather than the
                    // document's updateTime since the updateTime is not advanced
                    // for updates that do not modify the underlying document.
                    (e.setReadTime(n.commitVersion), s.addEntry(e)));
                });
            }), o.next(()=>t253.mutationQueue.removeMutationBatch(e141, i));
        })(n65, t252, e140, i16).next(()=>i16.apply(t252)).next(()=>n65.mutationQueue.performConsistencyCheck(t252)).next(()=>n65.documentOverlayCache.removeOverlaysForBatchId(t252, s34, e140.batch.batchId)).next(()=>n65.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(t252, function(t) {
                let e = ws();
                for(let n = 0; n < t.mutationResults.length; ++n)t.mutationResults[n].transformResults.length > 0 && (e = e.add(t.batch.mutations[n].key));
                return e;
            }(e140))).next(()=>n65.localDocuments.getDocuments(t252, s34));
    });
}
/**
 * Returns the last consistent snapshot processed (used by the RemoteStore to
 * determine whether to buffer incoming snapshots from the backend).
 */ function vo(t254) {
    const e = K(t254);
    return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (t)=>e.Vs.getLastRemoteSnapshotVersion(t));
}
/**
 * Updates the "ground-state" (remote) documents. We assume that the remote
 * event reflects any write batches that have been acknowledged or rejected
 * (i.e. we do not re-apply local mutations to updates from this event).
 *
 * LocalDocuments are re-calculated if there are remaining mutations in the
 * queue.
 */ function Vo(t255, e142) {
    const n66 = K(t255), s35 = e142.snapshotVersion;
    let i = n66.$i;
    return n66.persistence.runTransaction("Apply remote event", "readwrite-primary", (t256)=>{
        const r8 = n66.Ui.newChangeBuffer({
            trackRemovals: !0
        });
        // Reset newTargetDataByTargetMap in case this transaction gets re-run.
        i = n66.$i;
        const o = [];
        e142.targetChanges.forEach((r, u)=>{
            const c = i.get(u);
            if (!c) return;
            // Only update the remote keys if the target is still active. This
            // ensures that we can persist the updated target data along with
            // the updated assignment.
            o.push(n66.Vs.removeMatchingKeys(t256, r.removedDocuments, u).next(()=>n66.Vs.addMatchingKeys(t256, r.addedDocuments, u)));
            let a = c.withSequenceNumber(t256.currentSequenceNumber);
            e142.targetMismatches.has(u) ? a = a.withResumeToken(Jt.EMPTY_BYTE_STRING, ct.min()).withLastLimboFreeSnapshotVersion(ct.min()) : r.resumeToken.approximateByteSize() > 0 && (a = a.withResumeToken(r.resumeToken, s35)), i = i.insert(u, a), // Update the target data if there are target changes (or if
            // sufficient time has passed since the last update).
            /**
 * Returns true if the newTargetData should be persisted during an update of
 * an active target. TargetData should always be persisted when a target is
 * being released and should not call this function.
 *
 * While the target is active, TargetData updates can be omitted when nothing
 * about the target has changed except metadata like the resume token or
 * snapshot version. Occasionally it's worth the extra write to prevent these
 * values from getting too stale after a crash, but this doesn't have to be
 * too frequent.
 */ function(t, e, n) {
                // Always persist target data if we don't already have a resume token.
                if (0 === t.resumeToken.approximateByteSize()) return !0;
                // Don't allow resume token changes to be buffered indefinitely. This
                // allows us to be reasonably up-to-date after a crash and avoids needing
                // to loop over all active queries on shutdown. Especially in the browser
                // we may not get time to do anything interesting while the current tab is
                // closing.
                if (e.snapshotVersion.toMicroseconds() - t.snapshotVersion.toMicroseconds() >= 3e8) return !0;
                // Otherwise if the only thing that has changed about a target is its resume
                // token it's not worth persisting. Note that the RemoteStore keeps an
                // in-memory view of the currently active targets which includes the current
                // resume token, so stream failure or user changes will still use an
                // up-to-date resume token regardless of what we do here.
                return n.addedDocuments.size + n.modifiedDocuments.size + n.removedDocuments.size > 0;
            }(c, a, r) && o.push(n66.Vs.updateTargetData(t256, a));
        });
        let u1 = os(), c1 = ws();
        // HACK: The only reason we allow a null snapshot version is so that we
        // can synthesize remote events when we get permission denied errors while
        // trying to resolve the state of a locally cached document that is in
        // limbo.
        if (e142.documentUpdates.forEach((s)=>{
            e142.resolvedLimboDocuments.has(s) && o.push(n66.persistence.referenceDelegate.updateLimboDocument(t256, s));
        }), // Each loop iteration only affects its "own" doc, so it's safe to get all
        // the remote documents in advance in a single call.
        o.push(So(t256, r8, e142.documentUpdates).next((t)=>{
            u1 = t.Gi, c1 = t.Qi;
        })), !s35.isEqual(ct.min())) {
            const e = n66.Vs.getLastRemoteSnapshotVersion(t256).next((e)=>n66.Vs.setTargetsMetadata(t256, t256.currentSequenceNumber, s35));
            o.push(e);
        }
        return Pt.waitFor(o).next(()=>r8.apply(t256)).next(()=>n66.localDocuments.getLocalViewOfDocuments(t256, u1, c1)).next(()=>u1);
    }).then((t)=>(n66.$i = i, t));
}
/**
 * Populates document change buffer with documents from backend or a bundle.
 * Returns the document changes resulting from applying those documents, and
 * also a set of documents whose existence state are changed as a result.
 *
 * @param txn - Transaction to use to read existing documents from storage.
 * @param documentBuffer - Document buffer to collect the resulted changes to be
 *        applied to storage.
 * @param documents - Documents to be applied.
 */ function So(t257, e, n67) {
    let s36 = ws(), i = ws();
    return n67.forEach((t)=>s36 = s36.add(t)), e.getEntries(t257, s36).next((t)=>{
        let s = os();
        return n67.forEach((n, r)=>{
            const o = t.get(n);
            // Check if see if there is a existence state change for this document.
            r.isFoundDocument() !== o.isFoundDocument() && (i = i.add(n)), // Note: The order of the steps below is important, since we want
            // to ensure that rejected limbo resolutions (which fabricate
            // NoDocuments with SnapshotVersion.min()) never add documents to
            // cache.
            r.isNoDocument() && r.version.isEqual(ct.min()) ? // NoDocuments with SnapshotVersion.min() are used in manufactured
            // events. We remove these documents from cache since we lost
            // access.
            (e.removeEntry(n, r.readTime), s = s.insert(n, r)) : !o.isValidDocument() || r.version.compareTo(o.version) > 0 || 0 === r.version.compareTo(o.version) && o.hasPendingWrites ? (e.addEntry(r), s = s.insert(n, r)) : M("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", o.version, " Watch version:", r.version);
        }), {
            Gi: s,
            Qi: i
        };
    });
}
/**
 * Gets the mutation batch after the passed in batchId in the mutation queue
 * or null if empty.
 * @param afterBatchId - If provided, the batch to search after.
 * @returns The next mutation or null if there wasn't one.
 */ function Do(t258, e) {
    const n = K(t258);
    return n.persistence.runTransaction("Get next mutation batch", "readonly", (t)=>(void 0 === e && (e = -1), n.mutationQueue.getNextMutationBatchAfterBatchId(t, e)));
}
/**
 * Reads the current value of a Document with a given key or null if not
 * found - used for testing.
 */ /**
 * Assigns the given target an internal ID so that its results can be pinned so
 * they don't get GC'd. A target must be allocated in the local store before
 * the store can be used to manage its view.
 *
 * Allocating an already allocated `Target` will return the existing `TargetData`
 * for that `Target`.
 */ function Co(t259, e) {
    const n = K(t259);
    return n.persistence.runTransaction("Allocate target", "readwrite", (t)=>{
        let s;
        return n.Vs.getTargetData(t, e).next((i17)=>i17 ? // This target has been listened to previously, so reuse the
            // previous targetID.
            // TODO(mcg): freshen last accessed date?
            (s = i17, Pt.resolve(s)) : n.Vs.allocateTargetId(t).next((i)=>(s = new Li(e, i, 0 /* Listen */ , t.currentSequenceNumber), n.Vs.addTargetData(t, s).next(()=>s))));
    }).then((t)=>{
        // If Multi-Tab is enabled, the existing target data may be newer than
        // the in-memory data
        const s = n.$i.get(t.targetId);
        return (null === s || t.snapshotVersion.compareTo(s.snapshotVersion) > 0) && (n.$i = n.$i.insert(t.targetId, t), n.Bi.set(e, t.targetId)), t;
    });
}
/**
 * Returns the TargetData as seen by the LocalStore, including updates that may
 * have not yet been persisted to the TargetCache.
 */ // Visible for testing.
/**
 * Unpins all the documents associated with the given target. If
 * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
 * directly removes the associated target data from the target cache.
 *
 * Releasing a non-existing `Target` is a no-op.
 */ // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
async function xo(t260, e, n) {
    const s = K(t260), i = s.$i.get(e), r = n ? "readwrite" : "readwrite-primary";
    try {
        n || await s.persistence.runTransaction("Release target", r, (t)=>s.persistence.referenceDelegate.removeTarget(t, i));
    } catch (t) {
        if (!Ct(t)) throw t;
        // All `releaseTarget` does is record the final metadata state for the
        // target, but we've been recording this periodically during target
        // activity. If we lose this write this could cause a very slight
        // difference in the order of target deletion during GC, but we
        // don't define exact LRU semantics so this is acceptable.
        M("LocalStore", `Failed to update sequence numbers for target ${e}: ${t}`);
    }
    s.$i = s.$i.remove(e), s.Bi.delete(i.target);
}
/**
 * Runs the specified query against the local store and returns the results,
 * potentially taking advantage of query data from previous executions (such
 * as the set of remote keys).
 *
 * @param usePreviousResults - Whether results from previous executions can
 * be used to optimize this query execution.
 */ function No(t261, e143, n68) {
    const s37 = K(t261);
    let i18 = ct.min(), r = ws();
    return s37.persistence.runTransaction("Execute query", "readonly", (t262)=>(function(t, e, n) {
            const s = K(t), i = s.Bi.get(n);
            return void 0 !== i ? Pt.resolve(s.$i.get(i)) : s.Vs.getTargetData(e, n);
        })(s37, t262, ln(e143)).next((e)=>{
            if (e) return i18 = e.lastLimboFreeSnapshotVersion, s37.Vs.getMatchingKeysForTargetId(t262, e.targetId).next((t)=>{
                r = t;
            });
        }).next(()=>s37.Fi.getDocumentsMatchingQuery(t262, e143, n68 ? i18 : ct.min(), n68 ? r : ws())).next((t)=>(Mo(s37, gn(e143), t), {
                documents: t,
                ji: r
            })));
}
// PORTING NOTE: Multi-Tab only.
function ko(t263, e) {
    const n = K(t263), s = K(n.Vs), i = n.$i.get(e);
    return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", (t264)=>s.te(t264, e).next((t)=>t ? t.target : null));
}
/**
 * Returns the set of documents that have been updated since the last call.
 * If this is the first call, returns the set of changes since client
 * initialization. Further invocations will return document that have changed
 * since the prior call.
 */ // PORTING NOTE: Multi-Tab only.
function Oo(t265, e) {
    const n = K(t265), s = n.Li.get(e) || ct.min();
    // Get the current maximum read time for the collection. This should always
    // exist, but to reduce the chance for regressions we default to
    // SnapshotVersion.Min()
    // TODO(indexing): Consider removing the default value.
    return n.persistence.runTransaction("Get new document changes", "readonly", (t)=>n.Ui.getAllFromCollectionGroup(t, e, pt(s, -1), /* limit= */ Number.MAX_SAFE_INTEGER)).then((t)=>(Mo(n, e, t), t));
}
/** Sets the collection group's maximum read time from the given documents. */ // PORTING NOTE: Multi-Tab only.
function Mo(t, e144, n) {
    let s = ct.min();
    n.forEach((t, e)=>{
        e.readTime.compareTo(s) > 0 && (s = e.readTime);
    }), t.Li.set(e144, s);
}
/**
 * Creates a new target using the given bundle name, which will be used to
 * hold the keys of all documents from the bundle in query-document mappings.
 * This ensures that the loaded documents do not get garbage collected
 * right away.
 */ /**
 * Applies the documents from a bundle to the "ground-state" (remote)
 * documents.
 *
 * LocalDocuments are re-calculated if there are remaining mutations in the
 * queue.
 */ async function Fo(t267, e145, n, s) {
    const i = K(t267);
    let r = ws(), o = os();
    for (const t266 of n){
        const n = e145.Wi(t266.metadata.name);
        t266.document && (r = r.add(n));
        const s = e145.zi(t266);
        s.setReadTime(e145.Hi(t266.metadata.readTime)), o = o.insert(n, s);
    }
    const u = i.Ui.newChangeBuffer({
        trackRemovals: !0
    }), c = await Co(i, function(t) {
        // It is OK that the path used for the query is not valid, because this will
        // not be read and queried.
        return ln(rn(ht.fromString(`__bundle__/docs/${t}`)));
    }(s));
    // Allocates a target to hold all document keys from the bundle, such that
    // they will not get garbage collected right away.
    return i.persistence.runTransaction("Apply bundle documents", "readwrite", (t)=>So(t, u, o).next((e)=>(u.apply(t), e)).next((e)=>i.Vs.removeMatchingKeysForTargetId(t, c.targetId).next(()=>i.Vs.addMatchingKeys(t, r, c.targetId)).next(()=>i.localDocuments.getLocalViewOfDocuments(t, e.Gi, e.Qi)).next(()=>e.Gi)));
}
/**
 * Returns a promise of a boolean to indicate if the given bundle has already
 * been loaded and the create time is newer than the current loading bundle.
 */ /**
 * Saves the given `NamedQuery` to local persistence.
 */ async function $o(t268, e, n = ws()) {
    // Allocate a target for the named query such that it can be resumed
    // from associated read time if users use it to listen.
    // NOTE: this also means if no corresponding target exists, the new target
    // will remain active and will not get collected, unless users happen to
    // unlisten the query somehow.
    const s = await Co(t268, ln(Ji(e.bundledQuery))), i = K(t268);
    return i.persistence.runTransaction("Save named query", "readwrite", (t)=>{
        const r = Ns(e.readTime);
        // Simply save the query itself if it is older than what the SDK already
        // has.
        if (s.snapshotVersion.compareTo(r) >= 0) return i.Ds.saveNamedQuery(t, e);
        // Update existing target data because the query from the bundle is newer.
        const o = s.withResumeToken(Jt.EMPTY_BYTE_STRING, r);
        return i.$i = i.$i.insert(o.targetId, o), i.Vs.updateTargetData(t, o).next(()=>i.Vs.removeMatchingKeysForTargetId(t, s.targetId)).next(()=>i.Vs.addMatchingKeys(t, n, s.targetId)).next(()=>i.Ds.saveNamedQuery(t, e));
    });
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // The format of the LocalStorage key that stores the client state is:
//     firestore_clients_<persistence_prefix>_<instance_key>
/** Assembles the key for a client state in WebStorage */ function Bo(t, e) {
    return `firestore_clients_${t}_${e}`;
}
// The format of the WebStorage key that stores the mutation state is:
//     firestore_mutations_<persistence_prefix>_<batch_id>
//     (for unauthenticated users)
// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
// 'user_uid' is last to avoid needing to escape '_' characters that it might
// contain.
/** Assembles the key for a mutation batch in WebStorage */ function Lo(t, e, n) {
    let s = `firestore_mutations_${t}_${n}`;
    return e.isAuthenticated() && (s += `_${e.uid}`), s;
}
// The format of the WebStorage key that stores a query target's metadata is:
//     firestore_targets_<persistence_prefix>_<target_id>
/** Assembles the key for a query state in WebStorage */ function Uo(t, e) {
    return `firestore_targets_${t}_${e}`;
}
// The WebStorage prefix that stores the primary tab's online state. The
// format of the key is:
//     firestore_online_state_<persistence_prefix>
/**
 * Holds the state of a mutation batch, including its user ID, batch ID and
 * whether the batch is 'pending', 'acknowledged' or 'rejected'.
 */ // Visible for testing
class qo {
    constructor(t, e, n, s){
        this.user = t, this.batchId = e, this.state = n, this.error = s;
    }
    /**
     * Parses a MutationMetadata from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */ static Ji(t, e, n) {
        const s = JSON.parse(n);
        let i, r = "object" == typeof s && -1 !== [
            "pending",
            "acknowledged",
            "rejected"
        ].indexOf(s.state) && (void 0 === s.error || "object" == typeof s.error);
        return r && s.error && (r = "string" == typeof s.error.message && "string" == typeof s.error.code, r && (i = new Q(s.error.code, s.error.message))), r ? new qo(t, e, s.state, i) : (F("SharedClientState", `Failed to parse mutation state for ID '${e}': ${n}`), null);
    }
    Yi() {
        const t = {
            state: this.state,
            updateTimeMs: Date.now()
        };
        return this.error && (t.error = {
            code: this.error.code,
            message: this.error.message
        }), JSON.stringify(t);
    }
}
/**
 * Holds the state of a query target, including its target ID and whether the
 * target is 'not-current', 'current' or 'rejected'.
 */ // Visible for testing
class Ko {
    constructor(t, e, n){
        this.targetId = t, this.state = e, this.error = n;
    }
    /**
     * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */ static Ji(t, e) {
        const n = JSON.parse(e);
        let s, i = "object" == typeof n && -1 !== [
            "not-current",
            "current",
            "rejected"
        ].indexOf(n.state) && (void 0 === n.error || "object" == typeof n.error);
        return i && n.error && (i = "string" == typeof n.error.message && "string" == typeof n.error.code, i && (s = new Q(n.error.code, n.error.message))), i ? new Ko(t, n.state, s) : (F("SharedClientState", `Failed to parse target state for ID '${t}': ${e}`), null);
    }
    Yi() {
        const t = {
            state: this.state,
            updateTimeMs: Date.now()
        };
        return this.error && (t.error = {
            code: this.error.code,
            message: this.error.message
        }), JSON.stringify(t);
    }
}
/**
 * This class represents the immutable ClientState for a client read from
 * WebStorage, containing the list of active query targets.
 */ class Go {
    constructor(t, e){
        this.clientId = t, this.activeTargetIds = e;
    }
    /**
     * Parses a RemoteClientState from the JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */ static Ji(t, e) {
        const n = JSON.parse(e);
        let s = "object" == typeof n && n.activeTargetIds instanceof Array, i = gs();
        for(let t269 = 0; s && t269 < n.activeTargetIds.length; ++t269)s = ce(n.activeTargetIds[t269]), i = i.add(n.activeTargetIds[t269]);
        return s ? new Go(t, i) : (F("SharedClientState", `Failed to parse client data for instance '${t}': ${e}`), null);
    }
}
/**
 * This class represents the online state for all clients participating in
 * multi-tab. The online state is only written to by the primary client, and
 * used in secondary clients to update their query views.
 */ class Qo {
    constructor(t, e){
        this.clientId = t, this.onlineState = e;
    }
    /**
     * Parses a SharedOnlineState from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */ static Ji(t) {
        const e = JSON.parse(t);
        return "object" == typeof e && -1 !== [
            "Unknown",
            "Online",
            "Offline"
        ].indexOf(e.onlineState) && "string" == typeof e.clientId ? new Qo(e.clientId, e.onlineState) : (F("SharedClientState", `Failed to parse online state: ${t}`), null);
    }
}
/**
 * Metadata state of the local client. Unlike `RemoteClientState`, this class is
 * mutable and keeps track of all pending mutations, which allows us to
 * update the range of pending mutation batch IDs as new mutations are added or
 * removed.
 *
 * The data in `LocalClientState` is not read from WebStorage and instead
 * updated via its instance methods. The updated state can be serialized via
 * `toWebStorageJSON()`.
 */ // Visible for testing.
class jo {
    constructor(){
        this.activeTargetIds = gs();
    }
    Xi(t) {
        this.activeTargetIds = this.activeTargetIds.add(t);
    }
    Zi(t) {
        this.activeTargetIds = this.activeTargetIds.delete(t);
    }
    /**
     * Converts this entry into a JSON-encoded format we can use for WebStorage.
     * Does not encode `clientId` as it is part of the key in WebStorage.
     */ Yi() {
        const t = {
            activeTargetIds: this.activeTargetIds.toArray(),
            updateTimeMs: Date.now()
        };
        return JSON.stringify(t);
    }
}
/**
 * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the
 * backing store for the SharedClientState. It keeps track of all active
 * clients and supports modifications of the local client's data.
 */ class Wo {
    constructor(t270, e, n, s, i){
        this.window = t270, this.js = e, this.persistenceKey = n, this.tr = s, this.syncEngine = null, this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.er = this.nr.bind(this), this.sr = new qt(it), this.started = !1, /**
         * Captures WebStorage events that occur before `start()` is called. These
         * events are replayed once `WebStorageSharedClientState` is started.
         */ this.ir = [];
        // Escape the special characters mentioned here:
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
        const r = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        this.storage = this.window.localStorage, this.currentUser = i, this.rr = Bo(this.persistenceKey, this.tr), this.ur = /** Assembles the key for the current sequence number. */ function(t) {
            return `firestore_sequence_number_${t}`;
        }(this.persistenceKey), this.sr = this.sr.insert(this.tr, new jo), this.cr = new RegExp(`^firestore_clients_${r}_([^_]*)$`), this.ar = new RegExp(`^firestore_mutations_${r}_(\\d+)(?:_(.*))?$`), this.hr = new RegExp(`^firestore_targets_${r}_(\\d+)$`), this.lr = /** Assembles the key for the online state of the primary tab. */ function(t) {
            return `firestore_online_state_${t}`;
        }(this.persistenceKey), this.dr = function(t) {
            return `firestore_bundle_loaded_v2_${t}`;
        }(this.persistenceKey), // Rather than adding the storage observer during start(), we add the
        // storage observer during initialization. This ensures that we collect
        // events before other components populate their initial state (during their
        // respective start() calls). Otherwise, we might for example miss a
        // mutation that is added after LocalStore's start() processed the existing
        // mutations but before we observe WebStorage events.
        this.window.addEventListener("storage", this.er);
    }
    /** Returns 'true' if WebStorage is available in the current environment. */ static V(t) {
        return !(!t || !t.localStorage);
    }
    async start() {
        // Retrieve the list of existing clients to backfill the data in
        // SharedClientState.
        const t = await this.syncEngine.Ri();
        for (const e of t){
            if (e === this.tr) continue;
            const t = this.getItem(Bo(this.persistenceKey, e));
            if (t) {
                const n = Go.Ji(e, t);
                n && (this.sr = this.sr.insert(n.clientId, n));
            }
        }
        this._r();
        // Check if there is an existing online state and call the callback handler
        // if applicable.
        const e146 = this.storage.getItem(this.lr);
        if (e146) {
            const t = this.wr(e146);
            t && this.mr(t);
        }
        for (const t271 of this.ir)this.nr(t271);
        this.ir = [], // Register a window unload hook to remove the client metadata entry from
        // WebStorage even if `shutdown()` was not called.
        this.window.addEventListener("pagehide", ()=>this.shutdown()), this.started = !0;
    }
    writeSequenceNumber(t) {
        this.setItem(this.ur, JSON.stringify(t));
    }
    getAllActiveQueryTargets() {
        return this.gr(this.sr);
    }
    isActiveQueryTarget(t) {
        let e = !1;
        return this.sr.forEach((n, s)=>{
            s.activeTargetIds.has(t) && (e = !0);
        }), e;
    }
    addPendingMutation(t) {
        this.yr(t, "pending");
    }
    updateMutationState(t, e, n) {
        this.yr(t, e, n), // Once a final mutation result is observed by other clients, they no longer
        // access the mutation's metadata entry. Since WebStorage replays events
        // in order, it is safe to delete the entry right after updating it.
        this.pr(t);
    }
    addLocalQueryTarget(t) {
        let e = "not-current";
        // Lookup an existing query state if the target ID was already registered
        // by another tab
        if (this.isActiveQueryTarget(t)) {
            const n = this.storage.getItem(Uo(this.persistenceKey, t));
            if (n) {
                const s = Ko.Ji(t, n);
                s && (e = s.state);
            }
        }
        return this.Ir.Xi(t), this._r(), e;
    }
    removeLocalQueryTarget(t) {
        this.Ir.Zi(t), this._r();
    }
    isLocalQueryTarget(t) {
        return this.Ir.activeTargetIds.has(t);
    }
    clearQueryState(t) {
        this.removeItem(Uo(this.persistenceKey, t));
    }
    updateQueryState(t, e, n) {
        this.Tr(t, e, n);
    }
    handleUserChange(t272, e, n) {
        e.forEach((t)=>{
            this.pr(t);
        }), this.currentUser = t272, n.forEach((t)=>{
            this.addPendingMutation(t);
        });
    }
    setOnlineState(t) {
        this.Er(t);
    }
    notifyBundleLoaded(t) {
        this.Ar(t);
    }
    shutdown() {
        this.started && (this.window.removeEventListener("storage", this.er), this.removeItem(this.rr), this.started = !1);
    }
    getItem(t) {
        const e = this.storage.getItem(t);
        return M("SharedClientState", "READ", t, e), e;
    }
    setItem(t, e) {
        M("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
    }
    removeItem(t) {
        M("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
    }
    nr(t273) {
        // Note: The function is typed to take Event to be interface-compatible with
        // `Window.addEventListener`.
        const e147 = t273;
        if (e147.storageArea === this.storage) {
            if (M("SharedClientState", "EVENT", e147.key, e147.newValue), e147.key === this.rr) return void F("Received WebStorage notification for local change. Another client might have garbage-collected our state");
            this.js.enqueueRetryable(async ()=>{
                if (this.started) {
                    if (null !== e147.key) {
                        if (this.cr.test(e147.key)) {
                            if (null == e147.newValue) {
                                const t = this.Rr(e147.key);
                                return this.br(t, null);
                            }
                            {
                                const t = this.Pr(e147.key, e147.newValue);
                                if (t) return this.br(t.clientId, t);
                            }
                        } else if (this.ar.test(e147.key)) {
                            if (null !== e147.newValue) {
                                const t = this.vr(e147.key, e147.newValue);
                                if (t) return this.Vr(t);
                            }
                        } else if (this.hr.test(e147.key)) {
                            if (null !== e147.newValue) {
                                const t = this.Sr(e147.key, e147.newValue);
                                if (t) return this.Dr(t);
                            }
                        } else if (e147.key === this.lr) {
                            if (null !== e147.newValue) {
                                const t = this.wr(e147.newValue);
                                if (t) return this.mr(t);
                            }
                        } else if (e147.key === this.ur) {
                            const t274 = function(t) {
                                let e = $t.ot;
                                if (null != t) try {
                                    const n = JSON.parse(t);
                                    U("number" == typeof n), e = n;
                                } catch (t277) {
                                    F("SharedClientState", "Failed to read sequence number from WebStorage", t277);
                                }
                                return e;
                            }(e147.newValue);
                            t274 !== $t.ot && this.sequenceNumberHandler(t274);
                        } else if (e147.key === this.dr) {
                            const t278 = this.Cr(e147.newValue);
                            await Promise.all(t278.map((t)=>this.syncEngine.Nr(t)));
                        }
                    }
                } else this.ir.push(e147);
            });
        }
    }
    get Ir() {
        return this.sr.get(this.tr);
    }
    _r() {
        this.setItem(this.rr, this.Ir.Yi());
    }
    yr(t, e, n) {
        const s = new qo(this.currentUser, t, e, n), i = Lo(this.persistenceKey, this.currentUser, t);
        this.setItem(i, s.Yi());
    }
    pr(t) {
        const e = Lo(this.persistenceKey, this.currentUser, t);
        this.removeItem(e);
    }
    Er(t) {
        const e = {
            clientId: this.tr,
            onlineState: t
        };
        this.storage.setItem(this.lr, JSON.stringify(e));
    }
    Tr(t, e, n) {
        const s = Uo(this.persistenceKey, t), i = new Ko(t, e, n);
        this.setItem(s, i.Yi());
    }
    Ar(t) {
        const e = JSON.stringify(Array.from(t));
        this.setItem(this.dr, e);
    }
    /**
     * Parses a client state key in WebStorage. Returns null if the key does not
     * match the expected key format.
     */ Rr(t) {
        const e = this.cr.exec(t);
        return e ? e[1] : null;
    }
    /**
     * Parses a client state in WebStorage. Returns 'null' if the value could not
     * be parsed.
     */ Pr(t, e) {
        const n = this.Rr(t);
        return Go.Ji(n, e);
    }
    /**
     * Parses a mutation batch state in WebStorage. Returns 'null' if the value
     * could not be parsed.
     */ vr(t, e) {
        const n = this.ar.exec(t), s = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
        return qo.Ji(new C(i), s, e);
    }
    /**
     * Parses a query target state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */ Sr(t, e) {
        const n = this.hr.exec(t), s = Number(n[1]);
        return Ko.Ji(s, e);
    }
    /**
     * Parses an online state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */ wr(t) {
        return Qo.Ji(t);
    }
    Cr(t) {
        return JSON.parse(t);
    }
    async Vr(t) {
        if (t.user.uid === this.currentUser.uid) return this.syncEngine.kr(t.batchId, t.state, t.error);
        M("SharedClientState", `Ignoring mutation for non-active user ${t.user.uid}`);
    }
    Dr(t) {
        return this.syncEngine.Or(t.targetId, t.state, t.error);
    }
    br(t281, e) {
        const n = e ? this.sr.insert(t281, e) : this.sr.remove(t281), s = this.gr(this.sr), i = this.gr(n), r = [], o = [];
        return i.forEach((t)=>{
            s.has(t) || r.push(t);
        }), s.forEach((t)=>{
            i.has(t) || o.push(t);
        }), this.syncEngine.Mr(r, o).then(()=>{
            this.sr = n;
        });
    }
    mr(t) {
        // We check whether the client that wrote this online state is still active
        // by comparing its client ID to the list of clients kept active in
        // IndexedDb. If a client does not update their IndexedDb client state
        // within 5 seconds, it is considered inactive and we don't emit an online
        // state event.
        this.sr.get(t.clientId) && this.onlineStateHandler(t.onlineState);
    }
    gr(t) {
        let e = gs();
        return t.forEach((t, n)=>{
            e = e.unionWith(n.activeTargetIds);
        }), e;
    }
}
class zo {
    constructor(){
        this.Fr = new jo, this.$r = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
    }
    addPendingMutation(t) {
    // No op.
    }
    updateMutationState(t, e, n) {
    // No op.
    }
    addLocalQueryTarget(t) {
        return this.Fr.Xi(t), this.$r[t] || "not-current";
    }
    updateQueryState(t, e, n) {
        this.$r[t] = e;
    }
    removeLocalQueryTarget(t) {
        this.Fr.Zi(t);
    }
    isLocalQueryTarget(t) {
        return this.Fr.activeTargetIds.has(t);
    }
    clearQueryState(t) {
        delete this.$r[t];
    }
    getAllActiveQueryTargets() {
        return this.Fr.activeTargetIds;
    }
    isActiveQueryTarget(t) {
        return this.Fr.activeTargetIds.has(t);
    }
    start() {
        return this.Fr = new jo, Promise.resolve();
    }
    handleUserChange(t, e, n) {
    // No op.
    }
    setOnlineState(t) {
    // No op.
    }
    shutdown() {}
    writeSequenceNumber(t) {}
    notifyBundleLoaded(t) {
    // No op.
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Ho {
    Br(t) {
    // No-op.
    }
    shutdown() {
    // No-op.
    }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()
/* eslint-disable no-restricted-globals */ /**
 * Browser implementation of ConnectivityMonitor.
 */ class Jo {
    constructor(){
        this.Lr = ()=>this.Ur(), this.qr = ()=>this.Kr(), this.Gr = [], this.Qr();
    }
    Br(t) {
        this.Gr.push(t);
    }
    shutdown() {
        window.removeEventListener("online", this.Lr), window.removeEventListener("offline", this.qr);
    }
    Qr() {
        window.addEventListener("online", this.Lr), window.addEventListener("offline", this.qr);
    }
    Ur() {
        M("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
        for (const t of this.Gr)t(0 /* AVAILABLE */ );
    }
    Kr() {
        M("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
        for (const t of this.Gr)t(1 /* UNAVAILABLE */ );
    }
    // TODO(chenbrian): Consider passing in window either into this component or
    // here for testing via FakeWindow.
    /** Checks that all used attributes of window are available. */ static V() {
        return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const Yo = {
    BatchGetDocuments: "batchGet",
    Commit: "commit",
    RunQuery: "runQuery"
};
/**
 * Maps RPC names to the corresponding REST endpoint name.
 *
 * We use array notation to avoid mangling.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Provides a simple helper class that implements the Stream interface to
 * bridge to other implementations that are streams but do not implement the
 * interface. The stream callbacks are invoked with the callOn... methods.
 */ class Xo {
    constructor(t){
        this.jr = t.jr, this.Wr = t.Wr;
    }
    zr(t) {
        this.Hr = t;
    }
    Jr(t) {
        this.Yr = t;
    }
    onMessage(t) {
        this.Xr = t;
    }
    close() {
        this.Wr();
    }
    send(t) {
        this.jr(t);
    }
    Zr() {
        this.Hr();
    }
    eo(t) {
        this.Yr(t);
    }
    no(t) {
        this.Xr(t);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Zo extends /**
 * Base class for all Rest-based connections to the backend (WebChannel and
 * HTTP).
 */ class {
    constructor(t){
        this.databaseInfo = t, this.databaseId = t.databaseId;
        const e = t.ssl ? "https" : "http";
        this.so = e + "://" + t.host, this.io = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
    }
    ro(t291, e157, n, s, i) {
        const r = this.oo(t291, e157);
        M("RestConnection", "Sending: ", r, n);
        const o = {};
        return this.uo(o, s, i), this.co(t291, r, o, n).then((t)=>(M("RestConnection", "Received: ", t), t), (e)=>{
            throw $("RestConnection", `${t291} failed with error: `, e, "url: ", r, "request:", n), e;
        });
    }
    ao(t, e, n, s, i, r) {
        // The REST API automatically aggregates all of the streamed results, so we
        // can just use the normal invoke() method.
        return this.ro(t, e, n, s, i);
    }
    /**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */ uo(t, e158, n71) {
        t["X-Goog-Api-Client"] = "gl-js/ fire/" + x, // Content-Type: text/plain will avoid preflight requests which might
        // mess with CORS and redirects by proxies. If we add custom headers
        // we will need to change this code to potentially use the $httpOverwrite
        // parameter supported by ESF to avoid triggering preflight requests.
        t["Content-Type"] = "text/plain", this.databaseInfo.appId && (t["X-Firebase-GMPID"] = this.databaseInfo.appId), e158 && e158.headers.forEach((e, n)=>t[n] = e), n71 && n71.headers.forEach((e, n)=>t[n] = e);
    }
    oo(t, e) {
        const n = Yo[t];
        return `${this.so}/v1/${e}:${n}`;
    }
} {
    constructor(t){
        super(t), this.forceLongPolling = t.forceLongPolling, this.autoDetectLongPolling = t.autoDetectLongPolling, this.useFetchStreams = t.useFetchStreams;
    }
    co(t282, e148, n69, s) {
        return new Promise((i, r)=>{
            const o = new (0, _webchannelWrapper.XhrIo);
            o.listenOnce((0, _webchannelWrapper.EventType).COMPLETE, ()=>{
                try {
                    switch(o.getLastErrorCode()){
                        case (0, _webchannelWrapper.ErrorCode).NO_ERROR:
                            const e151 = o.getResponseJson();
                            M("Connection", "XHR received:", JSON.stringify(e151)), i(e151);
                            break;
                        case (0, _webchannelWrapper.ErrorCode).TIMEOUT:
                            M("Connection", 'RPC "' + t282 + '" timed out'), r(new Q(G.DEADLINE_EXCEEDED, "Request time out"));
                            break;
                        case (0, _webchannelWrapper.ErrorCode).HTTP_ERROR:
                            const n = o.getStatus();
                            if (M("Connection", 'RPC "' + t282 + '" failed with status:', n, "response text:", o.getResponseText()), n > 0) {
                                const t283 = o.getResponseJson().error;
                                if (t283 && t283.status && t283.message) {
                                    const e149 = function(t) {
                                        const e = t.toLowerCase().replace(/_/g, "-");
                                        return Object.values(G).indexOf(e) >= 0 ? e : G.UNKNOWN;
                                    }(t283.status);
                                    r(new Q(e149, t283.message));
                                } else r(new Q(G.UNKNOWN, "Server responded with status " + o.getStatus()));
                            } else // If we received an HTTP_ERROR but there's no status code,
                            // it's most probably a connection issue
                            r(new Q(G.UNAVAILABLE, "Connection failed."));
                            break;
                        default:
                            L();
                    }
                } finally{
                    M("Connection", 'RPC "' + t282 + '" completed.');
                }
            });
            const u = JSON.stringify(s);
            o.send(e148, "POST", u, n69, 15);
        });
    }
    ho(t286, e153, n70) {
        const s38 = [
            this.so,
            "/",
            "google.firestore.v1.Firestore",
            "/",
            t286,
            "/channel"
        ], i19 = (0, _webchannelWrapper.createWebChannelTransport)(), r = (0, _webchannelWrapper.getStatEventTarget)(), o = {
            // Required for backend stickiness, routing behavior is based on this
            // parameter.
            httpSessionIdParam: "gsessionid",
            initMessageHeaders: {},
            messageUrlParams: {
                // This param is used to improve routing and project isolation by the
                // backend and must be included in every request.
                database: `projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`
            },
            sendRawJson: !0,
            supportsCrossDomainXhr: !0,
            internalChannelParams: {
                // Override the default timeout (randomized between 10-20 seconds) since
                // a large write batch on a slow internet connection may take a long
                // time to send to the backend. Rather than have WebChannel impose a
                // tight timeout which could lead to infinite timeouts and retries, we
                // set it very large (5-10 minutes) and rely on the browser's builtin
                // timeouts to kick in if the request isn't working.
                forwardChannelRequestTimeoutMs: 6e5
            },
            forceLongPolling: this.forceLongPolling,
            detectBufferingProxy: this.autoDetectLongPolling
        };
        this.useFetchStreams && (o.xmlHttpFactory = new (0, _webchannelWrapper.FetchXmlHttpFactory)({})), this.uo(o.initMessageHeaders, e153, n70), // Sending the custom headers we just added to request.initMessageHeaders
        // (Authorization, etc.) will trigger the browser to make a CORS preflight
        // request because the XHR will no longer meet the criteria for a "simple"
        // CORS request:
        // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
        // Therefore to avoid the CORS preflight request (an extra network
        // roundtrip), we use the httpHeadersOverwriteParam option to specify that
        // the headers should instead be encoded into a special "$httpHeaders" query
        // parameter, which is recognized by the webchannel backend. This is
        // formally defined here:
        // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
        // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
        // doesn't have an Origin header. So we have to exclude a few browser environments that are
        // known to (sometimes) not include an Origin. See
        // https://github.com/firebase/firebase-js-sdk/issues/1491.
        (0, _util.isMobileCordova)() || (0, _util.isReactNative)() || (0, _util.isElectron)() || (0, _util.isIE)() || (0, _util.isUWP)() || (0, _util.isBrowserExtension)() || (o.httpHeadersOverwriteParam = "$httpHeaders");
        const u = s38.join("");
        M("Connection", "Creating WebChannel: " + u, o);
        const c = i19.createWebChannel(u, o);
        // WebChannel supports sending the first message with the handshake - saving
        // a network round trip. However, it will have to call send in the same
        // JS event loop as open. In order to enforce this, we delay actually
        // opening the WebChannel until send is called. Whether we have called
        // open is tracked with this variable.
        let a = !1, h = !1;
        // A flag to determine whether the stream was closed (by us or through an
        // error/close event) to avoid delivering multiple close events or sending
        // on a closed stream
        const l = new Xo({
            jr: (t)=>{
                h ? M("Connection", "Not sending because WebChannel is closed:", t) : (a || (M("Connection", "Opening WebChannel transport."), c.open(), a = !0), M("Connection", "WebChannel sending:", t), c.send(t));
            },
            Wr: ()=>c.close()
        }), y = (t287, e, n)=>{
            // TODO(dimond): closure typing seems broken because WebChannel does
            // not implement goog.events.Listenable
            t287.listen(e, (t)=>{
                try {
                    n(t);
                } catch (t288) {
                    setTimeout(()=>{
                        throw t288;
                    }, 0);
                }
            });
        };
        // Closure events are guarded and exceptions are swallowed, so catch any
        // exception and rethrow using a setTimeout so they become visible again.
        // Note that eventually this function could go away if we are confident
        // enough the code is exception free.
        return y(c, (0, _webchannelWrapper.WebChannel).EventType.OPEN, ()=>{
            h || M("Connection", "WebChannel transport opened.");
        }), y(c, (0, _webchannelWrapper.WebChannel).EventType.CLOSE, ()=>{
            h || (h = !0, M("Connection", "WebChannel transport closed"), l.eo());
        }), y(c, (0, _webchannelWrapper.WebChannel).EventType.ERROR, (t)=>{
            h || (h = !0, $("Connection", "WebChannel transport errored:", t), l.eo(new Q(G.UNAVAILABLE, "The operation could not be completed")));
        }), y(c, (0, _webchannelWrapper.WebChannel).EventType.MESSAGE, (t)=>{
            var e156;
            if (!h) {
                const n = t.data[0];
                U(!!n);
                // TODO(b/35143891): There is a bug in One Platform that caused errors
                // (and only errors) to be wrapped in an extra array. To be forward
                // compatible with the bug we need to check either condition. The latter
                // can be removed once the fix has been rolled out.
                // Use any because msgData.error is not typed.
                const s = n, i = s.error || (null === (e156 = s[0]) || void 0 === e156 ? void 0 : e156.error);
                if (i) {
                    M("Connection", "WebChannel received error:", i);
                    // error.status will be a string like 'OK' or 'NOT_FOUND'.
                    const t289 = i.status;
                    let e154 = /**
 * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
 *
 * @returns The Code equivalent to the given status string or undefined if
 *     there is no match.
 */ function(t) {
                        // lookup by string
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        const e = ts[t];
                        if (void 0 !== e) return ss(e);
                    }(t289), n = i.message;
                    void 0 === e154 && (e154 = G.INTERNAL, n = "Unknown error status: " + t289 + " with message " + i.message), // Mark closed so no further events are propagated
                    h = !0, l.eo(new Q(e154, n)), c.close();
                } else M("Connection", "WebChannel received:", n), l.no(n);
            }
        }), y(r, (0, _webchannelWrapper.Event).STAT_EVENT, (t)=>{
            t.stat === (0, _webchannelWrapper.Stat).PROXY ? M("Connection", "Detected buffering proxy") : t.stat === (0, _webchannelWrapper.Stat).NOPROXY && M("Connection", "Detected no buffering proxy");
        }), setTimeout(()=>{
            // Technically we could/should wait for the WebChannel opened event,
            // but because we want to send the first message with the WebChannel
            // handshake we pretend the channel opened here (asynchronously), and
            // then delay the actual open until the first message is sent.
            l.Zr();
        }, 0), l;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** Initializes the WebChannelConnection for the browser. */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** The Platform's 'window' implementation or null if not available. */ function tu() {
    // `window` is not always available, e.g. in ReactNative and WebWorkers.
    // eslint-disable-next-line no-restricted-globals
    return "undefined" != typeof window ? window : null;
}
/** The Platform's 'document' implementation or null if not available. */ function eu() {
    // `document` is not always available, e.g. in ReactNative and WebWorkers.
    // eslint-disable-next-line no-restricted-globals
    return "undefined" != typeof document ? document : null;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function nu(t) {
    return new Ss(t, /* useProto3Json= */ !0);
}
/**
 * An instance of the Platform's 'TextEncoder' implementation.
 */ /**
 * A helper for running delayed tasks following an exponential backoff curve
 * between attempts.
 *
 * Each delay is made up of a "base" delay which follows the exponential
 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
 * base delay. This prevents clients from accidentally synchronizing their
 * delays causing spikes of load to the backend.
 */ class su {
    constructor(/**
     * The AsyncQueue to run backoff operations on.
     */ t, /**
     * The ID to use when scheduling backoff operations on the AsyncQueue.
     */ e, /**
     * The initial delay (used as the base delay on the first retry attempt).
     * Note that jitter will still be applied, so the actual delay could be as
     * little as 0.5*initialDelayMs.
     */ n = 1e3, s = 1.5, i = 6e4){
        this.js = t, this.timerId = e, this.lo = n, this.fo = s, this._o = i, this.wo = 0, this.mo = null, /** The last backoff attempt, as epoch milliseconds. */ this.yo = Date.now(), this.reset();
    }
    /**
     * Resets the backoff delay.
     *
     * The very next backoffAndWait() will have no delay. If it is called again
     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
     * subsequent ones will increase according to the backoffFactor.
     */ reset() {
        this.wo = 0;
    }
    /**
     * Resets the backoff delay to the maximum delay (e.g. for use after a
     * RESOURCE_EXHAUSTED error).
     */ po() {
        this.wo = this._o;
    }
    /**
     * Returns a promise that resolves after currentDelayMs, and increases the
     * delay for any subsequent attempts. If there was a pending backoff operation
     * already, it will be canceled.
     */ Io(t) {
        // Cancel any pending backoff operation.
        this.cancel();
        // First schedule using the current base (which may be 0 and should be
        // honored as such).
        const e = Math.floor(this.wo + this.To()), n = Math.max(0, Date.now() - this.yo), s = Math.max(0, e - n);
        // Guard against lastAttemptTime being in the future due to a clock change.
        s > 0 && M("ExponentialBackoff", `Backing off for ${s} ms (base delay: ${this.wo} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), this.mo = this.js.enqueueAfterDelay(this.timerId, s, ()=>(this.yo = Date.now(), t())), // Apply backoff factor to determine next delay and ensure it is within
        // bounds.
        this.wo *= this.fo, this.wo < this.lo && (this.wo = this.lo), this.wo > this._o && (this.wo = this._o);
    }
    Eo() {
        null !== this.mo && (this.mo.skipDelay(), this.mo = null);
    }
    cancel() {
        null !== this.mo && (this.mo.cancel(), this.mo = null);
    }
    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */ To() {
        return (Math.random() - .5) * this.wo;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A PersistentStream is an abstract base class that represents a streaming RPC
 * to the Firestore backend. It's built on top of the connections own support
 * for streaming RPCs, and adds several critical features for our clients:
 *
 *   - Exponential backoff on failure
 *   - Authentication via CredentialsProvider
 *   - Dispatching all callbacks into the shared worker queue
 *   - Closing idle streams after 60 seconds of inactivity
 *
 * Subclasses of PersistentStream implement serialization of models to and
 * from the JSON representation of the protocol buffers for a specific
 * streaming RPC.
 *
 * ## Starting and Stopping
 *
 * Streaming RPCs are stateful and need to be start()ed before messages can
 * be sent and received. The PersistentStream will call the onOpen() function
 * of the listener once the stream is ready to accept requests.
 *
 * Should a start() fail, PersistentStream will call the registered onClose()
 * listener with a FirestoreError indicating what went wrong.
 *
 * A PersistentStream can be started and stopped repeatedly.
 *
 * Generic types:
 *  SendType: The type of the outgoing message of the underlying
 *    connection stream
 *  ReceiveType: The type of the incoming message of the underlying
 *    connection stream
 *  ListenerType: The type of the listener that will be used for callbacks
 */ class iu {
    constructor(t, e, n, s, i, r, o, u){
        this.js = t, this.Ao = n, this.Ro = s, this.bo = i, this.authCredentialsProvider = r, this.appCheckCredentialsProvider = o, this.listener = u, this.state = 0 /* Initial */ , /**
         * A close count that's incremented every time the stream is closed; used by
         * getCloseGuardedDispatcher() to invalidate callbacks that happen after
         * close.
         */ this.Po = 0, this.vo = null, this.Vo = null, this.stream = null, this.So = new su(t, e);
    }
    /**
     * Returns true if start() has been called and no error has occurred. True
     * indicates the stream is open or in the process of opening (which
     * encompasses respecting backoff, getting auth tokens, and starting the
     * actual RPC). Use isOpen() to determine if the stream is open and ready for
     * outbound requests.
     */ Do() {
        return 1 /* Starting */  === this.state || 5 /* Backoff */  === this.state || this.Co();
    }
    /**
     * Returns true if the underlying RPC is open (the onOpen() listener has been
     * called) and the stream is ready for outbound requests.
     */ Co() {
        return 2 /* Open */  === this.state || 3 /* Healthy */  === this.state;
    }
    /**
     * Starts the RPC. Only allowed if isStarted() returns false. The stream is
     * not immediately ready for use: onOpen() will be invoked when the RPC is
     * ready for outbound requests, at which point isOpen() will return true.
     *
     * When start returns, isStarted() will return true.
     */ start() {
        4 /* Error */  !== this.state ? this.auth() : this.xo();
    }
    /**
     * Stops the RPC. This call is idempotent and allowed regardless of the
     * current isStarted() state.
     *
     * When stop returns, isStarted() and isOpen() will both return false.
     */ async stop() {
        this.Do() && await this.close(0 /* Initial */ );
    }
    /**
     * After an error the stream will usually back off on the next attempt to
     * start it. If the error warrants an immediate restart of the stream, the
     * sender can use this to indicate that the receiver should not back off.
     *
     * Each error will call the onClose() listener. That function can decide to
     * inhibit backoff if required.
     */ No() {
        this.state = 0 /* Initial */ , this.So.reset();
    }
    /**
     * Marks this stream as idle. If no further actions are performed on the
     * stream for one minute, the stream will automatically close itself and
     * notify the stream's onClose() handler with Status.OK. The stream will then
     * be in a !isStarted() state, requiring the caller to start the stream again
     * before further use.
     *
     * Only streams that are in state 'Open' can be marked idle, as all other
     * states imply pending network operations.
     */ ko() {
        // Starts the idle time if we are in state 'Open' and are not yet already
        // running a timer (in which case the previous idle timeout still applies).
        this.Co() && null === this.vo && (this.vo = this.js.enqueueAfterDelay(this.Ao, 6e4, ()=>this.Oo()));
    }
    /** Sends a message to the underlying stream. */ Mo(t) {
        this.Fo(), this.stream.send(t);
    }
    /** Called by the idle timer when the stream should close due to inactivity. */ async Oo() {
        if (this.Co()) // When timing out an idle stream there's no reason to force the stream into backoff when
        // it restarts so set the stream state to Initial instead of Error.
        return this.close(0 /* Initial */ );
    }
    /** Marks the stream as active again. */ Fo() {
        this.vo && (this.vo.cancel(), this.vo = null);
    }
    /** Cancels the health check delayed operation. */ $o() {
        this.Vo && (this.Vo.cancel(), this.Vo = null);
    }
    /**
     * Closes the stream and cleans up as necessary:
     *
     * * closes the underlying GRPC stream;
     * * calls the onClose handler with the given 'error';
     * * sets internal stream state to 'finalState';
     * * adjusts the backoff timer based on the error
     *
     * A new stream can be opened by calling start().
     *
     * @param finalState - the intended state of the stream after closing.
     * @param error - the error the connection was closed with.
     */ async close(t, e) {
        // Cancel any outstanding timers (they're guaranteed not to execute).
        this.Fo(), this.$o(), this.So.cancel(), // Invalidates any stream-related callbacks (e.g. from auth or the
        // underlying stream), guaranteeing they won't execute.
        this.Po++, 4 /* Error */  !== t ? // If this is an intentional close ensure we don't delay our next connection attempt.
        this.So.reset() : e && e.code === G.RESOURCE_EXHAUSTED ? // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
        (F(e.toString()), F("Using maximum backoff delay to prevent overloading the backend."), this.So.po()) : e && e.code === G.UNAUTHENTICATED && 3 /* Healthy */  !== this.state && // "unauthenticated" error means the token was rejected. This should rarely
        // happen since both Auth and AppCheck ensure a sufficient TTL when we
        // request a token. If a user manually resets their system clock this can
        // fail, however. In this case, we should get a Code.UNAUTHENTICATED error
        // before we received the first message and we need to invalidate the token
        // to ensure that we fetch a new token.
        (this.authCredentialsProvider.invalidateToken(), this.appCheckCredentialsProvider.invalidateToken()), // Clean up the underlying stream because we are no longer interested in events.
        null !== this.stream && (this.Bo(), this.stream.close(), this.stream = null), // This state must be assigned before calling onClose() to allow the callback to
        // inhibit backoff or otherwise manipulate the state in its non-started state.
        this.state = t, // Notify the listener that the stream closed.
        await this.listener.Jr(e);
    }
    /**
     * Can be overridden to perform additional cleanup before the stream is closed.
     * Calling super.tearDown() is not required.
     */ Bo() {}
    auth() {
        this.state = 1 /* Starting */ ;
        const t292 = this.Lo(this.Po), e159 = this.Po;
        // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
        Promise.all([
            this.authCredentialsProvider.getToken(),
            this.appCheckCredentialsProvider.getToken()
        ]).then(([t, n])=>{
            // Stream can be stopped while waiting for authentication.
            // TODO(mikelehen): We really should just use dispatchIfNotClosed
            // and let this dispatch onto the queue, but that opened a spec test can
            // of worms that I don't want to deal with in this PR.
            this.Po === e159 && // Normally we'd have to schedule the callback on the AsyncQueue.
            // However, the following calls are safe to be called outside the
            // AsyncQueue since they don't chain asynchronous calls
            this.Uo(t, n);
        }, (e)=>{
            t292(()=>{
                const t = new Q(G.UNKNOWN, "Fetching auth token failed: " + e.message);
                return this.qo(t);
            });
        });
    }
    Uo(t293, e) {
        const n = this.Lo(this.Po);
        this.stream = this.Ko(t293, e), this.stream.zr(()=>{
            n(()=>(this.state = 2 /* Open */ , this.Vo = this.js.enqueueAfterDelay(this.Ro, 1e4, ()=>(this.Co() && (this.state = 3 /* Healthy */ ), Promise.resolve())), this.listener.zr()));
        }), this.stream.Jr((t)=>{
            n(()=>this.qo(t));
        }), this.stream.onMessage((t)=>{
            n(()=>this.onMessage(t));
        });
    }
    xo() {
        this.state = 5 /* Backoff */ , this.So.Io(async ()=>{
            this.state = 0 /* Initial */ , this.start();
        });
    }
    // Visible for tests
    qo(t) {
        // In theory the stream could close cleanly, however, in our current model
        // we never expect this to happen because if we stop a stream ourselves,
        // this callback will never be called. To prevent cases where we retry
        // without a backoff accidentally, we set the stream to error in all cases.
        return M("PersistentStream", `close with error: ${t}`), this.stream = null, this.close(4 /* Error */ , t);
    }
    /**
     * Returns a "dispatcher" function that dispatches operations onto the
     * AsyncQueue but only runs them if closeCount remains unchanged. This allows
     * us to turn auth / stream callbacks into no-ops if the stream is closed /
     * re-opened, etc.
     */ Lo(t) {
        return (e)=>{
            this.js.enqueueAndForget(()=>this.Po === t ? e() : (M("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve()));
        };
    }
}
/**
 * A PersistentStream that implements the Listen RPC.
 *
 * Once the Listen stream has called the onOpen() listener, any number of
 * listen() and unlisten() calls can be made to control what changes will be
 * sent from the server for ListenResponses.
 */ class ru extends iu {
    constructor(t, e, n, s, i, r){
        super(t, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , "health_check_timeout" /* HealthCheckTimeout */ , e, n, s, r), this.wt = i;
    }
    Ko(t, e) {
        return this.bo.ho("Listen", t, e);
    }
    onMessage(t294) {
        // A successful response means the stream is healthy
        this.So.reset();
        const e160 = Qs(this.wt, t294), n = function(t) {
            // We have only reached a consistent snapshot for the entire stream if there
            // is a read_time set and it applies to all targets (i.e. the list of
            // targets is empty). The backend is guaranteed to send such responses.
            if (!("targetChange" in t)) return ct.min();
            const e = t.targetChange;
            return e.targetIds && e.targetIds.length ? ct.min() : e.readTime ? Ns(e.readTime) : ct.min();
        }(t294);
        return this.listener.Go(e160, n);
    }
    /**
     * Registers interest in the results of the given target. If the target
     * includes a resumeToken it will be included in the request. Results that
     * affect the target will be streamed back as WatchChange messages that
     * reference the targetId.
     */ Qo(t295) {
        const e161 = {};
        e161.database = Ls(this.wt), e161.addTarget = function(t, e) {
            let n;
            const s = e.target;
            return n = $e(s) ? {
                documents: Hs(t, s)
            } : {
                query: Js(t, s)
            }, n.targetId = e.targetId, e.resumeToken.approximateByteSize() > 0 ? n.resumeToken = Cs(t, e.resumeToken) : e.snapshotVersion.compareTo(ct.min()) > 0 && // TODO(wuandy): Consider removing above check because it is most likely true.
            // Right now, many tests depend on this behaviour though (leaving min() out
            // of serialization).
            (n.readTime = Ds(t, e.snapshotVersion.toTimestamp())), n;
        }(this.wt, t295);
        const n72 = Xs(this.wt, t295);
        n72 && (e161.labels = n72), this.Mo(e161);
    }
    /**
     * Unregisters interest in the results of the target associated with the
     * given targetId.
     */ jo(t) {
        const e = {};
        e.database = Ls(this.wt), e.removeTarget = t, this.Mo(e);
    }
}
/**
 * A Stream that implements the Write RPC.
 *
 * The Write RPC requires the caller to maintain special streamToken
 * state in between calls, to help the server understand which responses the
 * client has processed by the time the next request is made. Every response
 * will contain a streamToken; this value must be passed to the next
 * request.
 *
 * After calling start() on this stream, the next request must be a handshake,
 * containing whatever streamToken is on hand. Once a response to this
 * request is received, all pending mutations may be submitted. When
 * submitting multiple batches of mutations at the same time, it's
 * okay to use the same streamToken for the calls to writeMutations.
 *
 * TODO(b/33271235): Use proto types
 */ class ou extends iu {
    constructor(t, e, n, s, i, r){
        super(t, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , "health_check_timeout" /* HealthCheckTimeout */ , e, n, s, r), this.wt = i, this.Wo = !1;
    }
    /**
     * Tracks whether or not a handshake has been successfully exchanged and
     * the stream is ready to accept mutations.
     */ get zo() {
        return this.Wo;
    }
    // Override of PersistentStream.start
    start() {
        this.Wo = !1, this.lastStreamToken = void 0, super.start();
    }
    Bo() {
        this.Wo && this.Ho([]);
    }
    Ko(t, e) {
        return this.bo.ho("Write", t, e);
    }
    onMessage(t) {
        if (// Always capture the last stream token.
        U(!!t.streamToken), this.lastStreamToken = t.streamToken, this.Wo) {
            // A successful first write response means the stream is healthy,
            // Note, that we could consider a successful handshake healthy, however,
            // the write itself might be causing an error we want to back off from.
            this.So.reset();
            const e = zs(t.writeResults, t.commitTime), n = Ns(t.commitTime);
            return this.listener.Jo(n, e);
        }
        // The first response is always the handshake response
        return U(!t.writeResults || 0 === t.writeResults.length), this.Wo = !0, this.listener.Yo();
    }
    /**
     * Sends an initial streamToken to the server, performing the handshake
     * required to make the StreamingWrite RPC work. Subsequent
     * calls should wait until onHandshakeComplete was called.
     */ Xo() {
        // TODO(dimond): Support stream resumption. We intentionally do not set the
        // stream token on the handshake, ignoring any stream token we might have.
        const t = {};
        t.database = Ls(this.wt), this.Mo(t);
    }
    /** Sends a group of mutations to the Firestore backend to apply. */ Ho(t296) {
        const e = {
            streamToken: this.lastStreamToken,
            writes: t296.map((t)=>js(this.wt, t))
        };
        this.Mo(e);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Datastore and its related methods are a wrapper around the external Google
 * Cloud Datastore grpc API, which provides an interface that is more convenient
 * for the rest of the client SDK architecture to consume.
 */ /**
 * An implementation of Datastore that exposes additional state for internal
 * consumption.
 */ class uu extends class {
} {
    constructor(t, e, n, s){
        super(), this.authCredentials = t, this.appCheckCredentials = e, this.bo = n, this.wt = s, this.Zo = !1;
    }
    tu() {
        if (this.Zo) throw new Q(G.FAILED_PRECONDITION, "The client has already been terminated.");
    }
    /** Invokes the provided RPC with auth and AppCheck tokens. */ ro(t297, e, n) {
        return this.tu(), Promise.all([
            this.authCredentials.getToken(),
            this.appCheckCredentials.getToken()
        ]).then(([s, i])=>this.bo.ro(t297, e, n, s, i)).catch((t)=>{
            throw "FirebaseError" === t.name ? (t.code === G.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t) : new Q(G.UNKNOWN, t.toString());
        });
    }
    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */ ao(t298, e, n, s) {
        return this.tu(), Promise.all([
            this.authCredentials.getToken(),
            this.appCheckCredentials.getToken()
        ]).then(([i, r])=>this.bo.ao(t298, e, n, i, r, s)).catch((t)=>{
            throw "FirebaseError" === t.name ? (t.code === G.UNAUTHENTICATED && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t) : new Q(G.UNKNOWN, t.toString());
        });
    }
    terminate() {
        this.Zo = !0;
    }
}
// TODO(firestorexp): Make sure there is only one Datastore instance per
// firestore-exp client.
/**
 * A component used by the RemoteStore to track the OnlineState (that is,
 * whether or not the client as a whole should be considered to be online or
 * offline), implementing the appropriate heuristics.
 *
 * In particular, when the client is trying to connect to the backend, we
 * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
 * a connection to succeed. If we have too many failures or the timeout elapses,
 * then we set the OnlineState to Offline, and the client will behave as if
 * it is offline (get()s will return cached data, etc.).
 */ class cu {
    constructor(t, e){
        this.asyncQueue = t, this.onlineStateHandler = e, /** The current OnlineState. */ this.state = "Unknown" /* Unknown */ , /**
         * A count of consecutive failures to open the stream. If it reaches the
         * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
         * Offline.
         */ this.eu = 0, /**
         * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
         * transition from OnlineState.Unknown to OnlineState.Offline without waiting
         * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
         */ this.nu = null, /**
         * Whether the client should log a warning message if it fails to connect to
         * the backend (initially true, cleared after a successful stream, or if we've
         * logged the message already).
         */ this.su = !0;
    }
    /**
     * Called by RemoteStore when a watch stream is started (including on each
     * backoff attempt).
     *
     * If this is the first attempt, it sets the OnlineState to Unknown and starts
     * the onlineStateTimer.
     */ iu() {
        0 === this.eu && (this.ru("Unknown" /* Unknown */ ), this.nu = this.asyncQueue.enqueueAfterDelay("online_state_timeout" /* OnlineStateTimeout */ , 1e4, ()=>(this.nu = null, this.ou("Backend didn't respond within 10 seconds."), this.ru("Offline" /* Offline */ ), Promise.resolve())));
    }
    /**
     * Updates our OnlineState as appropriate after the watch stream reports a
     * failure. The first failure moves us to the 'Unknown' state. We then may
     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
     * actually transition to the 'Offline' state.
     */ uu(t) {
        "Online" /* Online */  === this.state ? this.ru("Unknown" /* Unknown */ ) : (this.eu++, this.eu >= 1 && (this.cu(), this.ou(`Connection failed 1 times. Most recent error: ${t.toString()}`), this.ru("Offline" /* Offline */ )));
    }
    /**
     * Explicitly sets the OnlineState to the specified state.
     *
     * Note that this resets our timers / failure counters, etc. used by our
     * Offline heuristics, so must not be used in place of
     * handleWatchStreamStart() and handleWatchStreamFailure().
     */ set(t) {
        this.cu(), this.eu = 0, "Online" /* Online */  === t && // We've connected to watch at least once. Don't warn the developer
        // about being offline going forward.
        (this.su = !1), this.ru(t);
    }
    ru(t) {
        t !== this.state && (this.state = t, this.onlineStateHandler(t));
    }
    ou(t) {
        const e = `Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
        this.su ? (F(e), this.su = !1) : M("OnlineStateTracker", e);
    }
    cu() {
        null !== this.nu && (this.nu.cancel(), this.nu = null);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class au {
    constructor(/**
     * The local store, used to fill the write pipeline with outbound mutations.
     */ t299, /** The client-side proxy for interacting with the backend. */ e162, n, s, i){
        this.localStore = t299, this.datastore = e162, this.asyncQueue = n, this.remoteSyncer = {}, /**
         * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
         * LocalStore via fillWritePipeline() and have or will send to the write
         * stream.
         *
         * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
         * restart the write stream. When the stream is established the writes in the
         * pipeline will be sent in order.
         *
         * Writes remain in writePipeline until they are acknowledged by the backend
         * and thus will automatically be re-sent if the stream is interrupted /
         * restarted before they're acknowledged.
         *
         * Write responses from the backend are linked to their originating request
         * purely based on order, and so we can just shift() writes from the front of
         * the writePipeline as we receive responses.
         */ this.au = [], /**
         * A mapping of watched targets that the client cares about tracking and the
         * user has explicitly called a 'listen' for this target.
         *
         * These targets may or may not have been sent to or acknowledged by the
         * server. On re-establishing the listen stream, these targets should be sent
         * to the server. The targets removed with unlistens are removed eagerly
         * without waiting for confirmation from the listen stream.
         */ this.hu = new Map, /**
         * A set of reasons for why the RemoteStore may be offline. If empty, the
         * RemoteStore may start its network connections.
         */ this.lu = new Set, /**
         * Event handlers that get called when the network is disabled or enabled.
         *
         * PORTING NOTE: These functions are used on the Web client to create the
         * underlying streams (to support tree-shakeable streams). On Android and iOS,
         * the streams are created during construction of RemoteStore.
         */ this.fu = [], this.du = i, this.du.Br((t300)=>{
            n.enqueueAndForget(async ()=>{
                // Porting Note: Unlike iOS, `restartNetwork()` is called even when the
                // network becomes unreachable as we don't have any other way to tear
                // down our streams.
                yu(this) && (M("RemoteStore", "Restarting streams for network reachability change."), await async function(t) {
                    const e = K(t);
                    e.lu.add(4 /* ConnectivityChange */ ), await lu(e), e._u.set("Unknown" /* Unknown */ ), e.lu.delete(4 /* ConnectivityChange */ ), await hu(e);
                }(this));
            });
        }), this._u = new cu(n, s);
    }
}
async function hu(t) {
    if (yu(t)) for (const e of t.fu)await e(/* enabled= */ !0);
}
/**
 * Temporarily disables the network. The network can be re-enabled using
 * enableNetwork().
 */ async function lu(t) {
    for (const e of t.fu)await e(/* enabled= */ !1);
}
/**
 * Starts new listen for the given target. Uses resume token if provided. It
 * is a no-op if the target of given `TargetData` is already being listened to.
 */ function fu(t, e) {
    const n = K(t);
    n.hu.has(e.targetId) || // Mark this as something the client is currently listening for.
    (n.hu.set(e.targetId, e), gu(n) ? // The listen will be sent in onWatchStreamOpen
    mu(n) : Mu(n).Co() && _u(n, e));
}
/**
 * Removes the listen from server. It is a no-op if the given target id is
 * not being listened to.
 */ function du(t, e) {
    const n = K(t), s = Mu(n);
    n.hu.delete(e), s.Co() && wu(n, e), 0 === n.hu.size && (s.Co() ? s.ko() : yu(n) && // Revert to OnlineState.Unknown if the watch stream is not open and we
    // have no listeners, since without any listens to send we cannot
    // confirm if the stream is healthy and upgrade to OnlineState.Online.
    n._u.set("Unknown" /* Unknown */ ));
}
/**
 * We need to increment the the expected number of pending responses we're due
 * from watch so we wait for the ack to process any messages from this target.
 */ function _u(t, e) {
    t.wu.Nt(e.targetId), Mu(t).Qo(e);
}
/**
 * We need to increment the expected number of pending responses we're due
 * from watch so we wait for the removal on the server before we process any
 * messages from this target.
 */ function wu(t, e) {
    t.wu.Nt(e), Mu(t).jo(e);
}
function mu(t) {
    t.wu = new Rs({
        getRemoteKeysForTarget: (e)=>t.remoteSyncer.getRemoteKeysForTarget(e),
        te: (e)=>t.hu.get(e) || null
    }), Mu(t).start(), t._u.iu();
}
/**
 * Returns whether the watch stream should be started because it's necessary
 * and has not yet been started.
 */ function gu(t) {
    return yu(t) && !Mu(t).Do() && t.hu.size > 0;
}
function yu(t) {
    return 0 === K(t).lu.size;
}
function pu(t) {
    t.wu = void 0;
}
async function Iu(t) {
    t.hu.forEach((e, n)=>{
        _u(t, e);
    });
}
async function Tu(t, e) {
    pu(t), // If we still need the watch stream, retry the connection.
    gu(t) ? (t._u.uu(e), mu(t)) : // No need to restart watch stream because there are no active targets.
    // The online state is set to unknown because there is no active attempt
    // at establishing a connection
    t._u.set("Unknown" /* Unknown */ );
}
async function Eu(t301, e163, n73) {
    if (// Mark the client as online since we got a message from the server
    t301._u.set("Online" /* Online */ ), e163 instanceof Es && 2 /* Removed */  === e163.state && e163.cause) // There was an error on a target, don't wait for a consistent snapshot
    // to raise events
    try {
        await /** Handles an error on a target */ async function(t, e) {
            const n = e.cause;
            for (const s of e.targetIds)// A watched target might have been removed already.
            t.hu.has(s) && (await t.remoteSyncer.rejectListen(s, n), t.hu.delete(s), t.wu.removeTarget(s));
        }(t301, e163);
    } catch (n74) {
        M("RemoteStore", "Failed to remove targets %s: %s ", e163.targetIds.join(","), n74), await Au(t301, n74);
    }
    else if (e163 instanceof Is ? t301.wu.Ut(e163) : e163 instanceof Ts ? t301.wu.zt(e163) : t301.wu.Gt(e163), !n73.isEqual(ct.min())) try {
        const e164 = await vo(t301.localStore);
        n73.compareTo(e164) >= 0 && // We have received a target change with a global snapshot if the snapshot
        // version is not equal to SnapshotVersion.min().
        await /**
 * Takes a batch of changes from the Datastore, repackages them as a
 * RemoteEvent, and passes that on to the listener, which is typically the
 * SyncEngine.
 */ function(t, e166) {
            const n75 = t.wu.Yt(e166);
            // Update in-memory resume tokens. LocalStore will update the
            // persistent view of these when applying the completed RemoteEvent.
            return n75.targetChanges.forEach((n, s)=>{
                if (n.resumeToken.approximateByteSize() > 0) {
                    const i = t.hu.get(s);
                    // A watched target might have been removed already.
                    i && t.hu.set(s, i.withResumeToken(n.resumeToken, e166));
                }
            }), // Re-establish listens for the targets that have been invalidated by
            // existence filter mismatches.
            n75.targetMismatches.forEach((e)=>{
                const n = t.hu.get(e);
                if (!n) // A watched target might have been removed already.
                return;
                // Clear the resume token for the target, since we're in a known mismatch
                // state.
                t.hu.set(e, n.withResumeToken(Jt.EMPTY_BYTE_STRING, n.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
                // deliberately don't send a resume token so that we get a full update.
                wu(t, e);
                // Mark the target we send as being on behalf of an existence filter
                // mismatch, but don't actually retain that in listenTargets. This ensures
                // that we flag the first re-listen this way without impacting future
                // listens of this target (that might happen e.g. on reconnect).
                const s = new Li(n.target, e, 1 /* ExistenceFilterMismatch */ , n.sequenceNumber);
                _u(t, s);
            }), t.remoteSyncer.applyRemoteEvent(n75);
        }(t301, n73);
    } catch (e) {
        M("RemoteStore", "Failed to raise snapshot:", e), await Au(t301, e);
    }
}
/**
 * Recovery logic for IndexedDB errors that takes the network offline until
 * `op` succeeds. Retries are scheduled with backoff using
 * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
 * validated via a generic operation.
 *
 * The returned Promise is resolved once the network is disabled and before
 * any retry attempt.
 */ async function Au(t, e, n) {
    if (!Ct(e)) throw e;
    t.lu.add(1 /* IndexedDbFailed */ ), // Disable network and raise offline snapshots
    await lu(t), t._u.set("Offline" /* Offline */ ), n || // Use a simple read operation to determine if IndexedDB recovered.
    // Ideally, we would expose a health check directly on SimpleDb, but
    // RemoteStore only has access to persistence through LocalStore.
    (n = ()=>vo(t.localStore)), // Probe IndexedDB periodically and re-enable network
    t.asyncQueue.enqueueRetryable(async ()=>{
        M("RemoteStore", "Retrying IndexedDB access"), await n(), t.lu.delete(1 /* IndexedDbFailed */ ), await hu(t);
    });
}
/**
 * Executes `op`. If `op` fails, takes the network offline until `op`
 * succeeds. Returns after the first attempt.
 */ function Ru(t, e) {
    return e().catch((n)=>Au(t, n, e));
}
async function bu(t) {
    const e = K(t), n = Fu(e);
    let s = e.au.length > 0 ? e.au[e.au.length - 1].batchId : -1;
    for(; Pu(e);)try {
        const t = await Do(e.localStore, s);
        if (null === t) {
            0 === e.au.length && n.ko();
            break;
        }
        s = t.batchId, vu(e, t);
    } catch (t302) {
        await Au(e, t302);
    }
    Vu(e) && Su(e);
}
/**
 * Returns true if we can add to the write pipeline (i.e. the network is
 * enabled and the write pipeline is not full).
 */ function Pu(t) {
    return yu(t) && t.au.length < 10;
}
/**
 * Queues additional writes to be sent to the write stream, sending them
 * immediately if the write stream is established.
 */ function vu(t, e) {
    t.au.push(e);
    const n = Fu(t);
    n.Co() && n.zo && n.Ho(e.mutations);
}
function Vu(t) {
    return yu(t) && !Fu(t).Do() && t.au.length > 0;
}
function Su(t) {
    Fu(t).start();
}
async function Du(t) {
    Fu(t).Xo();
}
async function Cu(t) {
    const e = Fu(t);
    // Send the write pipeline now that the stream is established.
    for (const n of t.au)e.Ho(n.mutations);
}
async function xu(t, e, n) {
    const s = t.au.shift(), i = $i.from(s, e, n);
    await Ru(t, ()=>t.remoteSyncer.applySuccessfulWrite(i)), // It's possible that with the completion of this mutation another
    // slot has freed up.
    await bu(t);
}
async function Nu(t303, e167) {
    // If the write stream closed after the write handshake completes, a write
    // operation failed and we fail the pending operation.
    e167 && Fu(t303).zo && // This error affects the actual write.
    await async function(t, e) {
        // Only handle permanent errors here. If it's transient, just let the retry
        // logic kick in.
        if (n = e.code, ns(n) && n !== G.ABORTED) {
            // This was a permanent error, the request itself was the problem
            // so it's not going to succeed if we resend it.
            const n = t.au.shift();
            // In this case it's also unlikely that the server itself is melting
            // down -- this was just a bad request so inhibit backoff on the next
            // restart.
            Fu(t).No(), await Ru(t, ()=>t.remoteSyncer.rejectFailedWrite(n.batchId, e)), // It's possible that with the completion of this mutation
            // another slot has freed up.
            await bu(t);
        }
        var n;
    }(t303, e167), // The write stream might have been started by refilling the write
    // pipeline for failed writes
    Vu(t303) && Su(t303);
}
async function ku(t, e) {
    const n = K(t);
    n.asyncQueue.verifyOperationInProgress(), M("RemoteStore", "RemoteStore received new credentials");
    const s = yu(n);
    // Tear down and re-create our network streams. This will ensure we get a
    // fresh auth token for the new user and re-fill the write pipeline with
    // new mutations from the LocalStore (since mutations are per-user).
    n.lu.add(3 /* CredentialChange */ ), await lu(n), s && // Don't set the network status to Unknown if we are offline.
    n._u.set("Unknown" /* Unknown */ ), await n.remoteSyncer.handleCredentialChange(e), n.lu.delete(3 /* CredentialChange */ ), await hu(n);
}
/**
 * Toggles the network state when the client gains or loses its primary lease.
 */ async function Ou(t, e) {
    const n = K(t);
    e ? (n.lu.delete(2 /* IsSecondary */ ), await hu(n)) : e || (n.lu.add(2 /* IsSecondary */ ), await lu(n), n._u.set("Unknown" /* Unknown */ ));
}
/**
 * If not yet initialized, registers the WatchStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */ function Mu(t304) {
    return t304.mu || // Create stream (but note that it is not started yet).
    (t304.mu = function(t, e, n) {
        const s = K(t);
        return s.tu(), new ru(e, s.bo, s.authCredentials, s.appCheckCredentials, s.wt, n);
    }(t304.datastore, t304.asyncQueue, {
        zr: Iu.bind(null, t304),
        Jr: Tu.bind(null, t304),
        Go: Eu.bind(null, t304)
    }), t304.fu.push(async (e)=>{
        e ? (t304.mu.No(), gu(t304) ? mu(t304) : t304._u.set("Unknown" /* Unknown */ )) : (await t304.mu.stop(), pu(t304));
    })), t304.mu;
}
/**
 * If not yet initialized, registers the WriteStream and its network state
 * callback with `remoteStoreImpl`. Returns the existing stream if one is
 * already available.
 *
 * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
 * This is not done on Web to allow it to be tree-shaken.
 */ function Fu(t305) {
    return t305.gu || // Create stream (but note that it is not started yet).
    (t305.gu = function(t, e, n) {
        const s = K(t);
        return s.tu(), new ou(e, s.bo, s.authCredentials, s.appCheckCredentials, s.wt, n);
    }(t305.datastore, t305.asyncQueue, {
        zr: Du.bind(null, t305),
        Jr: Nu.bind(null, t305),
        Yo: Cu.bind(null, t305),
        Jo: xu.bind(null, t305)
    }), t305.fu.push(async (e)=>{
        e ? (t305.gu.No(), // This will start the write stream if necessary.
        await bu(t305)) : (await t305.gu.stop(), t305.au.length > 0 && (M("RemoteStore", `Stopping write stream with ${t305.au.length} pending writes`), t305.au = []));
    })), t305.gu;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Represents an operation scheduled to be run in the future on an AsyncQueue.
 *
 * It is created via DelayedOperation.createAndSchedule().
 *
 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
 *
 * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
 * in newer versions of TypeScript defines `finally`, which is not available in
 * IE.
 */ class $u {
    constructor(t, e, n, s, i){
        this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = s, this.removalCallback = i, this.deferred = new j, this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
        // and so we attach a dummy catch callback to avoid
        // 'UnhandledPromiseRejectionWarning' log spam.
        this.deferred.promise.catch((t)=>{});
    }
    /**
     * Creates and returns a DelayedOperation that has been scheduled to be
     * executed on the provided asyncQueue after the provided delayMs.
     *
     * @param asyncQueue - The queue to schedule the operation on.
     * @param id - A Timer ID identifying the type of operation this is.
     * @param delayMs - The delay (ms) before the operation should be scheduled.
     * @param op - The operation to run.
     * @param removalCallback - A callback to be called synchronously once the
     *   operation is executed or canceled, notifying the AsyncQueue to remove it
     *   from its delayedOperations list.
     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
     *   the DelayedOperation class public.
     */ static createAndSchedule(t, e, n, s, i) {
        const r = Date.now() + n, o = new $u(t, e, r, s, i);
        return o.start(n), o;
    }
    /**
     * Starts the timer. This is called immediately after construction by
     * createAndSchedule().
     */ start(t) {
        this.timerHandle = setTimeout(()=>this.handleDelayElapsed(), t);
    }
    /**
     * Queues the operation to run immediately (if it hasn't already been run or
     * canceled).
     */ skipDelay() {
        return this.handleDelayElapsed();
    }
    /**
     * Cancels the operation if it hasn't already been executed or canceled. The
     * promise will be rejected.
     *
     * As long as the operation has not yet been run, calling cancel() provides a
     * guarantee that the operation will not be run.
     */ cancel(t) {
        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new Q(G.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
    }
    handleDelayElapsed() {
        this.asyncQueue.enqueueAndForget(()=>null !== this.timerHandle ? (this.clearTimeout(), this.op().then((t)=>this.deferred.resolve(t))) : Promise.resolve());
    }
    clearTimeout() {
        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
    }
}
/**
 * Returns a FirestoreError that can be surfaced to the user if the provided
 * error is an IndexedDbTransactionError. Re-throws the error otherwise.
 */ function Bu(t, e) {
    if (F("AsyncQueue", `${e}: ${t}`), Ct(t)) return new Q(G.UNAVAILABLE, `${e}: ${t}`);
    throw t;
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * DocumentSet is an immutable (copy-on-write) collection that holds documents
 * in order specified by the provided comparator. We always add a document key
 * comparator on top of what is provided to guarantee document equality based on
 * the key.
 */ class Lu {
    /** The default ordering is by key if the comparator is omitted */ constructor(t306){
        // We are adding document key comparator to the end as it's the only
        // guaranteed unique property of a document.
        this.comparator = t306 ? (e, n)=>t306(e, n) || dt.comparator(e.key, n.key) : (t, e)=>dt.comparator(t.key, e.key), this.keyedMap = cs(), this.sortedSet = new qt(this.comparator);
    }
    /**
     * Returns an empty copy of the existing DocumentSet, using the same
     * comparator.
     */ static emptySet(t) {
        return new Lu(t.comparator);
    }
    has(t) {
        return null != this.keyedMap.get(t);
    }
    get(t) {
        return this.keyedMap.get(t);
    }
    first() {
        return this.sortedSet.minKey();
    }
    last() {
        return this.sortedSet.maxKey();
    }
    isEmpty() {
        return this.sortedSet.isEmpty();
    }
    /**
     * Returns the index of the provided key in the document set, or -1 if the
     * document key is not present in the set;
     */ indexOf(t) {
        const e = this.keyedMap.get(t);
        return e ? this.sortedSet.indexOf(e) : -1;
    }
    get size() {
        return this.sortedSet.size;
    }
    /** Iterates documents in order defined by "comparator" */ forEach(t) {
        this.sortedSet.inorderTraversal((e, n)=>(t(e), !1));
    }
    /** Inserts or updates a document with the same key */ add(t) {
        // First remove the element if we have it.
        const e = this.delete(t.key);
        return e.copy(e.keyedMap.insert(t.key, t), e.sortedSet.insert(t, null));
    }
    /** Deletes a document with a given key */ delete(t) {
        const e = this.get(t);
        return e ? this.copy(this.keyedMap.remove(t), this.sortedSet.remove(e)) : this;
    }
    isEqual(t) {
        if (!(t instanceof Lu)) return !1;
        if (this.size !== t.size) return !1;
        const e = this.sortedSet.getIterator(), n = t.sortedSet.getIterator();
        for(; e.hasNext();){
            const t = e.getNext().key, s = n.getNext().key;
            if (!t.isEqual(s)) return !1;
        }
        return !0;
    }
    toString() {
        const t = [];
        return this.forEach((e)=>{
            t.push(e.toString());
        }), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
    }
    copy(t, e) {
        const n = new Lu;
        return n.comparator = this.comparator, n.keyedMap = t, n.sortedSet = e, n;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
 * duplicate events for the same doc.
 */ class Uu {
    constructor(){
        this.yu = new qt(dt.comparator);
    }
    track(t) {
        const e = t.doc.key, n = this.yu.get(e);
        n ? // Merge the new change with the existing change.
        0 /* Added */  !== t.type && 3 /* Metadata */  === n.type ? this.yu = this.yu.insert(e, t) : 3 /* Metadata */  === t.type && 1 /* Removed */  !== n.type ? this.yu = this.yu.insert(e, {
            type: n.type,
            doc: t.doc
        }) : 2 /* Modified */  === t.type && 2 /* Modified */  === n.type ? this.yu = this.yu.insert(e, {
            type: 2 /* Modified */ ,
            doc: t.doc
        }) : 2 /* Modified */  === t.type && 0 /* Added */  === n.type ? this.yu = this.yu.insert(e, {
            type: 0 /* Added */ ,
            doc: t.doc
        }) : 1 /* Removed */  === t.type && 0 /* Added */  === n.type ? this.yu = this.yu.remove(e) : 1 /* Removed */  === t.type && 2 /* Modified */  === n.type ? this.yu = this.yu.insert(e, {
            type: 1 /* Removed */ ,
            doc: n.doc
        }) : 0 /* Added */  === t.type && 1 /* Removed */  === n.type ? this.yu = this.yu.insert(e, {
            type: 2 /* Modified */ ,
            doc: t.doc
        }) : // This includes these cases, which don't make sense:
        // Added->Added
        // Removed->Removed
        // Modified->Added
        // Removed->Modified
        // Metadata->Added
        // Removed->Metadata
        L() : this.yu = this.yu.insert(e, t);
    }
    pu() {
        const t = [];
        return this.yu.inorderTraversal((e, n)=>{
            t.push(n);
        }), t;
    }
}
class qu {
    constructor(t, e, n, s, i, r, o, u){
        this.query = t, this.docs = e, this.oldDocs = n, this.docChanges = s, this.mutatedKeys = i, this.fromCache = r, this.syncStateChanged = o, this.excludesMetadataChanges = u;
    }
    /** Returns a view snapshot as if all documents in the snapshot were added. */ static fromInitialDocuments(t307, e, n, s) {
        const i = [];
        return e.forEach((t)=>{
            i.push({
                type: 0 /* Added */ ,
                doc: t
            });
        }), new qu(t307, e, Lu.emptySet(e), i, n, s, /* syncStateChanged= */ !0, /* excludesMetadataChanges= */ !1);
    }
    get hasPendingWrites() {
        return !this.mutatedKeys.isEmpty();
    }
    isEqual(t) {
        if (!(this.fromCache === t.fromCache && this.syncStateChanged === t.syncStateChanged && this.mutatedKeys.isEqual(t.mutatedKeys) && dn(this.query, t.query) && this.docs.isEqual(t.docs) && this.oldDocs.isEqual(t.oldDocs))) return !1;
        const e = this.docChanges, n = t.docChanges;
        if (e.length !== n.length) return !1;
        for(let t308 = 0; t308 < e.length; t308++)if (e[t308].type !== n[t308].type || !e[t308].doc.isEqual(n[t308].doc)) return !1;
        return !0;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Holds the listeners and the last received ViewSnapshot for a query being
 * tracked by EventManager.
 */ class Ku {
    constructor(){
        this.Iu = void 0, this.listeners = [];
    }
}
class Gu {
    constructor(){
        this.queries = new is((t)=>_n(t), dn), this.onlineState = "Unknown" /* Unknown */ , this.Tu = new Set;
    }
}
async function Qu(t, e) {
    const n = K(t), s = e.query;
    let i = !1, r = n.queries.get(s);
    if (r || (i = !0, r = new Ku), i) try {
        r.Iu = await n.onListen(s);
    } catch (t309) {
        const n = Bu(t309, `Initialization of query '${wn(e.query)}' failed`);
        return void e.onError(n);
    }
    if (n.queries.set(s, r), r.listeners.push(e), // Run global snapshot listeners if a consistent snapshot has been emitted.
    e.Eu(n.onlineState), r.Iu) e.Au(r.Iu) && Hu(n);
}
async function ju(t, e) {
    const n = K(t), s = e.query;
    let i = !1;
    const r = n.queries.get(s);
    if (r) {
        const t = r.listeners.indexOf(e);
        t >= 0 && (r.listeners.splice(t, 1), i = 0 === r.listeners.length);
    }
    if (i) return n.queries.delete(s), n.onUnlisten(s);
}
function Wu(t, e) {
    const n = K(t);
    let s = !1;
    for (const t310 of e){
        const e = t310.query, i = n.queries.get(e);
        if (i) {
            for (const e of i.listeners)e.Au(t310) && (s = !0);
            i.Iu = t310;
        }
    }
    s && Hu(n);
}
function zu(t, e, n) {
    const s = K(t), i = s.queries.get(e);
    if (i) for (const t311 of i.listeners)t311.onError(n);
    // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
    // after an error.
    s.queries.delete(e);
}
// Call all global snapshot listeners that have been set.
function Hu(t312) {
    t312.Tu.forEach((t)=>{
        t.next();
    });
}
/**
 * QueryListener takes a series of internal view snapshots and determines
 * when to raise the event.
 *
 * It uses an Observer to dispatch events.
 */ class Ju {
    constructor(t, e, n){
        this.query = t, this.Ru = e, /**
         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
         * observer. This flag is set to true once we've actually raised an event.
         */ this.bu = !1, this.Pu = null, this.onlineState = "Unknown" /* Unknown */ , this.options = n || {};
    }
    /**
     * Applies the new ViewSnapshot to this listener, raising a user-facing event
     * if applicable (depending on what changed, whether the user has opted into
     * metadata-only changes, etc.). Returns true if a user-facing event was
     * indeed raised.
     */ Au(t) {
        if (!this.options.includeMetadataChanges) {
            // Remove the metadata only changes.
            const e = [];
            for (const n of t.docChanges)3 /* Metadata */  !== n.type && e.push(n);
            t = new qu(t.query, t.docs, t.oldDocs, e, t.mutatedKeys, t.fromCache, t.syncStateChanged, /* excludesMetadataChanges= */ !0);
        }
        let e = !1;
        return this.bu ? this.vu(t) && (this.Ru.next(t), e = !0) : this.Vu(t, this.onlineState) && (this.Su(t), e = !0), this.Pu = t, e;
    }
    onError(t) {
        this.Ru.error(t);
    }
    /** Returns whether a snapshot was raised. */ Eu(t) {
        this.onlineState = t;
        let e = !1;
        return this.Pu && !this.bu && this.Vu(this.Pu, t) && (this.Su(this.Pu), e = !0), e;
    }
    Vu(t, e) {
        // Always raise the first event when we're synced
        if (!t.fromCache) return !0;
        // NOTE: We consider OnlineState.Unknown as online (it should become Offline
        // or Online if we wait long enough).
        const n = "Offline" /* Offline */  !== e;
        // Don't raise the event if we're online, aren't synced yet (checked
        // above) and are waiting for a sync.
        return (!this.options.Du || !n) && (!t.docs.isEmpty() || "Offline" /* Offline */  === e);
    // Raise data from cache if we have any documents or we are offline
    }
    vu(t) {
        // We don't need to handle includeDocumentMetadataChanges here because
        // the Metadata only changes have already been stripped out if needed.
        // At this point the only changes we will see are the ones we should
        // propagate.
        if (t.docChanges.length > 0) return !0;
        const e = this.Pu && this.Pu.hasPendingWrites !== t.hasPendingWrites;
        return !(!t.syncStateChanged && !e) && !0 === this.options.includeMetadataChanges;
    // Generally we should have hit one of the cases above, but it's possible
    // to get here if there were only metadata docChanges and they got
    // stripped out.
    }
    Su(t) {
        t = qu.fromInitialDocuments(t.query, t.docs, t.mutatedKeys, t.fromCache), this.bu = !0, this.Ru.next(t);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A complete element in the bundle stream, together with the byte length it
 * occupies in the stream.
 */ class Yu {
    constructor(t, // How many bytes this element takes to store in the bundle.
    e){
        this.payload = t, this.byteLength = e;
    }
    Cu() {
        return "metadata" in this.payload;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Helper to convert objects from bundles to model objects in the SDK.
 */ class Xu {
    constructor(t){
        this.wt = t;
    }
    Wi(t) {
        return Fs(this.wt, t);
    }
    /**
     * Converts a BundleDocument to a MutableDocument.
     */ zi(t) {
        return t.metadata.exists ? Ks(this.wt, t.document, !1) : xe.newNoDocument(this.Wi(t.metadata.name), this.Hi(t.metadata.readTime));
    }
    Hi(t) {
        return Ns(t);
    }
}
/**
 * A class to process the elements from a bundle, load them into local
 * storage and provide progress update while loading.
 */ class Zu {
    constructor(t, e, n){
        this.xu = t, this.localStore = e, this.wt = n, /** Batched queries to be saved into storage */ this.queries = [], /** Batched documents to be saved into storage */ this.documents = [], /** The collection groups affected by this bundle. */ this.collectionGroups = new Set, this.progress = tc(t);
    }
    /**
     * Adds an element from the bundle to the loader.
     *
     * Returns a new progress if adding the element leads to a new progress,
     * otherwise returns null.
     */ Nu(t) {
        this.progress.bytesLoaded += t.byteLength;
        let e = this.progress.documentsLoaded;
        if (t.payload.namedQuery) this.queries.push(t.payload.namedQuery);
        else if (t.payload.documentMetadata) {
            this.documents.push({
                metadata: t.payload.documentMetadata
            }), t.payload.documentMetadata.exists || ++e;
            const n = ht.fromString(t.payload.documentMetadata.name);
            this.collectionGroups.add(n.get(n.length - 2));
        } else t.payload.document && (this.documents[this.documents.length - 1].document = t.payload.document, ++e);
        return e !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e, Object.assign({}, this.progress)) : null;
    }
    ku(t) {
        const e = new Map, n = new Xu(this.wt);
        for (const s of t)if (s.metadata.queries) {
            const t = n.Wi(s.metadata.name);
            for (const n76 of s.metadata.queries){
                const s = (e.get(n76) || ws()).add(t);
                e.set(n76, s);
            }
        }
        return e;
    }
    /**
     * Update the progress to 'Success' and return the updated progress.
     */ async complete() {
        const t = await Fo(this.localStore, new Xu(this.wt), this.documents, this.xu.id), e = this.ku(this.documents);
        for (const t313 of this.queries)await $o(this.localStore, t313, e.get(t313.name));
        return this.progress.taskState = "Success", {
            progress: this.progress,
            Ou: this.collectionGroups,
            Mu: t
        };
    }
}
/**
 * Returns a `LoadBundleTaskProgress` representing the initial progress of
 * loading a bundle.
 */ function tc(t) {
    return {
        taskState: "Running",
        documentsLoaded: 0,
        bytesLoaded: 0,
        totalDocuments: t.totalDocuments,
        totalBytes: t.totalBytes
    };
}
/**
 * Returns a `LoadBundleTaskProgress` representing the progress that the loading
 * has succeeded.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class ec {
    constructor(t){
        this.key = t;
    }
}
class nc {
    constructor(t){
        this.key = t;
    }
}
/**
 * View is responsible for computing the final merged truth of what docs are in
 * a query. It gets notified of local and remote changes to docs, and applies
 * the query filters and limits to determine the most correct possible results.
 */ class sc {
    constructor(t, /** Documents included in the remote target */ e){
        this.query = t, this.Fu = e, this.$u = null, /**
         * A flag whether the view is current with the backend. A view is considered
         * current after it has seen the current flag from the backend and did not
         * lose consistency within the watch stream (e.g. because of an existence
         * filter mismatch).
         */ this.current = !1, /** Documents in the view but not in the remote target */ this.Bu = ws(), /** Document Keys that have local changes */ this.mutatedKeys = ws(), this.Lu = yn(t), this.Uu = new Lu(this.Lu);
    }
    /**
     * The set of remote documents that the server has told us belongs to the target associated with
     * this view.
     */ get qu() {
        return this.Fu;
    }
    /**
     * Iterates over a set of doc changes, applies the query limit, and computes
     * what the new results should be, what the changes were, and whether we may
     * need to go back to the local cache for more results. Does not make any
     * changes to the view.
     * @param docChanges - The doc changes to apply to this view.
     * @param previousChanges - If this is being called with a refill, then start
     *        with this set of docs and changes instead of the current view.
     * @returns a new set of docs, changes, and refill flag.
     */ Ku(t314, e168) {
        const n = e168 ? e168.Gu : new Uu, s = e168 ? e168.Uu : this.Uu;
        let i = e168 ? e168.mutatedKeys : this.mutatedKeys, r = s, o = !1;
        // Track the last doc in a (full) limit. This is necessary, because some
        // update (a delete, or an update moving a doc past the old limit) might
        // mean there is some other document in the local cache that either should
        // come (1) between the old last limit doc and the new last document, in the
        // case of updates, or (2) after the new last document, in the case of
        // deletes. So we keep this doc at the old limit to compare the updates to.
        // Note that this should never get used in a refill (when previousChanges is
        // set), because there will only be adds -- no deletes or updates.
        const u = "F" /* First */  === this.query.limitType && s.size === this.query.limit ? s.last() : null, c = "L" /* Last */  === this.query.limitType && s.size === this.query.limit ? s.first() : null;
        // Drop documents out to meet limit/limitToLast requirement.
        if (t314.inorderTraversal((t, e)=>{
            const a = s.get(t), h = mn(this.query, e) ? e : null, l = !!a && this.mutatedKeys.has(a.key), f = !!h && (h.hasLocalMutations || // We only consider committed mutations for documents that were
            // mutated during the lifetime of the view.
            this.mutatedKeys.has(h.key) && h.hasCommittedMutations);
            let d = !1;
            // Calculate change
            if (a && h) a.data.isEqual(h.data) ? l !== f && (n.track({
                type: 3 /* Metadata */ ,
                doc: h
            }), d = !0) : this.Qu(a, h) || (n.track({
                type: 2 /* Modified */ ,
                doc: h
            }), d = !0, (u && this.Lu(h, u) > 0 || c && this.Lu(h, c) < 0) && // This doc moved from inside the limit to outside the limit.
            // That means there may be some other doc in the local cache
            // that should be included instead.
            (o = !0));
            else !a && h ? (n.track({
                type: 0 /* Added */ ,
                doc: h
            }), d = !0) : a && !h && (n.track({
                type: 1 /* Removed */ ,
                doc: a
            }), d = !0, (u || c) && // A doc was removed from a full limit query. We'll need to
            // requery from the local cache to see if we know about some other
            // doc that should be in the results.
            (o = !0));
            d && (h ? (r = r.add(h), i = f ? i.add(t) : i.delete(t)) : (r = r.delete(t), i = i.delete(t)));
        }), null !== this.query.limit) for(; r.size > this.query.limit;){
            const t = "F" /* First */  === this.query.limitType ? r.last() : r.first();
            r = r.delete(t.key), i = i.delete(t.key), n.track({
                type: 1 /* Removed */ ,
                doc: t
            });
        }
        return {
            Uu: r,
            Gu: n,
            Oi: o,
            mutatedKeys: i
        };
    }
    Qu(t, e) {
        // We suppress the initial change event for documents that were modified as
        // part of a write acknowledgment (e.g. when the value of a server transform
        // is applied) as Watch will send us the same document again.
        // By suppressing the event, we only raise two user visible events (one with
        // `hasPendingWrites` and the final state of the document) instead of three
        // (one with `hasPendingWrites`, the modified document with
        // `hasPendingWrites` and the final state of the document).
        return t.hasLocalMutations && e.hasCommittedMutations && !e.hasLocalMutations;
    }
    /**
     * Updates the view with the given ViewDocumentChanges and optionally updates
     * limbo docs and sync state from the provided target change.
     * @param docChanges - The set of changes to make to the view's docs.
     * @param updateLimboDocuments - Whether to update limbo documents based on
     *        this change.
     * @param targetChange - A target change to apply for computing limbo docs and
     *        sync state.
     * @returns A new ViewChange with the given docs, changes, and sync state.
     */ // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
    applyChanges(t315, e169, n77) {
        const s = this.Uu;
        this.Uu = t315.Uu, this.mutatedKeys = t315.mutatedKeys;
        // Sort changes based on type and query comparator
        const i = t315.Gu.pu();
        i.sort((t316, e170)=>(function(t317, e) {
                const n = (t)=>{
                    switch(t){
                        case 0 /* Added */ :
                            return 1;
                        case 2 /* Modified */ :
                        case 3 /* Metadata */ :
                            // A metadata change is converted to a modified change at the public
                            // api layer.  Since we sort by document key and then change type,
                            // metadata and modified changes must be sorted equivalently.
                            return 2;
                        case 1 /* Removed */ :
                            return 0;
                        default:
                            return L();
                    }
                };
                return n(t317) - n(e);
            })(t316.type, e170.type) || this.Lu(t316.doc, e170.doc)), this.ju(n77);
        const r = e169 ? this.Wu() : [], o = 0 === this.Bu.size && this.current ? 1 /* Synced */  : 0 /* Local */ , u = o !== this.$u;
        if (this.$u = o, 0 !== i.length || u) return {
            snapshot: new qu(this.query, t315.Uu, s, i, t315.mutatedKeys, 0 /* Local */  === o, u, /* excludesMetadataChanges= */ !1),
            zu: r
        };
        // no changes
        return {
            zu: r
        };
    }
    /**
     * Applies an OnlineState change to the view, potentially generating a
     * ViewChange if the view's syncState changes as a result.
     */ Eu(t) {
        return this.current && "Offline" /* Offline */  === t ? // If we're offline, set `current` to false and then call applyChanges()
        // to refresh our syncState and generate a ViewChange as appropriate. We
        // are guaranteed to get a new TargetChange that sets `current` back to
        // true once the client is back online.
        (this.current = !1, this.applyChanges({
            Uu: this.Uu,
            Gu: new Uu,
            mutatedKeys: this.mutatedKeys,
            Oi: !1
        }, /* updateLimboDocuments= */ !1)) : {
            zu: []
        };
    }
    /**
     * Returns whether the doc for the given key should be in limbo.
     */ Hu(t) {
        // If the remote end says it's part of this query, it's not in limbo.
        return !this.Fu.has(t) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
        !!this.Uu.has(t) && !this.Uu.get(t).hasLocalMutations;
    }
    /**
     * Updates syncedDocuments, current, and limbo docs based on the given change.
     * Returns the list of changes to which docs are in limbo.
     */ ju(t318) {
        t318 && (t318.addedDocuments.forEach((t)=>this.Fu = this.Fu.add(t)), t318.modifiedDocuments.forEach((t)=>{}), t318.removedDocuments.forEach((t)=>this.Fu = this.Fu.delete(t)), this.current = t318.current);
    }
    Wu() {
        // We can only determine limbo documents when we're in-sync with the server.
        if (!this.current) return [];
        // TODO(klimt): Do this incrementally so that it's not quadratic when
        // updating many documents.
        const t319 = this.Bu;
        this.Bu = ws(), this.Uu.forEach((t)=>{
            this.Hu(t.key) && (this.Bu = this.Bu.add(t.key));
        });
        // Diff the new limbo docs with the old limbo docs.
        const e = [];
        return t319.forEach((t)=>{
            this.Bu.has(t) || e.push(new nc(t));
        }), this.Bu.forEach((n)=>{
            t319.has(n) || e.push(new ec(n));
        }), e;
    }
    /**
     * Update the in-memory state of the current view with the state read from
     * persistence.
     *
     * We update the query view whenever a client's primary status changes:
     * - When a client transitions from primary to secondary, it can miss
     *   LocalStorage updates and its query views may temporarily not be
     *   synchronized with the state on disk.
     * - For secondary to primary transitions, the client needs to update the list
     *   of `syncedDocuments` since secondary clients update their query views
     *   based purely on synthesized RemoteEvents.
     *
     * @param queryResult.documents - The documents that match the query according
     * to the LocalStore.
     * @param queryResult.remoteKeys - The keys of the documents that match the
     * query according to the backend.
     *
     * @returns The ViewChange that resulted from this synchronization.
     */ // PORTING NOTE: Multi-tab only.
    Ju(t) {
        this.Fu = t.ji, this.Bu = ws();
        const e = this.Ku(t.documents);
        return this.applyChanges(e, /*updateLimboDocuments=*/ !0);
    }
    /**
     * Returns a view snapshot as if this query was just listened to. Contains
     * a document add for every existing document and the `fromCache` and
     * `hasPendingWrites` status of the already established view.
     */ // PORTING NOTE: Multi-tab only.
    Yu() {
        return qu.fromInitialDocuments(this.query, this.Uu, this.mutatedKeys, 0 /* Local */  === this.$u);
    }
}
/**
 * QueryView contains all of the data that SyncEngine needs to keep track of for
 * a particular query.
 */ class ic {
    constructor(/**
     * The query itself.
     */ t, /**
     * The target number created by the client that is used in the watch
     * stream to identify this query.
     */ e, /**
     * The view is responsible for computing the final merged truth of what
     * docs are in the query. It gets notified of local and remote changes,
     * and applies the query filters and limits to determine the most correct
     * possible results.
     */ n){
        this.query = t, this.targetId = e, this.view = n;
    }
}
/** Tracks a limbo resolution. */ class rc {
    constructor(t){
        this.key = t, /**
         * Set to true once we've received a document. This is used in
         * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
         * decide whether it needs to manufacture a delete event for the target once
         * the target is CURRENT.
         */ this.Xu = !1;
    }
}
/**
 * An implementation of `SyncEngine` coordinating with other parts of SDK.
 *
 * The parts of SyncEngine that act as a callback to RemoteStore need to be
 * registered individually. This is done in `syncEngineWrite()` and
 * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods
 * serve as entry points to RemoteStore's functionality.
 *
 * Note: some field defined in this class might have public access level, but
 * the class is not exported so they are only accessible from this module.
 * This is useful to implement optional features (like bundles) in free
 * functions, such that they are tree-shakeable.
 */ class oc {
    constructor(t320, e, n, // PORTING NOTE: Manages state synchronization in multi-tab environments.
    s, i, r){
        this.localStore = t320, this.remoteStore = e, this.eventManager = n, this.sharedClientState = s, this.currentUser = i, this.maxConcurrentLimboResolutions = r, this.Zu = {}, this.tc = new is((t)=>_n(t), dn), this.ec = new Map, /**
         * The keys of documents that are in limbo for which we haven't yet started a
         * limbo resolution query. The strings in this set are the result of calling
         * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
         *
         * The `Set` type was chosen because it provides efficient lookup and removal
         * of arbitrary elements and it also maintains insertion order, providing the
         * desired queue-like FIFO semantics.
         */ this.nc = new Set, /**
         * Keeps track of the target ID for each document that is in limbo with an
         * active target.
         */ this.sc = new qt(dt.comparator), /**
         * Keeps track of the information about an active limbo resolution for each
         * active target ID that was started for the purpose of limbo resolution.
         */ this.ic = new Map, this.rc = new io, /** Stores user completion handlers, indexed by User and BatchId. */ this.oc = {}, /** Stores user callbacks waiting for all pending writes to be acknowledged. */ this.uc = new Map, this.cc = kr.Rn(), this.onlineState = "Unknown" /* Unknown */ , // The primary state is set to `true` or `false` immediately after Firestore
        // startup. In the interim, a client should only be considered primary if
        // `isPrimary` is true.
        this.ac = void 0;
    }
    get isPrimaryClient() {
        return !0 === this.ac;
    }
}
/**
 * Initiates the new listen, resolves promise when listen enqueued to the
 * server. All the subsequent view snapshots or errors are sent to the
 * subscribed handlers. Returns the initial snapshot.
 */ async function uc(t, e) {
    const n = Mc(t);
    let s, i;
    const r = n.tc.get(e);
    if (r) // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
    // already exists when EventManager calls us for the first time. This
    // happens when the primary tab is already listening to this query on
    // behalf of another tab and the user of the primary also starts listening
    // to the query. EventManager will not have an assigned target ID in this
    // case and calls `listen` to obtain this ID.
    s = r.targetId, n.sharedClientState.addLocalQueryTarget(s), i = r.view.Yu();
    else {
        const t = await Co(n.localStore, ln(e));
        n.isPrimaryClient && fu(n.remoteStore, t);
        const r = n.sharedClientState.addLocalQueryTarget(t.targetId);
        s = t.targetId, i = await cc(n, e, s, "current" === r);
    }
    return i;
}
/**
 * Registers a view for a previously unknown query and computes its initial
 * snapshot.
 */ async function cc(t321, e171, n78, s39) {
    // PORTING NOTE: On Web only, we inject the code that registers new Limbo
    // targets based on view changes. This allows us to only depend on Limbo
    // changes when user code includes queries.
    t321.hc = (e172, n79, s40)=>(async function(t322, e, n, s) {
            let i = e.view.Ku(n);
            i.Oi && // The query has a limit and some docs were removed, so we need
            // to re-run the query against the local store to make sure we
            // didn't lose any good docs that had been past the limit.
            (i = await No(t322.localStore, e.query, /* usePreviousResults= */ !1).then(({ documents: t  })=>e.view.Ku(t, i)));
            const r = s && s.targetChanges.get(e.targetId), o = e.view.applyChanges(i, /* updateLimboDocuments= */ t322.isPrimaryClient, r);
            return Tc(t322, e.targetId, o.zu), o.snapshot;
        })(t321, e172, n79, s40);
    const i20 = await No(t321.localStore, e171, /* usePreviousResults= */ !0), r9 = new sc(e171, i20.ji), o4 = r9.Ku(i20.documents), u = ps.createSynthesizedTargetChangeForCurrentChange(n78, s39 && "Offline" /* Offline */  !== t321.onlineState), c = r9.applyChanges(o4, /* updateLimboDocuments= */ t321.isPrimaryClient, u);
    Tc(t321, n78, c.zu);
    const a = new ic(e171, n78, r9);
    return t321.tc.set(e171, a), t321.ec.has(n78) ? t321.ec.get(n78).push(e171) : t321.ec.set(n78, [
        e171
    ]), c.snapshot;
}
/** Stops listening to the query. */ async function ac(t323, e) {
    const n = K(t323), s = n.tc.get(e), i = n.ec.get(s.targetId);
    if (i.length > 1) return n.ec.set(s.targetId, i.filter((t)=>!dn(t, e))), void n.tc.delete(e);
    // No other queries are mapped to the target, clean up the query and the target.
    if (n.isPrimaryClient) {
        // We need to remove the local query target first to allow us to verify
        // whether any other client is still interested in this target.
        n.sharedClientState.removeLocalQueryTarget(s.targetId);
        n.sharedClientState.isActiveQueryTarget(s.targetId) || await xo(n.localStore, s.targetId, /*keepPersistedTargetData=*/ !1).then(()=>{
            n.sharedClientState.clearQueryState(s.targetId), du(n.remoteStore, s.targetId), pc(n, s.targetId);
        }).catch(bt);
    } else pc(n, s.targetId), await xo(n.localStore, s.targetId, /*keepPersistedTargetData=*/ !0);
}
/**
 * Initiates the write of local mutation batch which involves adding the
 * writes to the mutation queue, notifying the remote store about new
 * mutations and raising events for any changes this write caused.
 *
 * The promise returned by this call is resolved when the above steps
 * have completed, *not* when the write was acked by the backend. The
 * userCallback is resolved once the write was acked/rejected by the
 * backend (or failed locally for any other reason).
 */ async function hc(t325, e173, n80) {
    const s41 = Fc(t325);
    try {
        const t324 = await function(t326, e174) {
            const n = K(t326), s42 = ut.now(), i21 = e174.reduce((t, e)=>t.add(e.key), ws());
            let r, o5;
            return n.persistence.runTransaction("Locally write mutations", "readwrite", (t327)=>{
                // Figure out which keys do not have a remote version in the cache, this
                // is needed to create the right overlay mutation: if no remote version
                // presents, we do not need to create overlays as patch mutations.
                // TODO(Overlay): Is there a better way to determine this? Using the
                //  document version does not work because local mutations set them back
                //  to 0.
                let u = os(), c = ws();
                return n.Ui.getEntries(t327, i21).next((t328)=>{
                    u = t328, u.forEach((t, e)=>{
                        e.isValidDocument() || (c = c.add(t));
                    });
                }).next(()=>n.localDocuments.getOverlayedDocuments(t327, u)).next((i)=>{
                    r = i;
                    // For non-idempotent mutations (such as `FieldValue.increment()`),
                    // we record the base state in a separate patch mutation. This is
                    // later used to guarantee consistent values and prevents flicker
                    // even if the backend sends us an update that already includes our
                    // transform.
                    const o = [];
                    for (const t of e174){
                        const e = Gn(t, r.get(t.key).overlayedDocument);
                        null != e && // NOTE: The base state should only be applied if there's some
                        // existing document to override, so use a Precondition of
                        // exists=true
                        o.push(new Wn(t.key, e, Ce(e.value.mapValue), $n.exists(!0)));
                    }
                    return n.mutationQueue.addMutationBatch(t327, s42, o, e174);
                }).next((e)=>{
                    o5 = e;
                    const s = e.applyToLocalDocumentSet(r, c);
                    return n.documentOverlayCache.saveOverlays(t327, e.batchId, s);
                });
            }).then(()=>({
                    batchId: o5.batchId,
                    changes: as(r)
                }));
        }(s41.localStore, e173);
        s41.sharedClientState.addPendingMutation(t324.batchId), function(t, e, n) {
            let s = t.oc[t.currentUser.toKey()];
            s || (s = new qt(it));
            s = s.insert(e, n), t.oc[t.currentUser.toKey()] = s;
        }(s41, t324.batchId, n80), await Rc(s41, t324.changes), await bu(s41.remoteStore);
    } catch (t) {
        // If we can't persist the mutation, we reject the user callback and
        // don't send the mutation. The user can then retry the write.
        const e = Bu(t, "Failed to persist write");
        n80.reject(e);
    }
}
/**
 * Applies one remote event to the sync engine, notifying any views of the
 * changes, and releasing any pending mutation batches that would become
 * visible because of the snapshot version the remote event contains.
 */ async function lc(t330, e175) {
    const n = K(t330);
    try {
        const t329 = await Vo(n.localStore, e175);
        // Update `receivedDocument` as appropriate for any limbo targets.
        e175.targetChanges.forEach((t, e)=>{
            const s = n.ic.get(e);
            s && // Since this is a limbo resolution lookup, it's for a single document
            // and it could be added, modified, or removed, but not a combination.
            (U(t.addedDocuments.size + t.modifiedDocuments.size + t.removedDocuments.size <= 1), t.addedDocuments.size > 0 ? s.Xu = !0 : t.modifiedDocuments.size > 0 ? U(s.Xu) : t.removedDocuments.size > 0 && (U(s.Xu), s.Xu = !1));
        }), await Rc(n, t329, e175);
    } catch (t) {
        await bt(t);
    }
}
/**
 * Applies an OnlineState change to the sync engine and notifies any views of
 * the change.
 */ function fc(t, e176, n81) {
    const s43 = K(t);
    // If we are the secondary client, we explicitly ignore the remote store's
    // online state (the local client may go offline, even though the primary
    // tab remains online) and only apply the primary tab's online state from
    // SharedClientState.
    if (s43.isPrimaryClient && 0 /* RemoteStore */  === n81 || !s43.isPrimaryClient && 1 /* SharedClientState */  === n81) {
        const t331 = [];
        s43.tc.forEach((n, s)=>{
            const i = s.view.Eu(e176);
            i.snapshot && t331.push(i.snapshot);
        }), function(t, e) {
            const n82 = K(t);
            n82.onlineState = e;
            let s = !1;
            n82.queries.forEach((t, n)=>{
                for (const t332 of n.listeners)// Run global snapshot listeners if a consistent snapshot has been emitted.
                t332.Eu(e) && (s = !0);
            }), s && Hu(n82);
        }(s43.eventManager, e176), t331.length && s43.Zu.Go(t331), s43.onlineState = e176, s43.isPrimaryClient && s43.sharedClientState.setOnlineState(e176);
    }
}
/**
 * Rejects the listen for the given targetID. This can be triggered by the
 * backend for any active target.
 *
 * @param syncEngine - The sync engine implementation.
 * @param targetId - The targetID corresponds to one previously initiated by the
 * user as part of TargetData passed to listen() on RemoteStore.
 * @param err - A description of the condition that has forced the rejection.
 * Nearly always this will be an indication that the user is no longer
 * authorized to see the data matching the target.
 */ async function dc(t, e, n) {
    const s = K(t);
    // PORTING NOTE: Multi-tab only.
    s.sharedClientState.updateQueryState(e, "rejected", n);
    const i = s.ic.get(e), r = i && i.key;
    if (r) {
        // TODO(klimt): We really only should do the following on permission
        // denied errors, but we don't have the cause code here.
        // It's a limbo doc. Create a synthetic event saying it was deleted.
        // This is kind of a hack. Ideally, we would have a method in the local
        // store to purge a document. However, it would be tricky to keep all of
        // the local store's invariants with another method.
        let t = new qt(dt.comparator);
        // TODO(b/217189216): This limbo document should ideally have a read time,
        // so that it is picked up by any read-time based scans. The backend,
        // however, does not send a read time for target removals.
        t = t.insert(r, xe.newNoDocument(r, ct.min()));
        const n = ws().add(r), i = new ys(ct.min(), /* targetChanges= */ new Map, /* targetMismatches= */ new Qt(it), t, n);
        await lc(s, i), // Since this query failed, we won't want to manually unlisten to it.
        // We only remove it from bookkeeping after we successfully applied the
        // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
        // this query when the RemoteStore restarts the Watch stream, which should
        // re-trigger the target failure.
        s.sc = s.sc.remove(r), s.ic.delete(e), Ac(s);
    } else await xo(s.localStore, e, /* keepPersistedTargetData */ !1).then(()=>pc(s, e, n)).catch(bt);
}
async function _c(t, e) {
    const n = K(t), s = e.batch.batchId;
    try {
        const t = await Po(n.localStore, e);
        // The local store may or may not be able to apply the write result and
        // raise events immediately (depending on whether the watcher is caught
        // up), so we raise user callbacks first so that they consistently happen
        // before listen events.
        yc(n, s, /*error=*/ null), gc(n, s), n.sharedClientState.updateMutationState(s, "acknowledged"), await Rc(n, t);
    } catch (t333) {
        await bt(t333);
    }
}
async function wc(t335, e177, n83) {
    const s44 = K(t335);
    try {
        const t334 = await function(t336, e178) {
            const n = K(t336);
            return n.persistence.runTransaction("Reject batch", "readwrite-primary", (t)=>{
                let s;
                return n.mutationQueue.lookupMutationBatch(t, e178).next((e)=>(U(null !== e), s = e.keys(), n.mutationQueue.removeMutationBatch(t, e))).next(()=>n.mutationQueue.performConsistencyCheck(t)).next(()=>n.documentOverlayCache.removeOverlaysForBatchId(t, s, e178)).next(()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(t, s)).next(()=>n.localDocuments.getDocuments(t, s));
            });
        }(s44.localStore, e177);
        // The local store may or may not be able to apply the write result and
        // raise events immediately (depending on whether the watcher is caught up),
        // so we raise user callbacks first so that they consistently happen before
        // listen events.
        yc(s44, e177, n83), gc(s44, e177), s44.sharedClientState.updateMutationState(e177, "rejected", n83), await Rc(s44, t334);
    } catch (n) {
        await bt(n);
    }
}
/**
 * Registers a user callback that resolves when all pending mutations at the moment of calling
 * are acknowledged .
 */ async function mc(t338, e179) {
    const n = K(t338);
    yu(n.remoteStore) || M("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
    try {
        const t337 = await function(t339) {
            const e = K(t339);
            return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (t)=>e.mutationQueue.getHighestUnacknowledgedBatchId(t));
        }(n.localStore);
        if (-1 === t337) // Trigger the callback right away if there is no pending writes at the moment.
        return void e179.resolve();
        const s = n.uc.get(t337) || [];
        s.push(e179), n.uc.set(t337, s);
    } catch (t) {
        const n = Bu(t, "Initialization of waitForPendingWrites() operation failed");
        e179.reject(n);
    }
}
/**
 * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
 * if there are any.
 */ function gc(t340, e) {
    (t340.uc.get(e) || []).forEach((t)=>{
        t.resolve();
    }), t340.uc.delete(e);
}
/** Reject all outstanding callbacks waiting for pending writes to complete. */ function yc(t, e, n) {
    const s = K(t);
    let i = s.oc[s.currentUser.toKey()];
    // NOTE: Mutations restored from persistence won't have callbacks, so it's
    // okay for there to be no callback for this ID.
    if (i) {
        const t = i.get(e);
        t && (n ? t.reject(n) : t.resolve(), i = i.remove(e)), s.oc[s.currentUser.toKey()] = i;
    }
}
function pc(t, e180, n = null) {
    t.sharedClientState.removeLocalQueryTarget(e180);
    for (const s of t.ec.get(e180))t.tc.delete(s), n && t.Zu.lc(s, n);
    if (t.ec.delete(e180), t.isPrimaryClient) t.rc.us(e180).forEach((e)=>{
        t.rc.containsKey(e) || // We removed the last reference for this key
        Ic(t, e);
    });
}
function Ic(t, e) {
    t.nc.delete(e.path.canonicalString());
    // It's possible that the target already got removed because the query failed. In that case,
    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
    const n = t.sc.get(e);
    null !== n && (du(t.remoteStore, n), t.sc = t.sc.remove(e), t.ic.delete(n), Ac(t));
}
function Tc(t, e, n) {
    for (const s of n)if (s instanceof ec) t.rc.addReference(s.key, e), Ec(t, s);
    else if (s instanceof nc) {
        M("SyncEngine", "Document no longer in limbo: " + s.key), t.rc.removeReference(s.key, e);
        t.rc.containsKey(s.key) || // We removed the last reference for this key
        Ic(t, s.key);
    } else L();
}
function Ec(t, e) {
    const n = e.key, s = n.path.canonicalString();
    t.sc.get(n) || t.nc.has(s) || (M("SyncEngine", "New document in limbo: " + n), t.nc.add(s), Ac(t));
}
/**
 * Starts listens for documents in limbo that are enqueued for resolution,
 * subject to a maximum number of concurrent resolutions.
 *
 * Without bounding the number of concurrent resolutions, the server can fail
 * with "resource exhausted" errors which can lead to pathological client
 * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
 */ function Ac(t) {
    for(; t.nc.size > 0 && t.sc.size < t.maxConcurrentLimboResolutions;){
        const e = t.nc.values().next().value;
        t.nc.delete(e);
        const n = new dt(ht.fromString(e)), s = t.cc.next();
        t.ic.set(s, new rc(n)), t.sc = t.sc.insert(n, s), fu(t.remoteStore, new Li(ln(rn(n.path)), s, 2 /* LimboResolution */ , $t.ot));
    }
}
async function Rc(t341, e181, n84) {
    const s45 = K(t341), i22 = [], r = [], o = [];
    s45.tc.isEmpty() || (s45.tc.forEach((t342, u)=>{
        o.push(s45.hc(u, e181, n84).then((t)=>{
            if (t) {
                s45.isPrimaryClient && s45.sharedClientState.updateQueryState(u.targetId, t.fromCache ? "not-current" : "current"), i22.push(t);
                const e = To.Vi(u.targetId, t);
                r.push(e);
            }
        }));
    }), await Promise.all(o), s45.Zu.Go(i22), await async function(t344, e182) {
        const n = K(t344);
        try {
            await n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (t)=>Pt.forEach(e182, (e)=>Pt.forEach(e.Pi, (s)=>n.persistence.referenceDelegate.addReference(t, e.targetId, s)).next(()=>Pt.forEach(e.vi, (s)=>n.persistence.referenceDelegate.removeReference(t, e.targetId, s)))));
        } catch (t) {
            if (!Ct(t)) throw t;
            // If `notifyLocalViewChanges` fails, we did not advance the sequence
            // number for the documents that were included in this transaction.
            // This might trigger them to be deleted earlier than they otherwise
            // would have, but it should not invalidate the integrity of the data.
            M("LocalStore", "Failed to update sequence numbers: " + t);
        }
        for (const t343 of e182){
            const e = t343.targetId;
            if (!t343.fromCache) {
                const t = n.$i.get(e), s = t.snapshotVersion, i = t.withLastLimboFreeSnapshotVersion(s);
                // Advance the last limbo free snapshot version
                n.$i = n.$i.insert(e, i);
            }
        }
    }(s45.localStore, r));
}
async function bc(t346, e183) {
    const n = K(t346);
    if (!n.currentUser.isEqual(e183)) {
        M("SyncEngine", "User change. New user:", e183.toKey());
        const t345 = await bo(n.localStore, e183);
        n.currentUser = e183, // Fails tasks waiting for pending writes requested by previous user.
        function(t347, e) {
            t347.uc.forEach((t348)=>{
                t348.forEach((t)=>{
                    t.reject(new Q(G.CANCELLED, e));
                });
            }), t347.uc.clear();
        }(n, "'waitForPendingWrites' promise is rejected due to a user change."), // TODO(b/114226417): Consider calling this only in the primary tab.
        n.sharedClientState.handleUserChange(e183, t345.removedBatchIds, t345.addedBatchIds), await Rc(n, t345.Ki);
    }
}
function Pc(t, e) {
    const n = K(t), s = n.ic.get(e);
    if (s && s.Xu) return ws().add(s.key);
    {
        let t = ws();
        const s = n.ec.get(e);
        if (!s) return t;
        for (const e184 of s){
            const s = n.tc.get(e184);
            t = t.unionWith(s.view.qu);
        }
        return t;
    }
}
/**
 * Reconcile the list of synced documents in an existing view with those
 * from persistence.
 */ async function vc(t, e) {
    const n = K(t), s = await No(n.localStore, e.query, /* usePreviousResults= */ !0), i = e.view.Ju(s);
    return n.isPrimaryClient && Tc(n, e.targetId, i.zu), i;
}
/**
 * Retrieves newly changed documents from remote document cache and raises
 * snapshots if needed.
 */ // PORTING NOTE: Multi-Tab only.
async function Vc(t349, e) {
    const n = K(t349);
    return Oo(n.localStore, e).then((t)=>Rc(n, t));
}
/** Applies a mutation state to an existing batch.  */ // PORTING NOTE: Multi-Tab only.
async function Sc(t350, e185, n85, s46) {
    const i = K(t350), r = await function(t351, e186) {
        const n = K(t351), s = K(n.mutationQueue);
        return n.persistence.runTransaction("Lookup mutation documents", "readonly", (t)=>s.yn(t, e186).next((e)=>e ? n.localDocuments.getDocuments(t, e) : Pt.resolve(null)));
    }(i.localStore, e185);
    null !== r ? ("pending" === n85 ? // If we are the primary client, we need to send this write to the
    // backend. Secondary clients will ignore these writes since their remote
    // connection is disabled.
    await bu(i.remoteStore) : "acknowledged" === n85 || "rejected" === n85 ? // NOTE: Both these methods are no-ops for batches that originated from
    // other clients.
    (yc(i, e185, s46 || null), gc(i, e185), function(t, e) {
        K(K(t).mutationQueue).In(e);
    }(i.localStore, e185)) : L(), await Rc(i, r)) : // A throttled tab may not have seen the mutation before it was completed
    // and removed from the mutation queue, in which case we won't have cached
    // the affected documents. In this case we can safely ignore the update
    // since that means we didn't apply the mutation locally at all (if we
    // had, we would have cached the affected documents), and so we will just
    // see any resulting document changes via normal remote document updates
    // as applicable.
    M("SyncEngine", "Cannot apply mutation batch with id: " + e185);
}
/** Applies a query target change from a different tab. */ // PORTING NOTE: Multi-Tab only.
async function Dc(t, e188) {
    const n86 = K(t);
    if (Mc(n86), Fc(n86), !0 === e188 && !0 !== n86.ac) {
        // Secondary tabs only maintain Views for their local listeners and the
        // Views internal state may not be 100% populated (in particular
        // secondary tabs don't track syncedDocuments, the set of documents the
        // server considers to be in the target). So when a secondary becomes
        // primary, we need to need to make sure that all views for all targets
        // match the state on disk.
        const t = n86.sharedClientState.getAllActiveQueryTargets(), e = await Cc(n86, t.toArray());
        n86.ac = !0, await Ou(n86.remoteStore, !0);
        for (const t352 of e)fu(n86.remoteStore, t352);
    } else if (!1 === e188 && !1 !== n86.ac) {
        const t353 = [];
        let e187 = Promise.resolve();
        n86.ec.forEach((s, i)=>{
            n86.sharedClientState.isLocalQueryTarget(i) ? t353.push(i) : e187 = e187.then(()=>(pc(n86, i), xo(n86.localStore, i, /*keepPersistedTargetData=*/ !0))), du(n86.remoteStore, i);
        }), await e187, await Cc(n86, t353), // PORTING NOTE: Multi-Tab only.
        function(t) {
            const e = K(t);
            e.ic.forEach((t, n)=>{
                du(e.remoteStore, n);
            }), e.rc.cs(), e.ic = new Map, e.sc = new qt(dt.comparator);
        }(n86), n86.ac = !1, await Ou(n86.remoteStore, !1);
    }
}
async function Cc(t, e, n) {
    const s = K(t), i = [], r = [];
    for (const t354 of e){
        let e;
        const n = s.ec.get(t354);
        if (n && 0 !== n.length) {
            // For queries that have a local View, we fetch their current state
            // from LocalStore (as the resume token and the snapshot version
            // might have changed) and reconcile their views with the persisted
            // state (the list of syncedDocuments may have gotten out of sync).
            e = await Co(s.localStore, ln(n[0]));
            for (const t of n){
                const e = s.tc.get(t), n = await vc(s, e);
                n.snapshot && r.push(n.snapshot);
            }
        } else {
            // For queries that never executed on this client, we need to
            // allocate the target in LocalStore and initialize a new View.
            const n = await ko(s.localStore, t354);
            e = await Co(s.localStore, n), await cc(s, xc(n), t354, /*current=*/ !1);
        }
        i.push(e);
    }
    return s.Zu.Go(r), i;
}
/**
 * Creates a `Query` object from the specified `Target`. There is no way to
 * obtain the original `Query`, so we synthesize a `Query` from the `Target`
 * object.
 *
 * The synthesized result might be different from the original `Query`, but
 * since the synthesized `Query` should return the same results as the
 * original one (only the presentation of results might differ), the potential
 * difference will not cause issues.
 */ // PORTING NOTE: Multi-Tab only.
function xc(t) {
    return sn(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F" /* First */ , t.startAt, t.endAt);
}
/** Returns the IDs of the clients that are currently active. */ // PORTING NOTE: Multi-Tab only.
function Nc(t) {
    const e = K(t);
    return K(K(e.localStore).persistence).Ri();
}
/** Applies a query target change from a different tab. */ // PORTING NOTE: Multi-Tab only.
async function kc(t, e, n, s) {
    const i = K(t);
    if (i.ac) // If we receive a target state notification via WebStorage, we are
    // either already secondary or another tab has taken the primary lease.
    return void M("SyncEngine", "Ignoring unexpected query state notification.");
    const r = i.ec.get(e);
    if (r && r.length > 0) switch(n){
        case "current":
        case "not-current":
            {
                const t = await Oo(i.localStore, gn(r[0])), s = ys.createSynthesizedRemoteEventForCurrentChange(e, "current" === n);
                await Rc(i, t, s);
                break;
            }
        case "rejected":
            await xo(i.localStore, e, /* keepPersistedTargetData */ !0), pc(i, e, s);
            break;
        default:
            L();
    }
}
/** Adds or removes Watch targets for queries from different tabs. */ async function Oc(t, e, n) {
    const s = Mc(t);
    if (s.ac) {
        for (const t of e){
            if (s.ec.has(t)) {
                // A target might have been added in a previous attempt
                M("SyncEngine", "Adding an already active target " + t);
                continue;
            }
            const e = await ko(s.localStore, t), n = await Co(s.localStore, e);
            await cc(s, xc(e), n.targetId, /*current=*/ !1), fu(s.remoteStore, n);
        }
        for (const t355 of n)// Check that the target is still active since the target might have been
        // removed if it has been rejected by the backend.
        s.ec.has(t355) && // Release queries that are still active.
        await xo(s.localStore, t355, /* keepPersistedTargetData */ !1).then(()=>{
            du(s.remoteStore, t355), pc(s, t355);
        }).catch(bt);
    }
}
function Mc(t) {
    const e = K(t);
    return e.remoteStore.remoteSyncer.applyRemoteEvent = lc.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = Pc.bind(null, e), e.remoteStore.remoteSyncer.rejectListen = dc.bind(null, e), e.Zu.Go = Wu.bind(null, e.eventManager), e.Zu.lc = zu.bind(null, e.eventManager), e;
}
function Fc(t) {
    const e = K(t);
    return e.remoteStore.remoteSyncer.applySuccessfulWrite = _c.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = wc.bind(null, e), e;
}
/**
 * Loads a Firestore bundle into the SDK. The returned promise resolves when
 * the bundle finished loading.
 *
 * @param syncEngine - SyncEngine to use.
 * @param bundleReader - Bundle to load into the SDK.
 * @param task - LoadBundleTask used to update the loading progress to public API.
 */ function $c(t356, e189, n87) {
    const s47 = K(t356);
    /** Loads a bundle and returns the list of affected collection groups. */ // eslint-disable-next-line @typescript-eslint/no-floating-promises
    (async function(t357, e190, n88) {
        try {
            const s48 = await e190.getMetadata();
            if (await function(t358, e) {
                const n = K(t358), s = Ns(e.createTime);
                return n.persistence.runTransaction("hasNewerBundle", "readonly", (t)=>n.Ds.getBundleMetadata(t, e.id)).then((t)=>!!t && t.createTime.compareTo(s) >= 0);
            }(t357.localStore, s48)) return await e190.close(), n88._completeWith(function(t) {
                return {
                    taskState: "Success",
                    documentsLoaded: t.totalDocuments,
                    bytesLoaded: t.totalBytes,
                    totalDocuments: t.totalDocuments,
                    totalBytes: t.totalBytes
                };
            }(s48)), Promise.resolve(new Set);
            n88._updateProgress(tc(s48));
            const i = new Zu(s48, t357.localStore, e190.wt);
            let r = await e190.fc();
            for(; r;){
                const t = await i.Nu(r);
                t && n88._updateProgress(t), r = await e190.fc();
            }
            const o = await i.complete();
            return await Rc(t357, o.Mu, /* remoteEvent */ void 0), // Save metadata, so loading the same bundle will skip.
            await function(t359, e) {
                const n = K(t359);
                return n.persistence.runTransaction("Save bundle", "readwrite", (t)=>n.Ds.saveBundleMetadata(t, e));
            }(t357.localStore, s48), n88._completeWith(o.progress), Promise.resolve(o.Ou);
        } catch (t) {
            return $("SyncEngine", `Loading bundle failed with ${t}`), n88._failWith(t), Promise.resolve(new Set);
        }
    })(s47, e189, n87).then((t)=>{
        s47.sharedClientState.notifyBundleLoaded(t);
    });
}
class Bc {
    constructor(){
        this.synchronizeTabs = !1;
    }
    async initialize(t) {
        this.wt = nu(t.databaseInfo.databaseId), this.sharedClientState = this.dc(t), this.persistence = this._c(t), await this.persistence.start(), this.localStore = this.wc(t), this.gcScheduler = this.mc(t, this.localStore), this.indexBackfillerScheduler = this.gc(t, this.localStore);
    }
    mc(t, e) {
        return null;
    }
    gc(t, e) {
        return null;
    }
    wc(t) {
        return Ro(this.persistence, new Eo, t.initialUser, this.wt);
    }
    _c(t) {
        return new ho(fo.Ms, this.wt);
    }
    dc(t) {
        return new zo;
    }
    async terminate() {
        this.gcScheduler && this.gcScheduler.stop(), await this.sharedClientState.shutdown(), await this.persistence.shutdown();
    }
}
/**
 * Provides all components needed for Firestore with IndexedDB persistence.
 */ class Lc extends Bc {
    constructor(t, e, n){
        super(), this.yc = t, this.cacheSizeBytes = e, this.forceOwnership = n, this.synchronizeTabs = !1;
    }
    async initialize(t) {
        await super.initialize(t), await this.yc.initialize(this, t), // Enqueue writes from a previous session
        await Fc(this.yc.syncEngine), await bu(this.yc.remoteStore), // NOTE: This will immediately call the listener, so we make sure to
        // set it after localStore / remoteStore are started.
        await this.persistence.ci(()=>(this.gcScheduler && !this.gcScheduler.started && this.gcScheduler.start(), this.indexBackfillerScheduler && !this.indexBackfillerScheduler.started && this.indexBackfillerScheduler.start(), Promise.resolve()));
    }
    wc(t) {
        return Ro(this.persistence, new Eo, t.initialUser, this.wt);
    }
    mc(t, e) {
        const n = this.persistence.referenceDelegate.garbageCollector;
        return new Ur(n, t.asyncQueue, e);
    }
    gc(t, e) {
        const n = new Ft(e, this.persistence);
        return new Mt(t.asyncQueue, n);
    }
    _c(t) {
        const e = Io(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey), n = void 0 !== this.cacheSizeBytes ? Pr.withCacheSize(this.cacheSizeBytes) : Pr.DEFAULT;
        return new go(this.synchronizeTabs, e, t.clientId, n, t.asyncQueue, tu(), eu(), this.wt, this.sharedClientState, !!this.forceOwnership);
    }
    dc(t) {
        return new zo;
    }
}
/**
 * Provides all components needed for Firestore with multi-tab IndexedDB
 * persistence.
 *
 * In the legacy client, this provider is used to provide both multi-tab and
 * non-multi-tab persistence since we cannot tell at build time whether
 * `synchronizeTabs` will be enabled.
 */ class Uc extends Lc {
    constructor(t, e){
        super(t, e, /* forceOwnership= */ !1), this.yc = t, this.cacheSizeBytes = e, this.synchronizeTabs = !0;
    }
    async initialize(t360) {
        await super.initialize(t360);
        const e = this.yc.syncEngine;
        this.sharedClientState instanceof Wo && (this.sharedClientState.syncEngine = {
            kr: Sc.bind(null, e),
            Or: kc.bind(null, e),
            Mr: Oc.bind(null, e),
            Ri: Nc.bind(null, e),
            Nr: Vc.bind(null, e)
        }, await this.sharedClientState.start()), // NOTE: This will immediately call the listener, so we make sure to
        // set it after localStore / remoteStore are started.
        await this.persistence.ci(async (t)=>{
            await Dc(this.yc.syncEngine, t), this.gcScheduler && (t && !this.gcScheduler.started ? this.gcScheduler.start() : t || this.gcScheduler.stop()), this.indexBackfillerScheduler && (t && !this.indexBackfillerScheduler.started ? this.indexBackfillerScheduler.start() : t || this.indexBackfillerScheduler.stop());
        });
    }
    dc(t) {
        const e = tu();
        if (!Wo.V(e)) throw new Q(G.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
        const n = Io(t.databaseInfo.databaseId, t.databaseInfo.persistenceKey);
        return new Wo(e, t.asyncQueue, n, t.clientId, t.initialUser);
    }
}
/**
 * Initializes and wires the components that are needed to interface with the
 * network.
 */ class qc {
    async initialize(t361, e) {
        this.localStore || (this.localStore = t361.localStore, this.sharedClientState = t361.sharedClientState, this.datastore = this.createDatastore(e), this.remoteStore = this.createRemoteStore(e), this.eventManager = this.createEventManager(e), this.syncEngine = this.createSyncEngine(e, /* startAsPrimary=*/ !t361.synchronizeTabs), this.sharedClientState.onlineStateHandler = (t)=>fc(this.syncEngine, t, 1 /* SharedClientState */ ), this.remoteStore.remoteSyncer.handleCredentialChange = bc.bind(null, this.syncEngine), await Ou(this.remoteStore, this.syncEngine.isPrimaryClient));
    }
    createEventManager(t) {
        return new Gu;
    }
    createDatastore(t362) {
        const e191 = nu(t362.databaseInfo.databaseId), n89 = (s50 = t362.databaseInfo, new Zo(s50));
        var s50;
        /** Return the Platform-specific connectivity monitor. */ return function(t, e, n, s) {
            return new uu(t, e, n, s);
        }(t362.authCredentials, t362.appCheckCredentials, n89, e191);
    }
    createRemoteStore(t363) {
        var e, n, s, i, r;
        return e = this.localStore, n = this.datastore, s = t363.asyncQueue, i = (t)=>fc(this.syncEngine, t, 0 /* RemoteStore */ ), r = Jo.V() ? new Jo : new Ho, new au(e, n, s, i, r);
    /** Re-enables the network. Idempotent. */ }
    createSyncEngine(t364, e192) {
        return function(t, e, n, // PORTING NOTE: Manages state synchronization in multi-tab environments.
        s, i, r, o) {
            const u = new oc(t, e, n, s, i, r);
            return o && (u.ac = !0), u;
        }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t364.initialUser, t364.maxConcurrentLimboResolutions, e192);
    }
    terminate() {
        return async function(t) {
            const e = K(t);
            M("RemoteStore", "RemoteStore shutting down."), e.lu.add(5 /* Shutdown */ ), await lu(e), e.du.shutdown(), // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
            // triggering spurious listener events with cached data, etc.
            e._u.set("Unknown" /* Unknown */ );
        }(this.remoteStore);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * How many bytes to read each time when `ReadableStreamReader.read()` is
 * called. Only applicable for byte streams that we control (e.g. those backed
 * by an UInt8Array).
 */ /**
 * Builds a `ByteStreamReader` from a UInt8Array.
 * @param source - The data source to use.
 * @param bytesPerRead - How many bytes each `read()` from the returned reader
 *        will read.
 */ function Kc(t, e = 10240) {
    let n = 0;
    // The TypeScript definition for ReadableStreamReader changed. We use
    // `any` here to allow this code to compile with different versions.
    // See https://github.com/microsoft/TypeScript/issues/42970
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        async read () {
            if (n < t.byteLength) {
                const s = {
                    value: t.slice(n, n + e),
                    done: !1
                };
                return n += e, s;
            }
            return {
                done: !0
            };
        },
        async cancel () {},
        releaseLock () {},
        closed: Promise.reject("unimplemented")
    };
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * On web, a `ReadableStream` is wrapped around by a `ByteStreamReader`.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /*
 * A wrapper implementation of Observer<T> that will dispatch events
 * asynchronously. To allow immediate silencing, a mute call is added which
 * causes events scheduled to no longer be raised.
 */ class Gc {
    constructor(t){
        this.observer = t, /**
         * When set to true, will not raise future events. Necessary to deal with
         * async detachment of listener.
         */ this.muted = !1;
    }
    next(t) {
        this.observer.next && this.Ic(this.observer.next, t);
    }
    error(t) {
        this.observer.error ? this.Ic(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
    }
    Tc() {
        this.muted = !0;
    }
    Ic(t, e) {
        this.muted || setTimeout(()=>{
            this.muted || t(e);
        }, 0);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A class representing a bundle.
 *
 * Takes a bundle stream or buffer, and presents abstractions to read bundled
 * elements out of the underlying content.
 */ class Qc {
    constructor(/** The reader to read from underlying binary bundle data source. */ t365, e){
        this.Ec = t365, this.wt = e, /** Cached bundle metadata. */ this.metadata = new j, /**
         * Internal buffer to hold bundle content, accumulating incomplete element
         * content.
         */ this.buffer = new Uint8Array, this.Ac = new TextDecoder("utf-8"), // Read the metadata (which is the first element).
        this.Rc().then((t)=>{
            t && t.Cu() ? this.metadata.resolve(t.payload.metadata) : this.metadata.reject(new Error(`The first element of the bundle is not a metadata, it is\n             ${JSON.stringify(null == t ? void 0 : t.payload)}`));
        }, (t)=>this.metadata.reject(t));
    }
    close() {
        return this.Ec.cancel();
    }
    async getMetadata() {
        return this.metadata.promise;
    }
    async fc() {
        // Makes sure metadata is read before proceeding.
        return await this.getMetadata(), this.Rc();
    }
    /**
     * Reads from the head of internal buffer, and pulling more data from
     * underlying stream if a complete element cannot be found, until an
     * element(including the prefixed length and the JSON string) is found.
     *
     * Once a complete element is read, it is dropped from internal buffer.
     *
     * Returns either the bundled element, or null if we have reached the end of
     * the stream.
     */ async Rc() {
        const t = await this.bc();
        if (null === t) return null;
        const e = this.Ac.decode(t), n = Number(e);
        isNaN(n) && this.Pc(`length string (${e}) is not valid number`);
        const s = await this.vc(n);
        return new Yu(JSON.parse(s), t.length + n);
    }
    /** First index of '{' from the underlying buffer. */ Vc() {
        return this.buffer.findIndex((t)=>t === "{".charCodeAt(0));
    }
    /**
     * Reads from the beginning of the internal buffer, until the first '{', and
     * return the content.
     *
     * If reached end of the stream, returns a null.
     */ async bc() {
        for(; this.Vc() < 0;){
            if (await this.Sc()) break;
        }
        // Broke out of the loop because underlying stream is closed, and there
        // happens to be no more data to process.
        if (0 === this.buffer.length) return null;
        const t = this.Vc();
        // Broke out of the loop because underlying stream is closed, but still
        // cannot find an open bracket.
        t < 0 && this.Pc("Reached the end of bundle when a length string is expected.");
        const e = this.buffer.slice(0, t);
        // Update the internal buffer to drop the read length.
        return this.buffer = this.buffer.slice(t), e;
    }
    /**
     * Reads from a specified position from the internal buffer, for a specified
     * number of bytes, pulling more data from the underlying stream if needed.
     *
     * Returns a string decoded from the read bytes.
     */ async vc(t) {
        for(; this.buffer.length < t;)await this.Sc() && this.Pc("Reached the end of bundle when more is expected.");
        const e = this.Ac.decode(this.buffer.slice(0, t));
        // Update the internal buffer to drop the read json string.
        return this.buffer = this.buffer.slice(t), e;
    }
    Pc(t) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        throw this.Ec.cancel(), new Error(`Invalid bundle format: ${t}`);
    }
    /**
     * Pulls more data from underlying stream to internal buffer.
     * Returns a boolean indicating whether the stream is finished.
     */ async Sc() {
        const t = await this.Ec.read();
        if (!t.done) {
            const e = new Uint8Array(this.buffer.length + t.value.length);
            e.set(this.buffer), e.set(t.value, this.buffer.length), this.buffer = e;
        }
        return t.done;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Internal transaction object responsible for accumulating the mutations to
 * perform and the base versions for any documents read.
 */ class jc {
    constructor(t){
        this.datastore = t, // The version of each document that was read during this transaction.
        this.readVersions = new Map, this.mutations = [], this.committed = !1, /**
         * A deferred usage error that occurred previously in this transaction that
         * will cause the transaction to fail once it actually commits.
         */ this.lastWriteError = null, /**
         * Set of documents that have been written in the transaction.
         *
         * When there's more than one write to the same key in a transaction, any
         * writes after the first are handled differently.
         */ this.writtenDocs = new Set;
    }
    async lookup(t366) {
        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new Q(G.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
        const e193 = await async function(t367, e194) {
            const n = K(t367), s = Ls(n.wt) + "/documents", i = {
                documents: e194.map((t)=>Ms(n.wt, t))
            }, r = await n.ao("BatchGetDocuments", s, i, e194.length), o = new Map;
            r.forEach((t)=>{
                const e = Gs(n.wt, t);
                o.set(e.key.toString(), e);
            });
            const u = [];
            return e194.forEach((t)=>{
                const e = o.get(t.toString());
                U(!!e), u.push(e);
            }), u;
        }(this.datastore, t366);
        return e193.forEach((t)=>this.recordVersion(t)), e193;
    }
    set(t, e) {
        this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());
    }
    update(t, e) {
        try {
            this.write(e.toMutation(t, this.preconditionForUpdate(t)));
        } catch (t368) {
            this.lastWriteError = t368;
        }
        this.writtenDocs.add(t.toString());
    }
    delete(t) {
        this.write(new Yn(t, this.precondition(t))), this.writtenDocs.add(t.toString());
    }
    async commit() {
        if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;
        const t369 = this.readVersions;
        // For each mutation, note that the doc was written.
        this.mutations.forEach((e)=>{
            t369.delete(e.key.toString());
        }), // For each document that was read but not written to, we want to perform
        // a `verify` operation.
        t369.forEach((t, e)=>{
            const n = dt.fromPath(e);
            this.mutations.push(new Xn(n, this.precondition(n)));
        }), await async function(t370, e) {
            const n = K(t370), s = Ls(n.wt) + "/documents", i = {
                writes: e.map((t)=>js(n.wt, t))
            };
            await n.ro("Commit", s, i);
        }(this.datastore, this.mutations), this.committed = !0;
    }
    recordVersion(t) {
        let e;
        if (t.isFoundDocument()) e = t.version;
        else {
            if (!t.isNoDocument()) throw L();
            // For deleted docs, we must use baseVersion 0 when we overwrite them.
            e = ct.min();
        }
        const n = this.readVersions.get(t.key.toString());
        if (n) {
            if (!e.isEqual(n)) // This transaction will fail no matter what.
            throw new Q(G.ABORTED, "Document version changed between two reads.");
        } else this.readVersions.set(t.key.toString(), e);
    }
    /**
     * Returns the version of this document when it was read in this transaction,
     * as a precondition, or no precondition if it was not read.
     */ precondition(t) {
        const e = this.readVersions.get(t.toString());
        return !this.writtenDocs.has(t.toString()) && e ? $n.updateTime(e) : $n.none();
    }
    /**
     * Returns the precondition for a document if the operation is an update.
     */ preconditionForUpdate(t) {
        const e = this.readVersions.get(t.toString());
        // The first time a document is written, we want to take into account the
        // read time and existence
        if (!this.writtenDocs.has(t.toString()) && e) {
            if (e.isEqual(ct.min())) // The document doesn't exist, so fail the transaction.
            // This has to be validated locally because you can't send a
            // precondition that a document does not exist without changing the
            // semantics of the backend write to be an insert. This is the reverse
            // of what we want, since we want to assert that the document doesn't
            // exist but then send the update and have it fail. Since we can't
            // express that to the backend, we have to validate locally.
            // Note: this can change once we can send separate verify writes in the
            // transaction.
            throw new Q(G.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
            // Document exists, base precondition on document update time.
            return $n.updateTime(e);
        }
        // Document was not read, so we just use the preconditions for a blind
        // update.
        return $n.exists(!0);
    }
    write(t) {
        this.ensureCommitNotCalled(), this.mutations.push(t);
    }
    ensureCommitNotCalled() {}
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * TransactionRunner encapsulates the logic needed to run and retry transactions
 * with backoff.
 */ class Wc {
    constructor(t, e, n, s, i){
        this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = s, this.deferred = i, this.Dc = n.maxAttempts, this.So = new su(this.asyncQueue, "transaction_retry" /* TransactionRetry */ );
    }
    /** Runs the transaction and sets the result on deferred. */ run() {
        this.Dc -= 1, this.Cc();
    }
    Cc() {
        this.So.Io(async ()=>{
            const t371 = new jc(this.datastore), e195 = this.xc(t371);
            e195 && e195.then((e)=>{
                this.asyncQueue.enqueueAndForget(()=>t371.commit().then(()=>{
                        this.deferred.resolve(e);
                    }).catch((t)=>{
                        this.Nc(t);
                    }));
            }).catch((t)=>{
                this.Nc(t);
            });
        });
    }
    xc(t) {
        try {
            const e = this.updateFunction(t);
            return !oe(e) && e.catch && e.then ? e : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
        } catch (t372) {
            // Do not retry errors thrown by user provided updateFunction.
            return this.deferred.reject(t372), null;
        }
    }
    Nc(t) {
        this.Dc > 0 && this.kc(t) ? (this.Dc -= 1, this.asyncQueue.enqueueAndForget(()=>(this.Cc(), Promise.resolve()))) : this.deferred.reject(t);
    }
    kc(t) {
        if ("FirebaseError" === t.name) {
            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
            // non-matching document versions with ABORTED. These errors should be retried.
            const e = t.code;
            return "aborted" === e || "failed-precondition" === e || !ns(e);
        }
        return !1;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * FirestoreClient is a top-level class that constructs and owns all of the
 * pieces of the client SDK architecture. It is responsible for creating the
 * async queue that is shared by all of the other components in the system.
 */ class zc {
    constructor(t373, e, /**
     * Asynchronous queue responsible for all of our internal processing. When
     * we get incoming work from the user (via public API) or the network
     * (incoming GRPC messages), we should always schedule onto this queue.
     * This ensures all of our work is properly serialized (e.g. we don't
     * start processing a new operation while the previous one is waiting for
     * an async I/O to complete).
     */ n, s){
        this.authCredentials = t373, this.appCheckCredentials = e, this.asyncQueue = n, this.databaseInfo = s, this.user = C.UNAUTHENTICATED, this.clientId = st.I(), this.authCredentialListener = ()=>Promise.resolve(), this.appCheckCredentialListener = ()=>Promise.resolve(), this.authCredentials.start(n, async (t)=>{
            M("FirestoreClient", "Received user=", t.uid), await this.authCredentialListener(t), this.user = t;
        }), this.appCheckCredentials.start(n, (t)=>(M("FirestoreClient", "Received new app check token=", t), this.appCheckCredentialListener(t, this.user)));
    }
    async getConfiguration() {
        return {
            asyncQueue: this.asyncQueue,
            databaseInfo: this.databaseInfo,
            clientId: this.clientId,
            authCredentials: this.authCredentials,
            appCheckCredentials: this.appCheckCredentials,
            initialUser: this.user,
            maxConcurrentLimboResolutions: 100
        };
    }
    setCredentialChangeListener(t) {
        this.authCredentialListener = t;
    }
    setAppCheckTokenChangeListener(t) {
        this.appCheckCredentialListener = t;
    }
    /**
     * Checks that the client has not been terminated. Ensures that other methods on
     * this class cannot be called after the client is terminated.
     */ verifyNotTerminated() {
        if (this.asyncQueue.isShuttingDown) throw new Q(G.FAILED_PRECONDITION, "The client has already been terminated.");
    }
    terminate() {
        this.asyncQueue.enterRestrictedMode();
        const t = new j;
        return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async ()=>{
            try {
                this.onlineComponents && await this.onlineComponents.terminate(), this.offlineComponents && await this.offlineComponents.terminate(), // The credentials provider must be terminated after shutting down the
                // RemoteStore as it will prevent the RemoteStore from retrieving auth
                // tokens.
                this.authCredentials.shutdown(), this.appCheckCredentials.shutdown(), t.resolve();
            } catch (e) {
                const n = Bu(e, "Failed to shutdown persistence");
                t.reject(n);
            }
        }), t.promise;
    }
}
async function Hc(t374, e) {
    t374.asyncQueue.verifyOperationInProgress(), M("FirestoreClient", "Initializing OfflineComponentProvider");
    const n = await t374.getConfiguration();
    await e.initialize(n);
    let s = n.initialUser;
    t374.setCredentialChangeListener(async (t)=>{
        s.isEqual(t) || (await bo(e.localStore, t), s = t);
    }), // When a user calls clearPersistence() in one client, all other clients
    // need to be terminated to allow the delete to succeed.
    e.persistence.setDatabaseDeletedListener(()=>t374.terminate()), t374.offlineComponents = e;
}
async function Jc(t375, e) {
    t375.asyncQueue.verifyOperationInProgress();
    const n90 = await Yc(t375);
    M("FirestoreClient", "Initializing OnlineComponentProvider");
    const s = await t375.getConfiguration();
    await e.initialize(n90, s), // The CredentialChangeListener of the online component provider takes
    // precedence over the offline component provider.
    t375.setCredentialChangeListener((t)=>ku(e.remoteStore, t)), t375.setAppCheckTokenChangeListener((t, n)=>ku(e.remoteStore, n)), t375.onlineComponents = e;
}
async function Yc(t) {
    return t.offlineComponents || (M("FirestoreClient", "Using default OfflineComponentProvider"), await Hc(t, new Bc)), t.offlineComponents;
}
async function Xc(t) {
    return t.onlineComponents || (M("FirestoreClient", "Using default OnlineComponentProvider"), await Jc(t, new qc)), t.onlineComponents;
}
function Zc(t376) {
    return Yc(t376).then((t)=>t.persistence);
}
function ta(t377) {
    return Yc(t377).then((t)=>t.localStore);
}
function ea(t378) {
    return Xc(t378).then((t)=>t.remoteStore);
}
function na(t379) {
    return Xc(t379).then((t)=>t.syncEngine);
}
async function sa(t) {
    const e = await Xc(t), n = e.eventManager;
    return n.onListen = uc.bind(null, e.syncEngine), n.onUnlisten = ac.bind(null, e.syncEngine), n;
}
/** Enables the network connection and re-enqueues all pending operations. */ function ia(t380) {
    return t380.asyncQueue.enqueue(async ()=>{
        const e196 = await Zc(t380), n = await ea(t380);
        return e196.setNetworkEnabled(!0), function(t) {
            const e = K(t);
            return e.lu.delete(0 /* UserDisabled */ ), hu(e);
        }(n);
    });
}
/** Disables the network connection. Pending operations will not complete. */ function ra(t381) {
    return t381.asyncQueue.enqueue(async ()=>{
        const e197 = await Zc(t381), n = await ea(t381);
        return e197.setNetworkEnabled(!1), async function(t) {
            const e = K(t);
            e.lu.add(0 /* UserDisabled */ ), await lu(e), // Set the OnlineState to Offline so get()s return from cache, etc.
            e._u.set("Offline" /* Offline */ );
        }(n);
    });
}
/**
 * Returns a Promise that resolves when all writes that were pending at the time
 * this method was called received server acknowledgement. An acknowledgement
 * can be either acceptance or rejection.
 */ function oa(t382, e198) {
    const n91 = new j;
    return t382.asyncQueue.enqueueAndForget(async ()=>(async function(t383, e199, n92) {
            try {
                const s = await function(t384, e) {
                    const n = K(t384);
                    return n.persistence.runTransaction("read document", "readonly", (t)=>n.localDocuments.getDocument(t, e));
                }(t383, e199);
                s.isFoundDocument() ? n92.resolve(s) : s.isNoDocument() ? n92.resolve(null) : n92.reject(new Q(G.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
            } catch (t) {
                const s = Bu(t, `Failed to get document '${e199} from cache`);
                n92.reject(s);
            }
        })(await ta(t382), e198, n91)), n91.promise;
}
function ua(t385, e200, n93 = {}) {
    const s51 = new j;
    return t385.asyncQueue.enqueueAndForget(async ()=>(function(t386, e, n, s, i) {
            const r10 = new Gc({
                next: (r)=>{
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e.enqueueAndForget(()=>ju(t386, o));
                    const u = r.docs.has(n);
                    !u && r.fromCache ? // TODO(dimond): If we're online and the document doesn't
                    // exist then we resolve with a doc.exists set to false. If
                    // we're offline however, we reject the Promise in this
                    // case. Two options: 1) Cache the negative response from
                    // the server so we can deliver that even when you're
                    // offline 2) Actually reject the Promise in the online case
                    // if the document doesn't exist.
                    i.reject(new Q(G.UNAVAILABLE, "Failed to get document because the client is offline.")) : u && r.fromCache && s && "server" === s.source ? i.reject(new Q(G.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(r);
                },
                error: (t)=>i.reject(t)
            }), o = new Ju(rn(n.path), r10, {
                includeMetadataChanges: !0,
                Du: !0
            });
            return Qu(t386, o);
        })(await sa(t385), t385.asyncQueue, e200, n93, s51)), s51.promise;
}
function ca(t387, e201) {
    const n94 = new j;
    return t387.asyncQueue.enqueueAndForget(async ()=>(async function(t, e, n) {
            try {
                const s = await No(t, e, /* usePreviousResults= */ !0), i = new sc(e, s.ji), r = i.Ku(s.documents), o = i.applyChanges(r, /* updateLimboDocuments= */ !1);
                n.resolve(o.snapshot);
            } catch (t388) {
                const s = Bu(t388, `Failed to execute query '${e} against cache`);
                n.reject(s);
            }
        })(await ta(t387), e201, n94)), n94.promise;
}
function aa(t389, e202, n95 = {}) {
    const s52 = new j;
    return t389.asyncQueue.enqueueAndForget(async ()=>(function(t390, e, n96, s, i) {
            const r = new Gc({
                next: (n)=>{
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e.enqueueAndForget(()=>ju(t390, o)), n.fromCache && "server" === s.source ? i.reject(new Q(G.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n);
                },
                error: (t)=>i.reject(t)
            }), o = new Ju(n96, r, {
                includeMetadataChanges: !0,
                Du: !0
            });
            return Qu(t390, o);
        })(await sa(t389), t389.asyncQueue, e202, n95, s52)), s52.promise;
}
function ha(t391, e203) {
    const n = new Gc(e203);
    return t391.asyncQueue.enqueueAndForget(async ()=>(function(t, e) {
            K(t).Tu.add(e), // Immediately fire an initial event, indicating all existing listeners
            // are in-sync.
            e.next();
        })(await sa(t391), n)), ()=>{
        n.Tc(), t391.asyncQueue.enqueueAndForget(async ()=>(function(t, e) {
                K(t).Tu.delete(e);
            })(await sa(t391), n));
    };
}
/**
 * Takes an updateFunction in which a set of reads and writes can be performed
 * atomically. In the updateFunction, the client can read and write values
 * using the supplied transaction object. After the updateFunction, all
 * changes will be committed. If a retryable error occurs (ex: some other
 * client has changed any of the data referenced), then the updateFunction
 * will be called again after a backoff. If the updateFunction still fails
 * after all retries, then the transaction will be rejected.
 *
 * The transaction object passed to the updateFunction contains methods for
 * accessing documents and collections. Unlike other datastore access, data
 * accessed with the transaction will not reflect local changes that have not
 * been committed. For this reason, it is required that all reads are
 * performed before any writes. Transactions must be performed while online.
 */ function la(t392, e, n) {
    const s = new j;
    return t392.asyncQueue.enqueueAndForget(async ()=>{
        const i = await function(t393) {
            return Xc(t393).then((t)=>t.datastore);
        }(t392);
        new Wc(t392.asyncQueue, i, n, e, s).run();
    }), s.promise;
}
function fa(t394, e204, n97, s) {
    const i = function(t395, e205) {
        let n;
        n = "string" == typeof t395 ? (new TextEncoder).encode(t395) : t395;
        return function(t, e) {
            return new Qc(t, e);
        }(function(t, e) {
            if (t instanceof Uint8Array) return Kc(t, e);
            if (t instanceof ArrayBuffer) return Kc(new Uint8Array(t), e);
            if (t instanceof ReadableStream) return t.getReader();
            throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
        }(n), e205);
    }(n97, nu(e204));
    t394.asyncQueue.enqueueAndForget(async ()=>{
        $c(await na(t394), i, s);
    });
}
function da(t396, e206) {
    return t396.asyncQueue.enqueue(async ()=>(function(t397, e) {
            const n = K(t397);
            return n.persistence.runTransaction("Get named query", "readonly", (t)=>n.Ds.getNamedQuery(t, e));
        })(await ta(t396), e206));
}
const _a = new Map;
/**
 * An instance map that ensures only one Datastore exists per Firestore
 * instance.
 */ /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function wa(t, e, n) {
    if (!n) throw new Q(G.INVALID_ARGUMENT, `Function ${t}() cannot be called with an empty ${e}.`);
}
/**
 * Validates that two boolean options are not set at the same time.
 * @internal
 */ function ma(t, e, n, s) {
    if (!0 === e && !0 === s) throw new Q(G.INVALID_ARGUMENT, `${t} and ${n} cannot be used together.`);
}
/**
 * Validates that `path` refers to a document (indicated by the fact it contains
 * an even numbers of segments).
 */ function ga(t) {
    if (!dt.isDocumentKey(t)) throw new Q(G.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
}
/**
 * Validates that `path` refers to a collection (indicated by the fact it
 * contains an odd numbers of segments).
 */ function ya(t) {
    if (dt.isDocumentKey(t)) throw new Q(G.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
}
/**
 * Returns true if it's a non-null object without a custom prototype
 * (i.e. excludes Array, Date, etc.).
 */ /** Returns a string describing the type / value of the provided input. */ function pa(t398) {
    if (void 0 === t398) return "undefined";
    if (null === t398) return "null";
    if ("string" == typeof t398) return t398.length > 20 && (t398 = `${t398.substring(0, 20)}...`), JSON.stringify(t398);
    if ("number" == typeof t398 || "boolean" == typeof t398) return "" + t398;
    if ("object" == typeof t398) {
        if (t398 instanceof Array) return "an array";
        {
            const e = /** try to get the constructor name for an object. */ function(t) {
                if (t.constructor) return t.constructor.name;
                return null;
            }(t398);
            return e ? `a custom ${e} object` : "an object";
        }
    }
    return "function" == typeof t398 ? "a function" : L();
}
function Ia(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any
e) {
    if ("_delegate" in t && // Unwrap Compat types
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (t = t._delegate), !(t instanceof e)) {
        if (e.name === t.constructor.name) throw new Q(G.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
        {
            const n = pa(t);
            throw new Q(G.INVALID_ARGUMENT, `Expected type '${e.name}', but it was: ${n}`);
        }
    }
    return t;
}
function Ta(t, e) {
    if (e <= 0) throw new Q(G.INVALID_ARGUMENT, `Function ${t}() requires a positive number, but it was: ${e}.`);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // settings() defaults:
/**
 * A concrete type describing all the values that can be applied via a
 * user-supplied `FirestoreSettings` object. This is a separate type so that
 * defaults can be supplied and the value can be checked for equality.
 */ class Ea {
    constructor(t){
        var e;
        if (void 0 === t.host) {
            if (void 0 !== t.ssl) throw new Q(G.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
            this.host = "firestore.googleapis.com", this.ssl = true;
        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040;
        else {
            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new Q(G.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
            this.cacheSizeBytes = t.cacheSizeBytes;
        }
        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, this.useFetchStreams = !!t.useFetchStreams, ma("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
    }
    isEqual(t) {
        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * The Cloud Firestore service interface.
 *
 * Do not call this constructor directly. Instead, use {@link getFirestore}.
 */ class Aa {
    /** @hideconstructor */ constructor(t399, e, n){
        this._authCredentials = e, this._appCheckCredentials = n, /**
         * Whether it's a Firestore or Firestore Lite instance.
         */ this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new Ea({}), this._settingsFrozen = !1, t399 instanceof re ? this._databaseId = t399 : (this._app = t399, this._databaseId = function(t) {
            if (!Object.prototype.hasOwnProperty.apply(t.options, [
                "projectId"
            ])) throw new Q(G.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
            return new re(t.options.projectId);
        }(t399));
    }
    /**
     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service
     * instance.
     */ get app() {
        if (!this._app) throw new Q(G.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
        return this._app;
    }
    get _initialized() {
        return this._settingsFrozen;
    }
    get _terminated() {
        return void 0 !== this._terminateTask;
    }
    _setSettings(t400) {
        if (this._settingsFrozen) throw new Q(G.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
        this._settings = new Ea(t400), void 0 !== t400.credentials && (this._authCredentials = function(t) {
            if (!t) return new z;
            switch(t.type){
                case "gapi":
                    const e = t.client;
                    // Make sure this really is a Gapi client.
                    return U(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), new X(e, t.sessionIndex || "0", t.iamToken || null);
                case "provider":
                    return t.client;
                default:
                    throw new Q(G.INVALID_ARGUMENT, "makeAuthCredentialsProvider failed due to invalid credential type");
            }
        }(t400.credentials));
    }
    _getSettings() {
        return this._settings;
    }
    _freezeSettings() {
        return this._settingsFrozen = !0, this._settings;
    }
    _delete() {
        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
    }
    /** Returns a JSON-serializable representation of this `Firestore` instance. */ toJSON() {
        return {
            app: this._app,
            databaseId: this._databaseId,
            settings: this._settings
        };
    }
    /**
     * Terminates all components used by this client. Subclasses can override
     * this method to clean up their own dependencies, but must also call this
     * method.
     *
     * Only ever called once.
     */ _terminate() {
        /**
 * Removes all components associated with the provided instance. Must be called
 * when the `Firestore` instance is terminated.
 */ return function(t) {
            const e = _a.get(t);
            e && (M("ComponentProvider", "Removing Datastore"), _a.delete(t), e.terminate());
        }(this), Promise.resolve();
    }
}
function Ra(t, e, n, s = {}) {
    var i;
    const r = (t = Ia(t, Aa))._getSettings();
    if ("firestore.googleapis.com" !== r.host && r.host !== e && $("Host has been set in both settings() and useEmulator(), emulator host will be used"), t._setSettings(Object.assign(Object.assign({}, r), {
        host: `${e}:${n}`,
        ssl: !1
    })), s.mockUserToken) {
        let e, n;
        if ("string" == typeof s.mockUserToken) e = s.mockUserToken, n = C.MOCK_USER;
        else {
            // Let createMockUserToken validate first (catches common mistakes like
            // invalid field "uid" and missing field "sub" / "user_id".)
            e = (0, _util.createMockUserToken)(s.mockUserToken, null === (i = t._app) || void 0 === i ? void 0 : i.options.projectId);
            const r = s.mockUserToken.sub || s.mockUserToken.user_id;
            if (!r) throw new Q(G.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
            n = new C(r);
        }
        t._authCredentials = new H(new W(e, n));
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A `DocumentReference` refers to a document location in a Firestore database
 * and can be used to write, read, or listen to the location. The document at
 * the referenced location may or may not exist.
 */ class ba {
    /** @hideconstructor */ constructor(t, /**
     * If provided, the `FirestoreDataConverter` associated with this instance.
     */ e, n){
        this.converter = e, this._key = n, /** The type of this Firestore reference. */ this.type = "document", this.firestore = t;
    }
    get _path() {
        return this._key.path;
    }
    /**
     * The document's identifier within its collection.
     */ get id() {
        return this._key.path.lastSegment();
    }
    /**
     * A string representing the path of the referenced document (relative
     * to the root of the database).
     */ get path() {
        return this._key.path.canonicalString();
    }
    /**
     * The collection this `DocumentReference` belongs to.
     */ get parent() {
        return new va(this.firestore, this.converter, this._key.path.popLast());
    }
    withConverter(t) {
        return new ba(this.firestore, t, this._key);
    }
}
/**
 * A `Query` refers to a query which you can read or listen to. You can also
 * construct refined `Query` objects by adding filters and ordering.
 */ class Pa {
    // This is the lite version of the Query class in the main SDK.
    /** @hideconstructor protected */ constructor(t, /**
     * If provided, the `FirestoreDataConverter` associated with this instance.
     */ e, n){
        this.converter = e, this._query = n, /** The type of this Firestore reference. */ this.type = "query", this.firestore = t;
    }
    withConverter(t) {
        return new Pa(this.firestore, t, this._query);
    }
}
/**
 * A `CollectionReference` object can be used for adding documents, getting
 * document references, and querying for documents (using {@link query}).
 */ class va extends Pa {
    /** @hideconstructor */ constructor(t, e, n){
        super(t, e, rn(n)), this._path = n, /** The type of this Firestore reference. */ this.type = "collection";
    }
    /** The collection's identifier. */ get id() {
        return this._query.path.lastSegment();
    }
    /**
     * A string representing the path of the referenced collection (relative
     * to the root of the database).
     */ get path() {
        return this._query.path.canonicalString();
    }
    /**
     * A reference to the containing `DocumentReference` if this is a
     * subcollection. If this isn't a subcollection, the reference is null.
     */ get parent() {
        const t = this._path.popLast();
        return t.isEmpty() ? null : new ba(this.firestore, /* converter= */ null, new dt(t));
    }
    withConverter(t) {
        return new va(this.firestore, t, this._path);
    }
}
function Va(t, e, ...n) {
    if (t = (0, _util.getModularInstance)(t), wa("collection", "path", e), t instanceof Aa) {
        const s = ht.fromString(e, ...n);
        return ya(s), new va(t, /* converter= */ null, s);
    }
    {
        if (!(t instanceof ba || t instanceof va)) throw new Q(G.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        const s = t._path.child(ht.fromString(e, ...n));
        return ya(s), new va(t.firestore, /* converter= */ null, s);
    }
}
// TODO(firestorelite): Consider using ErrorFactory -
// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
/**
 * Creates and returns a new `Query` instance that includes all documents in the
 * database that are contained in a collection or subcollection with the
 * given `collectionId`.
 *
 * @param firestore - A reference to the root `Firestore` instance.
 * @param collectionId - Identifies the collections to query over. Every
 * collection or subcollection with this ID as the last segment of its path
 * will be included. Cannot contain a slash.
 * @returns The created `Query`.
 */ function Sa(t401, e) {
    if (t401 = Ia(t401, Aa), wa("collectionGroup", "collection id", e), e.indexOf("/") >= 0) throw new Q(G.INVALID_ARGUMENT, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);
    return new Pa(t401, /* converter= */ null, /**
 * Creates a new Query for a collection group query that matches all documents
 * within the provided collection group.
 */ function(t) {
        return new nn(ht.emptyPath(), t);
    }(e));
}
function Da(t, e, ...n) {
    if (t = (0, _util.getModularInstance)(t), // We allow omission of 'pathString' but explicitly prohibit passing in both
    // 'undefined' and 'null'.
    1 === arguments.length && (e = st.I()), wa("doc", "path", e), t instanceof Aa) {
        const s = ht.fromString(e, ...n);
        return ga(s), new ba(t, /* converter= */ null, new dt(s));
    }
    {
        if (!(t instanceof ba || t instanceof va)) throw new Q(G.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
        const s = t._path.child(ht.fromString(e, ...n));
        return ga(s), new ba(t.firestore, t instanceof va ? t.converter : null, new dt(s));
    }
}
/**
 * Returns true if the provided references are equal.
 *
 * @param left - A reference to compare.
 * @param right - A reference to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */ function Ca(t, e) {
    return t = (0, _util.getModularInstance)(t), e = (0, _util.getModularInstance)(e), (t instanceof ba || t instanceof va) && (e instanceof ba || e instanceof va) && t.firestore === e.firestore && t.path === e.path && t.converter === e.converter;
}
/**
 * Returns true if the provided queries point to the same collection and apply
 * the same constraints.
 *
 * @param left - A `Query` to compare.
 * @param right - A `Query` to compare.
 * @returns true if the references point to the same location in the same
 * Firestore database.
 */ function xa(t, e) {
    return t = (0, _util.getModularInstance)(t), e = (0, _util.getModularInstance)(e), t instanceof Pa && e instanceof Pa && t.firestore === e.firestore && dn(t._query, e._query) && t.converter === e.converter;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ class Na {
    constructor(){
        // The last promise in the queue.
        this.Oc = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
        // retried with backoff.
        this.Mc = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
        // be changed again.
        this.Fc = !1, // Operations scheduled to be queued in the future. Operations are
        // automatically removed after they are run or canceled.
        this.$c = [], // visible for testing
        this.Bc = null, // Flag set while there's an outstanding AsyncQueue operation, used for
        // assertion sanity-checks.
        this.Lc = !1, // Enabled during shutdown on Safari to prevent future access to IndexedDB.
        this.Uc = !1, // List of TimerIds to fast-forward delays for.
        this.qc = [], // Backoff timer used to schedule retries for retryable operations
        this.So = new su(this, "async_queue_retry" /* AsyncQueueRetry */ ), // Visibility handler that triggers an immediate retry of all retryable
        // operations. Meant to speed up recovery when we regain file system access
        // after page comes into foreground.
        this.Kc = ()=>{
            const t = eu();
            t && M("AsyncQueue", "Visibility state changed to " + t.visibilityState), this.So.Eo();
        };
        const t402 = eu();
        t402 && "function" == typeof t402.addEventListener && t402.addEventListener("visibilitychange", this.Kc);
    }
    get isShuttingDown() {
        return this.Fc;
    }
    /**
     * Adds a new operation to the queue without waiting for it to complete (i.e.
     * we ignore the Promise result).
     */ enqueueAndForget(t) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.enqueue(t);
    }
    enqueueAndForgetEvenWhileRestricted(t) {
        this.Gc(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.Qc(t);
    }
    enterRestrictedMode(t) {
        if (!this.Fc) {
            this.Fc = !0, this.Uc = t || !1;
            const e = eu();
            e && "function" == typeof e.removeEventListener && e.removeEventListener("visibilitychange", this.Kc);
        }
    }
    enqueue(t) {
        if (this.Gc(), this.Fc) // Return a Promise which never resolves.
        return new Promise(()=>{});
        // Create a deferred Promise that we can return to the callee. This
        // allows us to return a "hanging Promise" only to the callee and still
        // advance the queue even when the operation is not run.
        const e = new j;
        return this.Qc(()=>this.Fc && this.Uc ? Promise.resolve() : (t().then(e.resolve, e.reject), e.promise)).then(()=>e.promise);
    }
    enqueueRetryable(t) {
        this.enqueueAndForget(()=>(this.Mc.push(t), this.jc()));
    }
    /**
     * Runs the next operation from the retryable queue. If the operation fails,
     * reschedules with backoff.
     */ async jc() {
        if (0 !== this.Mc.length) {
            try {
                await this.Mc[0](), this.Mc.shift(), this.So.reset();
            } catch (t) {
                if (!Ct(t)) throw t;
                // Failure will be handled by AsyncQueue
                M("AsyncQueue", "Operation failed with retryable error: " + t);
            }
            this.Mc.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
            // This is necessary to run retryable operations that failed during
            // their initial attempt since we don't know whether they are already
            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
            // call scheduled here.
            // Since `backoffAndRun()` cancels an existing backoff and schedules a
            // new backoff on every call, there is only ever a single additional
            // operation in the queue.
            this.So.Io(()=>this.jc());
        }
    }
    Qc(t403) {
        const e207 = this.Oc.then(()=>(this.Lc = !0, t403().catch((t404)=>{
                this.Bc = t404, this.Lc = !1;
                const e208 = /**
 * Chrome includes Error.message in Error.stack. Other browsers do not.
 * This returns expected output of message + stack when available.
 * @param error - Error or FirestoreError
 */ function(t) {
                    let e = t.message || "";
                    t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack);
                    return e;
                }(t404);
                // Re-throw the error so that this.tail becomes a rejected Promise and
                // all further attempts to chain (via .then) will just short-circuit
                // and return the rejected Promise.
                throw F("INTERNAL UNHANDLED ERROR: ", e208), t404;
            }).then((t)=>(this.Lc = !1, t))));
        return this.Oc = e207, e207;
    }
    enqueueAfterDelay(t405, e, n) {
        this.Gc(), // Fast-forward delays for timerIds that have been overriden.
        this.qc.indexOf(t405) > -1 && (e = 0);
        const s = $u.createAndSchedule(this, t405, e, n, (t)=>this.Wc(t));
        return this.$c.push(s), s;
    }
    Gc() {
        this.Bc && L();
    }
    verifyOperationInProgress() {}
    /**
     * Waits until all currently queued tasks are finished executing. Delayed
     * operations are not run.
     */ async zc() {
        // Operations in the queue prior to draining may have enqueued additional
        // operations. Keep draining the queue until the tail is no longer advanced,
        // which indicates that no more new operations were enqueued and that all
        // operations were executed.
        let t;
        do t = this.Oc, await t;
        while (t !== this.Oc);
    }
    /**
     * For Tests: Determine if a delayed operation with a particular TimerId
     * exists.
     */ Hc(t) {
        for (const e of this.$c)if (e.timerId === t) return !0;
        return !1;
    }
    /**
     * For Tests: Runs some or all delayed operations early.
     *
     * @param lastTimerId - Delayed operations up to and including this TimerId
     * will be drained. Pass TimerId.All to run all delayed operations.
     * @returns a Promise that resolves once all operations have been run.
     */ Jc(t406) {
        // Note that draining may generate more delayed ops, so we do that first.
        return this.zc().then(()=>{
            // Run ops in the same order they'd run if they ran naturally.
            this.$c.sort((t, e)=>t.targetTimeMs - e.targetTimeMs);
            for (const e209 of this.$c)if (e209.skipDelay(), "all" /* All */  !== t406 && e209.timerId === t406) break;
            return this.zc();
        });
    }
    /**
     * For Tests: Skip all subsequent delays for a timer id.
     */ Yc(t) {
        this.qc.push(t);
    }
    /** Called once a DelayedOperation is run or canceled. */ Wc(t) {
        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
        const e = this.$c.indexOf(t);
        this.$c.splice(e, 1);
    }
}
function ka(t408) {
    /**
 * Returns true if obj is an object and contains at least one of the specified
 * methods.
 */ return function(t, e) {
        if ("object" != typeof t || null === t) return !1;
        const n = t;
        for (const t407 of e)if (t407 in n && "function" == typeof n[t407]) return !0;
        return !1;
    }(t408, [
        "next",
        "error",
        "complete"
    ]);
}
class Oa {
    constructor(){
        this._progressObserver = {}, this._taskCompletionResolver = new j, this._lastProgress = {
            taskState: "Running",
            totalBytes: 0,
            totalDocuments: 0,
            bytesLoaded: 0,
            documentsLoaded: 0
        };
    }
    /**
     * Registers functions to listen to bundle loading progress events.
     * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur
     *   each time a Firestore document is loaded from the bundle.
     * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the
     *   error, and there should be no more updates after this.
     * @param complete - Called when the loading task is complete.
     */ onProgress(t, e, n) {
        this._progressObserver = {
            next: t,
            error: e,
            complete: n
        };
    }
    /**
     * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
     *
     * @param onRejected - Called when an error occurs during bundle loading.
     */ catch(t) {
        return this._taskCompletionResolver.promise.catch(t);
    }
    /**
     * Implements the `Promise<LoadBundleTaskProgress>.then` interface.
     *
     * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
     *   The update will always have its `taskState` set to `"Success"`.
     * @param onRejected - Called when an error occurs during bundle loading.
     */ then(t, e) {
        return this._taskCompletionResolver.promise.then(t, e);
    }
    /**
     * Notifies all observers that bundle loading has completed, with a provided
     * `LoadBundleTaskProgress` object.
     *
     * @private
     */ _completeWith(t) {
        this._updateProgress(t), this._progressObserver.complete && this._progressObserver.complete(), this._taskCompletionResolver.resolve(t);
    }
    /**
     * Notifies all observers that bundle loading has failed, with a provided
     * `Error` as the reason.
     *
     * @private
     */ _failWith(t) {
        this._lastProgress.taskState = "Error", this._progressObserver.next && this._progressObserver.next(this._lastProgress), this._progressObserver.error && this._progressObserver.error(t), this._taskCompletionResolver.reject(t);
    }
    /**
     * Notifies a progress update of loading a bundle.
     * @param progress - The new progress.
     *
     * @private
     */ _updateProgress(t) {
        this._lastProgress = t, this._progressObserver.next && this._progressObserver.next(t);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /** DOMException error code constants. */ const Ma = -1;
/**
 * The Cloud Firestore service interface.
 *
 * Do not call this constructor directly. Instead, use {@link getFirestore}.
 */ class Fa extends Aa {
    /** @hideconstructor */ constructor(t, e, n){
        super(t, e, n), /**
         * Whether it's a {@link Firestore} or Firestore Lite instance.
         */ this.type = "firestore", this._queue = new Na, this._persistenceKey = "name" in t ? t.name : "[DEFAULT]";
    }
    _terminate() {
        return this._firestoreClient || // The client must be initialized to ensure that all subsequent API
        // usage throws an exception.
        Ua(this), this._firestoreClient.terminate();
    }
}
/**
 * Initializes a new instance of {@link Firestore} with the provided settings.
 * Can only be called before any other function, including
 * {@link getFirestore}. If the custom settings are empty, this function is
 * equivalent to calling {@link getFirestore}.
 *
 * @param app - The {@link @firebase/app#FirebaseApp} with which the {@link Firestore} instance will
 * be associated.
 * @param settings - A settings object to configure the {@link Firestore} instance.
 * @returns A newly initialized {@link Firestore} instance.
 */ function $a(t, e) {
    const n = (0, _app._getProvider)(t, "firestore");
    if (n.isInitialized()) {
        const t = n.getImmediate(), s = n.getOptions();
        if ((0, _util.deepEqual)(s, e)) return t;
        throw new Q(G.FAILED_PRECONDITION, "initializeFirestore() has already been called with different options. To avoid this error, call initializeFirestore() with the same options as when it was originally called, or call getFirestore() to return the already initialized instance.");
    }
    if (void 0 !== e.cacheSizeBytes && -1 !== e.cacheSizeBytes && e.cacheSizeBytes < 1048576) throw new Q(G.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
    return n.initialize({
        options: e
    });
}
/**
 * Returns the existing {@link Firestore} instance that is associated with the
 * provided {@link @firebase/app#FirebaseApp}. If no instance exists, initializes a new
 * instance with default settings.
 *
 * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned {@link Firestore}
 * instance is associated with.
 * @returns The {@link Firestore} instance of the provided app.
 */ function Ba(e = (0, _app.getApp)()) {
    return (0, _app._getProvider)(e, "firestore").getImmediate();
}
/**
 * @internal
 */ function La(t) {
    return t._firestoreClient || Ua(t), t._firestoreClient.verifyNotTerminated(), t._firestoreClient;
}
function Ua(t409) {
    var e210;
    const n98 = t409._freezeSettings(), s53 = function(t, e, n, s) {
        return new ie(t, e, n, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams);
    }(t409._databaseId, (null === (e210 = t409._app) || void 0 === e210 ? void 0 : e210.options.appId) || "", t409._persistenceKey, n98);
    t409._firestoreClient = new zc(t409._authCredentials, t409._appCheckCredentials, t409._queue, s53);
}
/**
 * Attempts to enable persistent storage, if possible.
 *
 * Must be called before any other functions (other than
 * {@link initializeFirestore}, {@link getFirestore} or
 * {@link clearIndexedDbPersistence}.
 *
 * If this fails, `enableIndexedDbPersistence()` will reject the promise it
 * returns. Note that even after this failure, the {@link Firestore} instance will
 * remain usable, however offline persistence will be disabled.
 *
 * There are several reasons why this can fail, which can be identified by
 * the `code` on the error.
 *
 *   * failed-precondition: The app is already open in another browser tab.
 *   * unimplemented: The browser is incompatible with the offline
 *     persistence implementation.
 *
 * @param firestore - The {@link Firestore} instance to enable persistence for.
 * @param persistenceSettings - Optional settings object to configure
 * persistence.
 * @returns A `Promise` that represents successfully enabling persistent storage.
 */ function qa(t, e) {
    Xa(t = Ia(t, Fa));
    const n = La(t), s = t._freezeSettings(), i = new qc;
    return Ga(n, i, new Lc(i, s.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
}
/**
 * Attempts to enable multi-tab persistent storage, if possible. If enabled
 * across all tabs, all operations share access to local persistence, including
 * shared execution of queries and latency-compensated local document updates
 * across all connected instances.
 *
 * If this fails, `enableMultiTabIndexedDbPersistence()` will reject the promise
 * it returns. Note that even after this failure, the {@link Firestore} instance will
 * remain usable, however offline persistence will be disabled.
 *
 * There are several reasons why this can fail, which can be identified by
 * the `code` on the error.
 *
 *   * failed-precondition: The app is already open in another browser tab and
 *     multi-tab is not enabled.
 *   * unimplemented: The browser is incompatible with the offline
 *     persistence implementation.
 *
 * @param firestore - The {@link Firestore} instance to enable persistence for.
 * @returns A `Promise` that represents successfully enabling persistent
 * storage.
 */ function Ka(t) {
    Xa(t = Ia(t, Fa));
    const e = La(t), n = t._freezeSettings(), s = new qc;
    return Ga(e, s, new Uc(s, n.cacheSizeBytes));
}
/**
 * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
 * If the operation fails with a recoverable error (see
 * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
 * but the client remains usable.
 */ function Ga(t410, e211, n) {
    const s = new j;
    return t410.asyncQueue.enqueue(async ()=>{
        try {
            await Hc(t410, n), await Jc(t410, e211), s.resolve();
        } catch (t411) {
            const e = t411;
            if (!/**
 * Decides whether the provided error allows us to gracefully disable
 * persistence (as opposed to crashing the client).
 */ function(t) {
                if ("FirebaseError" === t.name) return t.code === G.FAILED_PRECONDITION || t.code === G.UNIMPLEMENTED;
                if ("undefined" != typeof DOMException && t instanceof DOMException) // There are a few known circumstances where we can open IndexedDb but
                // trying to read/write will fail (e.g. quota exceeded). For
                // well-understood cases, we attempt to detect these and then gracefully
                // fall back to memory persistence.
                // NOTE: Rather than continue to add to this list, we could decide to
                // always fall back, with the risk that we might accidentally hide errors
                // representing actual SDK bugs.
                // When the browser is out of quota we could get either quota exceeded
                // or an aborted error depending on whether the error happened during
                // schema migration.
                return 22 === t.code || 20 === t.code || // Firefox Private Browsing mode disables IndexedDb and returns
                // INVALID_STATE for any usage.
                11 === t.code;
                return !0;
            }(e)) throw e;
            console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + e), s.reject(e);
        }
    }).then(()=>s.promise);
}
function Qa(t412) {
    if (t412._initialized && !t412._terminated) throw new Q(G.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
    const e212 = new j;
    return t412._queue.enqueueAndForgetEvenWhileRestricted(async ()=>{
        try {
            await async function(t) {
                if (!Vt.V()) return Promise.resolve();
                const e = t + "main";
                await Vt.delete(e);
            }(Io(t412._databaseId, t412._persistenceKey)), e212.resolve();
        } catch (t) {
            e212.reject(t);
        }
    }), e212.promise;
}
/**
 * Waits until all currently pending writes for the active user have been
 * acknowledged by the backend.
 *
 * The returned promise resolves immediately if there are no outstanding writes.
 * Otherwise, the promise waits for all previously issued writes (including
 * those written in a previous app session), but it does not wait for writes
 * that were added after the function is called. If you want to wait for
 * additional writes, call `waitForPendingWrites()` again.
 *
 * Any outstanding `waitForPendingWrites()` promises are rejected during user
 * changes.
 *
 * @returns A `Promise` which resolves when all currently pending writes have been
 * acknowledged by the backend.
 */ function ja(t413) {
    return function(t) {
        const e = new j;
        return t.asyncQueue.enqueueAndForget(async ()=>mc(await na(t), e)), e.promise;
    }(La(t413 = Ia(t413, Fa)));
}
/**
 * Re-enables use of the network for this {@link Firestore} instance after a prior
 * call to {@link disableNetwork}.
 *
 * @returns A `Promise` that is resolved once the network has been enabled.
 */ function Wa(t) {
    return ia(La(t = Ia(t, Fa)));
}
/**
 * Disables network usage for this instance. It can be re-enabled via {@link
 * enableNetwork}. While the network is disabled, any snapshot listeners,
 * `getDoc()` or `getDocs()` calls will return results from cache, and any write
 * operations will be queued until the network is restored.
 *
 * @returns A `Promise` that is resolved once the network has been disabled.
 */ function za(t) {
    return ra(La(t = Ia(t, Fa)));
}
/**
 * Terminates the provided {@link Firestore} instance.
 *
 * After calling `terminate()` only the `clearIndexedDbPersistence()` function
 * may be used. Any other function will throw a `FirestoreError`.
 *
 * To restart after termination, create a new instance of FirebaseFirestore with
 * {@link getFirestore}.
 *
 * Termination does not cancel any pending writes, and any promises that are
 * awaiting a response from the server will not be resolved. If you have
 * persistence enabled, the next time you start this instance, it will resume
 * sending these writes to the server.
 *
 * Note: Under normal circumstances, calling `terminate()` is not required. This
 * function is useful only when you want to force this instance to release all
 * of its resources or in combination with `clearIndexedDbPersistence()` to
 * ensure that all local state is destroyed between test runs.
 *
 * @returns A `Promise` that is resolved when the instance has been successfully
 * terminated.
 */ function Ha(t) {
    return (0, _app._removeServiceInstance)(t.app, "firestore"), t._delete();
}
/**
 * Loads a Firestore bundle into the local cache.
 *
 * @param firestore - The {@link Firestore} instance to load bundles for.
 * @param bundleData - An object representing the bundle to be loaded. Valid
 * objects are `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.
 *
 * @returns A `LoadBundleTask` object, which notifies callers with progress
 * updates, and completion or error events. It can be used as a
 * `Promise<LoadBundleTaskProgress>`.
 */ function Ja(t, e) {
    const n = La(t = Ia(t, Fa)), s = new Oa;
    return fa(n, t._databaseId, e, s), s;
}
/**
 * Reads a Firestore {@link Query} from local cache, identified by the given
 * name.
 *
 * The named queries are packaged  into bundles on the server side (along
 * with resulting documents), and loaded to local cache using `loadBundle`. Once
 * in local cache, use this method to extract a {@link Query} by name.
 *
 * @param firestore - The {@link Firestore} instance to read the query from.
 * @param name - The name of the query.
 * @returns A `Promise` that is resolved with the Query or `null`.
 */ function Ya(t, e213) {
    return da(La(t = Ia(t, Fa)), e213).then((e)=>e ? new Pa(t, null, e.query) : null);
}
function Xa(t) {
    if (t._initialized || t._terminated) throw new Q(G.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A `FieldPath` refers to a field in a document. The path may consist of a
 * single field name (referring to a top-level field in the document), or a
 * list of field names (referring to a nested field in the document).
 *
 * Create a `FieldPath` by providing field names. If more than one field
 * name is provided, the path will point to a nested field in a document.
 */ class Za {
    /**
     * Creates a `FieldPath` from the provided field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     *
     * @param fieldNames - A list of field names.
     */ constructor(...t){
        for(let e = 0; e < t.length; ++e)if (0 === t[e].length) throw new Q(G.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
        this._internalPath = new ft(t);
    }
    /**
     * Returns true if this `FieldPath` is equal to the provided one.
     *
     * @param other - The `FieldPath` to compare against.
     * @returns true if this `FieldPath` is equal to the provided one.
     */ isEqual(t) {
        return this._internalPath.isEqual(t._internalPath);
    }
}
/**
 * Returns a special sentinel `FieldPath` to refer to the ID of a document.
 * It can be used in queries to sort or filter by the document ID.
 */ function th() {
    return new Za("__name__");
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable object representing an array of bytes.
 */ class eh {
    /** @hideconstructor */ constructor(t){
        this._byteString = t;
    }
    /**
     * Creates a new `Bytes` object from the given Base64 string, converting it to
     * bytes.
     *
     * @param base64 - The Base64 string used to create the `Bytes` object.
     */ static fromBase64String(t) {
        try {
            return new eh(Jt.fromBase64String(t));
        } catch (t414) {
            throw new Q(G.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + t414);
        }
    }
    /**
     * Creates a new `Bytes` object from the given Uint8Array.
     *
     * @param array - The Uint8Array used to create the `Bytes` object.
     */ static fromUint8Array(t) {
        return new eh(Jt.fromUint8Array(t));
    }
    /**
     * Returns the underlying bytes as a Base64-encoded string.
     *
     * @returns The Base64-encoded string created from the `Bytes` object.
     */ toBase64() {
        return this._byteString.toBase64();
    }
    /**
     * Returns the underlying bytes in a new `Uint8Array`.
     *
     * @returns The Uint8Array created from the `Bytes` object.
     */ toUint8Array() {
        return this._byteString.toUint8Array();
    }
    /**
     * Returns a string representation of the `Bytes` object.
     *
     * @returns A string representation of the `Bytes` object.
     */ toString() {
        return "Bytes(base64: " + this.toBase64() + ")";
    }
    /**
     * Returns true if this `Bytes` object is equal to the provided one.
     *
     * @param other - The `Bytes` object to compare against.
     * @returns true if this `Bytes` object is equal to the provided one.
     */ isEqual(t) {
        return this._byteString.isEqual(t._byteString);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Sentinel values that can be used when writing document fields with `set()`
 * or `update()`.
 */ class nh {
    /**
     * @param _methodName - The public API endpoint that returns this class.
     * @hideconstructor
     */ constructor(t){
        this._methodName = t;
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * An immutable object representing a geographic location in Firestore. The
 * location is represented as latitude/longitude pair.
 *
 * Latitude values are in the range of [-90, 90].
 * Longitude values are in the range of [-180, 180].
 */ class sh {
    /**
     * Creates a new immutable `GeoPoint` object with the provided latitude and
     * longitude values.
     * @param latitude - The latitude as number between -90 and 90.
     * @param longitude - The longitude as number between -180 and 180.
     */ constructor(t, e){
        if (!isFinite(t) || t < -90 || t > 90) throw new Q(G.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
        if (!isFinite(e) || e < -180 || e > 180) throw new Q(G.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
        this._lat = t, this._long = e;
    }
    /**
     * The latitude of this `GeoPoint` instance.
     */ get latitude() {
        return this._lat;
    }
    /**
     * The longitude of this `GeoPoint` instance.
     */ get longitude() {
        return this._long;
    }
    /**
     * Returns true if this `GeoPoint` is equal to the provided one.
     *
     * @param other - The `GeoPoint` to compare against.
     * @returns true if this `GeoPoint` is equal to the provided one.
     */ isEqual(t) {
        return this._lat === t._lat && this._long === t._long;
    }
    /** Returns a JSON-serializable representation of this GeoPoint. */ toJSON() {
        return {
            latitude: this._lat,
            longitude: this._long
        };
    }
    /**
     * Actually private to JS consumers of our API, so this function is prefixed
     * with an underscore.
     */ _compareTo(t) {
        return it(this._lat, t._lat) || it(this._long, t._long);
    }
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const ih = /^__.*__$/;
/** The result of parsing document data (e.g. for a setData call). */ class rh {
    constructor(t, e, n){
        this.data = t, this.fieldMask = e, this.fieldTransforms = n;
    }
    toMutation(t, e) {
        return null !== this.fieldMask ? new Wn(t, this.data, this.fieldMask, e, this.fieldTransforms) : new jn(t, this.data, e, this.fieldTransforms);
    }
}
/** The result of parsing "update" data (i.e. for an updateData call). */ class oh {
    constructor(t, // The fieldMask does not include document transforms.
    e, n){
        this.data = t, this.fieldMask = e, this.fieldTransforms = n;
    }
    toMutation(t, e) {
        return new Wn(t, this.data, this.fieldMask, e, this.fieldTransforms);
    }
}
function uh(t) {
    switch(t){
        case 0 /* Set */ :
        // fall through
        case 2 /* MergeSet */ :
        // fall through
        case 1 /* Update */ :
            return !0;
        case 3 /* Argument */ :
        case 4 /* ArrayArgument */ :
            return !1;
        default:
            throw L();
    }
}
/** A "context" object passed around while parsing user data. */ class ch {
    /**
     * Initializes a ParseContext with the given source and path.
     *
     * @param settings - The settings for the parser.
     * @param databaseId - The database ID of the Firestore instance.
     * @param serializer - The serializer to use to generate the Value proto.
     * @param ignoreUndefinedProperties - Whether to ignore undefined properties
     * rather than throw.
     * @param fieldTransforms - A mutable list of field transforms encountered
     * while parsing the data.
     * @param fieldMask - A mutable list of field paths encountered while parsing
     * the data.
     *
     * TODO(b/34871131): We don't support array paths right now, so path can be
     * null to indicate the context represents any location within an array (in
     * which case certain features will not work and errors will be somewhat
     * compromised).
     */ constructor(t, e, n, s, i, r){
        this.settings = t, this.databaseId = e, this.wt = n, this.ignoreUndefinedProperties = s, // Minor hack: If fieldTransforms is undefined, we assume this is an
        // external call and we need to validate the entire path.
        void 0 === i && this.Xc(), this.fieldTransforms = i || [], this.fieldMask = r || [];
    }
    get path() {
        return this.settings.path;
    }
    get Zc() {
        return this.settings.Zc;
    }
    /** Returns a new context with the specified settings overwritten. */ ta(t) {
        return new ch(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.wt, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
    }
    ea(t) {
        var e;
        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.ta({
            path: n,
            na: !1
        });
        return s.sa(t), s;
    }
    ia(t) {
        var e;
        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.ta({
            path: n,
            na: !1
        });
        return s.Xc(), s;
    }
    ra(t) {
        // TODO(b/34871131): We don't support array paths right now; so make path
        // undefined.
        return this.ta({
            path: void 0,
            na: !0
        });
    }
    oa(t) {
        return Vh(t, this.settings.methodName, this.settings.ua || !1, this.path, this.settings.ca);
    }
    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */ contains(t) {
        return void 0 !== this.fieldMask.find((e)=>t.isPrefixOf(e)) || void 0 !== this.fieldTransforms.find((e)=>t.isPrefixOf(e.field));
    }
    Xc() {
        // TODO(b/34871131): Remove null check once we have proper paths for fields
        // within arrays.
        if (this.path) for(let t = 0; t < this.path.length; t++)this.sa(this.path.get(t));
    }
    sa(t) {
        if (0 === t.length) throw this.oa("Document fields must not be empty");
        if (uh(this.Zc) && ih.test(t)) throw this.oa('Document fields cannot begin and end with "__"');
    }
}
/**
 * Helper for parsing raw user input (provided via the API) into internal model
 * classes.
 */ class ah {
    constructor(t, e, n){
        this.databaseId = t, this.ignoreUndefinedProperties = e, this.wt = n || nu(t);
    }
    /** Creates a new top-level parse context. */ aa(t, e, n, s = !1) {
        return new ch({
            Zc: t,
            methodName: e,
            ca: n,
            path: ft.emptyPath(),
            na: !1,
            ua: s
        }, this.databaseId, this.wt, this.ignoreUndefinedProperties);
    }
}
function hh(t) {
    const e = t._freezeSettings(), n = nu(t._databaseId);
    return new ah(t._databaseId, !!e.ignoreUndefinedProperties, n);
}
/** Parse document data from a set() call. */ function lh(t, e, n, s, i, r = {}) {
    const o = t.aa(r.merge || r.mergeFields ? 2 /* MergeSet */  : 0 /* Set */ , e, n, i);
    Rh("Data must be an object, but it was:", o, s);
    const u = Eh(s, o);
    let c, a;
    if (r.merge) c = new zt(o.fieldMask), a = o.fieldTransforms;
    else if (r.mergeFields) {
        const t415 = [];
        for (const s of r.mergeFields){
            const i = bh(e, s, n);
            if (!o.contains(i)) throw new Q(G.INVALID_ARGUMENT, `Field '${i}' is specified in your field mask but missing from your input data.`);
            Sh(t415, i) || t415.push(i);
        }
        c = new zt(t415), a = o.fieldTransforms.filter((t)=>c.covers(t.field));
    } else c = null, a = o.fieldTransforms;
    return new rh(new De(u), c, a);
}
class fh extends nh {
    _toFieldTransform(t) {
        if (2 /* MergeSet */  !== t.Zc) throw 1 /* Update */  === t.Zc ? t.oa(`${this._methodName}() can only appear at the top level of your update data`) : t.oa(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);
        // No transform to add for a delete, but we need to add it to our
        // fieldMask so it gets deleted.
        return t.fieldMask.push(t.path), null;
    }
    isEqual(t) {
        return t instanceof fh;
    }
}
/**
 * Creates a child context for parsing SerializableFieldValues.
 *
 * This is different than calling `ParseContext.contextWith` because it keeps
 * the fieldTransforms and fieldMask separate.
 *
 * The created context has its `dataSource` set to `UserDataSource.Argument`.
 * Although these values are used with writes, any elements in these FieldValues
 * are not considered writes since they cannot contain any FieldValue sentinels,
 * etc.
 *
 * @param fieldValue - The sentinel FieldValue for which to create a child
 *     context.
 * @param context - The parent context.
 * @param arrayElement - Whether or not the FieldValue has an array.
 */ function dh(t, e, n) {
    return new ch({
        Zc: 3 /* Argument */ ,
        ca: e.settings.ca,
        methodName: t._methodName,
        na: n
    }, e.databaseId, e.wt, e.ignoreUndefinedProperties);
}
class _h extends nh {
    _toFieldTransform(t) {
        return new On(t.path, new vn);
    }
    isEqual(t) {
        return t instanceof _h;
    }
}
class wh extends nh {
    constructor(t, e){
        super(t), this.ha = e;
    }
    _toFieldTransform(t416) {
        const e = dh(this, t416, /*array=*/ !0), n = this.ha.map((t)=>Th(t, e)), s = new Vn(n);
        return new On(t416.path, s);
    }
    isEqual(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }
}
class mh extends nh {
    constructor(t, e){
        super(t), this.ha = e;
    }
    _toFieldTransform(t417) {
        const e = dh(this, t417, /*array=*/ !0), n = this.ha.map((t)=>Th(t, e)), s = new Dn(n);
        return new On(t417.path, s);
    }
    isEqual(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }
}
class gh extends nh {
    constructor(t, e){
        super(t), this.la = e;
    }
    _toFieldTransform(t) {
        const e = new xn(t.wt, En(t.wt, this.la));
        return new On(t.path, e);
    }
    isEqual(t) {
        // TODO(mrschmidt): Implement isEquals
        return this === t;
    }
}
/** Parse update data from an update() call. */ function yh(t418, e, n, s54) {
    const i = t418.aa(1 /* Update */ , e, n);
    Rh("Data must be an object, but it was:", i, s54);
    const r = [], o = De.empty();
    Lt(s54, (t, s)=>{
        const u = vh(e, t, n);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        s = (0, _util.getModularInstance)(s);
        const c = i.ia(u);
        if (s instanceof fh) // Add it to the field mask, but don't add anything to updateData.
        r.push(u);
        else {
            const t = Th(s, c);
            null != t && (r.push(u), o.set(u, t));
        }
    });
    const u2 = new zt(r);
    return new oh(o, u2, i.fieldTransforms);
}
/** Parse update data from a list of field/value arguments. */ function ph(t, e, n, s, i, r) {
    const o = t.aa(1 /* Update */ , e, n), u = [
        bh(e, s, n)
    ], c = [
        i
    ];
    if (r.length % 2 != 0) throw new Q(G.INVALID_ARGUMENT, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);
    for(let t419 = 0; t419 < r.length; t419 += 2)u.push(bh(e, r[t419])), c.push(r[t419 + 1]);
    const a = [], h = De.empty();
    // We iterate in reverse order to pick the last value for a field if the
    // user specified the field multiple times.
    for(let t420 = u.length - 1; t420 >= 0; --t420)if (!Sh(a, u[t420])) {
        const e = u[t420];
        let n = c[t420];
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        n = (0, _util.getModularInstance)(n);
        const s = o.ia(e);
        if (n instanceof fh) // Add it to the field mask, but don't add anything to updateData.
        a.push(e);
        else {
            const t = Th(n, s);
            null != t && (a.push(e), h.set(e, t));
        }
    }
    const l = new zt(a);
    return new oh(h, l, o.fieldTransforms);
}
/**
 * Parse a "query value" (e.g. value in a where filter or a value in a cursor
 * bound).
 *
 * @param allowArrays - Whether the query value is an array that may directly
 * contain additional arrays (e.g. the operand of an `in` query).
 */ function Ih(t, e, n, s = !1) {
    return Th(n, t.aa(s ? 4 /* ArrayArgument */  : 3 /* Argument */ , e));
}
/**
 * Parses user data to Protobuf Values.
 *
 * @param input - Data to be parsed.
 * @param context - A context object representing the current path being parsed,
 * the source of the data being parsed, etc.
 * @returns The parsed value, or null if the value was a FieldValue sentinel
 * that should not be included in the resulting parsed data.
 */ function Th(t421, e214) {
    if (Ah(// Unwrap the API type from the Compat SDK. This will return the API type
    // from firestore-exp.
    t421 = (0, _util.getModularInstance)(t421))) return Rh("Unsupported field value:", e214, t421), Eh(t421, e214);
    if (t421 instanceof nh) // FieldValues usually parse into transforms (except deleteField())
    // in which case we do not want to include this field in our parsed data
    // (as doing so will overwrite the field directly prior to the transform
    // trying to transform it). So we don't add this location to
    // context.fieldMask and we return null as our parsing result.
    /**
 * "Parses" the provided FieldValueImpl, adding any necessary transforms to
 * context.fieldTransforms.
 */ return function(t, e) {
        // Sentinels are only supported with writes, and not within arrays.
        if (!uh(e.Zc)) throw e.oa(`${t._methodName}() can only be used with update() and set()`);
        if (!e.path) throw e.oa(`${t._methodName}() is not currently supported inside arrays`);
        const n = t._toFieldTransform(e);
        n && e.fieldTransforms.push(n);
    }(t421, e214), null;
    if (void 0 === t421 && e214.ignoreUndefinedProperties) // If the input is undefined it can never participate in the fieldMask, so
    // don't handle this below. If `ignoreUndefinedProperties` is false,
    // `parseScalarValue` will reject an undefined value.
    return null;
    if (// If context.path is null we are inside an array and we don't support
    // field mask paths more granular than the top-level array.
    e214.path && e214.fieldMask.push(e214.path), t421 instanceof Array) {
        // TODO(b/34871131): Include the path containing the array in the error
        // message.
        // In the case of IN queries, the parsed data is an array (representing
        // the set of values to be included for the IN query) that may directly
        // contain additional arrays (each representing an individual field
        // value), so we disable this validation.
        if (e214.settings.na && 4 /* ArrayArgument */  !== e214.Zc) throw e214.oa("Nested arrays are not supported");
        return function(t, e) {
            const n = [];
            let s = 0;
            for (const i of t){
                let t = Th(i, e.ra(s));
                null == t && // Just include nulls in the array for fields being replaced with a
                // sentinel.
                (t = {
                    nullValue: "NULL_VALUE"
                }), n.push(t), s++;
            }
            return {
                arrayValue: {
                    values: n
                }
            };
        }(t421, e214);
    }
    return function(t, e) {
        if (null === (t = (0, _util.getModularInstance)(t))) return {
            nullValue: "NULL_VALUE"
        };
        if ("number" == typeof t) return En(e.wt, t);
        if ("boolean" == typeof t) return {
            booleanValue: t
        };
        if ("string" == typeof t) return {
            stringValue: t
        };
        if (t instanceof Date) {
            const n = ut.fromDate(t);
            return {
                timestampValue: Ds(e.wt, n)
            };
        }
        if (t instanceof ut) {
            // Firestore backend truncates precision down to microseconds. To ensure
            // offline mode works the same with regards to truncation, perform the
            // truncation immediately without waiting for the backend to do that.
            const n = new ut(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
            return {
                timestampValue: Ds(e.wt, n)
            };
        }
        if (t instanceof sh) return {
            geoPointValue: {
                latitude: t.latitude,
                longitude: t.longitude
            }
        };
        if (t instanceof eh) return {
            bytesValue: Cs(e.wt, t._byteString)
        };
        if (t instanceof ba) {
            const n = e.databaseId, s = t.firestore._databaseId;
            if (!s.isEqual(n)) throw e.oa(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);
            return {
                referenceValue: ks(t.firestore._databaseId || e.databaseId, t._key.path)
            };
        }
        throw e.oa(`Unsupported field value: ${pa(t)}`);
    }(t421, e214);
}
function Eh(t422, e) {
    const n = {};
    return Ut(t422) ? // If we encounter an empty object, we explicitly add it to the update
    // mask to ensure that the server creates a map entry.
    e.path && e.path.length > 0 && e.fieldMask.push(e.path) : Lt(t422, (t, s)=>{
        const i = Th(s, e.ea(t));
        null != i && (n[t] = i);
    }), {
        mapValue: {
            fields: n
        }
    };
}
function Ah(t) {
    return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof ut || t instanceof sh || t instanceof eh || t instanceof ba || t instanceof nh);
}
function Rh(t423, e, n) {
    if (!Ah(n) || !function(t) {
        return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
    }(n)) {
        const s = pa(n);
        throw "an object" === s ? e.oa(t423 + " a custom object") : e.oa(t423 + " " + s);
    }
}
/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */ function bh(t, e, n) {
    if (// If required, replace the FieldPath Compat class with with the firestore-exp
    // FieldPath.
    (e = (0, _util.getModularInstance)(e)) instanceof Za) return e._internalPath;
    if ("string" == typeof e) return vh(t, e);
    throw Vh("Field path arguments must be of type string or ", t, /* hasConverter= */ !1, /* path= */ void 0, n);
}
/**
 * Matches any characters in a field path string that are reserved.
 */ const Ph = new RegExp("[~\\*/\\[\\]]");
/**
 * Wraps fromDotSeparatedString with an error message about the method that
 * was thrown.
 * @param methodName - The publicly visible method name
 * @param path - The dot-separated string form of a field path which will be
 * split on dots.
 * @param targetDoc - The document against which the field path will be
 * evaluated.
 */ function vh(t, e, n) {
    if (e.search(Ph) >= 0) throw Vh(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, /* hasConverter= */ !1, /* path= */ void 0, n);
    try {
        return new Za(...e.split("."))._internalPath;
    } catch (s) {
        throw Vh(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, /* hasConverter= */ !1, /* path= */ void 0, n);
    }
}
function Vh(t, e, n, s, i) {
    const r = s && !s.isEmpty(), o = void 0 !== i;
    let u = `Function ${e}() called with invalid data`;
    n && (u += " (via `toFirestore()`)"), u += ". ";
    let c = "";
    return (r || o) && (c += " (found", r && (c += ` in field ${s}`), o && (c += ` in document ${i}`), c += ")"), new Q(G.INVALID_ARGUMENT, u + t + c);
}
/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function Sh(t424, e) {
    return t424.some((t)=>t.isEqual(e));
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */ class Dh {
    // Note: This class is stripped down version of the DocumentSnapshot in
    // the legacy SDK. The changes are:
    // - No support for SnapshotMetadata.
    // - No support for SnapshotOptions.
    /** @hideconstructor protected */ constructor(t, e, n, s, i){
        this._firestore = t, this._userDataWriter = e, this._key = n, this._document = s, this._converter = i;
    }
    /** Property of the `DocumentSnapshot` that provides the document's ID. */ get id() {
        return this._key.path.lastSegment();
    }
    /**
     * The `DocumentReference` for the document included in the `DocumentSnapshot`.
     */ get ref() {
        return new ba(this._firestore, this._converter, this._key);
    }
    /**
     * Signals whether or not the document at the snapshot's location exists.
     *
     * @returns true if the document exists.
     */ exists() {
        return null !== this._document;
    }
    /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * @returns An `Object` containing all fields in the document or `undefined`
     * if the document doesn't exist.
     */ data() {
        if (this._document) {
            if (this._converter) {
                // We only want to use the converter and create a new DocumentSnapshot
                // if a converter has been provided.
                const t = new Ch(this._firestore, this._userDataWriter, this._key, this._document, /* converter= */ null);
                return this._converter.fromFirestore(t);
            }
            return this._userDataWriter.convertValue(this._document.data.value);
        }
    }
    /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */ // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get(t) {
        if (this._document) {
            const e = this._document.data.field(xh("DocumentSnapshot.get", t));
            if (null !== e) return this._userDataWriter.convertValue(e);
        }
    }
}
/**
 * A `QueryDocumentSnapshot` contains data read from a document in your
 * Firestore database as part of a query. The document is guaranteed to exist
 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
 * specific field.
 *
 * A `QueryDocumentSnapshot` offers the same API surface as a
 * `DocumentSnapshot`. Since query results contain only existing documents, the
 * `exists` property will always be true and `data()` will never return
 * 'undefined'.
 */ class Ch extends Dh {
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * @override
     * @returns An `Object` containing all fields in the document.
     */ data() {
        return super.data();
    }
}
/**
 * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.
 */ function xh(t, e) {
    return "string" == typeof e ? vh(t, e) : e instanceof Za ? e._internalPath : e._delegate._internalPath;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Metadata about a snapshot, describing the state of the snapshot.
 */ class Nh {
    /** @hideconstructor */ constructor(t, e){
        this.hasPendingWrites = t, this.fromCache = e;
    }
    /**
     * Returns true if this `SnapshotMetadata` is equal to the provided one.
     *
     * @param other - The `SnapshotMetadata` to compare against.
     * @returns true if this `SnapshotMetadata` is equal to the provided one.
     */ isEqual(t) {
        return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
    }
}
/**
 * A `DocumentSnapshot` contains data read from a document in your Firestore
 * database. The data can be extracted with `.data()` or `.get(<field>)` to
 * get a specific field.
 *
 * For a `DocumentSnapshot` that points to a non-existing document, any data
 * access will return 'undefined'. You can use the `exists()` method to
 * explicitly verify a document's existence.
 */ class kh extends Dh {
    /** @hideconstructor protected */ constructor(t, e, n, s, i, r){
        super(t, e, n, s, r), this._firestore = t, this._firestoreImpl = t, this.metadata = i;
    }
    /**
     * Returns whether or not the data exists. True if the document exists.
     */ exists() {
        return super.exists();
    }
    /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * By default, `serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @param options - An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @returns An `Object` containing all fields in the document or `undefined` if
     * the document doesn't exist.
     */ data(t = {}) {
        if (this._document) {
            if (this._converter) {
                // We only want to use the converter and create a new DocumentSnapshot
                // if a converter has been provided.
                const e = new Oh(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, /* converter= */ null);
                return this._converter.fromFirestore(e, t);
            }
            return this._userDataWriter.convertValue(this._document.data.value, t.serverTimestamps);
        }
    }
    /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * By default, a `serverTimestamp()` that has not yet been set to
     * its final value will be returned as `null`. You can override this by
     * passing an options object.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @param options - An options object to configure how the field is retrieved
     * from the snapshot (for example the desired behavior for server timestamps
     * that have not yet been set to their final value).
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */ // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get(t, e = {}) {
        if (this._document) {
            const n = this._document.data.field(xh("DocumentSnapshot.get", t));
            if (null !== n) return this._userDataWriter.convertValue(n, e.serverTimestamps);
        }
    }
}
/**
 * A `QueryDocumentSnapshot` contains data read from a document in your
 * Firestore database as part of a query. The document is guaranteed to exist
 * and its data can be extracted with `.data()` or `.get(<field>)` to get a
 * specific field.
 *
 * A `QueryDocumentSnapshot` offers the same API surface as a
 * `DocumentSnapshot`. Since query results contain only existing documents, the
 * `exists` property will always be true and `data()` will never return
 * 'undefined'.
 */ class Oh extends kh {
    /**
     * Retrieves all fields in the document as an `Object`.
     *
     * By default, `serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @override
     * @param options - An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @returns An `Object` containing all fields in the document.
     */ data(t = {}) {
        return super.data(t);
    }
}
/**
 * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
 * representing the results of a query. The documents can be accessed as an
 * array via the `docs` property or enumerated using the `forEach` method. The
 * number of documents can be determined via the `empty` and `size`
 * properties.
 */ class Mh {
    /** @hideconstructor */ constructor(t, e, n, s){
        this._firestore = t, this._userDataWriter = e, this._snapshot = s, this.metadata = new Nh(s.hasPendingWrites, s.fromCache), this.query = n;
    }
    /** An array of all the documents in the `QuerySnapshot`. */ get docs() {
        const t = [];
        return this.forEach((e)=>t.push(e)), t;
    }
    /** The number of documents in the `QuerySnapshot`. */ get size() {
        return this._snapshot.docs.size;
    }
    /** True if there are no documents in the `QuerySnapshot`. */ get empty() {
        return 0 === this.size;
    }
    /**
     * Enumerates all of the documents in the `QuerySnapshot`.
     *
     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
     * each document in the snapshot.
     * @param thisArg - The `this` binding for the callback.
     */ forEach(t, e) {
        this._snapshot.docs.forEach((n)=>{
            t.call(e, new Oh(this._firestore, this._userDataWriter, n.key, n, new Nh(this._snapshot.mutatedKeys.has(n.key), this._snapshot.fromCache), this.query.converter));
        });
    }
    /**
     * Returns an array of the documents changes since the last snapshot. If this
     * is the first snapshot, all documents will be in the list as 'added'
     * changes.
     *
     * @param options - `SnapshotListenOptions` that control whether metadata-only
     * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
     * snapshot events.
     */ docChanges(t425 = {}) {
        const e215 = !!t425.includeMetadataChanges;
        if (e215 && this._snapshot.excludesMetadataChanges) throw new Q(G.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
        return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e215 || (this._cachedChanges = /** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */ function(t426, e216) {
            if (t426._snapshot.oldDocs.isEmpty()) {
                let e = 0;
                return t426._snapshot.docChanges.map((n)=>({
                        type: "added",
                        doc: new Oh(t426._firestore, t426._userDataWriter, n.doc.key, n.doc, new Nh(t426._snapshot.mutatedKeys.has(n.doc.key), t426._snapshot.fromCache), t426.query.converter),
                        oldIndex: -1,
                        newIndex: e++
                    }));
            }
            {
                // A `DocumentSet` that is updated incrementally as changes are applied to use
                // to lookup the index of a document.
                let n = t426._snapshot.oldDocs;
                return t426._snapshot.docChanges.filter((t)=>e216 || 3 /* Metadata */  !== t.type).map((e)=>{
                    const s = new Oh(t426._firestore, t426._userDataWriter, e.doc.key, e.doc, new Nh(t426._snapshot.mutatedKeys.has(e.doc.key), t426._snapshot.fromCache), t426.query.converter);
                    let i = -1, r = -1;
                    return 0 /* Added */  !== e.type && (i = n.indexOf(e.doc.key), n = n.delete(e.doc.key)), 1 /* Removed */  !== e.type && (n = n.add(e.doc), r = n.indexOf(e.doc.key)), {
                        type: Fh(e.type),
                        doc: s,
                        oldIndex: i,
                        newIndex: r
                    };
                });
            }
        }(this, e215), this._cachedChangesIncludeMetadataChanges = e215), this._cachedChanges;
    }
}
function Fh(t) {
    switch(t){
        case 0 /* Added */ :
            return "added";
        case 2 /* Modified */ :
        case 3 /* Metadata */ :
            return "modified";
        case 1 /* Removed */ :
            return "removed";
        default:
            return L();
    }
}
// TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
// metadata
/**
 * Returns true if the provided snapshots are equal.
 *
 * @param left - A snapshot to compare.
 * @param right - A snapshot to compare.
 * @returns true if the snapshots are equal.
 */ function $h(t, e) {
    return t instanceof kh && e instanceof kh ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof Mh && e instanceof Mh && t._firestore === e._firestore && xa(t.query, e.query) && t.metadata.isEqual(e.metadata) && t._snapshot.isEqual(e._snapshot);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function Bh(t) {
    if ("L" /* Last */  === t.limitType && 0 === t.explicitOrderBy.length) throw new Q(G.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
/**
 * A `QueryConstraint` is used to narrow the set of documents returned by a
 * Firestore query. `QueryConstraint`s are created by invoking {@link where},
 * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link
 * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and
 * can then be passed to {@link query} to create a new query instance that
 * also contains this `QueryConstraint`.
 */ class Lh {
}
/**
 * Creates a new immutable instance of {@link Query} that is extended to also include
 * additional query constraints.
 *
 * @param query - The {@link Query} instance to use as a base for the new constraints.
 * @param queryConstraints - The list of {@link QueryConstraint}s to apply.
 * @throws if any of the provided query constraints cannot be combined with the
 * existing or new constraints.
 */ function Uh(t, ...e) {
    for (const n of e)t = n._apply(t);
    return t;
}
class qh extends Lh {
    constructor(t, e, n){
        super(), this.fa = t, this.da = e, this._a = n, this.type = "where";
    }
    _apply(t427) {
        const e217 = hh(t427.firestore), n99 = function(t428, e218, n100, s55, i, r, o) {
            let u;
            if (i.isKeyField()) {
                if ("array-contains" /* ARRAY_CONTAINS */  === r || "array-contains-any" /* ARRAY_CONTAINS_ANY */  === r) throw new Q(G.INVALID_ARGUMENT, `Invalid Query. You can't perform '${r}' queries on documentId().`);
                if ("in" /* IN */  === r || "not-in" /* NOT_IN */  === r) {
                    sl(o, r);
                    const e = [];
                    for (const n of o)e.push(nl(s55, t428, n));
                    u = {
                        arrayValue: {
                            values: e
                        }
                    };
                } else u = nl(s55, t428, o);
            } else "in" /* IN */  !== r && "not-in" /* NOT_IN */  !== r && "array-contains-any" /* ARRAY_CONTAINS_ANY */  !== r || sl(o, r), u = Ih(n100, e218, o, /* allowArrays= */ "in" /* IN */  === r || "not-in" /* NOT_IN */  === r);
            const c = qe.create(i, r, u);
            return function(t429, e219) {
                if (e219.ht()) {
                    const n = cn(t429);
                    if (null !== n && !n.isEqual(e219.field)) throw new Q(G.INVALID_ARGUMENT, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${e219.field.toString()}'`);
                    const s = un(t429);
                    null !== s && il(t429, e219.field, s);
                }
                const n101 = function(t, e) {
                    for (const n of t.filters)if (e.indexOf(n.op) >= 0) return n.op;
                    return null;
                }(t429, /**
 * Given an operator, returns the set of operators that cannot be used with it.
 *
 * Operators in a query must adhere to the following set of rules:
 * 1. Only one array operator is allowed.
 * 2. Only one disjunctive operator is allowed.
 * 3. `NOT_EQUAL` cannot be used with another `NOT_EQUAL` operator.
 * 4. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.
 *
 * Array operators: `ARRAY_CONTAINS`, `ARRAY_CONTAINS_ANY`
 * Disjunctive operators: `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`
 */ function(t) {
                    switch(t){
                        case "!=" /* NOT_EQUAL */ :
                            return [
                                "!=" /* NOT_EQUAL */ ,
                                "not-in" /* NOT_IN */ 
                            ];
                        case "array-contains" /* ARRAY_CONTAINS */ :
                            return [
                                "array-contains" /* ARRAY_CONTAINS */ ,
                                "array-contains-any" /* ARRAY_CONTAINS_ANY */ ,
                                "not-in" /* NOT_IN */ 
                            ];
                        case "in" /* IN */ :
                            return [
                                "array-contains-any" /* ARRAY_CONTAINS_ANY */ ,
                                "in" /* IN */ ,
                                "not-in" /* NOT_IN */ 
                            ];
                        case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                            return [
                                "array-contains" /* ARRAY_CONTAINS */ ,
                                "array-contains-any" /* ARRAY_CONTAINS_ANY */ ,
                                "in" /* IN */ ,
                                "not-in" /* NOT_IN */ 
                            ];
                        case "not-in" /* NOT_IN */ :
                            return [
                                "array-contains" /* ARRAY_CONTAINS */ ,
                                "array-contains-any" /* ARRAY_CONTAINS_ANY */ ,
                                "in" /* IN */ ,
                                "not-in" /* NOT_IN */ ,
                                "!=" /* NOT_EQUAL */ 
                            ];
                        default:
                            return [];
                    }
                }(e219.op));
                if (null !== n101) // Special case when it's a duplicate op to give a slightly clearer error message.
                throw n101 === e219.op ? new Q(G.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${e219.op.toString()}' filter.`) : new Q(G.INVALID_ARGUMENT, `Invalid query. You cannot use '${e219.op.toString()}' filters with '${n101.toString()}' filters.`);
            }(t428, c), c;
        }(t427._query, "where", e217, t427.firestore._databaseId, this.fa, this.da, this._a);
        return new Pa(t427.firestore, t427.converter, function(t, e) {
            const n = t.filters.concat([
                e
            ]);
            return new nn(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
        }(t427._query, n99));
    }
}
/**
 * Creates a {@link QueryConstraint} that enforces that documents must contain the
 * specified field and that the value should satisfy the relation constraint
 * provided.
 *
 * @param fieldPath - The path to compare
 * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
 *   "&lt;=", "!=").
 * @param value - The value for comparison
 * @returns The created {@link Query}.
 */ function Kh(t, e, n) {
    const s = e, i = xh("where", t);
    return new qh(i, s, n);
}
class Gh extends Lh {
    constructor(t, e){
        super(), this.fa = t, this.wa = e, this.type = "orderBy";
    }
    _apply(t430) {
        const e220 = function(t431, e221, n102) {
            if (null !== t431.startAt) throw new Q(G.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
            if (null !== t431.endAt) throw new Q(G.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
            const s = new Xe(e221, n102);
            return function(t, e) {
                if (null === un(t)) {
                    // This is the first order by. It must match any inequality.
                    const n = cn(t);
                    null !== n && il(t, n, e.field);
                }
            }(t431, s), s;
        }(t430._query, this.fa, this.wa);
        return new Pa(t430.firestore, t430.converter, function(t, e) {
            // TODO(dimond): validate that orderBy does not list the same key twice.
            const n = t.explicitOrderBy.concat([
                e
            ]);
            return new nn(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
        }(t430._query, e220));
    }
}
/**
 * Creates a {@link QueryConstraint} that sorts the query result by the
 * specified field, optionally in descending order instead of ascending.
 *
 * @param fieldPath - The field to sort by.
 * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
 * not specified, order will be ascending.
 * @returns The created {@link Query}.
 */ function Qh(t, e = "asc") {
    const n = e, s = xh("orderBy", t);
    return new Gh(s, n);
}
class jh extends Lh {
    constructor(t, e, n){
        super(), this.type = t, this.ma = e, this.ga = n;
    }
    _apply(t) {
        return new Pa(t.firestore, t.converter, fn(t._query, this.ma, this.ga));
    }
}
/**
 * Creates a {@link QueryConstraint} that only returns the first matching documents.
 *
 * @param limit - The maximum number of items to return.
 * @returns The created {@link Query}.
 */ function Wh(t) {
    return Ta("limit", t), new jh("limit", t, "F" /* First */ );
}
/**
 * Creates a {@link QueryConstraint} that only returns the last matching documents.
 *
 * You must specify at least one `orderBy` clause for `limitToLast` queries,
 * otherwise an exception will be thrown during execution.
 *
 * @param limit - The maximum number of items to return.
 * @returns The created {@link Query}.
 */ function zh(t) {
    return Ta("limitToLast", t), new jh("limitToLast", t, "L" /* Last */ );
}
class Hh extends Lh {
    constructor(t, e, n){
        super(), this.type = t, this.ya = e, this.pa = n;
    }
    _apply(t432) {
        const e222 = el(t432, this.type, this.ya, this.pa);
        return new Pa(t432.firestore, t432.converter, function(t, e) {
            return new nn(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
        }(t432._query, e222));
    }
}
function Jh(...t) {
    return new Hh("startAt", t, /*inclusive=*/ !0);
}
function Yh(...t) {
    return new Hh("startAfter", t, /*inclusive=*/ !1);
}
class Xh extends Lh {
    constructor(t, e, n){
        super(), this.type = t, this.ya = e, this.pa = n;
    }
    _apply(t433) {
        const e223 = el(t433, this.type, this.ya, this.pa);
        return new Pa(t433.firestore, t433.converter, function(t, e) {
            return new nn(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
        }(t433._query, e223));
    }
}
function Zh(...t) {
    return new Xh("endBefore", t, /*inclusive=*/ !1);
}
function tl(...t) {
    return new Xh("endAt", t, /*inclusive=*/ !0);
}
/** Helper function to create a bound from a document or fields */ function el(t434, e224, n104, s56) {
    if (n104[0] = (0, _util.getModularInstance)(n104[0]), n104[0] instanceof Dh) return function(t, e, n, s, i) {
        if (!s) throw new Q(G.NOT_FOUND, `Can't use a DocumentSnapshot that doesn't exist for ${n}().`);
        const r = [];
        // Because people expect to continue/end a query at the exact document
        // provided, we need to use the implicit sort order rather than the explicit
        // sort order, because it's guaranteed to contain the document key. That way
        // the position becomes unambiguous and the query continues/ends exactly at
        // the provided document. Without the key (by using the explicit sort
        // orders), multiple documents could match the position, yielding duplicate
        // results.
        for (const n103 of hn(t))if (n103.field.isKeyField()) r.push(ye(e, s.key));
        else {
            const t = s.data.field(n103.field);
            if (ee(t)) throw new Q(G.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + n103.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
            if (null === t) {
                const t = n103.field.canonicalString();
                throw new Q(G.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);
            }
            r.push(t);
        }
        return new Ye(r, i);
    }(t434._query, t434.firestore._databaseId, e224, n104[0]._document, s56);
    {
        const i23 = hh(t434.firestore);
        return function(t, e, n, s, i, r) {
            // Use explicit order by's because it has to match the query the user made
            const o = t.explicitOrderBy;
            if (i.length > o.length) throw new Q(G.INVALID_ARGUMENT, `Too many arguments provided to ${s}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
            const u = [];
            for(let r11 = 0; r11 < i.length; r11++){
                const c = i[r11];
                if (o[r11].field.isKeyField()) {
                    if ("string" != typeof c) throw new Q(G.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ${s}(), but got a ${typeof c}`);
                    if (!an(t) && -1 !== c.indexOf("/")) throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${s}() must be a plain document ID, but '${c}' contains a slash.`);
                    const n = t.path.child(ht.fromString(c));
                    if (!dt.isDocumentKey(n)) throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${s}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);
                    const i = new dt(n);
                    u.push(ye(e, i));
                } else {
                    const t = Ih(n, s, c);
                    u.push(t);
                }
            }
            return new Ye(u, r);
        }(t434._query, t434.firestore._databaseId, i23, e224, n104, s56);
    }
}
function nl(t, e, n) {
    if ("string" == typeof (n = (0, _util.getModularInstance)(n))) {
        if ("" === n) throw new Q(G.INVALID_ARGUMENT, "Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.");
        if (!an(e) && -1 !== n.indexOf("/")) throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);
        const s = e.path.child(ht.fromString(n));
        if (!dt.isDocumentKey(s)) throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${s}' is not because it has an odd number of segments (${s.length}).`);
        return ye(t, new dt(s));
    }
    if (n instanceof ba) return ye(t, n._key);
    throw new Q(G.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${pa(n)}.`);
}
/**
 * Validates that the value passed into a disjunctive filter satisfies all
 * array requirements.
 */ function sl(t, e) {
    if (!Array.isArray(t) || 0 === t.length) throw new Q(G.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);
    if (t.length > 10) throw new Q(G.INVALID_ARGUMENT, `Invalid Query. '${e.toString()}' filters support a maximum of 10 elements in the value array.`);
}
function il(t, e, n) {
    if (!n.isEqual(e)) throw new Q(G.INVALID_ARGUMENT, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ const rl = {
    maxAttempts: 5
};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Converts Firestore's internal types to the JavaScript types that we expose
 * to the user.
 *
 * @internal
 */ class ol {
    convertValue(t, e = "none") {
        switch(le(t)){
            case 0 /* NullValue */ :
                return null;
            case 1 /* BooleanValue */ :
                return t.booleanValue;
            case 2 /* NumberValue */ :
                return Zt(t.integerValue || t.doubleValue);
            case 3 /* TimestampValue */ :
                return this.convertTimestamp(t.timestampValue);
            case 4 /* ServerTimestampValue */ :
                return this.convertServerTimestamp(t, e);
            case 5 /* StringValue */ :
                return t.stringValue;
            case 6 /* BlobValue */ :
                return this.convertBytes(te(t.bytesValue));
            case 7 /* RefValue */ :
                return this.convertReference(t.referenceValue);
            case 8 /* GeoPointValue */ :
                return this.convertGeoPoint(t.geoPointValue);
            case 9 /* ArrayValue */ :
                return this.convertArray(t.arrayValue, e);
            case 10 /* ObjectValue */ :
                return this.convertObject(t.mapValue, e);
            default:
                throw L();
        }
    }
    convertObject(t435, e) {
        const n = {};
        return Lt(t435.fields, (t, s)=>{
            n[t] = this.convertValue(s, e);
        }), n;
    }
    convertGeoPoint(t) {
        return new sh(Zt(t.latitude), Zt(t.longitude));
    }
    convertArray(t436, e) {
        return (t436.values || []).map((t)=>this.convertValue(t, e));
    }
    convertServerTimestamp(t, e) {
        switch(e){
            case "previous":
                const n = ne(t);
                return null == n ? null : this.convertValue(n, e);
            case "estimate":
                return this.convertTimestamp(se(t));
            default:
                return null;
        }
    }
    convertTimestamp(t) {
        const e = Xt(t);
        return new ut(e.seconds, e.nanos);
    }
    convertDocumentKey(t, e) {
        const n = ht.fromString(t);
        U(ui(n));
        const s = new re(n.get(1), n.get(3)), i = new dt(n.popFirst(5));
        return s.isEqual(e) || // TODO(b/64130202): Somehow support foreign references.
        F(`Document ${i} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), i;
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Converts custom model object of type T into `DocumentData` by applying the
 * converter if it exists.
 *
 * This function is used when converting user objects to `DocumentData`
 * because we want to provide the user with a more specific error message if
 * their `set()` or fails due to invalid data originating from a `toFirestore()`
 * call.
 */ function ul(t, e, n) {
    let s;
    // Cast to `any` in order to satisfy the union type constraint on
    // toFirestore().
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return s = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, s;
}
class cl extends ol {
    constructor(t){
        super(), this.firestore = t;
    }
    convertBytes(t) {
        return new eh(t);
    }
    convertReference(t) {
        const e = this.convertDocumentKey(t, this.firestore._databaseId);
        return new ba(this.firestore, /* converter= */ null, e);
    }
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A write batch, used to perform multiple writes as a single atomic unit.
 *
 * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
 * provides methods for adding writes to the write batch. None of the writes
 * will be committed (or visible locally) until {@link WriteBatch.commit} is
 * called.
 */ class al {
    /** @hideconstructor */ constructor(t, e){
        this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, this._dataReader = hh(t);
    }
    set(t, e, n) {
        this._verifyNotCommitted();
        const s = hl(t, this._firestore), i = ul(s.converter, e, n), r = lh(this._dataReader, "WriteBatch.set", s._key, i, null !== s.converter, n);
        return this._mutations.push(r.toMutation(s._key, $n.none())), this;
    }
    update(t, e, n, ...s) {
        this._verifyNotCommitted();
        const i = hl(t, this._firestore);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        let r;
        return r = "string" == typeof (e = (0, _util.getModularInstance)(e)) || e instanceof Za ? ph(this._dataReader, "WriteBatch.update", i._key, e, n, s) : yh(this._dataReader, "WriteBatch.update", i._key, e), this._mutations.push(r.toMutation(i._key, $n.exists(!0))), this;
    }
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `WriteBatch` instance. Used for chaining method calls.
     */ delete(t) {
        this._verifyNotCommitted();
        const e = hl(t, this._firestore);
        return this._mutations = this._mutations.concat(new Yn(e._key, $n.none())), this;
    }
    /**
     * Commits all of the writes in this write batch as a single atomic unit.
     *
     * The result of these writes will only be reflected in document reads that
     * occur after the returned promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @returns A `Promise` resolved once all of the writes in the batch have been
     * successfully written to the backend as an atomic unit (note that it won't
     * resolve while you're offline).
     */ commit() {
        return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
    }
    _verifyNotCommitted() {
        if (this._committed) throw new Q(G.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
    }
}
function hl(t, e) {
    if ((t = (0, _util.getModularInstance)(t)).firestore !== e) throw new Q(G.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
    return t;
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
// legacy SDK.
/**
 * A reference to a transaction.
 *
 * The `Transaction` object passed to a transaction's `updateFunction` provides
 * the methods to read and write data within the transaction context. See
 * {@link runTransaction}.
 */ /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Reads the document referred to by this `DocumentReference`.
 *
 * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting
 * for data from the server, but it may return cached data or fail if you are
 * offline and the server cannot be reached. To specify this behavior, invoke
 * {@link getDocFromCache} or {@link getDocFromServer}.
 *
 * @param reference - The reference of the document to fetch.
 * @returns A Promise resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */ function ll(t) {
    t = Ia(t, ba);
    const e = Ia(t.firestore, Fa);
    return ua(La(e), t._key).then((n)=>bl(e, t, n));
}
class fl extends ol {
    constructor(t){
        super(), this.firestore = t;
    }
    convertBytes(t) {
        return new eh(t);
    }
    convertReference(t) {
        const e = this.convertDocumentKey(t, this.firestore._databaseId);
        return new ba(this.firestore, /* converter= */ null, e);
    }
}
/**
 * Reads the document referred to by this `DocumentReference` from cache.
 * Returns an error if the document is not currently cached.
 *
 * @returns A `Promise` resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */ function dl(t) {
    t = Ia(t, ba);
    const e = Ia(t.firestore, Fa), n105 = La(e), s = new fl(e);
    return oa(n105, t._key).then((n)=>new kh(e, s, t._key, n, new Nh(null !== n && n.hasLocalMutations, /* fromCache= */ !0), t.converter));
}
/**
 * Reads the document referred to by this `DocumentReference` from the server.
 * Returns an error if the network is not available.
 *
 * @returns A `Promise` resolved with a `DocumentSnapshot` containing the
 * current document contents.
 */ function _l(t) {
    t = Ia(t, ba);
    const e = Ia(t.firestore, Fa);
    return ua(La(e), t._key, {
        source: "server"
    }).then((n)=>bl(e, t, n));
}
/**
 * Executes the query and returns the results as a `QuerySnapshot`.
 *
 * Note: `getDocs()` attempts to provide up-to-date data when possible by
 * waiting for data from the server, but it may return cached data or fail if
 * you are offline and the server cannot be reached. To specify this behavior,
 * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.
 *
 * @returns A `Promise` that will be resolved with the results of the query.
 */ function wl(t) {
    t = Ia(t, Pa);
    const e = Ia(t.firestore, Fa), n106 = La(e), s = new fl(e);
    return Bh(t._query), aa(n106, t._query).then((n)=>new Mh(e, s, t, n));
}
/**
 * Executes the query and returns the results as a `QuerySnapshot` from cache.
 * Returns an error if the document is not currently cached.
 *
 * @returns A `Promise` that will be resolved with the results of the query.
 */ function ml(t) {
    t = Ia(t, Pa);
    const e = Ia(t.firestore, Fa), n107 = La(e), s = new fl(e);
    return ca(n107, t._query).then((n)=>new Mh(e, s, t, n));
}
/**
 * Executes the query and returns the results as a `QuerySnapshot` from the
 * server. Returns an error if the network is not available.
 *
 * @returns A `Promise` that will be resolved with the results of the query.
 */ function gl(t) {
    t = Ia(t, Pa);
    const e = Ia(t.firestore, Fa), n108 = La(e), s = new fl(e);
    return aa(n108, t._query, {
        source: "server"
    }).then((n)=>new Mh(e, s, t, n));
}
function yl(t, e, n) {
    t = Ia(t, ba);
    const s = Ia(t.firestore, Fa), i = ul(t.converter, e, n);
    return Rl(s, [
        lh(hh(s), "setDoc", t._key, i, null !== t.converter, n).toMutation(t._key, $n.none())
    ]);
}
function pl(t, e, n, ...s) {
    t = Ia(t, ba);
    const i = Ia(t.firestore, Fa), r = hh(i);
    let o;
    o = "string" == typeof // For Compat types, we have to "extract" the underlying types before
    // performing validation.
    (e = (0, _util.getModularInstance)(e)) || e instanceof Za ? ph(r, "updateDoc", t._key, e, n, s) : yh(r, "updateDoc", t._key, e);
    return Rl(i, [
        o.toMutation(t._key, $n.exists(!0))
    ]);
}
/**
 * Deletes the document referred to by the specified `DocumentReference`.
 *
 * @param reference - A reference to the document to delete.
 * @returns A Promise resolved once the document has been successfully
 * deleted from the backend (note that it won't resolve while you're offline).
 */ function Il(t) {
    return Rl(Ia(t.firestore, Fa), [
        new Yn(t._key, $n.none())
    ]);
}
/**
 * Add a new document to specified `CollectionReference` with the given data,
 * assigning it a document ID automatically.
 *
 * @param reference - A reference to the collection to add this document to.
 * @param data - An Object containing the data for the new document.
 * @returns A `Promise` resolved with a `DocumentReference` pointing to the
 * newly created document after it has been written to the backend (Note that it
 * won't resolve while you're offline).
 */ function Tl(t, e) {
    const n = Ia(t.firestore, Fa), s = Da(t), i = ul(t.converter, e);
    return Rl(n, [
        lh(hh(t.firestore), "addDoc", s._key, i, null !== t.converter, {}).toMutation(s._key, $n.exists(!1))
    ]).then(()=>s);
}
function El(t437, ...e225) {
    var n109, s57, i25;
    t437 = (0, _util.getModularInstance)(t437);
    let r12 = {
        includeMetadataChanges: !1
    }, o = 0;
    "object" != typeof e225[o] || ka(e225[o]) || (r12 = e225[o], o++);
    const u = {
        includeMetadataChanges: r12.includeMetadataChanges
    };
    if (ka(e225[o])) {
        const t = e225[o];
        e225[o] = null === (n109 = t.next) || void 0 === n109 ? void 0 : n109.bind(t), e225[o + 1] = null === (s57 = t.error) || void 0 === s57 ? void 0 : s57.bind(t), e225[o + 2] = null === (i25 = t.complete) || void 0 === i25 ? void 0 : i25.bind(t);
    }
    let c, a, h;
    if (t437 instanceof ba) a = Ia(t437.firestore, Fa), h = rn(t437._key.path), c = {
        next: (n)=>{
            e225[o] && e225[o](bl(a, t437, n));
        },
        error: e225[o + 1],
        complete: e225[o + 2]
    };
    else {
        const n = Ia(t437, Pa);
        a = Ia(n.firestore, Fa), h = n._query;
        const s = new fl(a);
        c = {
            next: (t)=>{
                e225[o] && e225[o](new Mh(a, s, n, t));
            },
            error: e225[o + 1],
            complete: e225[o + 2]
        }, Bh(t437._query);
    }
    return function(t, e, n, s) {
        const i = new Gc(s), r = new Ju(e, i, n);
        return t.asyncQueue.enqueueAndForget(async ()=>Qu(await sa(t), r)), ()=>{
            i.Tc(), t.asyncQueue.enqueueAndForget(async ()=>ju(await sa(t), r));
        };
    }(La(a), h, u, c);
}
function Al(t, e) {
    return ha(La(t = Ia(t, Fa)), ka(e) ? e : {
        next: e
    });
}
/**
 * Locally writes `mutations` on the async queue.
 * @internal
 */ function Rl(t438, e226) {
    return function(t, e) {
        const n = new j;
        return t.asyncQueue.enqueueAndForget(async ()=>hc(await na(t), e, n)), n.promise;
    }(La(t438), e226);
}
/**
 * Converts a {@link ViewSnapshot} that contains the single document specified by `ref`
 * to a {@link DocumentSnapshot}.
 */ function bl(t, e, n) {
    const s = n.docs.get(e._key), i = new fl(t);
    return new kh(t, i, e._key, s, new Nh(n.hasPendingWrites, n.fromCache), e.converter);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * A reference to a transaction.
 *
 * The `Transaction` object passed to a transaction's `updateFunction` provides
 * the methods to read and write data within the transaction context. See
 * {@link runTransaction}.
 */ class Pl extends class {
    /** @hideconstructor */ constructor(t, e){
        this._firestore = t, this._transaction = e, this._dataReader = hh(t);
    }
    /**
     * Reads the document referenced by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be read.
     * @returns A `DocumentSnapshot` with the read data.
     */ get(t440) {
        const e = hl(t440, this._firestore), n = new cl(this._firestore);
        return this._transaction.lookup([
            e._key
        ]).then((t)=>{
            if (!t || 1 !== t.length) return L();
            const s = t[0];
            if (s.isFoundDocument()) return new Dh(this._firestore, n, s.key, s, e.converter);
            if (s.isNoDocument()) return new Dh(this._firestore, n, e._key, null, e.converter);
            throw L();
        });
    }
    set(t, e, n) {
        const s = hl(t, this._firestore), i = ul(s.converter, e, n), r = lh(this._dataReader, "Transaction.set", s._key, i, null !== s.converter, n);
        return this._transaction.set(s._key, r), this;
    }
    update(t, e, n, ...s) {
        const i = hl(t, this._firestore);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        let r;
        return r = "string" == typeof (e = (0, _util.getModularInstance)(e)) || e instanceof Za ? ph(this._dataReader, "Transaction.update", i._key, e, n, s) : yh(this._dataReader, "Transaction.update", i._key, e), this._transaction.update(i._key, r), this;
    }
    /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `Transaction` instance. Used for chaining method calls.
     */ delete(t) {
        const e = hl(t, this._firestore);
        return this._transaction.delete(e._key), this;
    }
} {
    // This class implements the same logic as the Transaction API in the Lite SDK
    // but is subclassed in order to return its own DocumentSnapshot types.
    /** @hideconstructor */ constructor(t, e){
        super(t, e), this._firestore = t;
    }
    /**
     * Reads the document referenced by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be read.
     * @returns A `DocumentSnapshot` with the read data.
     */ get(t439) {
        const e = hl(t439, this._firestore), n = new fl(this._firestore);
        return super.get(t439).then((t)=>new kh(this._firestore, n, e._key, t._document, new Nh(/* hasPendingWrites= */ !1, /* fromCache= */ !1), e.converter));
    }
}
/**
 * Executes the given `updateFunction` and then attempts to commit the changes
 * applied within the transaction. If any document read within the transaction
 * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
 * commit after 5 attempts, the transaction fails.
 *
 * The maximum number of writes allowed in a single transaction is 500.
 *
 * @param firestore - A reference to the Firestore database to run this
 * transaction against.
 * @param updateFunction - The function to execute within the transaction
 * context.
 * @param options - An options object to configure maximum number of attempts to
 * commit.
 * @returns If the transaction completed successfully or was explicitly aborted
 * (the `updateFunction` returned a failed promise), the promise returned by the
 * `updateFunction `is returned here. Otherwise, if the transaction failed, a
 * rejected promise with the corresponding failure error is returned.
 */ function vl(t441, e, n110) {
    t441 = Ia(t441, Fa);
    const s = Object.assign(Object.assign({}, rl), n110);
    !function(t) {
        if (t.maxAttempts < 1) throw new Q(G.INVALID_ARGUMENT, "Max attempts must be at least 1");
    }(s);
    return la(La(t441), (n)=>e(new Pl(t441, n)), s);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or
 * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.
 */ function Vl() {
    return new fh("deleteField");
}
/**
 * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to
 * include a server-generated timestamp in the written data.
 */ function Sl() {
    return new _h("serverTimestamp");
}
/**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array
 * value that already exists on the server. Each specified element that doesn't
 * already exist in the array will be added to the end. If the field being
 * modified is not already an array it will be overwritten with an array
 * containing exactly the specified elements.
 *
 * @param elements - The elements to union into the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`.
 */ function Dl(...t) {
    // NOTE: We don't actually parse the data until it's used in set() or
    // update() since we'd need the Firestore instance to do this.
    return new wh("arrayUnion", t);
}
/**
 * Returns a special value that can be used with {@link (setDoc:1)} or {@link
 * updateDoc:1} that tells the server to remove the given elements from any
 * array value that already exists on the server. All instances of each element
 * specified will be removed from the array. If the field being modified is not
 * already an array it will be overwritten with an empty array.
 *
 * @param elements - The elements to remove from the array.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */ function Cl(...t) {
    // NOTE: We don't actually parse the data until it's used in set() or
    // update() since we'd need the Firestore instance to do this.
    return new mh("arrayRemove", t);
}
/**
 * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link
 * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by
 * the given value.
 *
 * If either the operand or the current field value uses floating point
 * precision, all arithmetic follows IEEE 754 semantics. If both values are
 * integers, values outside of JavaScript's safe number range
 * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
 * precision loss. Furthermore, once processed by the Firestore backend, all
 * integer operations are capped between -2^63 and 2^63-1.
 *
 * If the current field value is not of type `number`, or if the field does not
 * yet exist, the transformation sets the field to the given value.
 *
 * @param n - The value to increment by.
 * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
 * `updateDoc()`
 */ function xl(t) {
    return new gh("increment", t);
}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
 * Creates a write batch, used for performing multiple writes as a single
 * atomic operation. The maximum number of writes allowed in a single {@link WriteBatch}
 * is 500.
 *
 * Unlike transactions, write batches are persisted offline and therefore are
 * preferable when you don't need to condition your writes on read data.
 *
 * @returns A {@link WriteBatch} that can be used to atomically execute multiple
 * writes.
 */ function Nl(t) {
    return La(t = Ia(t, Fa)), new al(t, (e)=>Rl(t, e));
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ function kl(t443, e227) {
    La(t443 = Ia(t443, Fa));
    const n = "string" == typeof e227 ? function(t) {
        var e;
        try {
            return JSON.parse(t);
        } catch (t444) {
            throw new Q(G.INVALID_ARGUMENT, "Failed to parse JSON:" + (null === (e = t444) || void 0 === e ? void 0 : e.message));
        }
    }(e227) : e227, s = [];
    // PORTING NOTE: We don't return an error if the user has not enabled
    // persistence since `enableIndexeddbPersistence()` can fail on the Web.
    if (Array.isArray(n.indexes)) for (const t442 of n.indexes){
        const e = Ol(t442, "collectionGroup"), n = [];
        if (Array.isArray(t442.fields)) for (const e228 of t442.fields){
            const t = vh("setIndexConfiguration", Ol(e228, "fieldPath"));
            "CONTAINS" === e228.arrayConfig ? n.push(new gt(t, 2 /* CONTAINS */ )) : "ASCENDING" === e228.order ? n.push(new gt(t, 0 /* ASCENDING */ )) : "DESCENDING" === e228.order && n.push(new gt(t, 1 /* DESCENDING */ ));
        }
        s.push(new _t(_t.UNKNOWN_ID, e, n, yt.empty()));
    }
    // TODO(indexing): Configure indexes
    return Promise.resolve();
}
function Ol(t, e) {
    if ("string" != typeof t[e]) throw new Q(G.INVALID_ARGUMENT, "Missing string value for: " + e);
    return t[e];
}
/**
 * Cloud Firestore
 *
 * @packageDocumentation
 */ !function(t445, e = !0) {
    !function(t) {
        x = t;
    }((0, _app.SDK_VERSION)), (0, _app._registerComponent)(new (0, _component.Component)("firestore", (t, { options: n  })=>{
        const s = t.getProvider("app").getImmediate(), i = new Fa(s, new J(t.getProvider("auth-internal")), new tt(t.getProvider("app-check-internal")));
        return n = Object.assign({
            useFetchStreams: e
        }, n), i._setSettings(n), i;
    }, "PUBLIC")), (0, _app.registerVersion)(D, "3.4.11", t445), // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
    (0, _app.registerVersion)(D, "3.4.11", "esm2017");
}();

},{"@firebase/app":"3AcPV","@firebase/component":"bi1VB","@firebase/logger":"fZmft","@firebase/util":"ePiK6","@firebase/webchannel-wrapper":"yQiQ1","process":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"yQiQ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ErrorCode", ()=>ErrorCode);
parcelHelpers.export(exports, "Event", ()=>Event);
parcelHelpers.export(exports, "EventType", ()=>EventType);
parcelHelpers.export(exports, "FetchXmlHttpFactory", ()=>FetchXmlHttpFactory);
parcelHelpers.export(exports, "Stat", ()=>Stat);
parcelHelpers.export(exports, "WebChannel", ()=>WebChannel);
parcelHelpers.export(exports, "XhrIo", ()=>XhrIo);
parcelHelpers.export(exports, "createWebChannelTransport", ()=>createWebChannelTransport);
parcelHelpers.export(exports, "default", ()=>esm);
parcelHelpers.export(exports, "getStatEventTarget", ()=>getStatEventTarget);
var global = arguments[3];
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var esm = {};
/*

 Copyright The Closure Library Authors.
 SPDX-License-Identifier: Apache-2.0
*/ var k, goog = goog || {}, l = commonjsGlobal || self;
function aa() {}
function ba(a) {
    var b = typeof a;
    b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
    return "array" == b || "object" == b && "number" == typeof a.length;
}
function p(a) {
    var b = typeof a;
    return "object" == b && null != a || "function" == b;
}
function da(a) {
    return Object.prototype.hasOwnProperty.call(a, ea) && a[ea] || (a[ea] = ++fa);
}
var ea = "closure_uid_" + (1E9 * Math.random() >>> 0), fa = 0;
function ha(a, b, c) {
    return a.call.apply(a.bind, arguments);
}
function ia(a, b, c) {
    if (!a) throw Error();
    if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function() {
            var e = Array.prototype.slice.call(arguments);
            Array.prototype.unshift.apply(e, d);
            return a.apply(b, e);
        };
    }
    return function() {
        return a.apply(b, arguments);
    };
}
function q(a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? q = ha : q = ia;
    return q.apply(null, arguments);
}
function ja(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function() {
        var d = c.slice();
        d.push.apply(d, arguments);
        return a.apply(this, d);
    };
}
function t(a, b) {
    function c() {}
    c.prototype = b.prototype;
    a.Z = b.prototype;
    a.prototype = new c;
    a.prototype.constructor = a;
    a.Vb = function(d, e, f) {
        for(var h = Array(arguments.length - 2), n = 2; n < arguments.length; n++)h[n - 2] = arguments[n];
        return b.prototype[e].apply(d, h);
    };
}
function v() {
    this.s = this.s;
    this.o = this.o;
}
var ka = 0, la = {};
v.prototype.s = !1;
v.prototype.na = function() {
    if (!this.s && (this.s = !0, this.M(), 0 != ka)) {
        var a = da(this);
        delete la[a];
    }
};
v.prototype.M = function() {
    if (this.o) for(; this.o.length;)this.o.shift()();
};
const ma = Array.prototype.indexOf ? function(a, b) {
    return Array.prototype.indexOf.call(a, b, void 0);
} : function(a, b) {
    if ("string" === typeof a) return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);
    for(let c = 0; c < a.length; c++)if (c in a && a[c] === b) return c;
    return -1;
}, na = Array.prototype.forEach ? function(a, b, c) {
    Array.prototype.forEach.call(a, b, c);
} : function(a, b, c) {
    const d = a.length, e = "string" === typeof a ? a.split("") : a;
    for(let f = 0; f < d; f++)f in e && b.call(c, e[f], f, a);
};
function oa(a) {
    a: {
        var b = pa;
        const c = a.length, d = "string" === typeof a ? a.split("") : a;
        for(let e = 0; e < c; e++)if (e in d && b.call(void 0, d[e], e, a)) {
            b = e;
            break a;
        }
        b = -1;
    }
    return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
}
function qa(a) {
    return Array.prototype.concat.apply([], arguments);
}
function ra(a) {
    const b = a.length;
    if (0 < b) {
        const c = Array(b);
        for(let d = 0; d < b; d++)c[d] = a[d];
        return c;
    }
    return [];
}
function sa(a) {
    return /^[\s\xa0]*$/.test(a);
}
var ta = String.prototype.trim ? function(a) {
    return a.trim();
} : function(a) {
    return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
};
function w(a, b) {
    return -1 != a.indexOf(b);
}
function ua(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}
var x;
a: {
    var va = l.navigator;
    if (va) {
        var wa = va.userAgent;
        if (wa) {
            x = wa;
            break a;
        }
    }
    x = "";
}
function xa(a, b, c) {
    for(const d in a)b.call(c, a[d], d, a);
}
function ya(a) {
    const b = {};
    for(const c in a)b[c] = a[c];
    return b;
}
var za = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
function Aa(a, b) {
    let c, d;
    for(let e = 1; e < arguments.length; e++){
        d = arguments[e];
        for(c in d)a[c] = d[c];
        for(let f = 0; f < za.length; f++)c = za[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    }
}
function Ca(a) {
    Ca[" "](a);
    return a;
}
Ca[" "] = aa;
function Fa(a) {
    var b = Ga;
    return Object.prototype.hasOwnProperty.call(b, 9) ? b[9] : b[9] = a(9);
}
var Ha = w(x, "Opera"), y = w(x, "Trident") || w(x, "MSIE"), Ia = w(x, "Edge"), Ja = Ia || y, Ka = w(x, "Gecko") && !(w(x.toLowerCase(), "webkit") && !w(x, "Edge")) && !(w(x, "Trident") || w(x, "MSIE")) && !w(x, "Edge"), La = w(x.toLowerCase(), "webkit") && !w(x, "Edge");
function Ma() {
    var a = l.document;
    return a ? a.documentMode : void 0;
}
var Na;
a: {
    var Oa = "", Pa = function() {
        var a = x;
        if (Ka) return /rv:([^\);]+)(\)|;)/.exec(a);
        if (Ia) return /Edge\/([\d\.]+)/.exec(a);
        if (y) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
        if (La) return /WebKit\/(\S+)/.exec(a);
        if (Ha) return /(?:Version)[ \/]?(\S+)/.exec(a);
    }();
    Pa && (Oa = Pa ? Pa[1] : "");
    if (y) {
        var Qa = Ma();
        if (null != Qa && Qa > parseFloat(Oa)) {
            Na = String(Qa);
            break a;
        }
    }
    Na = Oa;
}
var Ga = {};
function Ra() {
    return Fa(function() {
        let a = 0;
        const b = ta(String(Na)).split("."), c = ta("9").split("."), d = Math.max(b.length, c.length);
        for(let h = 0; 0 == a && h < d; h++){
            var e = b[h] || "", f = c[h] || "";
            do {
                e = /(\d*)(\D*)(.*)/.exec(e) || [
                    "",
                    "",
                    "",
                    ""
                ];
                f = /(\d*)(\D*)(.*)/.exec(f) || [
                    "",
                    "",
                    "",
                    ""
                ];
                if (0 == e[0].length && 0 == f[0].length) break;
                a = ua(0 == e[1].length ? 0 : parseInt(e[1], 10), 0 == f[1].length ? 0 : parseInt(f[1], 10)) || ua(0 == e[2].length, 0 == f[2].length) || ua(e[2], f[2]);
                e = e[3];
                f = f[3];
            }while (0 == a);
        }
        return 0 <= a;
    });
}
var Sa;
if (l.document && y) {
    var Ta = Ma();
    Sa = Ta ? Ta : parseInt(Na, 10) || void 0;
} else Sa = void 0;
var Ua = Sa;
var Va = function() {
    if (!l.addEventListener || !Object.defineProperty) return !1;
    var a = !1, b = Object.defineProperty({}, "passive", {
        get: function() {
            a = !0;
        }
    });
    try {
        l.addEventListener("test", aa, b), l.removeEventListener("test", aa, b);
    } catch (c) {}
    return a;
}();
function z(a, b) {
    this.type = a;
    this.g = this.target = b;
    this.defaultPrevented = !1;
}
z.prototype.h = function() {
    this.defaultPrevented = !0;
};
function A(a, b) {
    z.call(this, a ? a.type : "");
    this.relatedTarget = this.g = this.target = null;
    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
    this.key = "";
    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
    this.state = null;
    this.pointerId = 0;
    this.pointerType = "";
    this.i = null;
    if (a) {
        var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
        this.target = a.target || a.srcElement;
        this.g = b;
        if (b = a.relatedTarget) {
            if (Ka) {
                a: {
                    try {
                        Ca(b.nodeName);
                        var e = !0;
                        break a;
                    } catch (f) {}
                    e = !1;
                }
                e || (b = null);
            }
        } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
        this.relatedTarget = b;
        d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
        this.button = a.button;
        this.key = a.key || "";
        this.ctrlKey = a.ctrlKey;
        this.altKey = a.altKey;
        this.shiftKey = a.shiftKey;
        this.metaKey = a.metaKey;
        this.pointerId = a.pointerId || 0;
        this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Wa[a.pointerType] || "";
        this.state = a.state;
        this.i = a;
        a.defaultPrevented && A.Z.h.call(this);
    }
}
t(A, z);
var Wa = {
    2: "touch",
    3: "pen",
    4: "mouse"
};
A.prototype.h = function() {
    A.Z.h.call(this);
    var a = this.i;
    a.preventDefault ? a.preventDefault() : a.returnValue = !1;
};
var B = "closure_listenable_" + (1E6 * Math.random() | 0);
var Xa = 0;
function Ya(a, b, c, d, e) {
    this.listener = a;
    this.proxy = null;
    this.src = b;
    this.type = c;
    this.capture = !!d;
    this.ia = e;
    this.key = ++Xa;
    this.ca = this.fa = !1;
}
function Za(a) {
    a.ca = !0;
    a.listener = null;
    a.proxy = null;
    a.src = null;
    a.ia = null;
}
function $a(a) {
    this.src = a;
    this.g = {};
    this.h = 0;
}
$a.prototype.add = function(a, b, c, d, e) {
    var f = a.toString();
    a = this.g[f];
    a || (a = this.g[f] = [], this.h++);
    var h = ab(a, b, d, e);
    -1 < h ? (b = a[h], c || (b.fa = !1)) : (b = new Ya(b, this.src, f, !!d, e), b.fa = c, a.push(b));
    return b;
};
function bb(a, b) {
    var c = b.type;
    if (c in a.g) {
        var d = a.g[c], e = ma(d, b), f;
        (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
        f && (Za(b), 0 == a.g[c].length && (delete a.g[c], a.h--));
    }
}
function ab(a, b, c, d) {
    for(var e = 0; e < a.length; ++e){
        var f = a[e];
        if (!f.ca && f.listener == b && f.capture == !!c && f.ia == d) return e;
    }
    return -1;
}
var cb = "closure_lm_" + (1E6 * Math.random() | 0), db = {};
function fb(a, b, c, d, e) {
    if (d && d.once) return gb(a, b, c, d, e);
    if (Array.isArray(b)) {
        for(var f = 0; f < b.length; f++)fb(a, b[f], c, d, e);
        return null;
    }
    c = hb(c);
    return a && a[B] ? a.N(b, c, p(d) ? !!d.capture : !!d, e) : ib(a, b, c, !1, d, e);
}
function ib(a, b, c, d, e, f) {
    if (!b) throw Error("Invalid event type");
    var h = p(e) ? !!e.capture : !!e, n = jb(a);
    n || (a[cb] = n = new $a(a));
    c = n.add(b, c, d, h, f);
    if (c.proxy) return c;
    d = kb();
    c.proxy = d;
    d.src = a;
    d.listener = c;
    if (a.addEventListener) Va || (e = h), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);
    else if (a.attachEvent) a.attachEvent(lb(b.toString()), d);
    else if (a.addListener && a.removeListener) a.addListener(d);
    else throw Error("addEventListener and attachEvent are unavailable.");
    return c;
}
function kb() {
    function a(c) {
        return b.call(a.src, a.listener, c);
    }
    var b = mb;
    return a;
}
function gb(a, b, c, d, e) {
    if (Array.isArray(b)) {
        for(var f = 0; f < b.length; f++)gb(a, b[f], c, d, e);
        return null;
    }
    c = hb(c);
    return a && a[B] ? a.O(b, c, p(d) ? !!d.capture : !!d, e) : ib(a, b, c, !0, d, e);
}
function nb(a, b, c, d, e) {
    if (Array.isArray(b)) for(var f = 0; f < b.length; f++)nb(a, b[f], c, d, e);
    else (d = p(d) ? !!d.capture : !!d, c = hb(c), a && a[B]) ? (a = a.i, b = String(b).toString(), b in a.g && (f = a.g[b], c = ab(f, c, d, e), -1 < c && (Za(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.g[b], a.h--)))) : a && (a = jb(a)) && (b = a.g[b.toString()], a = -1, b && (a = ab(b, c, d, e)), (c = -1 < a ? b[a] : null) && ob(c));
}
function ob(a) {
    if ("number" !== typeof a && a && !a.ca) {
        var b = a.src;
        if (b && b[B]) bb(b.i, a);
        else {
            var c = a.type, d = a.proxy;
            b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(lb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
            (c = jb(b)) ? (bb(c, a), 0 == c.h && (c.src = null, b[cb] = null)) : Za(a);
        }
    }
}
function lb(a) {
    return a in db ? db[a] : db[a] = "on" + a;
}
function mb(a, b) {
    if (a.ca) a = !0;
    else {
        b = new A(b, this);
        var c = a.listener, d = a.ia || a.src;
        a.fa && ob(a);
        a = c.call(d, b);
    }
    return a;
}
function jb(a) {
    a = a[cb];
    return a instanceof $a ? a : null;
}
var pb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
function hb(a) {
    if ("function" === typeof a) return a;
    a[pb] || (a[pb] = function(b) {
        return a.handleEvent(b);
    });
    return a[pb];
}
function C() {
    v.call(this);
    this.i = new $a(this);
    this.P = this;
    this.I = null;
}
t(C, v);
C.prototype[B] = !0;
C.prototype.removeEventListener = function(a, b, c, d) {
    nb(this, a, b, c, d);
};
function D(a, b) {
    var c, d = a.I;
    if (d) for(c = []; d; d = d.I)c.push(d);
    a = a.P;
    d = b.type || b;
    if ("string" === typeof b) b = new z(b, a);
    else if (b instanceof z) b.target = b.target || a;
    else {
        var e = b;
        b = new z(d, a);
        Aa(b, e);
    }
    e = !0;
    if (c) for(var f = c.length - 1; 0 <= f; f--){
        var h = b.g = c[f];
        e = qb(h, d, !0, b) && e;
    }
    h = b.g = a;
    e = qb(h, d, !0, b) && e;
    e = qb(h, d, !1, b) && e;
    if (c) for(f = 0; f < c.length; f++)h = b.g = c[f], e = qb(h, d, !1, b) && e;
}
C.prototype.M = function() {
    C.Z.M.call(this);
    if (this.i) {
        var a = this.i, c;
        for(c in a.g){
            for(var d = a.g[c], e = 0; e < d.length; e++)Za(d[e]);
            delete a.g[c];
            a.h--;
        }
    }
    this.I = null;
};
C.prototype.N = function(a, b, c, d) {
    return this.i.add(String(a), b, !1, c, d);
};
C.prototype.O = function(a, b, c, d) {
    return this.i.add(String(a), b, !0, c, d);
};
function qb(a, b, c, d) {
    b = a.i.g[String(b)];
    if (!b) return !0;
    b = b.concat();
    for(var e = !0, f = 0; f < b.length; ++f){
        var h = b[f];
        if (h && !h.ca && h.capture == c) {
            var n = h.listener, u = h.ia || h.src;
            h.fa && bb(a.i, h);
            e = !1 !== n.call(u, d) && e;
        }
    }
    return e && !d.defaultPrevented;
}
var rb = l.JSON.stringify;
function sb() {
    var a = tb;
    let b = null;
    a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null);
    return b;
}
class ub {
    constructor(){
        this.h = this.g = null;
    }
    add(a, b) {
        const c = vb.get();
        c.set(a, b);
        this.h ? this.h.next = c : this.g = c;
        this.h = c;
    }
}
var vb = new class {
    constructor(a, b){
        this.i = a;
        this.j = b;
        this.h = 0;
        this.g = null;
    }
    get() {
        let a;
        0 < this.h ? (this.h--, a = this.g, this.g = a.next, a.next = null) : a = this.i();
        return a;
    }
}(()=>new wb, (a)=>a.reset());
class wb {
    constructor(){
        this.next = this.g = this.h = null;
    }
    set(a, b) {
        this.h = a;
        this.g = b;
        this.next = null;
    }
    reset() {
        this.next = this.g = this.h = null;
    }
}
function yb(a) {
    l.setTimeout(()=>{
        throw a;
    }, 0);
}
function zb(a, b) {
    Ab || Bb();
    Cb || (Ab(), Cb = !0);
    tb.add(a, b);
}
var Ab;
function Bb() {
    var a = l.Promise.resolve(void 0);
    Ab = function() {
        a.then(Db);
    };
}
var Cb = !1, tb = new ub;
function Db() {
    for(var a; a = sb();){
        try {
            a.h.call(a.g);
        } catch (c) {
            yb(c);
        }
        var b = vb;
        b.j(a);
        100 > b.h && (b.h++, a.next = b.g, b.g = a);
    }
    Cb = !1;
}
function Eb(a, b) {
    C.call(this);
    this.h = a || 1;
    this.g = b || l;
    this.j = q(this.kb, this);
    this.l = Date.now();
}
t(Eb, C);
k = Eb.prototype;
k.da = !1;
k.S = null;
k.kb = function() {
    if (this.da) {
        var a = Date.now() - this.l;
        0 < a && a < .8 * this.h ? this.S = this.g.setTimeout(this.j, this.h - a) : (this.S && (this.g.clearTimeout(this.S), this.S = null), D(this, "tick"), this.da && (Fb(this), this.start()));
    }
};
k.start = function() {
    this.da = !0;
    this.S || (this.S = this.g.setTimeout(this.j, this.h), this.l = Date.now());
};
function Fb(a) {
    a.da = !1;
    a.S && (a.g.clearTimeout(a.S), a.S = null);
}
k.M = function() {
    Eb.Z.M.call(this);
    Fb(this);
    delete this.g;
};
function Gb(a, b, c) {
    if ("function" === typeof a) c && (a = q(a, c));
    else if (a && "function" == typeof a.handleEvent) a = q(a.handleEvent, a);
    else throw Error("Invalid listener argument");
    return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
}
function Hb(a) {
    a.g = Gb(()=>{
        a.g = null;
        a.i && (a.i = !1, Hb(a));
    }, a.j);
    const b = a.h;
    a.h = null;
    a.m.apply(null, b);
}
class Ib extends v {
    constructor(a, b){
        super();
        this.m = a;
        this.j = b;
        this.h = null;
        this.i = !1;
        this.g = null;
    }
    l(a) {
        this.h = arguments;
        this.g ? this.i = !0 : Hb(this);
    }
    M() {
        super.M();
        this.g && (l.clearTimeout(this.g), this.g = null, this.i = !1, this.h = null);
    }
}
function E(a) {
    v.call(this);
    this.h = a;
    this.g = {};
}
t(E, v);
var Jb = [];
function Kb(a, b, c, d) {
    Array.isArray(c) || (c && (Jb[0] = c.toString()), c = Jb);
    for(var e = 0; e < c.length; e++){
        var f = fb(b, c[e], d || a.handleEvent, !1, a.h || a);
        if (!f) break;
        a.g[f.key] = f;
    }
}
function Lb(a) {
    xa(a.g, function(b, c) {
        this.g.hasOwnProperty(c) && ob(b);
    }, a);
    a.g = {};
}
E.prototype.M = function() {
    E.Z.M.call(this);
    Lb(this);
};
E.prototype.handleEvent = function() {
    throw Error("EventHandler.handleEvent not implemented");
};
function Mb() {
    this.g = !0;
}
Mb.prototype.Aa = function() {
    this.g = !1;
};
function Nb(a, b, c, d, e, f) {
    a.info(function() {
        if (a.g) {
            if (f) {
                var h = "";
                for(var n = f.split("&"), u = 0; u < n.length; u++){
                    var m = n[u].split("=");
                    if (1 < m.length) {
                        var r = m[0];
                        m = m[1];
                        var G = r.split("_");
                        h = 2 <= G.length && "type" == G[1] ? h + (r + "=" + m + "&") : h + (r + "=redacted&");
                    }
                }
            } else h = null;
        } else h = f;
        return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + h;
    });
}
function Ob(a, b, c, d, e, f, h) {
    a.info(function() {
        return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + h;
    });
}
function F(a, b, c, d) {
    a.info(function() {
        return "XMLHTTP TEXT (" + b + "): " + Pb(a, c) + (d ? " " + d : "");
    });
}
function Qb(a, b) {
    a.info(function() {
        return "TIMEOUT: " + b;
    });
}
Mb.prototype.info = function() {};
function Pb(a, b) {
    if (!a.g) return b;
    if (!b) return null;
    try {
        var c = JSON.parse(b);
        if (c) {
            for(a = 0; a < c.length; a++)if (Array.isArray(c[a])) {
                var d = c[a];
                if (!(2 > d.length)) {
                    var e = d[1];
                    if (Array.isArray(e) && !(1 > e.length)) {
                        var f = e[0];
                        if ("noop" != f && "stop" != f && "close" != f) for(var h = 1; h < e.length; h++)e[h] = "";
                    }
                }
            }
        }
        return rb(c);
    } catch (n) {
        return b;
    }
}
var H = {}, Rb = null;
function Sb() {
    return Rb = Rb || new C;
}
H.Ma = "serverreachability";
function Tb(a) {
    z.call(this, H.Ma, a);
}
t(Tb, z);
function I(a) {
    const b = Sb();
    D(b, new Tb(b, a));
}
H.STAT_EVENT = "statevent";
function Ub(a, b) {
    z.call(this, H.STAT_EVENT, a);
    this.stat = b;
}
t(Ub, z);
function J(a) {
    const b = Sb();
    D(b, new Ub(b, a));
}
H.Na = "timingevent";
function Vb(a, b) {
    z.call(this, H.Na, a);
    this.size = b;
}
t(Vb, z);
function K(a, b) {
    if ("function" !== typeof a) throw Error("Fn must not be null and must be a function");
    return l.setTimeout(function() {
        a();
    }, b);
}
var Wb = {
    NO_ERROR: 0,
    lb: 1,
    yb: 2,
    xb: 3,
    sb: 4,
    wb: 5,
    zb: 6,
    Ja: 7,
    TIMEOUT: 8,
    Cb: 9
};
var Xb = {
    qb: "complete",
    Mb: "success",
    Ka: "error",
    Ja: "abort",
    Eb: "ready",
    Fb: "readystatechange",
    TIMEOUT: "timeout",
    Ab: "incrementaldata",
    Db: "progress",
    tb: "downloadprogress",
    Ub: "uploadprogress"
};
function Yb() {}
Yb.prototype.h = null;
function Zb(a) {
    return a.h || (a.h = a.i());
}
function $b() {}
var L = {
    OPEN: "a",
    pb: "b",
    Ka: "c",
    Bb: "d"
};
function ac() {
    z.call(this, "d");
}
t(ac, z);
function bc() {
    z.call(this, "c");
}
t(bc, z);
var cc;
function dc() {}
t(dc, Yb);
dc.prototype.g = function() {
    return new XMLHttpRequest;
};
dc.prototype.i = function() {
    return {};
};
cc = new dc;
function M(a, b, c, d) {
    this.l = a;
    this.j = b;
    this.m = c;
    this.X = d || 1;
    this.V = new E(this);
    this.P = ec;
    a = Ja ? 125 : void 0;
    this.W = new Eb(a);
    this.H = null;
    this.i = !1;
    this.s = this.A = this.v = this.K = this.F = this.Y = this.B = null;
    this.D = [];
    this.g = null;
    this.C = 0;
    this.o = this.u = null;
    this.N = -1;
    this.I = !1;
    this.O = 0;
    this.L = null;
    this.aa = this.J = this.$ = this.U = !1;
    this.h = new fc;
}
function fc() {
    this.i = null;
    this.g = "";
    this.h = !1;
}
var ec = 45E3, gc = {}, hc = {};
k = M.prototype;
k.setTimeout = function(a) {
    this.P = a;
};
function ic(a, b, c) {
    a.K = 1;
    a.v = jc(N(b));
    a.s = c;
    a.U = !0;
    kc(a, null);
}
function kc(a, b) {
    a.F = Date.now();
    lc(a);
    a.A = N(a.v);
    var c = a.A, d = a.X;
    Array.isArray(d) || (d = [
        String(d)
    ]);
    mc(c.h, "t", d);
    a.C = 0;
    c = a.l.H;
    a.h = new fc;
    a.g = nc(a.l, c ? b : null, !a.s);
    0 < a.O && (a.L = new Ib(q(a.Ia, a, a.g), a.O));
    Kb(a.V, a.g, "readystatechange", a.gb);
    b = a.H ? ya(a.H) : {};
    a.s ? (a.u || (a.u = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.g.ea(a.A, a.u, a.s, b)) : (a.u = "GET", a.g.ea(a.A, a.u, null, b));
    I(1);
    Nb(a.j, a.u, a.A, a.m, a.X, a.s);
}
k.gb = function(a) {
    a = a.target;
    const b = this.L;
    b && 3 == O(a) ? b.l() : this.Ia(a);
};
k.Ia = function(a) {
    try {
        if (a == this.g) a: {
            const r = O(this.g);
            var b = this.g.Da();
            const G = this.g.ba();
            if (!(3 > r) && (3 != r || Ja || this.g && (this.h.h || this.g.ga() || oc(this.g)))) {
                this.I || 4 != r || 7 == b || (8 == b || 0 >= G ? I(3) : I(2));
                pc(this);
                var c = this.g.ba();
                this.N = c;
                b: if (qc(this)) {
                    var d = oc(this.g);
                    a = "";
                    var e = d.length, f = 4 == O(this.g);
                    if (!this.h.i) {
                        if ("undefined" === typeof TextDecoder) {
                            P(this);
                            rc(this);
                            var h = "";
                            break b;
                        }
                        this.h.i = new l.TextDecoder;
                    }
                    for(b = 0; b < e; b++)this.h.h = !0, a += this.h.i.decode(d[b], {
                        stream: f && b == e - 1
                    });
                    d.splice(0, e);
                    this.h.g += a;
                    this.C = 0;
                    h = this.h.g;
                } else h = this.g.ga();
                this.i = 200 == c;
                Ob(this.j, this.u, this.A, this.m, this.X, r, c);
                if (this.i) {
                    if (this.$ && !this.J) {
                        b: {
                            if (this.g) {
                                var n, u = this.g;
                                if ((n = u.g ? u.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa(n)) {
                                    var m = n;
                                    break b;
                                }
                            }
                            m = null;
                        }
                        if (c = m) F(this.j, this.m, c, "Initial handshake response via X-HTTP-Initial-Response"), this.J = !0, sc(this, c);
                        else {
                            this.i = !1;
                            this.o = 3;
                            J(12);
                            P(this);
                            rc(this);
                            break a;
                        }
                    }
                    this.U ? (tc(this, r, h), Ja && this.i && 3 == r && (Kb(this.V, this.W, "tick", this.fb), this.W.start())) : (F(this.j, this.m, h, null), sc(this, h));
                    4 == r && P(this);
                    this.i && !this.I && (4 == r ? uc(this.l, this) : (this.i = !1, lc(this)));
                } else 400 == c && 0 < h.indexOf("Unknown SID") ? (this.o = 3, J(12)) : (this.o = 0, J(13)), P(this), rc(this);
            }
        }
    } catch (r) {} finally{}
};
function qc(a) {
    return a.g ? "GET" == a.u && 2 != a.K && a.l.Ba : !1;
}
function tc(a, b, c) {
    let d = !0, e;
    for(; !a.I && a.C < c.length;)if (e = vc(a, c), e == hc) {
        4 == b && (a.o = 4, J(14), d = !1);
        F(a.j, a.m, null, "[Incomplete Response]");
        break;
    } else if (e == gc) {
        a.o = 4;
        J(15);
        F(a.j, a.m, c, "[Invalid Chunk]");
        d = !1;
        break;
    } else F(a.j, a.m, e, null), sc(a, e);
    qc(a) && e != hc && e != gc && (a.h.g = "", a.C = 0);
    4 != b || 0 != c.length || a.h.h || (a.o = 1, J(16), d = !1);
    a.i = a.i && d;
    d ? 0 < c.length && !a.aa && (a.aa = !0, b = a.l, b.g == a && b.$ && !b.L && (b.h.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc(b), b.L = !0, J(11))) : (F(a.j, a.m, c, "[Invalid Chunked Response]"), P(a), rc(a));
}
k.fb = function() {
    if (this.g) {
        var a = O(this.g), b = this.g.ga();
        this.C < b.length && (pc(this), tc(this, a, b), this.i && 4 != a && lc(this));
    }
};
function vc(a, b) {
    var c = a.C, d = b.indexOf("\n", c);
    if (-1 == d) return hc;
    c = Number(b.substring(c, d));
    if (isNaN(c)) return gc;
    d += 1;
    if (d + c > b.length) return hc;
    b = b.substr(d, c);
    a.C = d + c;
    return b;
}
k.cancel = function() {
    this.I = !0;
    P(this);
};
function lc(a) {
    a.Y = Date.now() + a.P;
    xc(a, a.P);
}
function xc(a, b) {
    if (null != a.B) throw Error("WatchDog timer not null");
    a.B = K(q(a.eb, a), b);
}
function pc(a) {
    a.B && (l.clearTimeout(a.B), a.B = null);
}
k.eb = function() {
    this.B = null;
    const a = Date.now();
    0 <= a - this.Y ? (Qb(this.j, this.A), 2 != this.K && (I(3), J(17)), P(this), this.o = 2, rc(this)) : xc(this, this.Y - a);
};
function rc(a) {
    0 == a.l.G || a.I || uc(a.l, a);
}
function P(a) {
    pc(a);
    var b = a.L;
    b && "function" == typeof b.na && b.na();
    a.L = null;
    Fb(a.W);
    Lb(a.V);
    a.g && (b = a.g, a.g = null, b.abort(), b.na());
}
function sc(a, b) {
    try {
        var c = a.l;
        if (0 != c.G && (c.g == a || yc(c.i, a))) {
            if (c.I = a.N, !a.J && yc(c.i, a) && 3 == c.G) {
                try {
                    var d = c.Ca.g.parse(b);
                } catch (m) {
                    d = null;
                }
                if (Array.isArray(d) && 3 == d.length) {
                    var e = d;
                    if (0 == e[0]) {
                        a: if (!c.u) {
                            if (c.g) {
                                if (c.g.F + 3E3 < a.F) zc(c), Ac(c);
                                else break a;
                            }
                            Bc(c);
                            J(18);
                        }
                    } else c.ta = e[1], 0 < c.ta - c.U && 37500 > e[2] && c.N && 0 == c.A && !c.v && (c.v = K(q(c.ab, c), 6E3));
                    if (1 >= Cc(c.i) && c.ka) {
                        try {
                            c.ka();
                        } catch (m) {}
                        c.ka = void 0;
                    }
                } else Q(c, 11);
            } else if ((a.J || c.g == a) && zc(c), !sa(b)) for(e = c.Ca.g.parse(b), b = 0; b < e.length; b++){
                let m = e[b];
                c.U = m[0];
                m = m[1];
                if (2 == c.G) {
                    if ("c" == m[0]) {
                        c.J = m[1];
                        c.la = m[2];
                        const r = m[3];
                        null != r && (c.ma = r, c.h.info("VER=" + c.ma));
                        const G = m[4];
                        null != G && (c.za = G, c.h.info("SVER=" + c.za));
                        const Da = m[5];
                        null != Da && "number" === typeof Da && 0 < Da && (d = 1.5 * Da, c.K = d, c.h.info("backChannelRequestTimeoutMs_=" + d));
                        d = c;
                        const ca = a.g;
                        if (ca) {
                            const Ea = ca.g ? ca.g.getResponseHeader("X-Client-Wire-Protocol") : null;
                            if (Ea) {
                                var f = d.i;
                                !f.g && (w(Ea, "spdy") || w(Ea, "quic") || w(Ea, "h2")) && (f.j = f.l, f.g = new Set, f.h && (Dc(f, f.h), f.h = null));
                            }
                            if (d.D) {
                                const xb = ca.g ? ca.g.getResponseHeader("X-HTTP-Session-Id") : null;
                                xb && (d.sa = xb, R(d.F, d.D, xb));
                            }
                        }
                        c.G = 3;
                        c.j && c.j.xa();
                        c.$ && (c.O = Date.now() - a.F, c.h.info("Handshake RTT: " + c.O + "ms"));
                        d = c;
                        var h = a;
                        d.oa = Ec(d, d.H ? d.la : null, d.W);
                        if (h.J) {
                            Fc(d.i, h);
                            var n = h, u = d.K;
                            u && n.setTimeout(u);
                            n.B && (pc(n), lc(n));
                            d.g = h;
                        } else Gc(d);
                        0 < c.l.length && Hc(c);
                    } else "stop" != m[0] && "close" != m[0] || Q(c, 7);
                } else 3 == c.G && ("stop" == m[0] || "close" == m[0] ? "stop" == m[0] ? Q(c, 7) : Ic(c) : "noop" != m[0] && c.j && c.j.wa(m), c.A = 0);
            }
        }
        I(4);
    } catch (m) {}
}
function Jc(a) {
    if (a.R && "function" == typeof a.R) return a.R();
    if ("string" === typeof a) return a.split("");
    if (ba(a)) {
        for(var b = [], c = a.length, d = 0; d < c; d++)b.push(a[d]);
        return b;
    }
    b = [];
    c = 0;
    for(d in a)b[c++] = a[d];
    return b;
}
function Kc(a, b) {
    if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);
    else if (ba(a) || "string" === typeof a) na(a, b, void 0);
    else {
        if (a.T && "function" == typeof a.T) var c = a.T();
        else if (a.R && "function" == typeof a.R) c = void 0;
        else if (ba(a) || "string" === typeof a) {
            c = [];
            for(var d = a.length, e = 0; e < d; e++)c.push(e);
        } else for(e in c = [], d = 0, a)c[d++] = e;
        d = Jc(a);
        e = d.length;
        for(var f = 0; f < e; f++)b.call(void 0, d[f], c && c[f], a);
    }
}
function S(a, b) {
    this.h = {};
    this.g = [];
    this.i = 0;
    var c = arguments.length;
    if (1 < c) {
        if (c % 2) throw Error("Uneven number of arguments");
        for(var d = 0; d < c; d += 2)this.set(arguments[d], arguments[d + 1]);
    } else if (a) {
        if (a instanceof S) for(c = a.T(), d = 0; d < c.length; d++)this.set(c[d], a.get(c[d]));
        else for(d in a)this.set(d, a[d]);
    }
}
k = S.prototype;
k.R = function() {
    Lc(this);
    for(var a = [], b = 0; b < this.g.length; b++)a.push(this.h[this.g[b]]);
    return a;
};
k.T = function() {
    Lc(this);
    return this.g.concat();
};
function Lc(a) {
    if (a.i != a.g.length) {
        for(var b = 0, c = 0; b < a.g.length;){
            var d = a.g[b];
            T(a.h, d) && (a.g[c++] = d);
            b++;
        }
        a.g.length = c;
    }
    if (a.i != a.g.length) {
        var e = {};
        for(c = b = 0; b < a.g.length;)d = a.g[b], T(e, d) || (a.g[c++] = d, e[d] = 1), b++;
        a.g.length = c;
    }
}
k.get = function(a, b) {
    return T(this.h, a) ? this.h[a] : b;
};
k.set = function(a, b) {
    T(this.h, a) || (this.i++, this.g.push(a));
    this.h[a] = b;
};
k.forEach = function(a, b) {
    for(var c = this.T(), d = 0; d < c.length; d++){
        var e = c[d], f = this.get(e);
        a.call(b, f, e, this);
    }
};
function T(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}
var Mc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
function Nc(a, b) {
    if (a) {
        a = a.split("&");
        for(var c = 0; c < a.length; c++){
            var d = a[c].indexOf("="), e = null;
            if (0 <= d) {
                var f = a[c].substring(0, d);
                e = a[c].substring(d + 1);
            } else f = a[c];
            b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
        }
    }
}
function U(a, b) {
    this.i = this.s = this.j = "";
    this.m = null;
    this.o = this.l = "";
    this.g = !1;
    if (a instanceof U) {
        this.g = void 0 !== b ? b : a.g;
        Oc(this, a.j);
        this.s = a.s;
        Pc(this, a.i);
        Qc(this, a.m);
        this.l = a.l;
        b = a.h;
        var c = new Rc;
        c.i = b.i;
        b.g && (c.g = new S(b.g), c.h = b.h);
        Sc(this, c);
        this.o = a.o;
    } else a && (c = String(a).match(Mc)) ? (this.g = !!b, Oc(this, c[1] || "", !0), this.s = Tc(c[2] || ""), Pc(this, c[3] || "", !0), Qc(this, c[4]), this.l = Tc(c[5] || "", !0), Sc(this, c[6] || "", !0), this.o = Tc(c[7] || "")) : (this.g = !!b, this.h = new Rc(null, this.g));
}
U.prototype.toString = function() {
    var a = [], b = this.j;
    b && a.push(Uc(b, Vc, !0), ":");
    var c = this.i;
    if (c || "file" == b) a.push("//"), (b = this.s) && a.push(Uc(b, Vc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.m, null != c && a.push(":", String(c));
    if (c = this.l) this.i && "/" != c.charAt(0) && a.push("/"), a.push(Uc(c, "/" == c.charAt(0) ? Wc : Xc, !0));
    (c = this.h.toString()) && a.push("?", c);
    (c = this.o) && a.push("#", Uc(c, Yc));
    return a.join("");
};
function N(a) {
    return new U(a);
}
function Oc(a, b, c) {
    a.j = c ? Tc(b, !0) : b;
    a.j && (a.j = a.j.replace(/:$/, ""));
}
function Pc(a, b, c) {
    a.i = c ? Tc(b, !0) : b;
}
function Qc(a, b) {
    if (b) {
        b = Number(b);
        if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
        a.m = b;
    } else a.m = null;
}
function Sc(a, b, c) {
    b instanceof Rc ? (a.h = b, Zc(a.h, a.g)) : (c || (b = Uc(b, $c)), a.h = new Rc(b, a.g));
}
function R(a, b, c) {
    a.h.set(b, c);
}
function jc(a) {
    R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36));
    return a;
}
function ad(a) {
    return a instanceof U ? N(a) : new U(a, void 0);
}
function bd(a, b, c, d) {
    var e = new U(null, void 0);
    a && Oc(e, a);
    b && Pc(e, b);
    c && Qc(e, c);
    d && (e.l = d);
    return e;
}
function Tc(a, b) {
    return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
}
function Uc(a, b, c) {
    return "string" === typeof a ? (a = encodeURI(a).replace(b, cd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
}
function cd(a) {
    a = a.charCodeAt(0);
    return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
}
var Vc = /[#\/\?@]/g, Xc = /[#\?:]/g, Wc = /[#\?]/g, $c = /[#\?@]/g, Yc = /#/g;
function Rc(a, b) {
    this.h = this.g = null;
    this.i = a || null;
    this.j = !!b;
}
function V(a) {
    a.g || (a.g = new S, a.h = 0, a.i && Nc(a.i, function(b, c) {
        a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
    }));
}
k = Rc.prototype;
k.add = function(a, b) {
    V(this);
    this.i = null;
    a = W(this, a);
    var c = this.g.get(a);
    c || this.g.set(a, c = []);
    c.push(b);
    this.h += 1;
    return this;
};
function dd(a, b) {
    V(a);
    b = W(a, b);
    T(a.g.h, b) && (a.i = null, a.h -= a.g.get(b).length, a = a.g, T(a.h, b) && (delete a.h[b], a.i--, a.g.length > 2 * a.i && Lc(a)));
}
function ed(a, b) {
    V(a);
    b = W(a, b);
    return T(a.g.h, b);
}
k.forEach = function(a, b) {
    V(this);
    this.g.forEach(function(c, d) {
        na(c, function(e) {
            a.call(b, e, d, this);
        }, this);
    }, this);
};
k.T = function() {
    V(this);
    for(var a = this.g.R(), b = this.g.T(), c = [], d = 0; d < b.length; d++)for(var e = a[d], f = 0; f < e.length; f++)c.push(b[d]);
    return c;
};
k.R = function(a) {
    V(this);
    var b = [];
    if ("string" === typeof a) ed(this, a) && (b = qa(b, this.g.get(W(this, a))));
    else {
        a = this.g.R();
        for(var c = 0; c < a.length; c++)b = qa(b, a[c]);
    }
    return b;
};
k.set = function(a, b) {
    V(this);
    this.i = null;
    a = W(this, a);
    ed(this, a) && (this.h -= this.g.get(a).length);
    this.g.set(a, [
        b
    ]);
    this.h += 1;
    return this;
};
k.get = function(a, b) {
    if (!a) return b;
    a = this.R(a);
    return 0 < a.length ? String(a[0]) : b;
};
function mc(a, b, c) {
    dd(a, b);
    0 < c.length && (a.i = null, a.g.set(W(a, b), ra(c)), a.h += c.length);
}
k.toString = function() {
    if (this.i) return this.i;
    if (!this.g) return "";
    for(var a = [], b = this.g.T(), c = 0; c < b.length; c++){
        var d = b[c], e = encodeURIComponent(String(d));
        d = this.R(d);
        for(var f = 0; f < d.length; f++){
            var h = e;
            "" !== d[f] && (h += "=" + encodeURIComponent(String(d[f])));
            a.push(h);
        }
    }
    return this.i = a.join("&");
};
function W(a, b) {
    b = String(b);
    a.j && (b = b.toLowerCase());
    return b;
}
function Zc(a, b) {
    b && !a.j && (V(a), a.i = null, a.g.forEach(function(c, d) {
        var e = d.toLowerCase();
        d != e && (dd(this, d), mc(this, e, c));
    }, a));
    a.j = b;
}
var fd = class {
    constructor(a, b){
        this.h = a;
        this.g = b;
    }
};
function gd(a) {
    this.l = a || hd;
    l.PerformanceNavigationTiming ? (a = l.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(l.g && l.g.Ea && l.g.Ea() && l.g.Ea().Zb);
    this.j = a ? this.l : 1;
    this.g = null;
    1 < this.j && (this.g = new Set);
    this.h = null;
    this.i = [];
}
var hd = 10;
function id(a) {
    return a.h ? !0 : a.g ? a.g.size >= a.j : !1;
}
function Cc(a) {
    return a.h ? 1 : a.g ? a.g.size : 0;
}
function yc(a, b) {
    return a.h ? a.h == b : a.g ? a.g.has(b) : !1;
}
function Dc(a, b) {
    a.g ? a.g.add(b) : a.h = b;
}
function Fc(a, b) {
    a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g.delete(b);
}
gd.prototype.cancel = function() {
    this.i = jd(this);
    if (this.h) this.h.cancel(), this.h = null;
    else if (this.g && 0 !== this.g.size) {
        for (const a of this.g.values())a.cancel();
        this.g.clear();
    }
};
function jd(a) {
    if (null != a.h) return a.i.concat(a.h.D);
    if (null != a.g && 0 !== a.g.size) {
        let b = a.i;
        for (const c of a.g.values())b = b.concat(c.D);
        return b;
    }
    return ra(a.i);
}
function kd() {}
kd.prototype.stringify = function(a) {
    return l.JSON.stringify(a, void 0);
};
kd.prototype.parse = function(a) {
    return l.JSON.parse(a, void 0);
};
function ld() {
    this.g = new kd;
}
function md(a, b, c) {
    const d = c || "";
    try {
        Kc(a, function(e, f) {
            let h = e;
            p(e) && (h = rb(e));
            b.push(d + f + "=" + encodeURIComponent(h));
        });
    } catch (e) {
        throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
    }
}
function nd(a, b) {
    const c = new Mb;
    if (l.Image) {
        const d = new Image;
        d.onload = ja(od, c, d, "TestLoadImage: loaded", !0, b);
        d.onerror = ja(od, c, d, "TestLoadImage: error", !1, b);
        d.onabort = ja(od, c, d, "TestLoadImage: abort", !1, b);
        d.ontimeout = ja(od, c, d, "TestLoadImage: timeout", !1, b);
        l.setTimeout(function() {
            if (d.ontimeout) d.ontimeout();
        }, 1E4);
        d.src = a;
    } else b(!1);
}
function od(a, b, c, d, e) {
    try {
        b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
    } catch (f) {}
}
function pd(a) {
    this.l = a.$b || null;
    this.j = a.ib || !1;
}
t(pd, Yb);
pd.prototype.g = function() {
    return new qd(this.l, this.j);
};
pd.prototype.i = function(a) {
    return function() {
        return a;
    };
}({});
function qd(a, b) {
    C.call(this);
    this.D = a;
    this.u = b;
    this.m = void 0;
    this.readyState = rd;
    this.status = 0;
    this.responseType = this.responseText = this.response = this.statusText = "";
    this.onreadystatechange = null;
    this.v = new Headers;
    this.h = null;
    this.C = "GET";
    this.B = "";
    this.g = !1;
    this.A = this.j = this.l = null;
}
t(qd, C);
var rd = 0;
k = qd.prototype;
k.open = function(a, b) {
    if (this.readyState != rd) throw this.abort(), Error("Error reopening a connection");
    this.C = a;
    this.B = b;
    this.readyState = 1;
    sd(this);
};
k.send = function(a) {
    if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
    this.g = !0;
    const b = {
        headers: this.v,
        method: this.C,
        credentials: this.m,
        cache: void 0
    };
    a && (b.body = a);
    (this.D || l).fetch(new Request(this.B, b)).then(this.Va.bind(this), this.ha.bind(this));
};
k.abort = function() {
    this.response = this.responseText = "";
    this.v = new Headers;
    this.status = 0;
    this.j && this.j.cancel("Request was aborted.");
    1 <= this.readyState && this.g && 4 != this.readyState && (this.g = !1, td(this));
    this.readyState = rd;
};
k.Va = function(a) {
    if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, sd(this)), this.g && (this.readyState = 3, sd(this), this.g))) {
        if ("arraybuffer" === this.responseType) a.arrayBuffer().then(this.Ta.bind(this), this.ha.bind(this));
        else if ("undefined" !== typeof l.ReadableStream && "body" in a) {
            this.j = a.body.getReader();
            if (this.u) {
                if (this.responseType) throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
                this.response = [];
            } else this.response = this.responseText = "", this.A = new TextDecoder;
            ud(this);
        } else a.text().then(this.Ua.bind(this), this.ha.bind(this));
    }
};
function ud(a) {
    a.j.read().then(a.Sa.bind(a)).catch(a.ha.bind(a));
}
k.Sa = function(a) {
    if (this.g) {
        if (this.u && a.value) this.response.push(a.value);
        else if (!this.u) {
            var b = a.value ? a.value : new Uint8Array(0);
            if (b = this.A.decode(b, {
                stream: !a.done
            })) this.response = this.responseText += b;
        }
        a.done ? td(this) : sd(this);
        3 == this.readyState && ud(this);
    }
};
k.Ua = function(a) {
    this.g && (this.response = this.responseText = a, td(this));
};
k.Ta = function(a) {
    this.g && (this.response = a, td(this));
};
k.ha = function() {
    this.g && td(this);
};
function td(a) {
    a.readyState = 4;
    a.l = null;
    a.j = null;
    a.A = null;
    sd(a);
}
k.setRequestHeader = function(a, b) {
    this.v.append(a, b);
};
k.getResponseHeader = function(a) {
    return this.h ? this.h.get(a.toLowerCase()) || "" : "";
};
k.getAllResponseHeaders = function() {
    if (!this.h) return "";
    const a = [], b = this.h.entries();
    for(var c = b.next(); !c.done;)c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
    return a.join("\r\n");
};
function sd(a) {
    a.onreadystatechange && a.onreadystatechange.call(a);
}
Object.defineProperty(qd.prototype, "withCredentials", {
    get: function() {
        return "include" === this.m;
    },
    set: function(a) {
        this.m = a ? "include" : "same-origin";
    }
});
var vd = l.JSON.parse;
function X(a) {
    C.call(this);
    this.headers = new S;
    this.u = a || null;
    this.h = !1;
    this.C = this.g = null;
    this.H = "";
    this.m = 0;
    this.j = "";
    this.l = this.F = this.v = this.D = !1;
    this.B = 0;
    this.A = null;
    this.J = wd;
    this.K = this.L = !1;
}
t(X, C);
var wd = "", xd = /^https?$/i, yd = [
    "POST",
    "PUT"
];
k = X.prototype;
k.ea = function(a, b, c, d) {
    if (this.g) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.H + "; newUri=" + a);
    b = b ? b.toUpperCase() : "GET";
    this.H = a;
    this.j = "";
    this.m = 0;
    this.D = !1;
    this.h = !0;
    this.g = this.u ? this.u.g() : cc.g();
    this.C = this.u ? Zb(this.u) : Zb(cc);
    this.g.onreadystatechange = q(this.Fa, this);
    try {
        this.F = !0, this.g.open(b, String(a), !0), this.F = !1;
    } catch (f1) {
        zd(this, f1);
        return;
    }
    a = c || "";
    const e = new S(this.headers);
    d && Kc(d, function(f, h) {
        e.set(h, f);
    });
    d = oa(e.T());
    c = l.FormData && a instanceof l.FormData;
    !(0 <= ma(yd, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    e.forEach(function(f, h) {
        this.g.setRequestHeader(h, f);
    }, this);
    this.J && (this.g.responseType = this.J);
    "withCredentials" in this.g && this.g.withCredentials !== this.L && (this.g.withCredentials = this.L);
    try {
        Ad(this), 0 < this.B && ((this.K = Bd(this.g)) ? (this.g.timeout = this.B, this.g.ontimeout = q(this.pa, this)) : this.A = Gb(this.pa, this.B, this)), this.v = !0, this.g.send(a), this.v = !1;
    } catch (f) {
        zd(this, f);
    }
};
function Bd(a) {
    return y && Ra() && "number" === typeof a.timeout && void 0 !== a.ontimeout;
}
function pa(a) {
    return "content-type" == a.toLowerCase();
}
k.pa = function() {
    "undefined" != typeof goog && this.g && (this.j = "Timed out after " + this.B + "ms, aborting", this.m = 8, D(this, "timeout"), this.abort(8));
};
function zd(a, b) {
    a.h = !1;
    a.g && (a.l = !0, a.g.abort(), a.l = !1);
    a.j = b;
    a.m = 5;
    Cd(a);
    Dd(a);
}
function Cd(a) {
    a.D || (a.D = !0, D(a, "complete"), D(a, "error"));
}
k.abort = function(a) {
    this.g && this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1, this.m = a || 7, D(this, "complete"), D(this, "abort"), Dd(this));
};
k.M = function() {
    this.g && (this.h && (this.h = !1, this.l = !0, this.g.abort(), this.l = !1), Dd(this, !0));
    X.Z.M.call(this);
};
k.Fa = function() {
    this.s || (this.F || this.v || this.l ? Ed(this) : this.cb());
};
k.cb = function() {
    Ed(this);
};
function Ed(a) {
    if (a.h && "undefined" != typeof goog && (!a.C[1] || 4 != O(a) || 2 != a.ba())) {
        if (a.v && 4 == O(a)) Gb(a.Fa, 0, a);
        else if (D(a, "readystatechange"), 4 == O(a)) {
            a.h = !1;
            try {
                const n = a.ba();
                a: switch(n){
                    case 200:
                    case 201:
                    case 202:
                    case 204:
                    case 206:
                    case 304:
                    case 1223:
                        var b = !0;
                        break a;
                    default:
                        b = !1;
                }
                var c;
                if (!(c = b)) {
                    var d;
                    if (d = 0 === n) {
                        var e = String(a.H).match(Mc)[1] || null;
                        if (!e && l.self && l.self.location) {
                            var f = l.self.location.protocol;
                            e = f.substr(0, f.length - 1);
                        }
                        d = !xd.test(e ? e.toLowerCase() : "");
                    }
                    c = d;
                }
                if (c) D(a, "complete"), D(a, "success");
                else {
                    a.m = 6;
                    try {
                        var h = 2 < O(a) ? a.g.statusText : "";
                    } catch (u) {
                        h = "";
                    }
                    a.j = h + " [" + a.ba() + "]";
                    Cd(a);
                }
            } finally{
                Dd(a);
            }
        }
    }
}
function Dd(a, b) {
    if (a.g) {
        Ad(a);
        const c = a.g, d = a.C[0] ? aa : null;
        a.g = null;
        a.C = null;
        b || D(a, "ready");
        try {
            c.onreadystatechange = d;
        } catch (e) {}
    }
}
function Ad(a) {
    a.g && a.K && (a.g.ontimeout = null);
    a.A && (l.clearTimeout(a.A), a.A = null);
}
function O(a) {
    return a.g ? a.g.readyState : 0;
}
k.ba = function() {
    try {
        return 2 < O(this) ? this.g.status : -1;
    } catch (a) {
        return -1;
    }
};
k.ga = function() {
    try {
        return this.g ? this.g.responseText : "";
    } catch (a) {
        return "";
    }
};
k.Qa = function(a) {
    if (this.g) {
        var b = this.g.responseText;
        a && 0 == b.indexOf(a) && (b = b.substring(a.length));
        return vd(b);
    }
};
function oc(a) {
    try {
        if (!a.g) return null;
        if ("response" in a.g) return a.g.response;
        switch(a.J){
            case wd:
            case "text":
                return a.g.responseText;
            case "arraybuffer":
                if ("mozResponseArrayBuffer" in a.g) return a.g.mozResponseArrayBuffer;
        }
        return null;
    } catch (b) {
        return null;
    }
}
k.Da = function() {
    return this.m;
};
k.La = function() {
    return "string" === typeof this.j ? this.j : String(this.j);
};
function Fd(a) {
    let b = "";
    xa(a, function(c, d) {
        b += d;
        b += ":";
        b += c;
        b += "\r\n";
    });
    return b;
}
function Gd(a, b, c) {
    a: {
        for(d in c){
            var d = !1;
            break a;
        }
        d = !0;
    }
    d || (c = Fd(c), "string" === typeof a ? null != c && encodeURIComponent(String(c)) : R(a, b, c));
}
function Hd(a, b, c) {
    return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;
}
function Id(a) {
    this.za = 0;
    this.l = [];
    this.h = new Mb;
    this.la = this.oa = this.F = this.W = this.g = this.sa = this.D = this.aa = this.o = this.P = this.s = null;
    this.Za = this.V = 0;
    this.Xa = Hd("failFast", !1, a);
    this.N = this.v = this.u = this.m = this.j = null;
    this.X = !0;
    this.I = this.ta = this.U = -1;
    this.Y = this.A = this.C = 0;
    this.Pa = Hd("baseRetryDelayMs", 5E3, a);
    this.$a = Hd("retryDelaySeedMs", 1E4, a);
    this.Ya = Hd("forwardChannelMaxRetries", 2, a);
    this.ra = Hd("forwardChannelRequestTimeoutMs", 2E4, a);
    this.qa = a && a.xmlHttpFactory || void 0;
    this.Ba = a && a.Yb || !1;
    this.K = void 0;
    this.H = a && a.supportsCrossDomainXhr || !1;
    this.J = "";
    this.i = new gd(a && a.concurrentRequestLimit);
    this.Ca = new ld;
    this.ja = a && a.fastHandshake || !1;
    this.Ra = a && a.Wb || !1;
    a && a.Aa && this.h.Aa();
    a && a.forceLongPolling && (this.X = !1);
    this.$ = !this.ja && this.X && a && a.detectBufferingProxy || !1;
    this.ka = void 0;
    this.O = 0;
    this.L = !1;
    this.B = null;
    this.Wa = !a || !1 !== a.Xb;
}
k = Id.prototype;
k.ma = 8;
k.G = 1;
function Ic(a) {
    Jd(a);
    if (3 == a.G) {
        var b = a.V++, c = N(a.F);
        R(c, "SID", a.J);
        R(c, "RID", b);
        R(c, "TYPE", "terminate");
        Kd(a, c);
        b = new M(a, a.h, b, void 0);
        b.K = 2;
        b.v = jc(N(c));
        c = !1;
        l.navigator && l.navigator.sendBeacon && (c = l.navigator.sendBeacon(b.v.toString(), ""));
        !c && l.Image && ((new Image).src = b.v, c = !0);
        c || (b.g = nc(b.l, null), b.g.ea(b.v));
        b.F = Date.now();
        lc(b);
    }
    Ld(a);
}
k.hb = function(a) {
    try {
        this.h.info("Origin Trials invoked: " + a);
    } catch (b) {}
};
function Ac(a) {
    a.g && (wc(a), a.g.cancel(), a.g = null);
}
function Jd(a) {
    Ac(a);
    a.u && (l.clearTimeout(a.u), a.u = null);
    zc(a);
    a.i.cancel();
    a.m && ("number" === typeof a.m && l.clearTimeout(a.m), a.m = null);
}
function Md(a, b) {
    a.l.push(new fd(a.Za++, b));
    3 == a.G && Hc(a);
}
function Hc(a) {
    id(a.i) || a.m || (a.m = !0, zb(a.Ha, a), a.C = 0);
}
function Nd(a, b) {
    if (Cc(a.i) >= a.i.j - (a.m ? 1 : 0)) return !1;
    if (a.m) return a.l = b.D.concat(a.l), !0;
    if (1 == a.G || 2 == a.G || a.C >= (a.Xa ? 0 : a.Ya)) return !1;
    a.m = K(q(a.Ha, a, b), Od(a, a.C));
    a.C++;
    return !0;
}
k.Ha = function(a) {
    if (this.m) {
        if (this.m = null, 1 == this.G) {
            if (!a) {
                this.V = Math.floor(1E5 * Math.random());
                a = this.V++;
                const e = new M(this, this.h, a, void 0);
                let f = this.s;
                this.P && (f ? (f = ya(f), Aa(f, this.P)) : f = this.P);
                null === this.o && (e.H = f);
                if (this.ja) a: {
                    var b = 0;
                    for(var c = 0; c < this.l.length; c++){
                        b: {
                            var d = this.l[c];
                            if ("__data__" in d.g && (d = d.g.__data__, "string" === typeof d)) {
                                d = d.length;
                                break b;
                            }
                            d = void 0;
                        }
                        if (void 0 === d) break;
                        b += d;
                        if (4096 < b) {
                            b = c;
                            break a;
                        }
                        if (4096 === b || c === this.l.length - 1) {
                            b = c + 1;
                            break a;
                        }
                    }
                    b = 1E3;
                }
                else b = 1E3;
                b = Pd(this, e, b);
                c = N(this.F);
                R(c, "RID", a);
                R(c, "CVER", 22);
                this.D && R(c, "X-HTTP-Session-Id", this.D);
                Kd(this, c);
                this.o && f && Gd(c, this.o, f);
                Dc(this.i, e);
                this.Ra && R(c, "TYPE", "init");
                this.ja ? (R(c, "$req", b), R(c, "SID", "null"), e.$ = !0, ic(e, c, null)) : ic(e, c, b);
                this.G = 2;
            }
        } else 3 == this.G && (a ? Qd(this, a) : 0 == this.l.length || id(this.i) || Qd(this));
    }
};
function Qd(a, b) {
    var c;
    b ? c = b.m : c = a.V++;
    const d = N(a.F);
    R(d, "SID", a.J);
    R(d, "RID", c);
    R(d, "AID", a.U);
    Kd(a, d);
    a.o && a.s && Gd(d, a.o, a.s);
    c = new M(a, a.h, c, a.C + 1);
    null === a.o && (c.H = a.s);
    b && (a.l = b.D.concat(a.l));
    b = Pd(a, c, 1E3);
    c.setTimeout(Math.round(.5 * a.ra) + Math.round(.5 * a.ra * Math.random()));
    Dc(a.i, c);
    ic(c, d, b);
}
function Kd(a, b) {
    a.j && Kc({}, function(c, d) {
        R(b, d, c);
    });
}
function Pd(a, b, c) {
    c = Math.min(a.l.length, c);
    var d = a.j ? q(a.j.Oa, a.j, a) : null;
    a: {
        var e = a.l;
        let f = -1;
        for(;;){
            const h = [
                "count=" + c
            ];
            -1 == f ? 0 < c ? (f = e[0].h, h.push("ofs=" + f)) : f = 0 : h.push("ofs=" + f);
            let n = !0;
            for(let u = 0; u < c; u++){
                let m = e[u].h;
                const r = e[u].g;
                m -= f;
                if (0 > m) f = Math.max(0, e[u].h - 100), n = !1;
                else try {
                    md(r, h, "req" + m + "_");
                } catch (G) {
                    d && d(r);
                }
            }
            if (n) {
                d = h.join("&");
                break a;
            }
        }
    }
    a = a.l.splice(0, c);
    b.D = a;
    return d;
}
function Gc(a) {
    a.g || a.u || (a.Y = 1, zb(a.Ga, a), a.A = 0);
}
function Bc(a) {
    if (a.g || a.u || 3 <= a.A) return !1;
    a.Y++;
    a.u = K(q(a.Ga, a), Od(a, a.A));
    a.A++;
    return !0;
}
k.Ga = function() {
    this.u = null;
    Rd(this);
    if (this.$ && !(this.L || null == this.g || 0 >= this.O)) {
        var a = 2 * this.O;
        this.h.info("BP detection timer enabled: " + a);
        this.B = K(q(this.bb, this), a);
    }
};
k.bb = function() {
    this.B && (this.B = null, this.h.info("BP detection timeout reached."), this.h.info("Buffering proxy detected and switch to long-polling!"), this.N = !1, this.L = !0, J(10), Ac(this), Rd(this));
};
function wc(a) {
    null != a.B && (l.clearTimeout(a.B), a.B = null);
}
function Rd(a) {
    a.g = new M(a, a.h, "rpc", a.Y);
    null === a.o && (a.g.H = a.s);
    a.g.O = 0;
    var b = N(a.oa);
    R(b, "RID", "rpc");
    R(b, "SID", a.J);
    R(b, "CI", a.N ? "0" : "1");
    R(b, "AID", a.U);
    Kd(a, b);
    R(b, "TYPE", "xmlhttp");
    a.o && a.s && Gd(b, a.o, a.s);
    a.K && a.g.setTimeout(a.K);
    var c = a.g;
    a = a.la;
    c.K = 1;
    c.v = jc(N(b));
    c.s = null;
    c.U = !0;
    kc(c, a);
}
k.ab = function() {
    null != this.v && (this.v = null, Ac(this), Bc(this), J(19));
};
function zc(a) {
    null != a.v && (l.clearTimeout(a.v), a.v = null);
}
function uc(a, b) {
    var c = null;
    if (a.g == b) {
        zc(a);
        wc(a);
        a.g = null;
        var d = 2;
    } else if (yc(a.i, b)) c = b.D, Fc(a.i, b), d = 1;
    else return;
    a.I = b.N;
    if (0 != a.G) {
        if (b.i) {
            if (1 == d) {
                c = b.s ? b.s.length : 0;
                b = Date.now() - b.F;
                var e = a.C;
                d = Sb();
                D(d, new Vb(d, c, b, e));
                Hc(a);
            } else Gc(a);
        } else if (e = b.o, 3 == e || 0 == e && 0 < a.I || !(1 == d && Nd(a, b) || 2 == d && Bc(a))) switch(c && 0 < c.length && (b = a.i, b.i = b.i.concat(c)), e){
            case 1:
                Q(a, 5);
                break;
            case 4:
                Q(a, 10);
                break;
            case 3:
                Q(a, 6);
                break;
            default:
                Q(a, 2);
        }
    }
}
function Od(a, b) {
    let c = a.Pa + Math.floor(Math.random() * a.$a);
    a.j || (c *= 2);
    return c * b;
}
function Q(a, b) {
    a.h.info("Error code " + b);
    if (2 == b) {
        var c = null;
        a.j && (c = null);
        var d = q(a.jb, a);
        c || (c = new U("//www.google.com/images/cleardot.gif"), l.location && "http" == l.location.protocol || Oc(c, "https"), jc(c));
        nd(c.toString(), d);
    } else J(2);
    a.G = 0;
    a.j && a.j.va(b);
    Ld(a);
    Jd(a);
}
k.jb = function(a) {
    a ? (this.h.info("Successfully pinged google.com"), J(2)) : (this.h.info("Failed to ping google.com"), J(1));
};
function Ld(a) {
    a.G = 0;
    a.I = -1;
    if (a.j) {
        if (0 != jd(a.i).length || 0 != a.l.length) a.i.i.length = 0, ra(a.l), a.l.length = 0;
        a.j.ua();
    }
}
function Ec(a, b, c) {
    let d = ad(c);
    if ("" != d.i) b && Pc(d, b + "." + d.i), Qc(d, d.m);
    else {
        const e = l.location;
        d = bd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
    }
    a.aa && xa(a.aa, function(e, f) {
        R(d, f, e);
    });
    b = a.D;
    c = a.sa;
    b && c && R(d, b, c);
    R(d, "VER", a.ma);
    Kd(a, d);
    return d;
}
function nc(a, b, c) {
    if (b && !a.H) throw Error("Can't create secondary domain capable XhrIo object.");
    b = c && a.Ba && !a.qa ? new X(new pd({
        ib: !0
    })) : new X(a.qa);
    b.L = a.H;
    return b;
}
function Sd() {}
k = Sd.prototype;
k.xa = function() {};
k.wa = function() {};
k.va = function() {};
k.ua = function() {};
k.Oa = function() {};
function Td() {
    if (y && !(10 <= Number(Ua))) throw Error("Environmental error: no available transport.");
}
Td.prototype.g = function(a, b) {
    return new Y(a, b);
};
function Y(a, b) {
    C.call(this);
    this.g = new Id(b);
    this.l = a;
    this.h = b && b.messageUrlParams || null;
    a = b && b.messageHeaders || null;
    b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = {
        "X-Client-Protocol": "webchannel"
    });
    this.g.s = a;
    a = b && b.initMessageHeaders || null;
    b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = {
        "X-WebChannel-Content-Type": b.messageContentType
    });
    b && b.ya && (a ? a["X-WebChannel-Client-Profile"] = b.ya : a = {
        "X-WebChannel-Client-Profile": b.ya
    });
    this.g.P = a;
    (a = b && b.httpHeadersOverwriteParam) && !sa(a) && (this.g.o = a);
    this.A = b && b.supportsCrossDomainXhr || !1;
    this.v = b && b.sendRawJson || !1;
    (b = b && b.httpSessionIdParam) && !sa(b) && (this.g.D = b, a = this.h, null !== a && b in a && (a = this.h, b in a && delete a[b]));
    this.j = new Z(this);
}
t(Y, C);
Y.prototype.m = function() {
    this.g.j = this.j;
    this.A && (this.g.H = !0);
    var a = this.g, b = this.l, c = this.h || void 0;
    a.Wa && (a.h.info("Origin Trials enabled."), zb(q(a.hb, a, b)));
    J(0);
    a.W = b;
    a.aa = c || {};
    a.N = a.X;
    a.F = Ec(a, null, a.W);
    Hc(a);
};
Y.prototype.close = function() {
    Ic(this.g);
};
Y.prototype.u = function(a) {
    if ("string" === typeof a) {
        var b = {};
        b.__data__ = a;
        Md(this.g, b);
    } else this.v ? (b = {}, b.__data__ = rb(a), Md(this.g, b)) : Md(this.g, a);
};
Y.prototype.M = function() {
    this.g.j = null;
    delete this.j;
    Ic(this.g);
    delete this.g;
    Y.Z.M.call(this);
};
function Ud(a) {
    ac.call(this);
    var b = a.__sm__;
    if (b) {
        a: {
            for(const c in b){
                a = c;
                break a;
            }
            a = void 0;
        }
        if (this.i = a) a = this.i, b = null !== b && a in b ? b[a] : void 0;
        this.data = b;
    } else this.data = a;
}
t(Ud, ac);
function Vd() {
    bc.call(this);
    this.status = 1;
}
t(Vd, bc);
function Z(a) {
    this.g = a;
}
t(Z, Sd);
Z.prototype.xa = function() {
    D(this.g, "a");
};
Z.prototype.wa = function(a) {
    D(this.g, new Ud(a));
};
Z.prototype.va = function(a) {
    D(this.g, new Vd(a));
};
Z.prototype.ua = function() {
    D(this.g, "b");
}; /*

 Copyright 2017 Google LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/ 
Td.prototype.createWebChannel = Td.prototype.g;
Y.prototype.send = Y.prototype.u;
Y.prototype.open = Y.prototype.m;
Y.prototype.close = Y.prototype.close;
Wb.NO_ERROR = 0;
Wb.TIMEOUT = 8;
Wb.HTTP_ERROR = 6;
Xb.COMPLETE = "complete";
$b.EventType = L;
L.OPEN = "a";
L.CLOSE = "b";
L.ERROR = "c";
L.MESSAGE = "d";
C.prototype.listen = C.prototype.N;
X.prototype.listenOnce = X.prototype.O;
X.prototype.getLastError = X.prototype.La;
X.prototype.getLastErrorCode = X.prototype.Da;
X.prototype.getStatus = X.prototype.ba;
X.prototype.getResponseJson = X.prototype.Qa;
X.prototype.getResponseText = X.prototype.ga;
X.prototype.send = X.prototype.ea;
var createWebChannelTransport = esm.createWebChannelTransport = function() {
    return new Td;
};
var getStatEventTarget = esm.getStatEventTarget = function() {
    return Sb();
};
var ErrorCode = esm.ErrorCode = Wb;
var EventType = esm.EventType = Xb;
var Event = esm.Event = H;
var Stat = esm.Stat = {
    rb: 0,
    ub: 1,
    vb: 2,
    Ob: 3,
    Tb: 4,
    Qb: 5,
    Rb: 6,
    Pb: 7,
    Nb: 8,
    Sb: 9,
    PROXY: 10,
    NOPROXY: 11,
    Lb: 12,
    Hb: 13,
    Ib: 14,
    Gb: 15,
    Jb: 16,
    Kb: 17,
    nb: 18,
    mb: 19,
    ob: 20
};
var FetchXmlHttpFactory = esm.FetchXmlHttpFactory = pd;
var WebChannel = esm.WebChannel = $b;
var XhrIo = esm.XhrIo = X;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"a800i":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OptionsException = exports.default = void 0;
var _axios = _interopRequireDefault(require("axios"));
var _createHmac = _interopRequireDefault(require("create-hmac"));
var _oauth = _interopRequireDefault(require("oauth-1.0a"));
var _urlParse = _interopRequireDefault(require("url-parse"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(source, true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(source).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
/**
 * WooCommerce REST API wrapper
 *
 * @param {Object} opt
 */ class WooCommerceRestApi {
    /**
   * Class constructor.
   *
   * @param {Object} opt
   */ constructor(opt){
        if (!(this instanceof WooCommerceRestApi)) return new WooCommerceRestApi(opt);
        opt = opt || {};
        if (!opt.url) throw new OptionsException("url is required");
        if (!opt.consumerKey) throw new OptionsException("consumerKey is required");
        if (!opt.consumerSecret) throw new OptionsException("consumerSecret is required");
        this.classVersion = "1.0.1";
        this._setDefaultsOptions(opt);
    }
    /**
   * Set default options
   *
   * @param {Object} opt
   */ _setDefaultsOptions(opt) {
        this.url = opt.url;
        this.wpAPIPrefix = opt.wpAPIPrefix || "wp-json";
        this.version = opt.version || "wc/v3";
        this.isHttps = /^https/i.test(this.url);
        this.consumerKey = opt.consumerKey;
        this.consumerSecret = opt.consumerSecret;
        this.encoding = opt.encoding || "utf8";
        this.queryStringAuth = opt.queryStringAuth || false;
        this.port = opt.port || "";
        this.timeout = opt.timeout;
        this.axiosConfig = opt.axiosConfig || {};
    }
    /**
   * Parse params object.
   *
   * @param {Object} params
   * @param {Object} query
   */ _parseParamsObject(params, query) {
        for(const key in params){
            const value = params[key];
            if (typeof value === "object") for(const prop in value){
                const itemKey = key.toString() + "[" + prop.toString() + "]";
                query[itemKey] = value[prop];
            }
            else query[key] = value;
        }
        return query;
    }
    /**
   * Normalize query string for oAuth
   *
   * @param  {String} url
   * @param  {Object} params
   *
   * @return {String}
   */ _normalizeQueryString(url, params) {
        // Exit if don't find query string.
        if (url.indexOf("?") === -1 && Object.keys(params).length === 0) return url;
        const query = new _urlParse.default(url, null, true).query;
        const values = [];
        let queryString = ""; // Include params object into URL.searchParams.
        this._parseParamsObject(params, query);
        for(const key in query)values.push(key);
        values.sort();
        for(const i in values){
            if (queryString.length) queryString += "&";
            queryString += encodeURIComponent(values[i]).replace(/%5B/g, "[").replace(/%5D/g, "]");
            queryString += "=";
            queryString += encodeURIComponent(query[values[i]]);
        }
        return url.split("?")[0] + "?" + queryString;
    }
    /**
   * Get URL
   *
   * @param  {String} endpoint
   * @param  {Object} params
   *
   * @return {String}
   */ _getUrl(endpoint, params) {
        const api = this.wpAPIPrefix + "/";
        let url = this.url.slice(-1) === "/" ? this.url : this.url + "/";
        url = url + api + this.version + "/" + endpoint; // Include port.
        if (this.port !== "") {
            const hostname = new _urlParse.default(url).hostname;
            url = url.replace(hostname, hostname + ":" + this.port);
        }
        if (!this.isHttps) return this._normalizeQueryString(url, params);
        return url;
    }
    /**
   * Get OAuth
   *
   * @return {Object}
   */ _getOAuth() {
        const data = {
            consumer: {
                key: this.consumerKey,
                secret: this.consumerSecret
            },
            signature_method: "HMAC-SHA256",
            hash_function: (base, key)=>{
                return (0, _createHmac.default)("sha256", key).update(base).digest("base64");
            }
        };
        return new _oauth.default(data);
    }
    /**
   * Do requests
   *
   * @param  {String} method
   * @param  {String} endpoint
   * @param  {Object} data
   * @param  {Object} params
   *
   * @return {Object}
   */ _request(method, endpoint, data, params = {}) {
        const url = this._getUrl(endpoint, params);
        let options = {
            url: url,
            method: method,
            responseEncoding: this.encoding,
            timeout: this.timeout,
            responseType: "json",
            headers: {
                "User-Agent": "WooCommerce REST API - JS Client/" + this.classVersion,
                Accept: "application/json"
            }
        };
        if (this.isHttps) {
            if (this.queryStringAuth) options.params = {
                consumer_key: this.consumerKey,
                consumer_secret: this.consumerSecret
            };
            else options.auth = {
                username: this.consumerKey,
                password: this.consumerSecret
            };
            options.params = _objectSpread({}, options.params, {}, params);
        } else options.params = this._getOAuth().authorize({
            url: url,
            method: method
        });
        if (data) {
            options.headers["Content-Type"] = "application/json;charset=utf-8";
            options.data = JSON.stringify(data);
        } // Allow set and override Axios options.
        options = _objectSpread({}, options, {}, this.axiosConfig);
        return (0, _axios.default)(options);
    }
    /**
   * GET requests
   *
   * @param  {String} endpoint
   * @param  {Object} params
   *
   * @return {Object}
   */ get(endpoint, params = {}) {
        return this._request("get", endpoint, null, params);
    }
    /**
   * POST requests
   *
   * @param  {String} endpoint
   * @param  {Object} data
   * @param  {Object} params
   *
   * @return {Object}
   */ post(endpoint, data, params = {}) {
        return this._request("post", endpoint, data, params);
    }
    /**
   * PUT requests
   *
   * @param  {String} endpoint
   * @param  {Object} data
   * @param  {Object} params
   *
   * @return {Object}
   */ put(endpoint, data, params = {}) {
        return this._request("put", endpoint, data, params);
    }
    /**
   * DELETE requests
   *
   * @param  {String} endpoint
   * @param  {Object} params
   * @param  {Object} params
   *
   * @return {Object}
   */ delete(endpoint, params = {}) {
        return this._request("delete", endpoint, null, params);
    }
    /**
   * OPTIONS requests
   *
   * @param  {String} endpoint
   * @param  {Object} params
   *
   * @return {Object}
   */ options(endpoint, params = {}) {
        return this._request("options", endpoint, null, params);
    }
}
/**
 * Options Exception.
 */ exports.default = WooCommerceRestApi;
class OptionsException {
    /**
   * Constructor.
   *
   * @param {String} message
   */ constructor(message){
        this.name = "Options Error";
        this.message = message;
    }
}
exports.OptionsException = OptionsException;

},{"axios":"jo6P5","create-hmac":"k1utz","oauth-1.0a":"7htmw","url-parse":"JA6Bq"}],"jo6P5":[function(require,module,exports) {
module.exports = require("./lib/axios");

},{"./lib/axios":"63MyY"}],"63MyY":[function(require,module,exports) {
"use strict";
var utils = require("./utils");
var bind = require("./helpers/bind");
var Axios = require("./core/Axios");
var mergeConfig = require("./core/mergeConfig");
var defaults = require("./defaults");
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */ function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    // Copy axios.prototype to instance
    utils.extend(instance, Axios.prototype, context);
    // Copy context to instance
    utils.extend(instance, context);
    return instance;
}
// Create the default instance to be exported
var axios = createInstance(defaults);
// Expose Axios class to allow class inheritance
axios.Axios = Axios;
// Factory for creating new instances
axios.create = function create(instanceConfig) {
    return createInstance(mergeConfig(axios.defaults, instanceConfig));
};
// Expose Cancel & CancelToken
axios.Cancel = require("./cancel/Cancel");
axios.CancelToken = require("./cancel/CancelToken");
axios.isCancel = require("./cancel/isCancel");
// Expose all/spread
axios.all = function all(promises) {
    return Promise.all(promises);
};
axios.spread = require("./helpers/spread");
module.exports = axios;
// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./utils":"5By4s","./helpers/bind":"haRQb","./core/Axios":"cpqD8","./core/mergeConfig":"b85oP","./defaults":"lTJJ4","./cancel/Cancel":"kjMy2","./cancel/CancelToken":"45wzn","./cancel/isCancel":"a0VmF","./helpers/spread":"dyQ8N"}],"5By4s":[function(require,module,exports) {
"use strict";
var bind = require("./helpers/bind");
/*global toString:true*/ // utils is a library of generic helper functions non-specific to axios
var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */ function isArray(val) {
    return toString.call(val) === "[object Array]";
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */ function isUndefined(val) {
    return typeof val === "undefined";
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ function isArrayBuffer(val) {
    return toString.call(val) === "[object ArrayBuffer]";
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */ function isFormData(val) {
    return typeof FormData !== "undefined" && val instanceof FormData;
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
    else result = val && val.buffer && val.buffer instanceof ArrayBuffer;
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */ function isString(val) {
    return typeof val === "string";
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */ function isNumber(val) {
    return typeof val === "number";
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */ function isObject(val) {
    return val !== null && typeof val === "object";
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */ function isDate(val) {
    return toString.call(val) === "[object Date]";
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ function isFile(val) {
    return toString.call(val) === "[object File]";
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */ function isBlob(val) {
    return toString.call(val) === "[object Blob]";
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ function isFunction(val) {
    return toString.call(val) === "[object Function]";
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */ function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ function isURLSearchParams(val) {
    return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */ function trim(str) {
    return str.replace(/^\s*/, "").replace(/\s*$/, "");
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */ function isStandardBrowserEnv() {
    if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) return false;
    return typeof window !== "undefined" && typeof document !== "undefined";
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */ function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === "undefined") return;
    // Force an array if not already something iterable
    if (typeof obj !== "object") /*eslint no-param-reassign:0*/ obj = [
        obj
    ];
    if (isArray(obj)) // Iterate over array values
    for(var i = 0, l = obj.length; i < l; i++)fn.call(null, obj[i], i, obj);
    else {
        // Iterate over object keys
        for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) fn.call(null, obj[key], key, obj);
    }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */ function merge() {
    var result = {};
    function assignValue(val, key) {
        if (typeof result[key] === "object" && typeof val === "object") result[key] = merge(result[key], val);
        else result[key] = val;
    }
    for(var i = 0, l = arguments.length; i < l; i++)forEach(arguments[i], assignValue);
    return result;
}
/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */ function deepMerge() {
    var result = {};
    function assignValue(val, key) {
        if (typeof result[key] === "object" && typeof val === "object") result[key] = deepMerge(result[key], val);
        else if (typeof val === "object") result[key] = deepMerge({}, val);
        else result[key] = val;
    }
    for(var i = 0, l = arguments.length; i < l; i++)forEach(arguments[i], assignValue);
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */ function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") a[key] = bind(val, thisArg);
        else a[key] = val;
    });
    return a;
}
module.exports = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    deepMerge: deepMerge,
    extend: extend,
    trim: trim
};

},{"./helpers/bind":"haRQb"}],"haRQb":[function(require,module,exports) {
"use strict";
module.exports = function bind(fn, thisArg) {
    return function wrap() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        return fn.apply(thisArg, args);
    };
};

},{}],"cpqD8":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
var buildURL = require("../helpers/buildURL");
var InterceptorManager = require("./InterceptorManager");
var dispatchRequest = require("./dispatchRequest");
var mergeConfig = require("./mergeConfig");
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */ function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
    };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */ Axios.prototype.request = function request(config) {
    /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
    } else config = config || {};
    config = mergeConfig(this.defaults, config);
    // Set config.method
    if (config.method) config.method = config.method.toLowerCase();
    else if (this.defaults.method) config.method = this.defaults.method.toLowerCase();
    else config.method = "get";
    // Hook up interceptors middleware
    var chain = [
        dispatchRequest,
        undefined
    ];
    var promise = Promise.resolve(config);
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
    });
    while(chain.length)promise = promise.then(chain.shift(), chain.shift());
    return promise;
};
Axios.prototype.getUri = function getUri(config) {
    config = mergeConfig(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
};
// Provide aliases for supported request methods
utils.forEach([
    "delete",
    "get",
    "head",
    "options"
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {
        return this.request(utils.merge(config || {}, {
            method: method,
            url: url
        }));
    };
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, data, config) {
        return this.request(utils.merge(config || {}, {
            method: method,
            url: url,
            data: data
        }));
    };
});
module.exports = Axios;

},{"./../utils":"5By4s","../helpers/buildURL":"3bwC2","./InterceptorManager":"1VRIM","./dispatchRequest":"6sjJ6","./mergeConfig":"b85oP"}],"3bwC2":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
function encode(val) {
    return encodeURIComponent(val).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */ module.exports = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/ if (!params) return url;
    var serializedParams;
    if (paramsSerializer) serializedParams = paramsSerializer(params);
    else if (utils.isURLSearchParams(params)) serializedParams = params.toString();
    else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === "undefined") return;
            if (utils.isArray(val)) key = key + "[]";
            else val = [
                val
            ];
            utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) v = v.toISOString();
                else if (utils.isObject(v)) v = JSON.stringify(v);
                parts.push(encode(key) + "=" + encode(v));
            });
        });
        serializedParams = parts.join("&");
    }
    if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) url = url.slice(0, hashmarkIndex);
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
};

},{"./../utils":"5By4s"}],"1VRIM":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
function InterceptorManager() {
    this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */ InterceptorManager.prototype.use = function use(fulfilled, rejected) {
    this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected
    });
    return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */ InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) this.handlers[id] = null;
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */ InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) fn(h);
    });
};
module.exports = InterceptorManager;

},{"./../utils":"5By4s"}],"6sjJ6":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
var transformData = require("./transformData");
var isCancel = require("../cancel/isCancel");
var defaults = require("../defaults");
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ function throwIfCancellationRequested(config) {
    if (config.cancelToken) config.cancelToken.throwIfRequested();
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */ module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    // Ensure headers exist
    config.headers = config.headers || {};
    // Transform request data
    config.data = transformData(config.data, config.headers, config.transformRequest);
    // Flatten headers
    config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
    utils.forEach([
        "delete",
        "get",
        "head",
        "post",
        "put",
        "patch",
        "common"
    ], function cleanHeaderConfig(method) {
        delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        // Transform response data
        response.data = transformData(response.data, response.headers, config.transformResponse);
        return response;
    }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
        }
        return Promise.reject(reason);
    });
};

},{"./../utils":"5By4s","./transformData":"eRqJY","../cancel/isCancel":"a0VmF","../defaults":"lTJJ4"}],"eRqJY":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */ module.exports = function transformData(data, headers, fns) {
    /*eslint no-param-reassign:0*/ utils.forEach(fns, function transform(fn) {
        data = fn(data, headers);
    });
    return data;
};

},{"./../utils":"5By4s"}],"a0VmF":[function(require,module,exports) {
"use strict";
module.exports = function isCancel(value) {
    return !!(value && value.__CANCEL__);
};

},{}],"lTJJ4":[function(require,module,exports) {
"use strict";
var process = require("process");
var utils = require("./utils");
var normalizeHeaderName = require("./helpers/normalizeHeaderName");
var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) headers["Content-Type"] = value;
}
function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== "undefined") // For browsers use XHR adapter
    adapter = require("./adapters/xhr");
    else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") // For node use HTTP adapter
    adapter = require("./adapters/http");
    return adapter;
}
var defaults = {
    adapter: getDefaultAdapter(),
    transformRequest: [
        function transformRequest(data, headers) {
            normalizeHeaderName(headers, "Accept");
            normalizeHeaderName(headers, "Content-Type");
            if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
            if (utils.isArrayBufferView(data)) return data.buffer;
            if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
                return data.toString();
            }
            if (utils.isObject(data)) {
                setContentTypeIfUnset(headers, "application/json;charset=utf-8");
                return JSON.stringify(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            /*eslint no-param-reassign:0*/ if (typeof data === "string") try {
                data = JSON.parse(data);
            } catch (e) {}
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    }
};
defaults.headers = {
    common: {
        "Accept": "application/json, text/plain, */*"
    }
};
utils.forEach([
    "delete",
    "get",
    "head"
], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

},{"process":"d5jf4","./utils":"5By4s","./helpers/normalizeHeaderName":"adBZo","./adapters/xhr":"ldm57","./adapters/http":"ldm57"}],"adBZo":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
module.exports = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
        }
    });
};

},{"../utils":"5By4s"}],"ldm57":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
var settle = require("./../core/settle");
var buildURL = require("./../helpers/buildURL");
var buildFullPath = require("../core/buildFullPath");
var parseHeaders = require("./../helpers/parseHeaders");
var isURLSameOrigin = require("./../helpers/isURLSameOrigin");
var createError = require("../core/createError");
module.exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        if (utils.isFormData(requestData)) delete requestHeaders["Content-Type"]; // Let the browser set it
        var request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            var username = config.auth.username || "";
            var password = config.auth.password || "";
            requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        // Listen for ready state
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) return;
            // Prepare the response
            var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !config.responseType || config.responseType === "text" ? request.responseText : request.response;
            var response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
            };
            settle(resolve, reject, response);
            // Clean up request
            request = null;
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject(createError("Request aborted", config, "ECONNABORTED", request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(createError("Network Error", config, null, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject(createError(timeoutErrorMessage, config, "ECONNABORTED", request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
            var cookies = require("./../helpers/cookies");
            // Add xsrf header
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
            if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
        // Add headers to the request
        if ("setRequestHeader" in request) utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") // Remove Content-Type if data is undefined
            delete requestHeaders[key];
            else // Otherwise add header to the request
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (config.responseType) try {
            request.responseType = config.responseType;
        } catch (e) {
            // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
            // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
            if (config.responseType !== "json") throw e;
        }
        // Handle progress if needed
        if (typeof config.onDownloadProgress === "function") request.addEventListener("progress", config.onDownloadProgress);
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === "function" && request.upload) request.upload.addEventListener("progress", config.onUploadProgress);
        if (config.cancelToken) // Handle cancellation
        config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) return;
            request.abort();
            reject(cancel);
            // Clean up request
            request = null;
        });
        if (requestData === undefined) requestData = null;
        // Send the request
        request.send(requestData);
    });
};

},{"./../utils":"5By4s","./../core/settle":"dD9aC","./../helpers/buildURL":"3bwC2","../core/buildFullPath":"1I5TW","./../helpers/parseHeaders":"kqDd5","./../helpers/isURLSameOrigin":"lxXtv","../core/createError":"5nVS9","./../helpers/cookies":"4WJjt"}],"dD9aC":[function(require,module,exports) {
"use strict";
var createError = require("./createError");
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */ module.exports = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!validateStatus || validateStatus(response.status)) resolve(response);
    else reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
};

},{"./createError":"5nVS9"}],"5nVS9":[function(require,module,exports) {
"use strict";
var enhanceError = require("./enhanceError");
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */ module.exports = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
};

},{"./enhanceError":"itUQr"}],"itUQr":[function(require,module,exports) {
"use strict";
/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */ module.exports = function enhanceError(error, config, code, request, response) {
    error.config = config;
    if (code) error.code = code;
    error.request = request;
    error.response = response;
    error.isAxiosError = true;
    error.toJSON = function() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: this.config,
            code: this.code
        };
    };
    return error;
};

},{}],"1I5TW":[function(require,module,exports) {
"use strict";
var isAbsoluteURL = require("../helpers/isAbsoluteURL");
var combineURLs = require("../helpers/combineURLs");
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */ module.exports = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
    return requestedURL;
};

},{"../helpers/isAbsoluteURL":"jD6NM","../helpers/combineURLs":"brOWK"}],"jD6NM":[function(require,module,exports) {
"use strict";
/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */ module.exports = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

},{}],"brOWK":[function(require,module,exports) {
"use strict";
/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */ module.exports = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
};

},{}],"kqDd5":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */ module.exports = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;
    if (!headers) return parsed;
    utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
            if (key === "set-cookie") parsed[key] = (parsed[key] ? parsed[key] : []).concat([
                val
            ]);
            else parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
    });
    return parsed;
};

},{"./../utils":"5By4s"}],"lxXtv":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement("a");
    var originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        var href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
}();

},{"./../utils":"5By4s"}],"4WJjt":[function(require,module,exports) {
"use strict";
var utils = require("./../utils");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) cookie.push("expires=" + new Date(expires).toGMTString());
            if (utils.isString(path)) cookie.push("path=" + path);
            if (utils.isString(domain)) cookie.push("domain=" + domain);
            if (secure === true) cookie.push("secure");
            document.cookie = cookie.join("; ");
        },
        read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, "", Date.now() - 86400000);
        }
    };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return {
        write: function write() {},
        read: function read() {
            return null;
        },
        remove: function remove() {}
    };
}();

},{"./../utils":"5By4s"}],"b85oP":[function(require,module,exports) {
"use strict";
var utils = require("../utils");
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */ module.exports = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    var config = {};
    var valueFromConfig2Keys = [
        "url",
        "method",
        "params",
        "data"
    ];
    var mergeDeepPropertiesKeys = [
        "headers",
        "auth",
        "proxy"
    ];
    var defaultToConfig2Keys = [
        "baseURL",
        "url",
        "transformRequest",
        "transformResponse",
        "paramsSerializer",
        "timeout",
        "withCredentials",
        "adapter",
        "responseType",
        "xsrfCookieName",
        "xsrfHeaderName",
        "onUploadProgress",
        "onDownloadProgress",
        "maxContentLength",
        "validateStatus",
        "maxRedirects",
        "httpAgent",
        "httpsAgent",
        "cancelToken",
        "socketPath"
    ];
    utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (typeof config2[prop] !== "undefined") config[prop] = config2[prop];
    });
    utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
        if (utils.isObject(config2[prop])) config[prop] = utils.deepMerge(config1[prop], config2[prop]);
        else if (typeof config2[prop] !== "undefined") config[prop] = config2[prop];
        else if (utils.isObject(config1[prop])) config[prop] = utils.deepMerge(config1[prop]);
        else if (typeof config1[prop] !== "undefined") config[prop] = config1[prop];
    });
    utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (typeof config2[prop] !== "undefined") config[prop] = config2[prop];
        else if (typeof config1[prop] !== "undefined") config[prop] = config1[prop];
    });
    var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys);
    var otherKeys = Object.keys(config2).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
    });
    utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
        if (typeof config2[prop] !== "undefined") config[prop] = config2[prop];
        else if (typeof config1[prop] !== "undefined") config[prop] = config1[prop];
    });
    return config;
};

},{"../utils":"5By4s"}],"kjMy2":[function(require,module,exports) {
"use strict";
/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */ function Cancel(message) {
    this.message = message;
}
Cancel.prototype.toString = function toString() {
    return "Cancel" + (this.message ? ": " + this.message : "");
};
Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

},{}],"45wzn":[function(require,module,exports) {
"use strict";
var Cancel = require("./Cancel");
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */ function CancelToken(executor) {
    if (typeof executor !== "function") throw new TypeError("executor must be a function.");
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
    });
    var token = this;
    executor(function cancel(message) {
        if (token.reason) // Cancellation has already been requested
        return;
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
    });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) throw this.reason;
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */ CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
        cancel = c;
    });
    return {
        token: token,
        cancel: cancel
    };
};
module.exports = CancelToken;

},{"./Cancel":"kjMy2"}],"dyQ8N":[function(require,module,exports) {
"use strict";
/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */ module.exports = function spread(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
};

},{}],"k1utz":[function(require,module,exports) {
"use strict";
var inherits = require("inherits");
var Legacy = require("./legacy");
var Base = require("cipher-base");
var Buffer = require("safe-buffer").Buffer;
var md5 = require("create-hash/md5");
var RIPEMD160 = require("ripemd160");
var sha = require("sha.js");
var ZEROS = Buffer.alloc(128);
function Hmac(alg, key) {
    Base.call(this, "digest");
    if (typeof key === "string") key = Buffer.from(key);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
    this._hash.update(ipad);
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === "rmd160" ? new RIPEMD160() : sha(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === "rmd160" || alg === "ripemd160") return new Hmac("rmd160", key);
    if (alg === "md5") return new Legacy(md5, key);
    return new Hmac(alg, key);
};

},{"inherits":"bRL3M","./legacy":"kO6k7","cipher-base":"g5fTz","safe-buffer":"eW7r9","create-hash/md5":"h5gRT","ripemd160":"bFDDq","sha.js":"jkn7m"}],"bRL3M":[function(require,module,exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"kO6k7":[function(require,module,exports) {
"use strict";
var inherits = require("inherits");
var Buffer = require("safe-buffer").Buffer;
var Base = require("cipher-base");
var ZEROS = Buffer.alloc(128);
var blocksize = 64;
function Hmac(alg, key) {
    Base.call(this, "digest");
    if (typeof key === "string") key = Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) key = alg(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = [
        ipad
    ];
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
Hmac.prototype._final = function() {
    var h = this._alg(Buffer.concat(this._hash));
    return this._alg(Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = Hmac;

},{"inherits":"bRL3M","safe-buffer":"eW7r9","cipher-base":"g5fTz"}],"eW7r9":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require("buffer");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return buffer.SlowBuffer(size);
};

},{"buffer":"fCgem"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("base64-js");
const ieee754 = require("ieee754");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i1;
    if (dir) {
        let foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength1 && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    let val = this[offset + --byteLength2];
    let mul = 1;
    while(byteLength2 > 0 && (mul *= 0x100))val += this[offset + --byteLength2] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength3 && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength4, noAssert) {
    offset = offset >>> 0;
    byteLength4 = byteLength4 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength4, this.length);
    let i = byteLength4;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength4);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength5, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength5 = byteLength5 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength5) - 1;
        checkInt(this, value, offset, byteLength5, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength5 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength5;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength6, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength6 = byteLength6 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength6) - 1;
        checkInt(this, value, offset, byteLength6, maxBytes, 0);
    }
    let i = byteLength6 - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength6;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength7, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength7 - 1);
        checkInt(this, value, offset, byteLength7, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength7 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength7;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength8, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength8 - 1);
        checkInt(this, value, offset, byteLength8, limit - 1, -limit);
    }
    let i = byteLength8 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength8;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength9) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength9] === undefined) boundsError(offset, buf.length - (byteLength9 + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength10) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength10 > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength10 + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength10 + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength10 + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength10);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"base64-js":"eIiSV","ieee754":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len1 = b64.length;
    if (len1 % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len1;
    var placeHoldersLen = validLen === len1 ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i1;
    for(i1 = 0; i1 < len2; i1 += 4){
        tmp = revLookup[b64.charCodeAt(i1)] << 18 | revLookup[b64.charCodeAt(i1 + 1)] << 12 | revLookup[b64.charCodeAt(i1 + 2)] << 6 | revLookup[b64.charCodeAt(i1 + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i1)] << 2 | revLookup[b64.charCodeAt(i1 + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i1)] << 10 | revLookup[b64.charCodeAt(i1 + 1)] << 4 | revLookup[b64.charCodeAt(i1 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i2 = start; i2 < end; i2 += 3){
        tmp = (uint8[i2] << 16 & 0xFF0000) + (uint8[i2 + 1] << 8 & 0xFF00) + (uint8[i2 + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len3 = uint8.length;
    var extraBytes = len3 % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i3 = 0, len2 = len3 - extraBytes; i3 < len2; i3 += maxChunkLength)parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len2 ? len2 : i3 + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len3 - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len3 - 2] << 8) + uint8[len3 - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"g5fTz":[function(require,module,exports) {
var Buffer = require("safe-buffer").Buffer;
var Transform = require("stream").Transform;
var StringDecoder = require("string_decoder").StringDecoder;
var inherits = require("inherits");
function CipherBase(hashMode) {
    Transform.call(this);
    this.hashMode = typeof hashMode === "string";
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
inherits(CipherBase, Transform);
CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === "string") data = Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
CipherBase.prototype.setAutoPadding = function() {};
CipherBase.prototype.getAuthTag = function() {
    throw new Error("trying to get auth tag in unsupported state");
};
CipherBase.prototype.setAuthTag = function() {
    throw new Error("trying to set auth tag in unsupported state");
};
CipherBase.prototype.setAAD = function() {
    throw new Error("trying to set aad in unsupported state");
};
CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error("can't switch encodings");
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = CipherBase;

},{"safe-buffer":"eW7r9","stream":"j77ns","string_decoder":"3vmkr","inherits":"bRL3M"}],"j77ns":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;
var EE = require("events").EventEmitter;
var inherits = require("inherits");
inherits(Stream, EE);
Stream.Readable = require("readable-stream/lib/_stream_readable.js");
Stream.Writable = require("readable-stream/lib/_stream_writable.js");
Stream.Duplex = require("readable-stream/lib/_stream_duplex.js");
Stream.Transform = require("readable-stream/lib/_stream_transform.js");
Stream.PassThrough = require("readable-stream/lib/_stream_passthrough.js");
Stream.finished = require("readable-stream/lib/internal/streams/end-of-stream.js");
Stream.pipeline = require("readable-stream/lib/internal/streams/pipeline.js");
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function Stream() {
    EE.call(this);
}
Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on("data", ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on("drain", ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === "function") dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, "error") === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

},{"events":"1VQLm","inherits":"bRL3M","readable-stream/lib/_stream_readable.js":"9x2Zc","readable-stream/lib/_stream_writable.js":"oN7DM","readable-stream/lib/_stream_duplex.js":"6j5HZ","readable-stream/lib/_stream_transform.js":"bCnb0","readable-stream/lib/_stream_passthrough.js":"lN03y","readable-stream/lib/internal/streams/end-of-stream.js":"40IlH","readable-stream/lib/internal/streams/pipeline.js":"6TCXK"}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"9x2Zc":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var process = require("process");
var global = arguments[3];
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require("events").EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
/*</replacement>*/ var Buffer = require("buffer").Buffer;
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require("util");
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog("stream");
else debug = function debug() {};
/*</replacement>*/ var BufferList = require("./internal/streams/buffer_list");
var destroyImpl = require("./internal/streams/destroy");
var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require("inherits")(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require("./_stream_duplex");
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require("./_stream_duplex");
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug("need readable", doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
    } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug("onend");
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug("cleanup"); // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    prependListener(dest, "error", onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit("pipe", src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug("pipe resume");
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount("data") > 0) self.resume();
}
function nReadingNextTick(self) {
    debug("readable nexttick read 0");
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug("resume"); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < kProxyEvents.length; n1++)stream.on(kProxyEvents[n1], this.emit.bind(this, kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === "function") Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require("./internal/streams/async_iterator");
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug("endReadableNT", state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === "function") Readable.from = function(iterable, opts) {
    if (from === undefined) from = require("./internal/streams/from");
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"process":"d5jf4","events":"1VQLm","./internal/streams/stream":"f6fcJ","buffer":"fCgem","util":"jhUEF","./internal/streams/buffer_list":"kUPfs","./internal/streams/destroy":"g0Tbb","./internal/streams/state":"5xjEV","../errors":"g46QK","inherits":"bRL3M","./_stream_duplex":"6j5HZ","string_decoder/":"3vmkr","./internal/streams/async_iterator":"hpL3T","./internal/streams/from":"5VQDl"}],"f6fcJ":[function(require,module,exports) {
module.exports = require("events").EventEmitter;

},{"events":"1VQLm"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"kUPfs":[function(require,module,exports) {
"use strict";
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var _require = require("buffer"), Buffer = _require.Buffer;
var _require2 = require("util"), inspect = _require2.inspect;
var custom = inspect && inspect.custom || "inspect";
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

},{"buffer":"fCgem","util":"jhUEF"}],"g0Tbb":[function(require,module,exports) {
"use strict"; // undocumented cb() API, needed for core, not for public API
var process = require("process");
function destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit("error", err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"process":"d5jf4"}],"5xjEV":[function(require,module,exports) {
"use strict";
var ERR_INVALID_OPT_VALUE = require("../../../errors").codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"../../../errors":"g46QK"}],"g46QK":[function(require,module,exports) {
"use strict";
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
module.exports.codes = codes;

},{}],"6j5HZ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
"use strict";
var process = require("process");
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys1 = [];
    for(var key in obj)keys1.push(key);
    return keys1;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require("./_stream_readable");
var Writable = require("./_stream_writable");
require("inherits")(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"process":"d5jf4","./_stream_readable":"9x2Zc","./_stream_writable":"oN7DM","inherits":"bRL3M"}],"oN7DM":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
"use strict";
var process = require("process");
var global = arguments[3];
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require("util-deprecate")
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
/*</replacement>*/ var Buffer = require("buffer").Buffer;
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require("./internal/streams/destroy");
var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require("inherits")(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require("./_stream_duplex");
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require("./_stream_duplex"); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
} // if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"process":"d5jf4","util-deprecate":"j92NQ","./internal/streams/stream":"f6fcJ","buffer":"fCgem","./internal/streams/destroy":"g0Tbb","./internal/streams/state":"5xjEV","../errors":"g46QK","inherits":"bRL3M","./_stream_duplex":"6j5HZ"}],"j92NQ":[function(require,module,exports) {
var global = arguments[3];
/**
 * Module exports.
 */ module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config("noDeprecation")) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config("throwDeprecation")) throw new Error(msg);
            else if (config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

},{}],"3vmkr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
/*<replacement>*/ var Buffer = require("safe-buffer").Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "\uFFFD";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "\uFFFD";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "\uFFFD";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "\uFFFD";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

},{"safe-buffer":"gObOt"}],"gObOt":[function(require,module,exports) {
/* eslint-disable node/no-deprecated-api */ var buffer = require("buffer");
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return buffer.SlowBuffer(size);
};

},{"buffer":"fCgem"}],"hpL3T":[function(require,module,exports) {
"use strict";
var process = require("process");
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var finished = require("./end-of-stream");
var kLastResolve = Symbol("lastResolve");
var kLastReject = Symbol("lastReject");
var kError = Symbol("error");
var kEnded = Symbol("ended");
var kLastPromise = Symbol("lastPromise");
var kHandlePromise = Symbol("handlePromise");
var kStream = Symbol("stream");
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"process":"d5jf4","./end-of-stream":"40IlH"}],"40IlH":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var ERR_STREAM_PREMATURE_CLOSE = require("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function eos(stream, opts, callback) {
    if (typeof opts === "function") return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = eos;

},{"../../../errors":"g46QK"}],"5VQDl":[function(require,module,exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

},{}],"bCnb0":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = Transform;
var _require$codes = require("../errors").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require("./_stream_duplex");
require("inherits")(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"../errors":"g46QK","./_stream_duplex":"6j5HZ","inherits":"bRL3M"}],"lN03y":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = PassThrough;
var Transform = require("./_stream_transform");
require("inherits")(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"./_stream_transform":"bCnb0","inherits":"bRL3M"}],"6TCXK":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require("../../../errors").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if (eos === undefined) eos = require("./end-of-stream");
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== "function") return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"../../../errors":"g46QK","./end-of-stream":"40IlH"}],"h5gRT":[function(require,module,exports) {
var MD5 = require("md5.js");
module.exports = function(buffer) {
    return new MD5().update(buffer).digest();
};

},{"md5.js":"45VeE"}],"45VeE":[function(require,module,exports) {
"use strict";
var inherits = require("inherits");
var HashBase = require("hash-base");
var Buffer = require("safe-buffer").Buffer;
var ARRAY16 = new Array(16);
function MD5() {
    HashBase.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
}
inherits(MD5, HashBase);
MD5.prototype._update = function() {
    var M = ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fnF(a, b, c, d, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function fnG(a, b, c, d, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function fnH(a, b, c, d, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function fnI(a, b, c, d, m, k, s) {
    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = MD5;

},{"inherits":"bRL3M","hash-base":"51qBP","safe-buffer":"eW7r9"}],"51qBP":[function(require,module,exports) {
"use strict";
var Buffer = require("safe-buffer").Buffer;
var Transform = require("readable-stream").Transform;
var inherits = require("inherits");
function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer.isBuffer(val) && typeof val !== "string") throw new TypeError(prefix + " must be a string or a buffer");
}
function HashBase(blockSize) {
    Transform.call(this);
    this._block = Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
inherits(HashBase, Transform);
HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype.update = function(data, encoding) {
    throwIfNotStringOrBuffer(data, "Data");
    if (this._finalized) throw new Error("Digest already called");
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 0x0100000000 | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }
    return this;
};
HashBase.prototype._update = function() {
    throw new Error("_update is not implemented");
};
HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error("Digest already called");
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
HashBase.prototype._digest = function() {
    throw new Error("_digest is not implemented");
};
module.exports = HashBase;

},{"safe-buffer":"eW7r9","readable-stream":"6aQe0","inherits":"bRL3M"}],"6aQe0":[function(require,module,exports) {
exports = module.exports = require("./lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require("./lib/_stream_writable.js");
exports.Duplex = require("./lib/_stream_duplex.js");
exports.Transform = require("./lib/_stream_transform.js");
exports.PassThrough = require("./lib/_stream_passthrough.js");
exports.finished = require("./lib/internal/streams/end-of-stream.js");
exports.pipeline = require("./lib/internal/streams/pipeline.js");

},{"./lib/_stream_readable.js":"6fUbe","./lib/_stream_writable.js":"cdmAj","./lib/_stream_duplex.js":"9CtUp","./lib/_stream_transform.js":"l32fT","./lib/_stream_passthrough.js":"1MdCD","./lib/internal/streams/end-of-stream.js":"lPVmJ","./lib/internal/streams/pipeline.js":"aWWPS"}],"6fUbe":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var global = arguments[3];
var process = require("process");
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require("events").EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
/*</replacement>*/ var Buffer = require("buffer").Buffer;
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require("util");
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog("stream");
else debug = function debug() {};
/*</replacement>*/ var BufferList = require("./internal/streams/buffer_list");
var destroyImpl = require("./internal/streams/destroy");
var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require("inherits")(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require("./_stream_duplex");
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require("./_stream_duplex");
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug("need readable", doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
    } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug("onend");
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug("cleanup"); // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    prependListener(dest, "error", onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit("pipe", src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug("pipe resume");
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount("data") > 0) self.resume();
}
function nReadingNextTick(self) {
    debug("readable nexttick read 0");
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug("resume"); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < kProxyEvents.length; n1++)stream.on(kProxyEvents[n1], this.emit.bind(this, kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === "function") Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require("./internal/streams/async_iterator");
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug("endReadableNT", state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === "function") Readable.from = function(iterable, opts) {
    if (from === undefined) from = require("./internal/streams/from");
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"process":"d5jf4","events":"1VQLm","./internal/streams/stream":"g2Bon","buffer":"fCgem","util":"jhUEF","./internal/streams/buffer_list":"em2uk","./internal/streams/destroy":"hERkL","./internal/streams/state":"dGIaa","../errors":"7fPxI","inherits":"bRL3M","./_stream_duplex":"9CtUp","string_decoder/":"3vmkr","./internal/streams/async_iterator":"1Vy1N","./internal/streams/from":"9iSOx"}],"g2Bon":[function(require,module,exports) {
module.exports = require("events").EventEmitter;

},{"events":"1VQLm"}],"em2uk":[function(require,module,exports) {
"use strict";
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var _require = require("buffer"), Buffer = _require.Buffer;
var _require2 = require("util"), inspect = _require2.inspect;
var custom = inspect && inspect.custom || "inspect";
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

},{"buffer":"fCgem","util":"jhUEF"}],"hERkL":[function(require,module,exports) {
"use strict"; // undocumented cb() API, needed for core, not for public API
var process = require("process");
function destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit("error", err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"process":"d5jf4"}],"dGIaa":[function(require,module,exports) {
"use strict";
var ERR_INVALID_OPT_VALUE = require("../../../errors").codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"../../../errors":"7fPxI"}],"7fPxI":[function(require,module,exports) {
"use strict";
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if (endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
module.exports.codes = codes;

},{}],"9CtUp":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
"use strict";
var process = require("process");
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys1 = [];
    for(var key in obj)keys1.push(key);
    return keys1;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require("./_stream_readable");
var Writable = require("./_stream_writable");
require("inherits")(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"process":"d5jf4","./_stream_readable":"6fUbe","./_stream_writable":"cdmAj","inherits":"bRL3M"}],"cdmAj":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
"use strict";
var process = require("process");
var global = arguments[3];
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require("util-deprecate")
};
/*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
/*</replacement>*/ var Buffer = require("buffer").Buffer;
var OurUint8Array = global.Uint8Array || function() {};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require("./internal/streams/destroy");
var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require("inherits")(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require("./_stream_duplex");
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require("./_stream_duplex"); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
} // if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"process":"d5jf4","util-deprecate":"j92NQ","./internal/streams/stream":"g2Bon","buffer":"fCgem","./internal/streams/destroy":"hERkL","./internal/streams/state":"dGIaa","../errors":"7fPxI","inherits":"bRL3M","./_stream_duplex":"9CtUp"}],"1Vy1N":[function(require,module,exports) {
"use strict";
var process = require("process");
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var finished = require("./end-of-stream");
var kLastResolve = Symbol("lastResolve");
var kLastReject = Symbol("lastReject");
var kError = Symbol("error");
var kEnded = Symbol("ended");
var kLastPromise = Symbol("lastPromise");
var kHandlePromise = Symbol("handlePromise");
var kStream = Symbol("stream");
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"process":"d5jf4","./end-of-stream":"lPVmJ"}],"lPVmJ":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var ERR_STREAM_PREMATURE_CLOSE = require("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function eos(stream, opts, callback) {
    if (typeof opts === "function") return eos(stream, null, opts);
    if (!opts) opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = eos;

},{"../../../errors":"7fPxI"}],"9iSOx":[function(require,module,exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

},{}],"l32fT":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = Transform;
var _require$codes = require("../errors").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require("./_stream_duplex");
require("inherits")(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"../errors":"7fPxI","./_stream_duplex":"9CtUp","inherits":"bRL3M"}],"1MdCD":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = PassThrough;
var Transform = require("./_stream_transform");
require("inherits")(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"./_stream_transform":"l32fT","inherits":"bRL3M"}],"aWWPS":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require("../../../errors").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if (eos === undefined) eos = require("./end-of-stream");
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== "function") return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"../../../errors":"7fPxI","./end-of-stream":"lPVmJ"}],"bFDDq":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var inherits = require("inherits");
var HashBase = require("hash-base");
var ARRAY16 = new Array(16);
var zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var hl = [
    0x00000000,
    0x5a827999,
    0x6ed9eba1,
    0x8f1bbcdc,
    0xa953fd4e
];
var hr = [
    0x50a28be6,
    0x5c4dd124,
    0x6d703ef3,
    0x7a6d76e9,
    0x00000000
];
function RIPEMD160() {
    HashBase.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
}
inherits(RIPEMD160, HashBase);
RIPEMD160.prototype._update = function() {
    var words = ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fn1(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function fn2(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function fn3(a, b, c, d, e, m, k, s) {
    return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function fn4(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function fn5(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = RIPEMD160;

},{"buffer":"fCgem","inherits":"bRL3M","hash-base":"51qBP"}],"jkn7m":[function(require,module,exports) {
var exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
    return new Algorithm();
};
exports.sha = require("./sha");
exports.sha1 = require("./sha1");
exports.sha224 = require("./sha224");
exports.sha256 = require("./sha256");
exports.sha384 = require("./sha384");
exports.sha512 = require("./sha512");

},{"./sha":"6PecA","./sha1":"iCEYJ","./sha224":"7e0O2","./sha256":"kVAym","./sha384":"bWRvM","./sha512":"aZK4H"}],"6PecA":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */ var inherits = require("inherits");
var Hash = require("./hash");
var Buffer = require("safe-buffer").Buffer;
var K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha, Hash);
Sha.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha.prototype._update = function(M) {
    var W1 = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W1[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W1[i] = W1[i - 3] ^ W1[i - 8] ^ W1[i - 14] ^ W1[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W1[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha;

},{"inherits":"bRL3M","./hash":"7wpAR","safe-buffer":"eW7r9"}],"7wpAR":[function(require,module,exports) {
var Buffer = require("safe-buffer").Buffer;
// prototype class for hash functions
function Hash(blockSize, finalSize) {
    this._block = Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
Hash.prototype.update = function(data, enc) {
    if (typeof data === "string") {
        enc = enc || "utf8";
        data = Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 0x80;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 0xffffffff) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
Hash.prototype._update = function() {
    throw new Error("_update must be implemented by subclass");
};
module.exports = Hash;

},{"safe-buffer":"eW7r9"}],"iCEYJ":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */ var inherits = require("inherits");
var Hash = require("./hash");
var Buffer = require("safe-buffer").Buffer;
var K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha1() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha1, Hash);
Sha1.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function rotl1(num) {
    return num << 1 | num >>> 31;
}
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha1.prototype._update = function(M) {
    var W1 = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W1[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W1[i] = rotl1(W1[i - 3] ^ W1[i - 8] ^ W1[i - 14] ^ W1[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W1[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha1.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha1;

},{"inherits":"bRL3M","./hash":"7wpAR","safe-buffer":"eW7r9"}],"7e0O2":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require("inherits");
var Sha256 = require("./sha256");
var Hash = require("./hash");
var Buffer = require("safe-buffer").Buffer;
var W = new Array(64);
function Sha224() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha224, Sha256);
Sha224.prototype.init = function() {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;
    return this;
};
Sha224.prototype._hash = function() {
    var H = Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = Sha224;

},{"inherits":"bRL3M","./sha256":"kVAym","./hash":"7wpAR","safe-buffer":"eW7r9"}],"kVAym":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require("inherits");
var Hash = require("./hash");
var Buffer = require("safe-buffer").Buffer;
var K = [
    0x428A2F98,
    0x71374491,
    0xB5C0FBCF,
    0xE9B5DBA5,
    0x3956C25B,
    0x59F111F1,
    0x923F82A4,
    0xAB1C5ED5,
    0xD807AA98,
    0x12835B01,
    0x243185BE,
    0x550C7DC3,
    0x72BE5D74,
    0x80DEB1FE,
    0x9BDC06A7,
    0xC19BF174,
    0xE49B69C1,
    0xEFBE4786,
    0x0FC19DC6,
    0x240CA1CC,
    0x2DE92C6F,
    0x4A7484AA,
    0x5CB0A9DC,
    0x76F988DA,
    0x983E5152,
    0xA831C66D,
    0xB00327C8,
    0xBF597FC7,
    0xC6E00BF3,
    0xD5A79147,
    0x06CA6351,
    0x14292967,
    0x27B70A85,
    0x2E1B2138,
    0x4D2C6DFC,
    0x53380D13,
    0x650A7354,
    0x766A0ABB,
    0x81C2C92E,
    0x92722C85,
    0xA2BFE8A1,
    0xA81A664B,
    0xC24B8B70,
    0xC76C51A3,
    0xD192E819,
    0xD6990624,
    0xF40E3585,
    0x106AA070,
    0x19A4C116,
    0x1E376C08,
    0x2748774C,
    0x34B0BCB5,
    0x391C0CB3,
    0x4ED8AA4A,
    0x5B9CCA4F,
    0x682E6FF3,
    0x748F82EE,
    0x78A5636F,
    0x84C87814,
    0x8CC70208,
    0x90BEFFFA,
    0xA4506CEB,
    0xBEF9A3F7,
    0xC67178F2
];
var W = new Array(64);
function Sha256() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha256, Hash);
Sha256.prototype.init = function() {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;
    return this;
};
function ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
Sha256.prototype._update = function(M) {
    var W1 = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W1[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W1[i] = gamma1(W1[i - 2]) + W1[i - 7] + gamma0(W1[i - 15]) + W1[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W1[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
Sha256.prototype._hash = function() {
    var H = Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = Sha256;

},{"inherits":"bRL3M","./hash":"7wpAR","safe-buffer":"eW7r9"}],"bWRvM":[function(require,module,exports) {
var inherits = require("inherits");
var SHA512 = require("./sha512");
var Hash = require("./hash");
var Buffer = require("safe-buffer").Buffer;
var W = new Array(160);
function Sha384() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha384, SHA512);
Sha384.prototype.init = function() {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;
    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;
    return this;
};
Sha384.prototype._hash = function() {
    var H = Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = Sha384;

},{"inherits":"bRL3M","./sha512":"aZK4H","./hash":"7wpAR","safe-buffer":"eW7r9"}],"aZK4H":[function(require,module,exports) {
var inherits = require("inherits");
var Hash = require("./hash");
var Buffer = require("safe-buffer").Buffer;
var K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
var W = new Array(160);
function Sha512() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha512, Hash);
Sha512.prototype.init = function() {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;
    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;
    return this;
};
function Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
Sha512.prototype._update = function(M) {
    var W1 = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W1[i] = M.readInt32BE(i * 4);
        W1[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W1[i - 30];
        var xl = W1[i - 30 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W1[i - 4];
        xl = W1[i - 4 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W1[i - 14];
        var Wi7l = W1[i - 14 + 1];
        var Wi16h = W1[i - 32];
        var Wi16l = W1[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W1[i] = Wih;
        W1[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W1[j];
        Wil = W1[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};
Sha512.prototype._hash = function() {
    var H = Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = Sha512;

},{"inherits":"bRL3M","./hash":"7wpAR","safe-buffer":"eW7r9"}],"7htmw":[function(require,module,exports) {
if (typeof module !== "undefined" && typeof exports !== "undefined") module.exports = OAuth;
/**
 * Constructor
 * @param {Object} opts consumer key and secret
 */ function OAuth(opts) {
    if (!(this instanceof OAuth)) return new OAuth(opts);
    if (!opts) opts = {};
    if (!opts.consumer) throw new Error("consumer option is required");
    this.consumer = opts.consumer;
    this.nonce_length = opts.nonce_length || 32;
    this.version = opts.version || "1.0";
    this.parameter_seperator = opts.parameter_seperator || ", ";
    this.realm = opts.realm;
    if (typeof opts.last_ampersand === "undefined") this.last_ampersand = true;
    else this.last_ampersand = opts.last_ampersand;
    // default signature_method is 'PLAINTEXT'
    this.signature_method = opts.signature_method || "PLAINTEXT";
    if (this.signature_method == "PLAINTEXT" && !opts.hash_function) opts.hash_function = function(base_string, key) {
        return key;
    };
    if (!opts.hash_function) throw new Error("hash_function option is required");
    this.hash_function = opts.hash_function;
    this.body_hash_function = opts.body_hash_function || this.hash_function;
}
/**
 * OAuth request authorize
 * @param  {Object} request data
 * {
 *     method,
 *     url,
 *     data
 * }
 * @param  {Object} key and secret token
 * @return {Object} OAuth Authorized data
 */ OAuth.prototype.authorize = function(request, token) {
    var oauth_data = {
        oauth_consumer_key: this.consumer.key,
        oauth_nonce: this.getNonce(),
        oauth_signature_method: this.signature_method,
        oauth_timestamp: this.getTimeStamp(),
        oauth_version: this.version
    };
    if (!token) token = {};
    if (token.key !== undefined) oauth_data.oauth_token = token.key;
    if (!request.data) request.data = {};
    if (request.includeBodyHash) oauth_data.oauth_body_hash = this.getBodyHash(request, token.secret);
    oauth_data.oauth_signature = this.getSignature(request, token.secret, oauth_data);
    return oauth_data;
};
/**
 * Create a OAuth Signature
 * @param  {Object} request data
 * @param  {Object} token_secret key and secret token
 * @param  {Object} oauth_data   OAuth data
 * @return {String} Signature
 */ OAuth.prototype.getSignature = function(request, token_secret, oauth_data) {
    return this.hash_function(this.getBaseString(request, oauth_data), this.getSigningKey(token_secret));
};
/**
 * Create a OAuth Body Hash
 * @param {Object} request data
 */ OAuth.prototype.getBodyHash = function(request, token_secret) {
    var body = typeof request.data === "string" ? request.data : JSON.stringify(request.data);
    if (!this.body_hash_function) throw new Error("body_hash_function option is required");
    return this.body_hash_function(body, this.getSigningKey(token_secret));
};
/**
 * Base String = Method + Base Url + ParameterString
 * @param  {Object} request data
 * @param  {Object} OAuth data
 * @return {String} Base String
 */ OAuth.prototype.getBaseString = function(request, oauth_data) {
    return request.method.toUpperCase() + "&" + this.percentEncode(this.getBaseUrl(request.url)) + "&" + this.percentEncode(this.getParameterString(request, oauth_data));
};
/**
 * Get data from url
 * -> merge with oauth data
 * -> percent encode key & value
 * -> sort
 *
 * @param  {Object} request data
 * @param  {Object} OAuth data
 * @return {Object} Parameter string data
 */ OAuth.prototype.getParameterString = function(request, oauth_data) {
    var base_string_data;
    if (oauth_data.oauth_body_hash) base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.deParamUrl(request.url))));
    else base_string_data = this.sortObject(this.percentEncodeData(this.mergeObject(oauth_data, this.mergeObject(request.data, this.deParamUrl(request.url)))));
    var data_str = "";
    //base_string_data to string
    for(var i1 = 0; i1 < base_string_data.length; i1++){
        var key = base_string_data[i1].key;
        var value = base_string_data[i1].value;
        // check if the value is an array
        // this means that this key has multiple values
        if (value && Array.isArray(value)) {
            // sort the array first
            value.sort();
            var valString = "";
            // serialize all values for this key: e.g. formkey=formvalue1&formkey=formvalue2
            value.forEach((function(item, i) {
                valString += key + "=" + item;
                if (i < value.length) valString += "&";
            }).bind(this));
            data_str += valString;
        } else data_str += key + "=" + value + "&";
    }
    //remove the last character
    data_str = data_str.substr(0, data_str.length - 1);
    return data_str;
};
/**
 * Create a Signing Key
 * @param  {String} token_secret Secret Token
 * @return {String} Signing Key
 */ OAuth.prototype.getSigningKey = function(token_secret) {
    token_secret = token_secret || "";
    if (!this.last_ampersand && !token_secret) return this.percentEncode(this.consumer.secret);
    return this.percentEncode(this.consumer.secret) + "&" + this.percentEncode(token_secret);
};
/**
 * Get base url
 * @param  {String} url
 * @return {String}
 */ OAuth.prototype.getBaseUrl = function(url) {
    return url.split("?")[0];
};
/**
 * Get data from String
 * @param  {String} string
 * @return {Object}
 */ OAuth.prototype.deParam = function(string) {
    var arr = string.split("&");
    var data = {};
    for(var i = 0; i < arr.length; i++){
        var item = arr[i].split("=");
        // '' value
        item[1] = item[1] || "";
        // check if the key already exists
        // this can occur if the QS part of the url contains duplicate keys like this: ?formkey=formvalue1&formkey=formvalue2
        if (data[item[0]]) {
            // the key exists already
            if (!Array.isArray(data[item[0]])) // replace the value with an array containing the already present value
            data[item[0]] = [
                data[item[0]]
            ];
            // and add the new found value to it
            data[item[0]].push(decodeURIComponent(item[1]));
        } else // it doesn't exist, just put the found value in the data object
        data[item[0]] = decodeURIComponent(item[1]);
    }
    return data;
};
/**
 * Get data from url
 * @param  {String} url
 * @return {Object}
 */ OAuth.prototype.deParamUrl = function(url) {
    var tmp = url.split("?");
    if (tmp.length === 1) return {};
    return this.deParam(tmp[1]);
};
/**
 * Percent Encode
 * @param  {String} str
 * @return {String} percent encoded string
 */ OAuth.prototype.percentEncode = function(str) {
    return encodeURIComponent(str).replace(/\!/g, "%21").replace(/\*/g, "%2A").replace(/\'/g, "%27").replace(/\(/g, "%28").replace(/\)/g, "%29");
};
/**
 * Percent Encode Object
 * @param  {Object} data
 * @return {Object} percent encoded data
 */ OAuth.prototype.percentEncodeData = function(data) {
    var result = {};
    for(var key in data){
        var value = data[key];
        // check if the value is an array
        if (value && Array.isArray(value)) {
            var newValue = [];
            // percentEncode every value
            value.forEach((function(val) {
                newValue.push(this.percentEncode(val));
            }).bind(this));
            value = newValue;
        } else value = this.percentEncode(value);
        result[this.percentEncode(key)] = value;
    }
    return result;
};
/**
 * Get OAuth data as Header
 * @param  {Object} oauth_data
 * @return {String} Header data key - value
 */ OAuth.prototype.toHeader = function(oauth_data) {
    var sorted = this.sortObject(oauth_data);
    var header_value = "OAuth ";
    if (this.realm) header_value += 'realm="' + this.realm + '"' + this.parameter_seperator;
    for(var i = 0; i < sorted.length; i++){
        if (sorted[i].key.indexOf("oauth_") !== 0) continue;
        header_value += this.percentEncode(sorted[i].key) + '="' + this.percentEncode(sorted[i].value) + '"' + this.parameter_seperator;
    }
    return {
        Authorization: header_value.substr(0, header_value.length - this.parameter_seperator.length) //cut the last chars
    };
};
/**
 * Create a random word characters string with input length
 * @return {String} a random word characters string
 */ OAuth.prototype.getNonce = function() {
    var word_characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    var result = "";
    for(var i = 0; i < this.nonce_length; i++)result += word_characters[parseInt(Math.random() * word_characters.length, 10)];
    return result;
};
/**
 * Get Current Unix TimeStamp
 * @return {Int} current unix timestamp
 */ OAuth.prototype.getTimeStamp = function() {
    return parseInt(new Date().getTime() / 1000, 10);
};
////////////////////// HELPER FUNCTIONS //////////////////////
/**
 * Merge object
 * @param  {Object} obj1
 * @param  {Object} obj2
 * @return {Object}
 */ OAuth.prototype.mergeObject = function(obj1, obj2) {
    obj1 = obj1 || {};
    obj2 = obj2 || {};
    var merged_obj = obj1;
    for(var key in obj2)merged_obj[key] = obj2[key];
    return merged_obj;
};
/**
 * Sort object by key
 * @param  {Object} data
 * @return {Array} sorted array
 */ OAuth.prototype.sortObject = function(data) {
    var keys = Object.keys(data);
    var result = [];
    keys.sort();
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        result.push({
            key: key,
            value: data[key]
        });
    }
    return result;
};

},{}],"JA6Bq":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var required = require("requires-port"), qs = require("querystringify"), controlOrWhitespace = /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/, CRHTLF = /[\n\r\t]/g, slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//, port = /:\d+$/, protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i, windowsDriveLetter = /^[a-zA-Z]:/;
/**
 * Remove control characters and whitespace from the beginning of a string.
 *
 * @param {Object|String} str String to trim.
 * @returns {String} A new string representing `str` stripped of control
 *     characters and whitespace from its beginning.
 * @public
 */ function trimLeft(str) {
    return (str ? str : "").toString().replace(controlOrWhitespace, "");
}
/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */ var rules = [
    [
        "#",
        "hash"
    ],
    [
        "?",
        "query"
    ],
    function sanitize(address, url) {
        return isSpecial(url.protocol) ? address.replace(/\\/g, "/") : address;
    },
    [
        "/",
        "pathname"
    ],
    [
        "@",
        "auth",
        1
    ],
    [
        NaN,
        "host",
        undefined,
        1,
        1
    ],
    [
        /:(\d*)$/,
        "port",
        undefined,
        1
    ],
    [
        NaN,
        "hostname",
        undefined,
        1,
        1
    ] // Set left over.
];
/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */ var ignore = {
    hash: 1,
    query: 1
};
/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @public
 */ function lolcation(loc) {
    var globalVar;
    if (typeof window !== "undefined") globalVar = window;
    else if (typeof global !== "undefined") globalVar = global;
    else if (typeof self !== "undefined") globalVar = self;
    else globalVar = {};
    var location = globalVar.location || {};
    loc = loc || location;
    var finaldestination = {}, type = typeof loc, key;
    if ("blob:" === loc.protocol) finaldestination = new Url(unescape(loc.pathname), {});
    else if ("string" === type) {
        finaldestination = new Url(loc, {});
        for(key in ignore)delete finaldestination[key];
    } else if ("object" === type) {
        for(key in loc){
            if (key in ignore) continue;
            finaldestination[key] = loc[key];
        }
        if (finaldestination.slashes === undefined) finaldestination.slashes = slashes.test(loc.href);
    }
    return finaldestination;
}
/**
 * Check whether a protocol scheme is special.
 *
 * @param {String} The protocol scheme of the URL
 * @return {Boolean} `true` if the protocol scheme is special, else `false`
 * @private
 */ function isSpecial(scheme) {
    return scheme === "file:" || scheme === "ftp:" || scheme === "http:" || scheme === "https:" || scheme === "ws:" || scheme === "wss:";
}
/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */ /**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @param {Object} location
 * @return {ProtocolExtract} Extracted information.
 * @private
 */ function extractProtocol(address, location) {
    address = trimLeft(address);
    address = address.replace(CRHTLF, "");
    location = location || {};
    var match = protocolre.exec(address);
    var protocol = match[1] ? match[1].toLowerCase() : "";
    var forwardSlashes = !!match[2];
    var otherSlashes = !!match[3];
    var slashesCount = 0;
    var rest;
    if (forwardSlashes) {
        if (otherSlashes) {
            rest = match[2] + match[3] + match[4];
            slashesCount = match[2].length + match[3].length;
        } else {
            rest = match[2] + match[4];
            slashesCount = match[2].length;
        }
    } else if (otherSlashes) {
        rest = match[3] + match[4];
        slashesCount = match[3].length;
    } else rest = match[4];
    if (protocol === "file:") {
        if (slashesCount >= 2) rest = rest.slice(2);
    } else if (isSpecial(protocol)) rest = match[4];
    else if (protocol) {
        if (forwardSlashes) rest = rest.slice(2);
    } else if (slashesCount >= 2 && isSpecial(location.protocol)) rest = match[4];
    return {
        protocol: protocol,
        slashes: forwardSlashes || isSpecial(protocol),
        slashesCount: slashesCount,
        rest: rest
    };
}
/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @private
 */ function resolve(relative, base) {
    if (relative === "") return base;
    var path = (base || "/").split("/").slice(0, -1).concat(relative.split("/")), i = path.length, last = path[i - 1], unshift = false, up = 0;
    while(i--){
        if (path[i] === ".") path.splice(i, 1);
        else if (path[i] === "..") {
            path.splice(i, 1);
            up++;
        } else if (up) {
            if (i === 0) unshift = true;
            path.splice(i, 1);
            up--;
        }
    }
    if (unshift) path.unshift("");
    if (last === "." || last === "..") path.push("");
    return path.join("/");
}
/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * It is worth noting that we should not use `URL` as class name to prevent
 * clashes with the global URL instance that got introduced in browsers.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} [location] Location defaults for relative paths.
 * @param {Boolean|Function} [parser] Parser for the query string.
 * @private
 */ function Url(address, location, parser) {
    address = trimLeft(address);
    address = address.replace(CRHTLF, "");
    if (!(this instanceof Url)) return new Url(address, location, parser);
    var relative, extracted, parse, instruction, index, key, instructions = rules.slice(), type = typeof location, url = this, i = 0;
    //
    // The following if statements allows this module two have compatibility with
    // 2 different API:
    //
    // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
    //    where the boolean indicates that the query string should also be parsed.
    //
    // 2. The `URL` interface of the browser which accepts a URL, object as
    //    arguments. The supplied object will be used as default values / fall-back
    //    for relative paths.
    //
    if ("object" !== type && "string" !== type) {
        parser = location;
        location = null;
    }
    if (parser && "function" !== typeof parser) parser = qs.parse;
    location = lolcation(location);
    //
    // Extract protocol information before running the instructions.
    //
    extracted = extractProtocol(address || "", location);
    relative = !extracted.protocol && !extracted.slashes;
    url.slashes = extracted.slashes || relative && location.slashes;
    url.protocol = extracted.protocol || location.protocol || "";
    address = extracted.rest;
    //
    // When the authority component is absent the URL starts with a path
    // component.
    //
    if (extracted.protocol === "file:" && (extracted.slashesCount !== 2 || windowsDriveLetter.test(address)) || !extracted.slashes && (extracted.protocol || extracted.slashesCount < 2 || !isSpecial(url.protocol))) instructions[3] = [
        /(.*)/,
        "pathname"
    ];
    for(; i < instructions.length; i++){
        instruction = instructions[i];
        if (typeof instruction === "function") {
            address = instruction(address, url);
            continue;
        }
        parse = instruction[0];
        key = instruction[1];
        if (parse !== parse) url[key] = address;
        else if ("string" === typeof parse) {
            index = parse === "@" ? address.lastIndexOf(parse) : address.indexOf(parse);
            if (~index) {
                if ("number" === typeof instruction[2]) {
                    url[key] = address.slice(0, index);
                    address = address.slice(index + instruction[2]);
                } else {
                    url[key] = address.slice(index);
                    address = address.slice(0, index);
                }
            }
        } else if (index = parse.exec(address)) {
            url[key] = index[1];
            address = address.slice(0, index.index);
        }
        url[key] = url[key] || (relative && instruction[3] ? location[key] || "" : "");
        //
        // Hostname, host and protocol should be lowercased so they can be used to
        // create a proper `origin`.
        //
        if (instruction[4]) url[key] = url[key].toLowerCase();
    }
    //
    // Also parse the supplied query string in to an object. If we're supplied
    // with a custom parser as function use that instead of the default build-in
    // parser.
    //
    if (parser) url.query = parser(url.query);
    //
    // If the URL is relative, resolve the pathname against the base URL.
    //
    if (relative && location.slashes && url.pathname.charAt(0) !== "/" && (url.pathname !== "" || location.pathname !== "")) url.pathname = resolve(url.pathname, location.pathname);
    //
    // Default to a / for pathname if none exists. This normalizes the URL
    // to always have a /
    //
    if (url.pathname.charAt(0) !== "/" && isSpecial(url.protocol)) url.pathname = "/" + url.pathname;
    //
    // We should not add port numbers if they are already the default port number
    // for a given protocol. As the host also contains the port number we're going
    // override it with the hostname which contains no port number.
    //
    if (!required(url.port, url.protocol)) {
        url.host = url.hostname;
        url.port = "";
    }
    //
    // Parse down the `auth` for the username and password.
    //
    url.username = url.password = "";
    if (url.auth) {
        index = url.auth.indexOf(":");
        if (~index) {
            url.username = url.auth.slice(0, index);
            url.username = encodeURIComponent(decodeURIComponent(url.username));
            url.password = url.auth.slice(index + 1);
            url.password = encodeURIComponent(decodeURIComponent(url.password));
        } else url.username = encodeURIComponent(decodeURIComponent(url.auth));
        url.auth = url.password ? url.username + ":" + url.password : url.username;
    }
    url.origin = url.protocol !== "file:" && isSpecial(url.protocol) && url.host ? url.protocol + "//" + url.host : "null";
    //
    // The href is just the compiled result.
    //
    url.href = url.toString();
}
/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL} URL instance for chaining.
 * @public
 */ function set(part, value, fn) {
    var url = this;
    switch(part){
        case "query":
            if ("string" === typeof value && value.length) value = (fn || qs.parse)(value);
            url[part] = value;
            break;
        case "port":
            url[part] = value;
            if (!required(value, url.protocol)) {
                url.host = url.hostname;
                url[part] = "";
            } else if (value) url.host = url.hostname + ":" + value;
            break;
        case "hostname":
            url[part] = value;
            if (url.port) value += ":" + url.port;
            url.host = value;
            break;
        case "host":
            url[part] = value;
            if (port.test(value)) {
                value = value.split(":");
                url.port = value.pop();
                url.hostname = value.join(":");
            } else {
                url.hostname = value;
                url.port = "";
            }
            break;
        case "protocol":
            url.protocol = value.toLowerCase();
            url.slashes = !fn;
            break;
        case "pathname":
        case "hash":
            if (value) {
                var char = part === "pathname" ? "/" : "#";
                url[part] = value.charAt(0) !== char ? char + value : value;
            } else url[part] = value;
            break;
        case "username":
        case "password":
            url[part] = encodeURIComponent(value);
            break;
        case "auth":
            var index = value.indexOf(":");
            if (~index) {
                url.username = value.slice(0, index);
                url.username = encodeURIComponent(decodeURIComponent(url.username));
                url.password = value.slice(index + 1);
                url.password = encodeURIComponent(decodeURIComponent(url.password));
            } else url.username = encodeURIComponent(decodeURIComponent(value));
    }
    for(var i = 0; i < rules.length; i++){
        var ins = rules[i];
        if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
    }
    url.auth = url.password ? url.username + ":" + url.password : url.username;
    url.origin = url.protocol !== "file:" && isSpecial(url.protocol) && url.host ? url.protocol + "//" + url.host : "null";
    url.href = url.toString();
    return url;
}
/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String} Compiled version of the URL.
 * @public
 */ function toString(stringify) {
    if (!stringify || "function" !== typeof stringify) stringify = qs.stringify;
    var query, url = this, host = url.host, protocol = url.protocol;
    if (protocol && protocol.charAt(protocol.length - 1) !== ":") protocol += ":";
    var result = protocol + (url.protocol && url.slashes || isSpecial(url.protocol) ? "//" : "");
    if (url.username) {
        result += url.username;
        if (url.password) result += ":" + url.password;
        result += "@";
    } else if (url.password) {
        result += ":" + url.password;
        result += "@";
    } else if (url.protocol !== "file:" && isSpecial(url.protocol) && !host && url.pathname !== "/") //
    // Add back the empty userinfo, otherwise the original invalid URL
    // might be transformed into a valid one with `url.pathname` as host.
    //
    result += "@";
    //
    // Trailing colon is removed from `url.host` when it is parsed. If it still
    // ends with a colon, then add back the trailing colon that was removed. This
    // prevents an invalid URL from being transformed into a valid one.
    //
    if (host[host.length - 1] === ":" || port.test(url.hostname) && !url.port) host += ":";
    result += host + url.pathname;
    query = "object" === typeof url.query ? stringify(url.query) : url.query;
    if (query) result += "?" !== query.charAt(0) ? "?" + query : query;
    if (url.hash) result += url.hash;
    return result;
}
Url.prototype = {
    set: set,
    toString: toString
};
//
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//
Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.trimLeft = trimLeft;
Url.qs = qs;
module.exports = Url;

},{"requires-port":"id68W","querystringify":"30LXA"}],"id68W":[function(require,module,exports) {
"use strict";
/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */ module.exports = function required(port, protocol) {
    protocol = protocol.split(":")[0];
    port = +port;
    if (!port) return false;
    switch(protocol){
        case "http":
        case "ws":
            return port !== 80;
        case "https":
        case "wss":
            return port !== 443;
        case "ftp":
            return port !== 21;
        case "gopher":
            return port !== 70;
        case "file":
            return false;
    }
    return port !== 0;
};

},{}],"30LXA":[function(require,module,exports) {
"use strict";
var has = Object.prototype.hasOwnProperty, undef;
/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String|Null} The decoded string.
 * @api private
 */ function decode(input) {
    try {
        return decodeURIComponent(input.replace(/\+/g, " "));
    } catch (e) {
        return null;
    }
}
/**
 * Attempts to encode a given input.
 *
 * @param {String} input The string that needs to be encoded.
 * @returns {String|Null} The encoded string.
 * @api private
 */ function encode(input) {
    try {
        return encodeURIComponent(input);
    } catch (e) {
        return null;
    }
}
/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */ function querystring(query) {
    var parser = /([^=?#&]+)=?([^&]*)/g, result = {}, part;
    while(part = parser.exec(query)){
        var key = decode(part[1]), value = decode(part[2]);
        //
        // Prevent overriding of existing properties. This ensures that build-in
        // methods like `toString` or __proto__ are not overriden by malicious
        // querystrings.
        //
        // In the case if failed decoding, we want to omit the key/value pairs
        // from the result.
        //
        if (key === null || value === null || key in result) continue;
        result[key] = value;
    }
    return result;
}
/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */ function querystringify(obj, prefix) {
    prefix = prefix || "";
    var pairs = [], value, key;
    //
    // Optionally prefix with a '?' if needed
    //
    if ("string" !== typeof prefix) prefix = "?";
    for(key in obj)if (has.call(obj, key)) {
        value = obj[key];
        //
        // Edge cases where we actually want to encode the value to an empty
        // string instead of the stringified value.
        //
        if (!value && (value === null || value === undef || isNaN(value))) value = "";
        key = encode(key);
        value = encode(value);
        //
        // If we failed to encode the strings, we should bail out as we don't
        // want to add invalid strings to the query.
        //
        if (key === null || value === null) continue;
        pairs.push(key + "=" + value);
    }
    return pairs.length ? prefix + pairs.join("&") : "";
}
//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;

},{}]},["iJYvl","h7u1C"], "h7u1C", "parcelRequire3f31")

//# sourceMappingURL=index.b71e74eb.js.map
